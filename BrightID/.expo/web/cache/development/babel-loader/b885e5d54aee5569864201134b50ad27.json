{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useDispatch, useSelector } from \"../../store\";\nimport TaskCard from \"./TaskCard\";\nimport { UserTasks } from \"./UserTasks\";\nimport { resetTask } from \"./TasksSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction TaskCardController(_ref) {\n  var taskId = _ref.taskId;\n  var dispatch = useDispatch();\n  var storeTask = useSelector(function (state) {\n    return state.tasks[taskId];\n  });\n\n  var extendedTask = _objectSpread(_objectSpread({}, storeTask), UserTasks[taskId]);\n\n  var reset = function reset() {\n    dispatch(resetTask(taskId));\n  };\n\n  return _jsx(TaskCard, {\n    description: extendedTask.description,\n    fulfilled: extendedTask.completed,\n    id: extendedTask.id,\n    title: extendedTask.title,\n    url: extendedTask.url,\n    navigationTarget: extendedTask.navigationTarget,\n    onClick: __DEV__ ? reset : null\n  });\n}\n\nexport default TaskCardController;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TaskCardController.tsx"],"names":["taskId","dispatch","useDispatch","storeTask","useSelector","state","extendedTask","UserTasks","reset","resetTask","__DEV__"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,SAAA,WAAA,EAAA,WAAA;AACA,OAAA,QAAA;AACA,SAAA,SAAA;AACA,SAAA,SAAA;;;AAUA,SAAA,kBAAA,CAAA,IAAA,EAAiE;EAAnCA,IAAAA,MAAmC,GAAA,IAAA,CAAnCA,MAAAA;EAC5B,IAAMC,QAAQ,GAAGC,WAAjB,EAAA;EACA,IAAMC,SAAS,GAAGC,WAAW,CAAC,UAAA,KAAA,EAAA;IAAA,OAAkBC,KAAK,CAALA,KAAAA,CAAlB,MAAkBA,CAAlB;EAA9B,CAA6B,CAA7B;;EACA,IAAMC,YAAY,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAEbC,SAAS,CAFd,MAEc,CAFI,CAAlB;;EAKA,IAAMC,KAAK,GAALA,SAAAA,KAAAA,GAAc;IAClBP,QAAQ,CAACQ,SAAS,CAAlBR,MAAkB,CAAV,CAARA;EADF,CAAA;;EAIA,OACE,IAAA,CAAA,QAAA,EAAA;IACE,WAAW,EAAEK,YAAY,CAD3B,WAAA;IAEE,SAAS,EAAEA,YAAY,CAFzB,SAAA;IAGE,EAAE,EAAEA,YAAY,CAHlB,EAAA;IAIE,KAAK,EAAEA,YAAY,CAJrB,KAAA;IAKE,GAAG,EAAEA,YAAY,CALnB,GAAA;IAME,gBAAgB,EAAEA,YAAY,CANhC,gBAAA;IAOE,OAAO,EAAEI,OAAO,GAAA,KAAA,GARpB;EACE,CAAA,CADF;AAaF;;AAAA,eAAA,kBAAA","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from '@/store';\nimport TaskCard from './TaskCard';\nimport { UserTasks } from './UserTasks';\nimport { resetTask } from './TasksSlice';\n\n/*\n  Purpose: Setup required data for rendering TaskCard by\n  combining static Task descriptions with current Task state from Redux\n */\ntype TaskCardControllerProps = {\n  taskId: string;\n};\n\nfunction TaskCardController({ taskId }: TaskCardControllerProps) {\n  const dispatch = useDispatch();\n  const storeTask = useSelector((state: State) => state.tasks[taskId]);\n  const extendedTask = {\n    ...storeTask,\n    ...UserTasks[taskId],\n  };\n\n  const reset = () => {\n    dispatch(resetTask(taskId));\n  };\n\n  return (\n    <TaskCard\n      description={extendedTask.description}\n      fulfilled={extendedTask.completed}\n      id={extendedTask.id}\n      title={extendedTask.title}\n      url={extendedTask.url}\n      navigationTarget={extendedTask.navigationTarget}\n      onClick={__DEV__ ? reset : null}\n    />\n  );\n}\n\nexport default TaskCardController;\n"]},"metadata":{},"sourceType":"module"}