{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { cond, sub, divide, multiply, add, pow, lessOrEq, and, greaterThan } from \"./../base\";\nimport AnimatedValue from \"./../core/InternalAnimatedValue\";\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction stiffnessFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 30), 3.62), 194);\n}\n\nfunction dampingFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 8), 3), 25);\n}\n\nfunction makeConfigFromOrigamiTensionAndFriction(prevConfig) {\n  var tension = prevConfig.tension,\n      friction = prevConfig.friction,\n      rest = _objectWithoutProperties(prevConfig, [\"tension\", \"friction\"]);\n\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: typeof tension === 'number' ? stiffnessFromOrigamiValue(tension) : stiffnessFromOrigamiNode(tension),\n    damping: typeof friction === 'number' ? dampingFromOrigamiValue(friction) : dampingFromOrigamiNode(friction)\n  });\n}\n\nfunction makeConfigFromBouncinessAndSpeed(prevConfig) {\n  var bounciness = prevConfig.bounciness,\n      speed = prevConfig.speed,\n      rest = _objectWithoutProperties(prevConfig, [\"bounciness\", \"speed\"]);\n\n  if (typeof bounciness === 'number' && typeof speed === 'number') {\n    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);\n  }\n\n  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);\n}\n\nfunction fromBouncinessAndSpeedNodes(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return divide(sub(value, startValue), sub(endValue, startValue));\n  }\n\n  function projectNormal(n, start, end) {\n    return add(start, multiply(n, sub(end, start)));\n  }\n\n  function linearInterpolation(t, start, end) {\n    return add(multiply(t, end), multiply(sub(1, t), start));\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);\n  }\n\n  function b3Friction1(x) {\n    return add(sub(multiply(0.0007, pow(x, 3)), multiply(0.031, pow(x, 2))), multiply(0.64, x), 1.28);\n  }\n\n  function b3Friction2(x) {\n    return add(sub(multiply(0.000044, pow(x, 3)), multiply(0.006, pow(x, 2))), multiply(0.36, x), 2);\n  }\n\n  function b3Friction3(x) {\n    return add(sub(multiply(0.00000045, pow(x, 3)), multiply(0.000332, pow(x, 2))), multiply(0.1078, x), 5.84);\n  }\n\n  function b3Nobounce(tension) {\n    return cond(lessOrEq(tension, 18), b3Friction1(tension), cond(and(greaterThan(tension, 18), lessOrEq(tension, 44)), b3Friction2(tension), b3Friction3(tension)));\n  }\n\n  var b = normalize(divide(bounciness, 1.7), 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(divide(speed, 1.7), 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: stiffnessFromOrigamiNode(bouncyTension),\n    damping: dampingFromOrigamiNode(bouncyFriction)\n  });\n}\n\nfunction fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  var b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(speed / 1.7, 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction)\n  });\n}\n\nfunction makeDefaultConfig() {\n  return {\n    stiffness: new AnimatedValue(100),\n    mass: new AnimatedValue(1),\n    damping: new AnimatedValue(10),\n    overshootClamping: false,\n    restSpeedThreshold: 0.001,\n    restDisplacementThreshold: 0.001,\n    toValue: new AnimatedValue(0)\n  };\n}\n\nexport default {\n  makeDefaultConfig: makeDefaultConfig,\n  makeConfigFromBouncinessAndSpeed: makeConfigFromBouncinessAndSpeed,\n  makeConfigFromOrigamiTensionAndFriction: makeConfigFromOrigamiTensionAndFriction\n};","map":{"version":3,"sources":["SpringUtils.js"],"names":["oValue","add","multiply","sub","tension","friction","rest","prevConfig","stiffness","stiffnessFromOrigamiValue","stiffnessFromOrigamiNode","damping","dampingFromOrigamiValue","dampingFromOrigamiNode","bounciness","speed","fromBouncinessAndSpeedNumbers","fromBouncinessAndSpeedNodes","divide","linearInterpolation","pow","cond","lessOrEq","b3Friction1","and","greaterThan","b3Friction2","b3Friction3","b","normalize","projectNormal","s","bouncyTension","bouncyFriction","quadraticOutInterpolation","b3Nobounce","value","endValue","start","n","end","t","Math","mass","overshootClamping","restSpeedThreshold","restDisplacementThreshold","toValue","makeDefaultConfig","makeConfigFromBouncinessAndSpeed","makeConfigFromOrigamiTensionAndFriction"],"mappings":"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","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  add,\n  pow,\n  lessOrEq,\n  and,\n  greaterThan,\n} from './../base';\nimport AnimatedValue from './../core/InternalAnimatedValue';\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction stiffnessFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 30), 3.62), 194);\n}\n\nfunction dampingFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 8), 3), 25);\n}\n\nfunction makeConfigFromOrigamiTensionAndFriction(prevConfig) {\n  const { tension, friction, ...rest } = prevConfig;\n  return {\n    ...rest,\n    stiffness:\n      typeof tension === 'number'\n        ? stiffnessFromOrigamiValue(tension)\n        : stiffnessFromOrigamiNode(tension),\n    damping:\n      typeof friction === 'number'\n        ? dampingFromOrigamiValue(friction)\n        : dampingFromOrigamiNode(friction),\n  };\n}\n\nfunction makeConfigFromBouncinessAndSpeed(prevConfig) {\n  const { bounciness, speed, ...rest } = prevConfig;\n  if (typeof bounciness === 'number' && typeof speed === 'number') {\n    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);\n  }\n  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);\n}\n\nfunction fromBouncinessAndSpeedNodes(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return divide(sub(value, startValue), sub(endValue, startValue));\n  }\n\n  function projectNormal(n, start, end) {\n    return add(start, multiply(n, sub(end, start)));\n  }\n\n  function linearInterpolation(t, start, end) {\n    return add(multiply(t, end), multiply(sub(1, t), start));\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);\n  }\n\n  function b3Friction1(x) {\n    return add(\n      sub(multiply(0.0007, pow(x, 3)), multiply(0.031, pow(x, 2))),\n      multiply(0.64, x),\n      1.28\n    );\n  }\n\n  function b3Friction2(x) {\n    return add(\n      sub(multiply(0.000044, pow(x, 3)), multiply(0.006, pow(x, 2))),\n      multiply(0.36, x),\n      2\n    );\n  }\n\n  function b3Friction3(x) {\n    return add(\n      sub(multiply(0.00000045, pow(x, 3)), multiply(0.000332, pow(x, 2))),\n      multiply(0.1078, x),\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    return cond(\n      lessOrEq(tension, 18),\n      b3Friction1(tension),\n      cond(\n        and(greaterThan(tension, 18), lessOrEq(tension, 44)),\n        b3Friction2(tension),\n        b3Friction3(tension)\n      )\n    );\n  }\n\n  let b = normalize(divide(bounciness, 1.7), 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(divide(speed, 1.7), 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01\n  );\n  return {\n    ...rest,\n    stiffness: stiffnessFromOrigamiNode(bouncyTension),\n    damping: dampingFromOrigamiNode(bouncyFriction),\n  };\n}\n\nfunction fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return (\n      0.00000045 * Math.pow(x, 3) -\n      0.000332 * Math.pow(x, 2) +\n      0.1078 * x +\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  let b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(speed / 1.7, 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01\n  );\n\n  return {\n    ...rest,\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction),\n  };\n}\n\nfunction makeDefaultConfig() {\n  return {\n    stiffness: new AnimatedValue(100),\n    mass: new AnimatedValue(1),\n    damping: new AnimatedValue(10),\n    overshootClamping: false,\n    restSpeedThreshold: 0.001,\n    restDisplacementThreshold: 0.001,\n    toValue: new AnimatedValue(0),\n  };\n}\n\nexport default {\n  makeDefaultConfig,\n  makeConfigFromBouncinessAndSpeed,\n  makeConfigFromOrigamiTensionAndFriction,\n};\n"]},"metadata":{},"sourceType":"module"}