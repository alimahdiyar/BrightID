{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeTintColor = _ref.activeTintColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle;\n  var buildLink = useLinkBuilder();\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      labelStyle: labelStyle,\n      style: itemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: function onPress() {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate(route.name)), {}, {\n          target: state.key\n        }));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["state","navigation","descriptors","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","itemStyle","labelStyle","buildLink","useLinkBuilder","focused","i","title","drawerLabel","drawerIcon","route","React","key","label","icon","style","to","onPress","DrawerActions","CommonActions","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,EAAA,aAAA,EAAA,cAAA,QAAA,0BAAA;AAOA,OAAA,UAAA;AAgBA,eAAe,SAAA,cAAA,CAAA,IAAA,EAUL;EATRA,IAAAA,KASQ,GAAA,IAAA,CATRA,KAAAA;EAAAA,IACAC,UAQQ,GAAA,IAAA,CARRA,UADAD;EAAAA,IAEAE,WAOQ,GAAA,IAAA,CAPRA,WAFAF;EAAAA,IAGAG,eAMQ,GAAA,IAAA,CANRA,eAHAH;EAAAA,IAIAI,iBAKQ,GAAA,IAAA,CALRA,iBAJAJ;EAAAA,IAKAK,qBAIQ,GAAA,IAAA,CAJRA,qBALAL;EAAAA,IAMAM,uBAGQ,GAAA,IAAA,CAHRA,uBANAN;EAAAA,IAOAO,SAEQ,GAAA,IAAA,CAFRA,SAPAP;EAAAA,IAQAQ,UACQ,GAAA,IAAA,CADRA,UARAR;EAUA,IAAMS,SAAS,GAAGC,cAAlB,EAAA;EAEA,OAAQV,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;IACrC,IAAMW,OAAO,GAAGC,CAAC,KAAKZ,KAAK,CAA3B,KAAA;IACA,IAAA,qBAAA,GAA2CE,WAAW,CAACc,KAAK,CAAjBd,GAAW,CAAXA,CAA3C,OAAA;IAAA,IAAQW,KAAR,GAAA,qBAAA,CAAA,KAAA;IAAA,IAAeC,WAAf,GAAA,qBAAA,CAAA,WAAA;IAAA,IAA4BC,UAA5B,GAAA,qBAAA,CAAA,UAAA;IAEA,OACEE,KAAAA,CAAAA,aAAAA,CAAAA,UAAAA,EAAAA;MACEC,GAAG,EAAEF,KAAK,CADZC,GAAAA;MAEEE,KAAK,EACHL,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEID,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAG,KAAK,CAPbC,IAAAA;MASEG,IAAI,EATNH,UAAAA;MAUEN,OAAO,EAVTM,OAAAA;MAWEd,eAAe,EAXjBc,eAAAA;MAYEb,iBAAiB,EAZnBa,iBAAAA;MAaEZ,qBAAqB,EAbvBY,qBAAAA;MAcEX,uBAAuB,EAdzBW,uBAAAA;MAeET,UAAU,EAfZS,UAAAA;MAgBEI,KAAK,EAhBPJ,SAAAA;MAiBEK,EAAE,EAAEb,SAAS,CAACO,KAAK,CAAN,IAAA,EAAaA,KAAK,CAjBjCC,MAiBe,CAjBfA;MAkBEM,OAAO,EAAE,SAAA,OAAA,GAAM;QACbtB,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACMU,OAAO,GACPa,aAAa,CADN,WACPA,EADO,GAEPC,aAAa,CAAbA,QAAAA,CAAuBT,KAAK,CAHlCf,IAGMwB,CAHNxB,CAAAA,EAAAA,EAAAA,EAAAA;UAIEyB,MAAM,EAAE1B,KAAK,CAJfC;QAAAA,CAAAA,CAAAA;MAxBAD;IAKJiB,CAAAA,CADF;EAJF,CAAQjB,CAAR;AAkCD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport type {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}