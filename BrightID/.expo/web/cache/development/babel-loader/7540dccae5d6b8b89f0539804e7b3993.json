{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ReactNative from \"react-native-web/dist/index\";\nimport { childrenWithOverriddenStyle } from \"./utils\";\nimport { getViewManagerConfig, ViewpagerViewManager } from \"./ViewPagerNative\";\nexport var ViewPager = function (_React$Component) {\n  _inherits(ViewPager, _React$Component);\n\n  var _super = _createSuper(ViewPager);\n\n  function ViewPager() {\n    var _this;\n\n    _classCallCheck(this, ViewPager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isScrolling\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"viewPager\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getInnerViewNode\", function () {\n      return _this.viewPager.current.getInnerViewNode();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageScroll\", function (e) {\n      if (_this.props.onPageScroll) {\n        _this.props.onPageScroll(e);\n      }\n\n      if (Platform.OS === 'android') {\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageScrollStateChanged\", function (e) {\n      if (_this.props.onPageScrollStateChanged) {\n        _this.props.onPageScrollStateChanged(e);\n      }\n\n      _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageSelected\", function (e) {\n      if (_this.props.onPageSelected) {\n        _this.props.onPageSelected(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPage\", function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setPage, [selectedPage]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPageWithoutAnimation\", function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setPageWithoutAnimation, [selectedPage]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setScrollEnabled\", function (scrollEnabled) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setScrollEnabled, [scrollEnabled]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onMoveShouldSetResponderCapture\", function () {\n      if (Platform.OS === 'ios') {\n        return _this.isScrolling;\n      }\n\n      return false;\n    });\n\n    return _this;\n  }\n\n  _createClass(ViewPager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'android') {\n        if (this.props.initialPage != null) {\n          this.setPageWithoutAnimation(this.props.initialPage);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ViewpagerViewManager, _extends({}, this.props, {\n        ref: this.viewPager,\n        style: this.props.style,\n        onPageScroll: this._onPageScroll,\n        onPageScrollStateChanged: this._onPageScrollStateChanged,\n        onPageSelected: this._onPageSelected,\n        onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,\n        children: childrenWithOverriddenStyle(this.props.children)\n      }));\n    }\n  }]);\n\n  return ViewPager;\n}(React.Component);","map":{"version":3,"sources":["ViewPager.tsx"],"names":["ReactNative","ViewPager","React","componentDidMount","Platform","e","Keyboard","selectedPage","UIManager","getViewManagerConfig","scrollEnabled","render","ref","style","onPageScroll","onPageScrollStateChanged","onPageSelected","onMoveShouldSetResponderCapture","children","childrenWithOverriddenStyle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAA,KAAA,MAAA,OAAA;;;;AAEOA,OAAAA,WAAAA,M,6BAAAA;AAQP,SAAA,2BAAA;AACA,SAAA,oBAAA,EAAA,oBAAA;AA4CA,OAAA,IAAaC,SAAb,GAAA,UAAA,gBAAA,EAAA;EAAA,SAAA,CAAA,SAAA,EAAA,gBAAA,CAAA;;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,SAAA,CAAA;;EAA+D,SAAA,SAAA,GAAA;IAAA,IAAA,KAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;IAAA;;IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAAA,KAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAEzCC,KAAK,CAFoC,SAEzCA,EAFyC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,EAanC,YAAoB;MAC5C,OAAO,KAAA,CAAA,SAAA,CAAA,OAAA,CAdoD,gBAcpD,EAAP;IAd2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAiBpCG,UAAD,CAACA,EAAkC;MACzD,IAAI,KAAA,CAAA,KAAA,CAAJ,YAAA,EAA6B;QAC3B,KAAA,CAAA,KAAA,CAAA,YAAA,CAFuD,CAEvD;MAGF;;MAAA,IAAID,QAAQ,CAARA,EAAAA,KAAJ,SAAA,EAA+B;QAC7B,IAAI,KAAA,CAAA,KAAA,CAAA,mBAAA,KAAJ,SAAA,EAAkD;UAChDE,QAAQ,CAARA,OAAAA;QAEH;MA1B0D;IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,2BAAA,EA8B3DD,UADkC,CAClCA,EACG;MACH,IAAI,KAAA,CAAA,KAAA,CAAJ,wBAAA,EAAyC;QACvC,KAAA,CAAA,KAAA,CAAA,wBAAA,CAAA,CAAA;MAEF;;MAAA,KAAA,CAAA,WAAA,GAAmBA,CAAC,CAADA,WAAAA,CAAAA,eAAAA,KAnCwC,UAmC3D;IAnC2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EAsClCA,UAAD,CAACA,EAAoC;MAC7D,IAAI,KAAA,CAAA,KAAA,CAAJ,cAAA,EAA+B;QAC7B,KAAA,CAAA,KAAA,CAAA,cAAA,CAAA,CAAA;MAxCyD;IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAgD3CE,UAAD,YAACA,EAAyB;MACzCC,SAAS,CAATA,0BAAAA,CACER,WAAW,CAAXA,cAAAA,CAAAA,sBAAAA,CADFQ,KACER,CAAAA,CADFQ,EAEEC,oBAAoB,GAApBA,QAAAA,CAFFD,OAAAA,EAGE,CApDyD,YAoDzD,CAHFA;IAjD2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,yBAAA,EA4D3BD,UAAD,YAACA,EAAyB;MACzDC,SAAS,CAATA,0BAAAA,CACER,WAAW,CAAXA,cAAAA,CAAAA,sBAAAA,CADFQ,KACER,CAAAA,CADFQ,EAEEC,oBAAoB,GAApBA,QAAAA,CAFFD,uBAAAA,EAGE,CAhEyD,YAgEzD,CAHFA;IA7D2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,EAyElCE,UAAD,aAACA,EAA2B;MACpDF,SAAS,CAATA,0BAAAA,CACER,WAAW,CAAXA,cAAAA,CAAAA,sBAAAA,CADFQ,KACER,CAAAA,CADFQ,EAEEC,oBAAoB,GAApBA,QAAAA,CAFFD,gBAAAA,EAGE,CA7EyD,aA6EzD,CAHFA;IA1E2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kCAAA,EAiFlB,YAAM;MAC/C,IAAIJ,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;QACzB,OAAO,KAAA,CAAP,WAAA;MAEF;;MAAA,OArF2D,KAqF3D;IArF2D,CAAA,CAAA;;IAAA,OAAA,KAAA;EAA/D;;EAAA,YAAA,CAAA,SAAA,EAAA,CAAA;IAAA,GAAA,EAAA,mBAAA;IAAA,KAAA,EAIED,SAAAA,iBAAAA,GAAoB;MAElB,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,SAAA,EAA+B;QAC7B,IAAI,KAAA,KAAA,CAAA,WAAA,IAAJ,IAAA,EAAoC;UAClC,KAAA,uBAAA,CAA6B,KAAA,KAAA,CAA7B,WAAA;QAEH;MACF;IAXH;EAAA,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,KAAA,EAwFEO,SAAAA,MAAAA,GAAS;MACP,OACET,KAAAA,CAAAA,aAAAA,CAAAA,oBAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EACM,KADNA,KAAAA,EAAAA;QAEEU,GAAG,EAAE,KAFPV,SAAAA;QAGEW,KAAK,EAAE,KAAA,KAAA,CAHTX,KAAAA;QAIEY,YAAY,EAAE,KAJhBZ,aAAAA;QAKEa,wBAAwB,EAAE,KAL5Bb,yBAAAA;QAMEc,cAAc,EAAE,KANlBd,eAAAA;QAOEe,+BAA+B,EAAE,KAPnCf,gCAAAA;QAQEgB,QAAQ,EAAEC,2BAA2B,CAAC,KAAA,KAAA,CAT1C,QASyC;MARvCjB,CAAAA,CAAAA,CADF;IAzFJ;EAAA,CAAA,CAAA,CAAA;;EAAA,OAAA,SAAA;AAAA,CAAA,CAA+BA,KAAK,CAApC,SAAA,CAAA","sourcesContent":["import React, { ReactElement } from 'react';\nimport { Platform, UIManager, Keyboard } from 'react-native';\nimport ReactNative from 'react-native';\nimport type {\n  ViewPagerOnPageScrollEvent,\n  ViewPagerOnPageSelectedEvent,\n  PageScrollStateChangedNativeEvent,\n  ViewPagerProps,\n} from './types';\n\nimport { childrenWithOverriddenStyle } from './utils';\nimport { getViewManagerConfig, ViewpagerViewManager } from './ViewPagerNative';\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `ViewPager` will be treated as a separate page\n * and will be stretched to fill the `ViewPager`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <ViewPager\n *       style={styles.viewPager}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </ViewPager>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   viewPager: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\n\nexport class ViewPager extends React.Component<ViewPagerProps> {\n  private isScrolling = false;\n  private viewPager = React.createRef<typeof ViewpagerViewManager>();\n\n  componentDidMount() {\n    // On iOS we do it directly on the native side\n    if (Platform.OS === 'android') {\n      if (this.props.initialPage != null) {\n        this.setPageWithoutAnimation(this.props.initialPage);\n      }\n    }\n  }\n\n  public getInnerViewNode = (): ReactElement => {\n    return this.viewPager.current!.getInnerViewNode();\n  };\n\n  private _onPageScroll = (e: ViewPagerOnPageScrollEvent) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    // Not implemented on iOS yet\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private _onPageScrollStateChanged = (\n    e: PageScrollStateChangedNativeEvent\n  ) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e);\n    }\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private _onPageSelected = (e: ViewPagerOnPageSelectedEvent) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will be animated.\n   */\n  public setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setPage,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will *not* be animated.\n   */\n  public setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setPageWithoutAnimation,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to enable/disable scroll imperatively\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n   * imperative solution is more useful (e.g. for not blocking an animation)\n   */\n  public setScrollEnabled = (scrollEnabled: boolean) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  };\n\n  private _onMoveShouldSetResponderCapture = () => {\n    if (Platform.OS === 'ios') {\n      return this.isScrolling;\n    }\n    return false;\n  };\n\n  render() {\n    return (\n      <ViewpagerViewManager\n        {...this.props}\n        ref={this.viewPager as any /** TODO: Fix ref type */}\n        style={this.props.style}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\n        children={childrenWithOverriddenStyle(this.props.children)}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}