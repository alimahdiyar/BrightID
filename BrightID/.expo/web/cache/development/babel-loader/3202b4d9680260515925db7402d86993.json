{"ast":null,"code":"import { parsePhoneNumber as parsePhoneNumberLib } from 'libphonenumber-js';\n\nvar isPhoneNumberValid = function isPhoneNumberValid(phoneNumberString) {\n  try {\n    var phoneNumber = parsePhoneNumberLib(phoneNumberString);\n\n    if (phoneNumber) {\n      return phoneNumber.isValid();\n    }\n  } catch (_unused) {}\n\n  return false;\n};\n\nvar parsePhoneNumber = function parsePhoneNumber(phoneNumberString) {\n  try {\n    var phoneNumber = parsePhoneNumberLib(phoneNumberString);\n\n    if (phoneNumber && phoneNumber.isValid()) {\n      return {\n        country: phoneNumber.country,\n        number: phoneNumber.nationalNumber\n      };\n    }\n  } catch (_unused2) {}\n\n  return {\n    country: 'US',\n    number: ''\n  };\n};\n\nvar extractDigits = function extractDigits(phoneNumber) {\n  return parseInt(phoneNumber.match(/\\d/g).join(''), 10).toString();\n};\n\nexport { isPhoneNumberValid, parsePhoneNumber, extractDigits };","map":{"version":3,"names":["parsePhoneNumber","parsePhoneNumberLib","isPhoneNumberValid","phoneNumberString","phoneNumber","isValid","country","number","nationalNumber","extractDigits","parseInt","match","join","toString"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/phoneUtils.ts"],"sourcesContent":["import { parsePhoneNumber as parsePhoneNumberLib } from 'libphonenumber-js';\n\nconst isPhoneNumberValid = (phoneNumberString: string) => {\n  try {\n    const phoneNumber = parsePhoneNumberLib(phoneNumberString);\n    if (phoneNumber) {\n      return phoneNumber.isValid();\n    }\n  } catch {}\n  return false;\n};\n\nconst parsePhoneNumber = (phoneNumberString: string) => {\n  try {\n    const phoneNumber = parsePhoneNumberLib(phoneNumberString);\n    if (phoneNumber && phoneNumber.isValid()) {\n      return {\n        country: phoneNumber.country,\n        number: phoneNumber.nationalNumber,\n      } as PhoneNumberObject;\n    }\n  } catch {}\n  return {\n    country: 'US',\n    number: '',\n  } as PhoneNumberObject;\n};\n\nconst extractDigits = (phoneNumber: string) =>\n  parseInt(phoneNumber.match(/\\d/g).join(''), 10).toString();\n\nexport { isPhoneNumberValid, parsePhoneNumber, extractDigits };\n"],"mappings":"AAAA,SAASA,gBAAgB,IAAIC,mBAA7B,QAAwD,mBAAxD;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,iBAAD,EAA+B;EACxD,IAAI;IACF,IAAMC,WAAW,GAAGH,mBAAmB,CAACE,iBAAD,CAAvC;;IACA,IAAIC,WAAJ,EAAiB;MACf,OAAOA,WAAW,CAACC,OAAZ,EAAP;IACD;EACF,CALD,CAKE,gBAAM,CAAE;;EACV,OAAO,KAAP;AACD,CARD;;AAUA,IAAML,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACG,iBAAD,EAA+B;EACtD,IAAI;IACF,IAAMC,WAAW,GAAGH,mBAAmB,CAACE,iBAAD,CAAvC;;IACA,IAAIC,WAAW,IAAIA,WAAW,CAACC,OAAZ,EAAnB,EAA0C;MACxC,OAAO;QACLC,OAAO,EAAEF,WAAW,CAACE,OADhB;QAELC,MAAM,EAAEH,WAAW,CAACI;MAFf,CAAP;IAID;EACF,CARD,CAQE,iBAAM,CAAE;;EACV,OAAO;IACLF,OAAO,EAAE,IADJ;IAELC,MAAM,EAAE;EAFH,CAAP;AAID,CAdD;;AAgBA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACL,WAAD;EAAA,OACpBM,QAAQ,CAACN,WAAW,CAACO,KAAZ,CAAkB,KAAlB,EAAyBC,IAAzB,CAA8B,EAA9B,CAAD,EAAoC,EAApC,CAAR,CAAgDC,QAAhD,EADoB;AAAA,CAAtB;;AAGA,SAASX,kBAAT,EAA6BF,gBAA7B,EAA+CS,aAA/C"},"metadata":{},"sourceType":"module"}