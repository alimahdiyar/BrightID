{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport UIManager from \"../../exports/UIManager\";\nimport createDOMProps from \"../createDOMProps\";\nimport useStable from \"../useStable\";\nimport { useRef } from 'react';\nvar emptyObject = {};\n\nfunction setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {\n  if (node != null && nativeProps) {\n    var domProps = createDOMProps(null, _objectSpread(_objectSpread({\n      pointerEvents: pointerEvents\n    }, nativeProps), {}, {\n      classList: [classList, nativeProps.className],\n      style: [style, nativeProps.style]\n    }));\n    var nextDomStyle = domProps.style;\n\n    if (previousStyleRef.current != null) {\n      if (domProps.style == null) {\n        domProps.style = {};\n      }\n\n      for (var styleName in previousStyleRef.current) {\n        if (domProps.style[styleName] == null) {\n          domProps.style[styleName] = '';\n        }\n      }\n    }\n\n    previousStyleRef.current = nextDomStyle;\n    UIManager.updateView(node, domProps);\n  }\n}\n\nexport default function usePlatformMethods(_ref) {\n  var classList = _ref.classList,\n      pointerEvents = _ref.pointerEvents,\n      style = _ref.style;\n  var previousStyleRef = useRef(null);\n  var setNativePropsArgsRef = useRef(null);\n  setNativePropsArgsRef.current = {\n    classList: classList,\n    pointerEvents: pointerEvents,\n    style: style\n  };\n  var ref = useStable(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.measure = function (callback) {\n          return UIManager.measure(hostNode, callback);\n        };\n\n        hostNode.measureLayout = function (relativeToNode, success, failure) {\n          return UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n        };\n\n        hostNode.measureInWindow = function (callback) {\n          return UIManager.measureInWindow(hostNode, callback);\n        };\n\n        hostNode.setNativeProps = function (nativeProps) {\n          var _ref2 = setNativePropsArgsRef.current || emptyObject,\n              classList = _ref2.classList,\n              style = _ref2.style,\n              pointerEvents = _ref2.pointerEvents;\n\n          setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);\n        };\n      }\n    };\n  });\n  return ref;\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/usePlatformMethods/index.js"],"names":["emptyObject","node","domProps","createDOMProps","pointerEvents","classList","nativeProps","style","nextDomStyle","previousStyleRef","UIManager","useRef","setNativePropsArgsRef","ref","useStable","hostNode","setNativeProps"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { GenericStyleProp } from '../../types';\nimport type { ViewProps } from '../../exports/View';\n\nimport UIManager from '../../exports/UIManager';\nimport createDOMProps from '../createDOMProps';\nimport useStable from '../useStable';\nimport { useRef } from 'react';\n\nconst emptyObject = {};\n\nfunction setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {\n  if (node != null && nativeProps) {\n    const domProps = createDOMProps(null, {\n      pointerEvents,\n      ...nativeProps,\n      classList: [classList, nativeProps.className],\n      style: [style, nativeProps.style]\n    });\n\n    const nextDomStyle = domProps.style;\n\n    if (previousStyleRef.current != null) {\n      if (domProps.style == null) {\n        domProps.style = {};\n      }\n      for (const styleName in previousStyleRef.current) {\n        if (domProps.style[styleName] == null) {\n          domProps.style[styleName] = '';\n        }\n      }\n    }\n\n    previousStyleRef.current = nextDomStyle;\n\n    UIManager.updateView(node, domProps);\n  }\n}\n\n/**\n * Adds non-standard methods to the hode element. This is temporarily until an\n * API like `ReactNative.measure(hostRef, callback)` is added to React Native.\n */\nexport default function usePlatformMethods({\n  classList,\n  pointerEvents,\n  style\n}: {\n  classList?: Array<string | boolean>,\n  style?: GenericStyleProp<*>,\n  pointerEvents?: $PropertyType<ViewProps, 'pointerEvents'>\n}): (hostNode: any) => void {\n  const previousStyleRef = useRef(null);\n  const setNativePropsArgsRef = useRef(null);\n  setNativePropsArgsRef.current = { classList, pointerEvents, style };\n\n  // Avoid creating a new ref on every render. The props only need to be\n  // available to 'setNativeProps' when it is called.\n  const ref = useStable(() => (hostNode: any) => {\n    if (hostNode != null) {\n      hostNode.measure = (callback) => UIManager.measure(hostNode, callback);\n      hostNode.measureLayout = (relativeToNode, success, failure) =>\n        UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n      hostNode.measureInWindow = (callback) => UIManager.measureInWindow(hostNode, callback);\n      hostNode.setNativeProps = (nativeProps) => {\n        const { classList, style, pointerEvents } = setNativePropsArgsRef.current || emptyObject;\n        setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);\n      };\n    }\n  });\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module"}