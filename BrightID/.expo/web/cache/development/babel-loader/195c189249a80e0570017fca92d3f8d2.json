{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useContext, useEffect } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Material from \"@expo/vector-icons/MaterialIcons\";\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { useSelector, useDispatch } from \"../../../store\";\nimport { selectActiveDevices } from \"../../../reducer/devicesSlice\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { WHITE, ORANGE, BLUE, BLACK } from \"../../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { NodeApiContext } from \"../../NodeApiGate\";\nimport { removeDevice, setLastSyncTime } from \"../../../actions\";\nimport { qrCodeURL_types } from \"../../../utils/constants\";\nimport { pollImportChannel, clearImportChannel, getOtherSideDeviceInfo } from \"./thunks/channelThunks\";\nimport { uploadAllInfoAfter, uploadDeviceInfo } from \"./thunks/channelUploadThunks\";\nimport { resetRecoveryData, uploadCompletedByOtherSide } from \"../RecoveryFlow/recoveryDataSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var DevicesScreen = function DevicesScreen(_ref) {\n  var _route$params, _route$params3, _route$params5;\n\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n  var signingKey = useSelector(function (state) {\n    return state.keypair.publicKey;\n  });\n  var devices = useSelector(selectActiveDevices).sort(function (a, _b) {\n    return a.signingKey === signingKey ? -1 : 1;\n  });\n  var settings = useSelector(function (state) {\n    return state.settings;\n  });\n  var syncCompleted = useSelector(uploadCompletedByOtherSide);\n\n  var shortenSigningKey = function shortenSigningKey(s) {\n    return s.slice(0, 6) + \"...\" + s.slice(-6);\n  };\n\n  var isCurrentDevice = function isCurrentDevice(d) {\n    return d.signingKey === signingKey;\n  };\n\n  var getName = function getName(d) {\n    return isCurrentDevice(d) ? 'Current device' : d.name || 'Unknown name';\n  };\n\n  var _useState = useState(!!((_route$params = route.params) != null && _route$params.syncing)),\n      _useState2 = _slicedToArray(_useState, 2),\n      waiting = _useState2[0],\n      setWaiting = _useState2[1];\n\n  useEffect(function () {\n    var _route$params2;\n\n    var runEffect = function _callee() {\n      var _await$getOtherSideDe, isPrimaryDevice, lastSyncTime, after;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getOtherSideDeviceInfo());\n\n            case 2:\n              _await$getOtherSideDe = _context.sent;\n              isPrimaryDevice = _await$getOtherSideDe.isPrimaryDevice;\n              lastSyncTime = _await$getOtherSideDe.lastSyncTime;\n\n              if (!(isPrimaryDevice && settings.isPrimaryDevice)) {\n                _context.next = 11;\n                break;\n              }\n\n              setWaiting(false);\n              dispatch(resetRecoveryData());\n              return _context.abrupt(\"return\", Alert.alert(t('common.alert.error'), t('devices.alert.bothPrimary')));\n\n            case 11:\n              if (!(!isPrimaryDevice && !settings.isPrimaryDevice)) {\n                _context.next = 15;\n                break;\n              }\n\n              setWaiting(false);\n              dispatch(resetRecoveryData());\n              return _context.abrupt(\"return\", Alert.alert(t('common.alert.error'), t('devices.alert.noPrimary')));\n\n            case 15:\n              if (settings.isPrimaryDevice) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(uploadDeviceInfo());\n\n            case 18:\n              after = settings.isPrimaryDevice ? lastSyncTime : settings.lastSyncTime;\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(uploadAllInfoAfter(after));\n\n            case 21:\n              dispatch(pollImportChannel());\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var showConfirmDialog = function showConfirmDialog() {\n      return Alert.alert(t('common.alert.title.pleaseConfirm'), t('devices.alert.confirmSync'), [{\n        text: t('common.alert.yes'),\n        onPress: function onPress() {\n          runEffect();\n        }\n      }, {\n        text: t('common.alert.no'),\n        onPress: function onPress() {\n          navigation.navigate('Home');\n        }\n      }]);\n    };\n\n    if ((_route$params2 = route.params) != null && _route$params2.asScanner) {\n      showConfirmDialog();\n    }\n  }, [dispatch, navigation, (_route$params3 = route.params) == null ? void 0 : _route$params3.asScanner, settings.isPrimaryDevice, settings.lastSyncTime, t]);\n  useEffect(function () {\n    var _route$params4;\n\n    setWaiting(!!((_route$params4 = route.params) != null && _route$params4.syncing));\n  }, [(_route$params5 = route.params) == null ? void 0 : _route$params5.syncing]);\n  useFocusEffect(function () {\n    if (waiting && syncCompleted) {\n      Alert.alert(t('common.alert.info'), t('devices.text.syncCompleted'));\n      clearImportChannel();\n      setWaiting(false);\n\n      if (!settings.isPrimaryDevice) {\n        dispatch(setLastSyncTime(Date.now()));\n      }\n\n      dispatch(resetRecoveryData());\n    }\n  });\n\n  var sync = function sync() {\n    navigation.navigate('SyncCode', {\n      urlType: qrCodeURL_types.SYNC,\n      action: 'sync'\n    });\n  };\n\n  var remove = function remove(device) {\n    Alert.alert(t('common.alert.title.pleaseConfirm'), t('devices.alert.confirmRemove', {\n      name: getName(device)\n    }), [{\n      text: t('common.alert.yes'),\n      onPress: function onPress() {\n        api.removeSigningKey(device.signingKey).then(function () {\n          dispatch(removeDevice(device.signingKey));\n        });\n      }\n    }, {\n      text: t('common.alert.no')\n    }]);\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var device = _ref2.item,\n        index = _ref2.index;\n    return _jsxs(View, {\n      testID: \"device-\" + index,\n      style: styles.deviceContainer,\n      children: [_jsxs(View, {\n        testID: getName(device),\n        style: styles.deviceLabelContainer,\n        children: [_jsxs(View, {\n          style: styles.deviceNameContainer,\n          children: [_jsx(Text, {\n            style: styles.deviceNameText,\n            children: getName(device)\n          }), isCurrentDevice(device) && _jsxs(Text, {\n            style: styles.devicePrimaryText,\n            children: [\"\\xA0(\", settings.isPrimaryDevice ? 'Primary' : 'Secondary', \")\"]\n          })]\n        }), _jsx(View, {\n          style: styles.deviceSigningKeyContainer,\n          children: _jsx(Text, {\n            style: styles.deviceSigningKeyText,\n            children: shortenSigningKey(device.signingKey)\n          })\n        })]\n      }), !isCurrentDevice(device) && _jsx(View, {\n        style: styles.removeBtnContainer,\n        children: _jsx(TouchableOpacity, {\n          style: styles.removeBtn,\n          testID: \"RemoveDeviceBtn-\" + index,\n          onPress: function onPress() {\n            return remove(device);\n          },\n          children: _jsx(Material, {\n            name: \"delete\",\n            size: DEVICE_LARGE ? 22 : 20,\n            color: BLUE\n          })\n        })\n      })]\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      backgroundColor: WHITE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsx(View, {\n      style: styles.container,\n      testID: \"DevicesScreen\",\n      children: _jsxs(View, {\n        style: styles.devicesContainer,\n        children: [_jsx(Text, {\n          style: styles.description,\n          children: t('devices.text.listDescription')\n        }), _jsx(FlatList, {\n          data: devices,\n          renderItem: renderItem,\n          keyExtractor: function keyExtractor(item) {\n            return item.signingKey;\n          }\n        }), waiting ? _jsxs(View, {\n          style: styles.waitingContainer,\n          children: [_jsx(Text, {\n            style: styles.waitingMessage,\n            children: t('devices.text.waitSyncing')\n          }), _jsx(Spinner, {\n            isVisible: waiting,\n            size: DEVICE_LARGE ? 48 : 42,\n            type: \"Wave\",\n            color: BLUE\n          })]\n        }) : _jsx(TouchableOpacity, {\n          style: styles.syncBtn,\n          testID: \"SyncBtn\",\n          onPress: sync,\n          children: _jsxs(View, {\n            style: styles.syncBtnContainer,\n            children: [_jsx(Material, {\n              name: \"sync\",\n              size: DEVICE_LARGE ? 22 : 20,\n              color: WHITE\n            }), _jsx(Text, {\n              style: styles.syncText,\n              children: \"Sync Devices\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 2\n  },\n  devicesContainer: {\n    padding: 30\n  },\n  deviceContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    padding: 10\n  },\n  deviceLabelContainer: {\n    flexDirection: 'column',\n    flex: 10,\n    alignItems: 'flex-start'\n  },\n  deviceNameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  },\n  deviceSigningKeyContainer: {},\n  removeBtnContainer: {\n    flex: 1,\n    alignContent: 'center',\n    alignItems: 'center'\n  },\n  deviceNameText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  devicePrimaryText: {\n    fontFamily: 'Poppins-Medium',\n    fontWeight: 'bold',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  deviceSigningKeyText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLUE\n  },\n  description: {\n    fontSize: fontSize[16],\n    padding: 10,\n    marginBottom: 20\n  },\n  syncBtn: {},\n  removeBtn: {},\n  syncBtnContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    alignSelf: 'stretch',\n    borderRadius: 10,\n    backgroundColor: BLUE,\n    padding: 10,\n    marginTop: 30\n  },\n  syncText: {\n    color: WHITE,\n    fontFamily: 'Poppins-Bold',\n    paddingLeft: 10,\n    fontSize: fontSize[14]\n  },\n  waitingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    paddingBottom: 20\n  },\n  waitingMessage: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    fontSize: fontSize[14],\n    color: BLUE\n  }\n});\nexport default DevicesScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/DevicesScreen.tsx"],"names":["DevicesScreen","route","navigation","useNavigation","dispatch","useDispatch","t","useTranslation","api","useContext","signingKey","useSelector","state","devices","a","settings","syncCompleted","shortenSigningKey","s","isCurrentDevice","d","getName","waiting","setWaiting","useState","useEffect","runEffect","isPrimaryDevice","lastSyncTime","getOtherSideDeviceInfo","resetRecoveryData","Alert","uploadDeviceInfo","after","uploadAllInfoAfter","pollImportChannel","showConfirmDialog","text","onPress","useFocusEffect","clearImportChannel","setLastSyncTime","Date","sync","urlType","qrCodeURL_types","action","remove","name","device","removeDevice","renderItem","index","styles","DEVICE_LARGE","item","StyleSheet","orangeTop","backgroundColor","height","width","zIndex","container","flex","borderTopLeftRadius","marginTop","overflow","devicesContainer","padding","deviceContainer","flexDirection","justifyContent","deviceLabelContainer","alignItems","deviceNameContainer","deviceSigningKeyContainer","removeBtnContainer","alignContent","deviceNameText","fontFamily","fontSize","color","devicePrimaryText","fontWeight","deviceSigningKeyText","description","marginBottom","syncBtn","removeBtn","syncBtnContainer","alignSelf","borderRadius","syncText","paddingLeft","waitingContainer","paddingBottom","waitingMessage","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  FlatList,\n  Alert,\n} from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialIcons';\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { useSelector, useDispatch } from '@/store';\nimport { selectActiveDevices } from '@/reducer/devicesSlice';\nimport { fontSize } from '@/theme/fonts';\nimport { WHITE, ORANGE, BLUE, BLACK } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { removeDevice, setLastSyncTime } from '@/actions';\nimport { qrCodeURL_types } from '@/utils/constants';\nimport {\n  pollImportChannel,\n  clearImportChannel,\n  getOtherSideDeviceInfo,\n} from './thunks/channelThunks';\nimport {\n  uploadAllInfoAfter,\n  uploadDeviceInfo,\n} from './thunks/channelUploadThunks';\nimport {\n  resetRecoveryData,\n  uploadCompletedByOtherSide,\n} from '../RecoveryFlow/recoveryDataSlice';\n\n/* Description */\n\n/* ======================================== */\n\n/**\n * Screen for listing devices\n */\n\n/* Devices Screen */\n\n/* ======================================== */\nexport const DevicesScreen = ({ route }) => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n  const signingKey = useSelector((state) => state.keypair.publicKey);\n  const devices = useSelector(selectActiveDevices).sort((a, _b) =>\n    a.signingKey === signingKey ? -1 : 1,\n  );\n  const settings = useSelector((state) => state.settings);\n  const syncCompleted = useSelector(uploadCompletedByOtherSide);\n\n  const shortenSigningKey = (s) => `${s.slice(0, 6)}...${s.slice(-6)}`;\n  const isCurrentDevice = (d) => d.signingKey === signingKey;\n  const getName = (d) =>\n    isCurrentDevice(d) ? 'Current device' : d.name || 'Unknown name';\n  const [waiting, setWaiting] = useState(!!route.params?.syncing);\n\n  useEffect(() => {\n    const runEffect = async () => {\n      const { isPrimaryDevice, lastSyncTime } = await getOtherSideDeviceInfo();\n      if (isPrimaryDevice && settings.isPrimaryDevice) {\n        setWaiting(false);\n        dispatch(resetRecoveryData());\n        return Alert.alert(\n          t('common.alert.error'),\n          t('devices.alert.bothPrimary'),\n        );\n      } else if (!isPrimaryDevice && !settings.isPrimaryDevice) {\n        setWaiting(false);\n        dispatch(resetRecoveryData());\n        return Alert.alert(\n          t('common.alert.error'),\n          t('devices.alert.noPrimary'),\n        );\n      }\n      if (!settings.isPrimaryDevice) {\n        await uploadDeviceInfo();\n      }\n      const after = settings.isPrimaryDevice\n        ? lastSyncTime\n        : settings.lastSyncTime;\n      await uploadAllInfoAfter(after);\n      dispatch(pollImportChannel());\n    };\n    const showConfirmDialog = () => {\n      return Alert.alert(\n        t('common.alert.title.pleaseConfirm'),\n        t('devices.alert.confirmSync'),\n        [\n          {\n            text: t('common.alert.yes'),\n            onPress: () => {\n              runEffect();\n            },\n          },\n          {\n            text: t('common.alert.no'),\n            onPress: () => {\n              navigation.navigate('Home');\n            },\n          },\n        ],\n      );\n    };\n    if (route.params?.asScanner) {\n      showConfirmDialog();\n    }\n  }, [\n    dispatch,\n    navigation,\n    route.params?.asScanner,\n    settings.isPrimaryDevice,\n    settings.lastSyncTime,\n    t,\n  ]);\n\n  useEffect(() => {\n    setWaiting(!!route.params?.syncing);\n  }, [route.params?.syncing]);\n\n  useFocusEffect(() => {\n    // this is triggered when navigating back from sync code screen\n    if (waiting && syncCompleted) {\n      Alert.alert(t('common.alert.info'), t('devices.text.syncCompleted'));\n      clearImportChannel();\n      setWaiting(false);\n      if (!settings.isPrimaryDevice) {\n        dispatch(setLastSyncTime(Date.now()));\n      }\n      dispatch(resetRecoveryData());\n    }\n  });\n\n  const sync = () => {\n    navigation.navigate('SyncCode', {\n      urlType: qrCodeURL_types.SYNC,\n      action: 'sync',\n    });\n  };\n\n  const remove = (device) => {\n    Alert.alert(\n      t('common.alert.title.pleaseConfirm'),\n      t('devices.alert.confirmRemove', { name: getName(device) }),\n      [\n        {\n          text: t('common.alert.yes'),\n          onPress: () => {\n            api.removeSigningKey(device.signingKey).then(() => {\n              dispatch(removeDevice(device.signingKey));\n            });\n          },\n        },\n        {\n          text: t('common.alert.no'),\n        },\n      ],\n    );\n  };\n\n  const renderItem = ({ item: device, index }) => (\n    <View testID={`device-${index}`} style={styles.deviceContainer}>\n      <View testID={getName(device)} style={styles.deviceLabelContainer}>\n        <View style={styles.deviceNameContainer}>\n          <Text style={styles.deviceNameText}>{getName(device)}</Text>\n          {isCurrentDevice(device) && (\n            <Text style={styles.devicePrimaryText}>\n              &nbsp;({settings.isPrimaryDevice ? 'Primary' : 'Secondary'})\n            </Text>\n          )}\n        </View>\n        <View style={styles.deviceSigningKeyContainer}>\n          <Text style={styles.deviceSigningKeyText}>\n            {shortenSigningKey(device.signingKey)}\n          </Text>\n        </View>\n      </View>\n      {!isCurrentDevice(device) && (\n        <View style={styles.removeBtnContainer}>\n          <TouchableOpacity\n            style={styles.removeBtn}\n            testID={`RemoveDeviceBtn-${index}`}\n            onPress={() => remove(device)}\n          >\n            <Material\n              name=\"delete\"\n              size={DEVICE_LARGE ? 22 : 20}\n              color={BLUE}\n            />\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        backgroundColor={WHITE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"DevicesScreen\">\n        <View style={styles.devicesContainer}>\n          <Text style={styles.description}>\n            {t('devices.text.listDescription')}\n          </Text>\n          <FlatList\n            data={devices}\n            renderItem={renderItem}\n            keyExtractor={(item) => item.signingKey}\n          />\n          {waiting ? (\n            <View style={styles.waitingContainer}>\n              <Text style={styles.waitingMessage}>\n                {t('devices.text.waitSyncing')}\n              </Text>\n              <Spinner\n                isVisible={waiting}\n                size={DEVICE_LARGE ? 48 : 42}\n                type=\"Wave\"\n                color={BLUE}\n              />\n            </View>\n          ) : (\n            <TouchableOpacity\n              style={styles.syncBtn}\n              testID=\"SyncBtn\"\n              onPress={sync}\n            >\n              <View style={styles.syncBtnContainer}>\n                <Material\n                  name=\"sync\"\n                  size={DEVICE_LARGE ? 22 : 20}\n                  color={WHITE}\n                />\n                <Text style={styles.syncText}>Sync Devices</Text>\n              </View>\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 2,\n  },\n  devicesContainer: {\n    padding: 30,\n  },\n  deviceContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    padding: 10,\n  },\n  deviceLabelContainer: {\n    flexDirection: 'column',\n    flex: 10,\n    alignItems: 'flex-start',\n  },\n  deviceNameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n  },\n  deviceSigningKeyContainer: {},\n  removeBtnContainer: {\n    flex: 1,\n    alignContent: 'center',\n    alignItems: 'center',\n  },\n  deviceNameText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  devicePrimaryText: {\n    fontFamily: 'Poppins-Medium',\n    fontWeight: 'bold',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  deviceSigningKeyText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLUE,\n  },\n  description: {\n    fontSize: fontSize[16],\n    padding: 10,\n    marginBottom: 20,\n  },\n  syncBtn: {\n    // flex: 1,\n  },\n  removeBtn: {},\n  syncBtnContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    alignSelf: 'stretch',\n    borderRadius: 10,\n    backgroundColor: BLUE,\n    padding: 10,\n    marginTop: 30,\n  },\n  syncText: {\n    color: WHITE,\n    fontFamily: 'Poppins-Bold',\n    paddingLeft: 10,\n    fontSize: fontSize[14],\n  },\n  waitingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    paddingBottom: 20,\n  },\n  waitingMessage: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    fontSize: fontSize[14],\n    color: BLUE,\n  },\n});\n\nexport default DevicesScreen;\n"]},"metadata":{},"sourceType":"module"}