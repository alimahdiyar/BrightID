{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupSync = exports.pollOtherSideDeviceInfo = exports.pollImportChannel = exports.getOtherSideDeviceInfo = exports.createSyncChannel = exports.clearImportChannel = exports.checkImportChannel = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _encoding = require(\"../../../../utils/encoding\");\n\nvar _store = require(\"../../../../store\");\n\nvar _channelService = _interopRequireDefault(require(\"../../../../api/channelService\"));\n\nvar _settingsSlice = require(\"../../../../reducer/settingsSlice\");\n\nvar _channelThunks = require(\"../../RecoveryFlow/thunks/channelThunks\");\n\nvar _recoveryDataSlice = require(\"../../RecoveryFlow/recoveryDataSlice\");\n\nvar _channelDownloadThunks = require(\"../../RecoveryFlow/thunks/channelDownloadThunks\");\n\nvar _channelDownloadThunks2 = require(\"./channelDownloadThunks\");\n\nvar _channelUploadThunks = require(\"./channelUploadThunks\");\n\nvar _constants = require(\"../../../../utils/constants\");\n\nvar setupSync = function setupSync() {\n  return function _callee(dispatch, getState) {\n    var _getState, recoveryData, aesKey;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _getState = getState(), recoveryData = _getState.recoveryData;\n\n            if (recoveryData.aesKey) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return _regenerator.default.awrap((0, _encoding.urlSafeRandomKey)(16));\n\n          case 4:\n            aesKey = _context.sent;\n            dispatch((0, _recoveryDataSlice.init)({\n              aesKey: aesKey\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.setupSync = setupSync;\n\nvar createSyncChannel = function createSyncChannel() {\n  return function _callee2(dispatch, getState) {\n    var _getState2, aesKey, baseUrl, url, channelId, _getState3, settings, lastSyncTime, after;\n\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getState2 = getState(), aesKey = _getState2.recoveryData.aesKey;\n            baseUrl = (0, _settingsSlice.selectBaseUrl)(getState());\n            url = new URL(baseUrl + \"/profile\");\n            channelId = (0, _encoding.hash)(aesKey);\n            console.log(\"created channel \" + channelId + \" for sync data\");\n            dispatch((0, _recoveryDataSlice.setRecoveryChannel)({\n              channelId: channelId,\n              url: url\n            }));\n            _getState3 = getState(), settings = _getState3.settings;\n            lastSyncTime = 0;\n\n            if (settings.isPrimaryDevice) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 11;\n            return _regenerator.default.awrap((0, _channelUploadThunks.uploadDeviceInfo)());\n\n          case 11:\n            console.log(\"Finished uploading last sync time to the channel \" + channelId);\n            _context2.next = 19;\n            break;\n\n          case 14:\n            console.log(\"Polling last sync time from the scanner of the channel \" + channelId);\n            _context2.next = 17;\n            return _regenerator.default.awrap(pollOtherSideDeviceInfo());\n\n          case 17:\n            lastSyncTime = _context2.sent.lastSyncTime;\n            console.log(\"Last sync time was \" + lastSyncTime);\n\n          case 19:\n            after = settings.isPrimaryDevice ? lastSyncTime : settings.lastSyncTime;\n            (0, _channelUploadThunks.uploadAllInfoAfter)(after).then(function () {\n              console.log(\"Finished uploading sync data to the channel \" + channelId);\n            });\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.createSyncChannel = createSyncChannel;\n\nvar getOtherSideDeviceInfo = function _callee3() {\n  var _store$getState, _store$getState$recov, url, channelId, channelApi, dataString;\n\n  return _regenerator.default.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _store$getState = _store.store.getState(), _store$getState$recov = _store$getState.recoveryData.channel, url = _store$getState$recov.url, channelId = _store$getState$recov.channelId;\n          channelApi = new _channelService.default(url.href);\n          _context3.prev = 2;\n          _context3.next = 5;\n          return _regenerator.default.awrap(channelApi.download({\n            channelId: channelId,\n            dataId: _constants.IMPORT_PREFIX + \"data\",\n            deleteAfterDownload: true\n          }));\n\n        case 5:\n          dataString = _context3.sent;\n          return _context3.abrupt(\"return\", JSON.parse(dataString));\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](2);\n          return _context3.abrupt(\"return\", {\n            isPrimaryDevice: true\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[2, 9]], Promise);\n};\n\nexports.getOtherSideDeviceInfo = getOtherSideDeviceInfo;\n\nvar pollOtherSideDeviceInfo = function _callee4() {\n  var data;\n  return _regenerator.default.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regenerator.default.awrap(getOtherSideDeviceInfo());\n\n        case 2:\n          data = _context4.sent;\n\n        case 3:\n          if (!(data.lastSyncTime === undefined)) {\n            _context4.next = 11;\n            break;\n          }\n\n          _context4.next = 6;\n          return _regenerator.default.awrap(new Promise(function (r) {\n            return setTimeout(r, _channelThunks.CHANNEL_POLL_INTERVAL);\n          }));\n\n        case 6:\n          _context4.next = 8;\n          return _regenerator.default.awrap(getOtherSideDeviceInfo());\n\n        case 8:\n          data = _context4.sent;\n          _context4.next = 3;\n          break;\n\n        case 11:\n          return _context4.abrupt(\"return\", data);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.pollOtherSideDeviceInfo = pollOtherSideDeviceInfo;\nvar channelIntervalId;\nvar checkInProgress = false;\n\nvar pollImportChannel = function pollImportChannel() {\n  return function _callee5(dispatch) {\n    return _regenerator.default.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            clearInterval(channelIntervalId);\n            channelIntervalId = setInterval(function () {\n              if (!checkInProgress) {\n                checkInProgress = true;\n                dispatch(checkImportChannel()).then(function () {\n                  checkInProgress = false;\n                }).catch(function (err) {\n                  checkInProgress = false;\n                  console.error(\"error polling sync/import channel: \" + err.message);\n                });\n              }\n            }, _channelThunks.CHANNEL_POLL_INTERVAL);\n            console.log(\"start polling sync/import channel (\" + channelIntervalId + \")\");\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.pollImportChannel = pollImportChannel;\n\nvar clearImportChannel = function clearImportChannel() {\n  console.log(\"stop polling sync/import channel (\" + channelIntervalId + \")\");\n  clearInterval(channelIntervalId);\n};\n\nexports.clearImportChannel = clearImportChannel;\n\nvar checkImportChannel = function checkImportChannel() {\n  return function _callee6(dispatch, getState) {\n    var _getState4, _getState4$recoveryDa, channelId, url, isPrimaryDevice, channelApi, dataIds;\n\n    return _regenerator.default.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _getState4 = getState(), _getState4$recoveryDa = _getState4.recoveryData.channel, channelId = _getState4$recoveryDa.channelId, url = _getState4$recoveryDa.url, isPrimaryDevice = _getState4.settings.isPrimaryDevice;\n            channelApi = new _channelService.default(url.href);\n            _context6.next = 4;\n            return _regenerator.default.awrap(channelApi.list(channelId));\n\n          case 4:\n            dataIds = _context6.sent;\n            _context6.next = 7;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks2.downloadUserInfo)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 7:\n            _context6.next = 9;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks.downloadConnections)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 9:\n            _context6.next = 11;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks.downloadGroups)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 11:\n            _context6.next = 13;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks2.downloadContextInfo)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 13:\n            if (isPrimaryDevice) {\n              _context6.next = 16;\n              break;\n            }\n\n            _context6.next = 16;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks2.downloadBlindSigs)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 16:\n            _context6.next = 18;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks2.checkCompletedFlags)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 18:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.checkImportChannel = checkImportChannel;","map":{"version":3,"names":["setupSync","dispatch","getState","recoveryData","aesKey","urlSafeRandomKey","init","createSyncChannel","baseUrl","selectBaseUrl","url","URL","channelId","hash","console","log","setRecoveryChannel","settings","lastSyncTime","isPrimaryDevice","uploadDeviceInfo","pollOtherSideDeviceInfo","after","uploadAllInfoAfter","then","getOtherSideDeviceInfo","store","channel","channelApi","ChannelAPI","href","download","dataId","IMPORT_PREFIX","deleteAfterDownload","dataString","JSON","parse","data","undefined","Promise","r","setTimeout","CHANNEL_POLL_INTERVAL","channelIntervalId","checkInProgress","pollImportChannel","clearInterval","setInterval","checkImportChannel","catch","err","error","message","clearImportChannel","list","dataIds","downloadUserInfo","downloadConnections","downloadGroups","downloadContextInfo","downloadBlindSigs","checkCompletedFlags"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/thunks/channelThunks.ts"],"sourcesContent":["import { hash, urlSafeRandomKey } from '@/utils/encoding';\nimport { store } from '@/store';\nimport ChannelAPI from '@/api/channelService';\nimport { selectBaseUrl } from '@/reducer/settingsSlice';\nimport { CHANNEL_POLL_INTERVAL } from '../../RecoveryFlow/thunks/channelThunks';\nimport { init, setRecoveryChannel } from '../../RecoveryFlow/recoveryDataSlice';\nimport {\n  downloadConnections,\n  downloadGroups,\n} from '../../RecoveryFlow/thunks/channelDownloadThunks';\nimport {\n  checkCompletedFlags,\n  downloadBlindSigs,\n  downloadContextInfo,\n  downloadUserInfo,\n} from './channelDownloadThunks';\nimport { uploadAllInfoAfter, uploadDeviceInfo } from './channelUploadThunks';\nimport { IMPORT_PREFIX } from '@/utils/constants';\n\nexport const setupSync =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const { recoveryData } = getState();\n    // setup recovery data\n    if (!recoveryData.aesKey) {\n      const aesKey = await urlSafeRandomKey(16);\n      // setup recovery data slice with sync info\n      dispatch(init({ aesKey }));\n    }\n  };\n\nexport const createSyncChannel =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const {\n      recoveryData: { aesKey },\n    } = getState();\n    const baseUrl = selectBaseUrl(getState());\n    const url = new URL(`${baseUrl}/profile`);\n    // use this for local running profile service\n    // const url = new URL(`http://10.0.2.2:3000/`);\n    const channelId = hash(aesKey);\n    console.log(`created channel ${channelId} for sync data`);\n    dispatch(setRecoveryChannel({ channelId, url }));\n    const { settings } = getState();\n    let lastSyncTime = 0;\n    if (!settings.isPrimaryDevice) {\n      await uploadDeviceInfo();\n      console.log(\n        `Finished uploading last sync time to the channel ${channelId}`,\n      );\n    } else {\n      console.log(\n        `Polling last sync time from the scanner of the channel ${channelId}`,\n      );\n      lastSyncTime = (await pollOtherSideDeviceInfo()).lastSyncTime;\n      console.log(`Last sync time was ${lastSyncTime}`);\n    }\n    const after = settings.isPrimaryDevice\n      ? lastSyncTime\n      : settings.lastSyncTime;\n    uploadAllInfoAfter(after).then(() => {\n      console.log(`Finished uploading sync data to the channel ${channelId}`);\n    });\n  };\n\nexport const getOtherSideDeviceInfo = async (): Promise<SyncDeviceInfo> => {\n  const {\n    recoveryData: {\n      channel: { url, channelId },\n    },\n  } = store.getState();\n  const channelApi = new ChannelAPI(url.href);\n  try {\n    const dataString = await channelApi.download({\n      channelId,\n      dataId: `${IMPORT_PREFIX}data`,\n      deleteAfterDownload: true,\n    });\n    return JSON.parse(dataString) as SyncDeviceInfo;\n  } catch (err) {\n    // TODO: handle real errors, like network issues etc?\n    // if other side (code generator) did not push its info, it was primary.\n    return {\n      isPrimaryDevice: true,\n    };\n  }\n};\n\nexport const pollOtherSideDeviceInfo = async (): Promise<SyncDeviceInfo> => {\n  // TODO: This is an endless loop. Needs refactoring and error handling.\n  let data = await getOtherSideDeviceInfo();\n  while (data.lastSyncTime === undefined) {\n    await new Promise((r) => setTimeout(r, CHANNEL_POLL_INTERVAL));\n    data = await getOtherSideDeviceInfo();\n  }\n  return data;\n};\n\nlet channelIntervalId: IntervalId;\nlet checkInProgress = false;\n\nexport const pollImportChannel = () => async (dispatch: dispatch) => {\n  clearInterval(channelIntervalId);\n\n  channelIntervalId = setInterval(() => {\n    if (!checkInProgress) {\n      checkInProgress = true;\n      dispatch(checkImportChannel())\n        .then(() => {\n          checkInProgress = false;\n        })\n        .catch((err) => {\n          checkInProgress = false;\n          console.error(`error polling sync/import channel: ${err.message}`);\n        });\n    }\n  }, CHANNEL_POLL_INTERVAL);\n\n  console.log(`start polling sync/import channel (${channelIntervalId})`);\n};\n\nexport const clearImportChannel = () => {\n  console.log(`stop polling sync/import channel (${channelIntervalId})`);\n  clearInterval(channelIntervalId);\n};\n\nexport const checkImportChannel =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const {\n      recoveryData: {\n        channel: { channelId, url },\n      },\n      settings: { isPrimaryDevice },\n    } = getState();\n    const channelApi = new ChannelAPI(url.href);\n    const dataIds = await channelApi.list(channelId);\n    await dispatch(downloadUserInfo({ channelApi, dataIds }));\n    await dispatch(downloadConnections({ channelApi, dataIds }));\n    await dispatch(downloadGroups({ channelApi, dataIds }));\n    await dispatch(downloadContextInfo({ channelApi, dataIds }));\n    if (!isPrimaryDevice) {\n      await dispatch(downloadBlindSigs({ channelApi, dataIds }));\n    }\n    await dispatch(checkCompletedFlags({ channelApi, dataIds }));\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}