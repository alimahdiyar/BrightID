{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.b64ToUint8Array = b64ToUint8Array;\nexports.b64ToUrlSafeB64 = b64ToUrlSafeB64;\nexports.randomKey = exports.objValues = exports.objToUint8 = exports.objToB64 = exports.hash = void 0;\nexports.strToUint8Array = strToUint8Array;\nexports.uInt8ArrayToB64 = uInt8ArrayToB64;\nexports.urlSafeRandomKey = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _base64Js = _interopRequireDefault(require(\"base64-js\"));\n\nvar _buffer = require(\"buffer\");\n\nvar _cryptoJs = _interopRequireDefault(require(\"crypto-js\"));\n\nvar _ramda = require(\"ramda\");\n\nfunction uInt8ArrayToB64(array) {\n  return _base64Js.default.fromByteArray(array);\n}\n\nfunction b64ToUint8Array(str) {\n  var arr = _base64Js.default.toByteArray(str);\n\n  if (arr.join) {\n    return arr;\n  }\n\n  var plainArray = Object.values(arr);\n  arr = new Uint8Array(arr);\n\n  if (arr.join) {\n    return arr;\n  }\n\n  return plainArray;\n}\n\nfunction strToUint8Array(str) {\n  return new Uint8Array(_buffer.Buffer.from(str, 'ascii'));\n}\n\nvar objValues = function objValues(obj) {\n  return Object.values(obj).map(parseFloat);\n};\n\nexports.objValues = objValues;\n\nvar objToUint8 = function objToUint8(obj) {\n  return new Uint8Array(objValues(obj));\n};\n\nexports.objToUint8 = objToUint8;\n\nfunction b64ToUrlSafeB64(s) {\n  var alts = {\n    '/': '_',\n    '+': '-',\n    '=': ''\n  };\n  return s.replace(/[/+=]/g, function (c) {\n    return alts[c];\n  });\n}\n\nvar objToB64 = (0, _ramda.compose)(uInt8ArrayToB64, objToUint8);\nexports.objToB64 = objToB64;\n\nvar hash = function hash(data) {\n  var h = _cryptoJs.default.SHA256(data);\n\n  var b = h.toString(_cryptoJs.default.enc.Base64);\n  return b64ToUrlSafeB64(b);\n};\n\nexports.hash = hash;\nvar RNRandomBytes = _reactNative.NativeModules.RNRandomBytes;\n\nvar randomKey = function randomKey(size) {\n  return new Promise(function (resolve, reject) {\n    RNRandomBytes.randomBytes(size, function (err, bytes) {\n      err ? reject(err) : resolve(bytes);\n    });\n  });\n};\n\nexports.randomKey = randomKey;\n\nvar urlSafeRandomKey = function _callee() {\n  var size,\n      key,\n      _args = arguments;\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          size = _args.length > 0 && _args[0] !== undefined ? _args[0] : 9;\n          _context.next = 3;\n          return _regenerator.default.awrap(randomKey(size));\n\n        case 3:\n          key = _context.sent;\n          return _context.abrupt(\"return\", b64ToUrlSafeB64(key));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.urlSafeRandomKey = urlSafeRandomKey;","map":{"version":3,"names":["uInt8ArrayToB64","array","B64","fromByteArray","b64ToUint8Array","str","arr","toByteArray","join","plainArray","Object","values","Uint8Array","strToUint8Array","Buffer","from","objValues","obj","map","parseFloat","objToUint8","b64ToUrlSafeB64","s","alts","replace","c","objToB64","compose","hash","data","h","CryptoJS","SHA256","b","toString","enc","Base64","RNRandomBytes","NativeModules","randomKey","size","Promise","resolve","reject","randomBytes","err","bytes","urlSafeRandomKey","key"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/encoding.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport B64 from 'base64-js';\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js';\nimport { compose } from 'ramda';\n\n/**\n *\n * @param {Uint8Array} array\n * @returns {string}\n */\nexport function uInt8ArrayToB64(array) {\n  return B64.fromByteArray(array);\n}\n\n/**\n *\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport function b64ToUint8Array(str: string): Uint8Array {\n  // B64.toByteArray might return a Uint8Array, an Array or an Object depending on the platform.\n  // Wrap it in Object.values and new Uint8Array to make sure it's a Uint8Array.\n  let arr = B64.toByteArray(str);\n  if (arr.join) {\n    return arr;\n  }\n  const plainArray = Object.values(arr);\n  arr = new Uint8Array(arr);\n  if (arr.join) {\n    return arr;\n  }\n  // TODO Fix this code to solve below typescript error about returning Array<number>\n  // instead of UInt8Array. I don't think it makes sense to return a number array here anyway\n  // @ts-ignore\n  return plainArray;\n}\n\n/**\n *\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport function strToUint8Array(str) {\n  return new Uint8Array(Buffer.from(str, 'ascii'));\n}\n\n/**\n *\n * @param {Uint8Obj} obj\n * @returns {number[]}\n */\nexport const objValues = (obj) => Object.values(obj).map(parseFloat);\n\n/**\n *\n * @param {Uint8Obj} obj\n * @returns {Uint8Array}\n */\nexport const objToUint8 = (obj) => new Uint8Array(objValues(obj));\n\n/**\n *\n * @param {string} s\n * @returns\n */\nexport function b64ToUrlSafeB64(s) {\n  const alts = {\n    '/': '_',\n    '+': '-',\n    '=': '',\n  };\n  return s.replace(/[/+=]/g, (c) => alts[c]);\n}\n\nexport const objToB64 = compose(uInt8ArrayToB64, objToUint8);\n\n/**\n *\n * @param {string} data\n * @returns\n */\nexport const hash = (data) => {\n  const h = CryptoJS.SHA256(data);\n  const b = h.toString(CryptoJS.enc.Base64);\n  return b64ToUrlSafeB64(b);\n};\n\nconst { RNRandomBytes } = NativeModules;\n/**\n *\n * @param {number} size\n * @returns\n */\nexport const randomKey = (size: number) =>\n  new Promise<string>((resolve, reject) => {\n    RNRandomBytes.randomBytes(size, (err, bytes) => {\n      err ? reject(err) : resolve(bytes);\n    });\n  });\n\nexport const urlSafeRandomKey = async (size: number = 9) => {\n  const key = await randomKey(size);\n  return b64ToUrlSafeB64(key);\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAOO,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;EACrC,OAAOC,iBAAA,CAAIC,aAAJ,CAAkBF,KAAlB,CAAP;AACD;;AAOM,SAASG,eAAT,CAAyBC,GAAzB,EAAkD;EAGvD,IAAIC,GAAG,GAAGJ,iBAAA,CAAIK,WAAJ,CAAgBF,GAAhB,CAAV;;EACA,IAAIC,GAAG,CAACE,IAAR,EAAc;IACZ,OAAOF,GAAP;EACD;;EACD,IAAMG,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcL,GAAd,CAAnB;EACAA,GAAG,GAAG,IAAIM,UAAJ,CAAeN,GAAf,CAAN;;EACA,IAAIA,GAAG,CAACE,IAAR,EAAc;IACZ,OAAOF,GAAP;EACD;;EAID,OAAOG,UAAP;AACD;;AAOM,SAASI,eAAT,CAAyBR,GAAzB,EAA8B;EACnC,OAAO,IAAIO,UAAJ,CAAeE,cAAA,CAAOC,IAAP,CAAYV,GAAZ,EAAiB,OAAjB,CAAf,CAAP;AACD;;AAOM,IAAMW,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;EAAA,OAASP,MAAM,CAACC,MAAP,CAAcM,GAAd,EAAmBC,GAAnB,CAAuBC,UAAvB,CAAT;AAAA,CAAlB;;;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACH,GAAD;EAAA,OAAS,IAAIL,UAAJ,CAAeI,SAAS,CAACC,GAAD,CAAxB,CAAT;AAAA,CAAnB;;;;AAOA,SAASI,eAAT,CAAyBC,CAAzB,EAA4B;EACjC,IAAMC,IAAI,GAAG;IACX,KAAK,GADM;IAEX,KAAK,GAFM;IAGX,KAAK;EAHM,CAAb;EAKA,OAAOD,CAAC,CAACE,OAAF,CAAU,QAAV,EAAoB,UAACC,CAAD;IAAA,OAAOF,IAAI,CAACE,CAAD,CAAX;EAAA,CAApB,CAAP;AACD;;AAEM,IAAMC,QAAQ,GAAG,IAAAC,cAAA,EAAQ3B,eAAR,EAAyBoB,UAAzB,CAAjB;;;AAOA,IAAMQ,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAU;EAC5B,IAAMC,CAAC,GAAGC,iBAAA,CAASC,MAAT,CAAgBH,IAAhB,CAAV;;EACA,IAAMI,CAAC,GAAGH,CAAC,CAACI,QAAF,CAAWH,iBAAA,CAASI,GAAT,CAAaC,MAAxB,CAAV;EACA,OAAOf,eAAe,CAACY,CAAD,CAAtB;AACD,CAJM;;;AAMP,IAAQI,aAAR,GAA0BC,0BAA1B,CAAQD,aAAR;;AAMO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;EAAA,OACvB,IAAIC,OAAJ,CAAoB,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACvCN,aAAa,CAACO,WAAd,CAA0BJ,IAA1B,EAAgC,UAACK,GAAD,EAAMC,KAAN,EAAgB;MAC9CD,GAAG,GAAGF,MAAM,CAACE,GAAD,CAAT,GAAiBH,OAAO,CAACI,KAAD,CAA3B;IACD,CAFD;EAGD,CAJD,CADuB;AAAA,CAAlB;;;;AAOA,IAAMC,gBAAgB,GAAG;EAAA;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAAOP,IAAP,2DAAsB,CAAtB;UAAA;UAAA,kCACZD,SAAS,CAACC,IAAD,CADG;;QAAA;UACxBQ,GADwB;UAAA,iCAEvB3B,eAAe,CAAC2B,GAAD,CAFQ;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAzB"},"metadata":{},"sourceType":"script"}