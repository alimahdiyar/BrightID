{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n          height = _ref3.height;\n\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n          _ref6$top = _ref6.top,\n          top = _ref6$top === void 0 ? insets.top : _ref6$top,\n          _ref6$right = _ref6.right,\n          right = _ref6$right === void 0 ? insets.right : _ref6$right,\n          _ref6$bottom = _ref6.bottom,\n          bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n          _ref6$left = _ref6.left,\n          left = _ref6$left === void 0 ? insets.left : _ref6$left;\n\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n            detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (shouldUseActivityState || Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref7.safeAreaInsets,\n            _ref7$headerShown = _ref7.headerShown,\n            headerShown = _ref7$headerShown === void 0 ? true : _ref7$headerShown,\n            headerTransparent = _ref7.headerTransparent,\n            cardShadowEnabled = _ref7.cardShadowEnabled,\n            cardOverlayEnabled = _ref7.cardOverlayEnabled,\n            cardOverlay = _ref7.cardOverlay,\n            cardStyle = _ref7.cardStyle,\n            animationEnabled = _ref7.animationEnabled,\n            gestureResponseDistance = _ref7.gestureResponseDistance,\n            gestureVelocityImpact = _ref7.gestureVelocityImpact,\n            _ref7$gestureDirectio = _ref7.gestureDirection,\n            gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n            _ref7$transitionSpec = _ref7.transitionSpec,\n            transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n            _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n            cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n            _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n            headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref8.animationEnabled,\n                _ref8$gestureDirectio = _ref8.gestureDirection,\n                _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n                _ref8$transitionSpec = _ref8.transitionSpec,\n                _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n                _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n                _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref9 = safeAreaInsets || {},\n            _ref9$top = _ref9.top,\n            safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n            _ref9$right = _ref9.right,\n            safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n            _ref9$bottom = _ref9.bottom,\n            safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n            _ref9$left = _ref9.left,\n            safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref10.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","options","getHeaderHeights","routes","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","isParentHeaderShown","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","gesture","inputRange","outputRange","CardStack","React","Component","props","state","gestures","descriptor","animationEnabled","Animated","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","headerHeights","constructor","Dimensions","e","previousHeight","getPreviousRoute","previousScene","render","insets","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","top","right","bottom","left","activeScreensLimit","i","detachPreviousScreen","isFloatHeaderAbsolute","headerTransparent","headerShown","floatingHeader","key","getPreviousScene","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","enabled","onLayout","focused","isScreenActive","shouldUseActivityState","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","active","pointerEvents","closing","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","container","flex","absolute","position","floating","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}