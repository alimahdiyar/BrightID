{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler, TapGestureHandler, GestureState } from \"./GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    clockRunning = Animated.clockRunning,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    spring = Animated.spring,\n    abs = Animated.abs,\n    add = Animated.add,\n    and = Animated.and,\n    block = Animated.block,\n    call = Animated.call,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    or = Animated.or,\n    set = Animated.set,\n    sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\n\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      var _this$props = _this.props,\n          open = _this$props.open,\n          onClose = _this$props.onClose;\n\n      if (e.key === 'Escape') {\n        if (open) {\n          onClose();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDrawerWidth\", function () {\n      var _this$props2 = _this.props,\n          drawerStyle = _this$props2.drawerStyle,\n          dimensions = _this$props2.dimensions;\n\n      var _ref = StyleSheet.flatten(drawerStyle) || {},\n          _ref$width = _ref.width,\n          width = _ref$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref$width;\n\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n\n      return typeof width === 'number' ? width : 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(GestureState.UNDETERMINED));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n            value = _ref3[0];\n\n        var open = Boolean(value);\n\n        _this.handleEndInteraction();\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n          value = _ref5[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 1),\n          value = _ref7[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, GestureState.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props3 = _this.props,\n          hideStatusBar = _this$props3.hideStatusBar,\n          statusBarAnimation = _this$props3.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'web') {\n        var _document, _document$body, _document$body$addEve;\n\n        (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props4 = this.props,\n          open = _this$props4.open,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerType = _this$props4.drawerType,\n          swipeDistanceThreshold = _this$props4.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props4.swipeVelocityThreshold,\n          hideStatusBar = _this$props4.hideStatusBar;\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          open = _this$props5.open,\n          gestureEnabled = _this$props5.gestureEnabled,\n          swipeEnabled = _this$props5.swipeEnabled,\n          drawerPosition = _this$props5.drawerPosition,\n          drawerType = _this$props5.drawerType,\n          swipeEdgeWidth = _this$props5.swipeEdgeWidth,\n          sceneContainerStyle = _this$props5.sceneContainerStyle,\n          drawerStyle = _this$props5.drawerStyle,\n          overlayStyle = _this$props5.overlayStyle,\n          renderDrawerContent = _this$props5.renderDrawerContent,\n          renderSceneContent = _this$props5.renderSceneContent,\n          gestureHandlerProps = _this$props5.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' || drawerType === 'permanent' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'permanent' ? ANIMATED_ZERO : drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && gestureEnabled && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent({\n        progress: progress\n      })), drawerType === 'permanent' ? null : Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos' ? React.createElement(TouchableWithoutFeedback, {\n        onPress: gestureEnabled ? function () {\n          return _this2.toggleDrawer(false);\n        } : undefined\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle\n      })) : React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle\n      }))), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent({\n        progress: progress\n      }))));\n    }\n  }]);\n\n  return DrawerView;\n}(React.Component);\n\nexport { DrawerView as default };\n\n_defineProperty(DrawerView, \"defaultProps\", {\n  drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: true,\n  swipeEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","Animated","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","React","Component","drawerPosition","I18nManager","drawerType","gestureEnabled","swipeEnabled","Platform","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","componentDidMount","componentDidUpdate","open","swipeDistanceThreshold","prevProps","componentWillUnmount","e","onClose","InteractionManager","drawerStyle","dimensions","width","StyleSheet","percentage","Number","GestureState","isOpen","toValue","frameTime","state","position","time","finished","velocity","value","Boolean","Keyboard","nativeEvent","x","translationX","velocityX","s","oldState","requestAnimationFrame","hidden","StatusBar","render","sceneContainerStyle","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","offset","hitSlop","right","left","progress","activeOffsetX","failOffsetY","onGestureEvent","onHandlerStateChange","enabled","onLayout","style","styles","flexDirection","transform","translateX","accessibilityElementsHidden","importantForAccessibility","onPress","exec","accessibilityViewIsModal","removeClippedSubviews","opacity","zIndex","container","backgroundColor","maxWidth","nonPermanent","top","bottom","content","flex","main","web","default","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;;;;AAcA,OAAA,QAAA,MAAA,yBAAA;AACA,SAAA,iBAAA,EAAA,iBAAA,EAAA,YAAA;AAKA,OAAA,OAAA;AAEA,IACEA,KADF,GA0BIyB,QA1BJ,CAAA,KAAA;AAAA,IAEExB,KAFF,GA0BIwB,QA1BJ,CAAA,KAAA;AAAA,IAGEvB,QAHF,GA0BIuB,QA1BJ,CAAA,QAAA;AAAA,IAIEtB,YAJF,GA0BIsB,QA1BJ,CAAA,YAAA;AAAA,IAKErB,UALF,GA0BIqB,QA1BJ,CAAA,UAAA;AAAA,IAMEpB,SANF,GA0BIoB,QA1BJ,CAAA,SAAA;AAAA,IAOEnB,MAPF,GA0BImB,QA1BJ,CAAA,MAAA;AAAA,IAQElB,GARF,GA0BIkB,QA1BJ,CAAA,GAAA;AAAA,IASEjB,GATF,GA0BIiB,QA1BJ,CAAA,GAAA;AAAA,IAUEhB,GAVF,GA0BIgB,QA1BJ,CAAA,GAAA;AAAA,IAWEf,KAXF,GA0BIe,QA1BJ,CAAA,KAAA;AAAA,IAYEd,IAZF,GA0BIc,QA1BJ,CAAA,IAAA;AAAA,IAaEb,IAbF,GA0BIa,QA1BJ,CAAA,IAAA;AAAA,IAcEZ,MAdF,GA0BIY,QA1BJ,CAAA,MAAA;AAAA,IAeEX,EAfF,GA0BIW,QA1BJ,CAAA,EAAA;AAAA,IAgBEV,KAhBF,GA0BIU,QA1BJ,CAAA,KAAA;AAAA,IAiBET,WAjBF,GA0BIS,QA1BJ,CAAA,WAAA;AAAA,IAkBER,QAlBF,GA0BIQ,QA1BJ,CAAA,QAAA;AAAA,IAmBEP,GAnBF,GA0BIO,QA1BJ,CAAA,GAAA;AAAA,IAoBEN,GApBF,GA0BIM,QA1BJ,CAAA,GAAA;AAAA,IAqBEL,QArBF,GA0BIK,QA1BJ,CAAA,QAAA;AAAA,IAsBEJ,GAtBF,GA0BII,QA1BJ,CAAA,GAAA;AAAA,IAuBEH,EAvBF,GA0BIG,QA1BJ,CAAA,EAAA;AAAA,IAwBEF,GAxBF,GA0BIE,QA1BJ,CAAA,GAAA;AAAA,IAyBED,GAzBF,GA0BIC,QA1BJ,CAAA,GAAA;AA4BA,IAAMC,IAAI,GAAV,CAAA;AACA,IAAMC,KAAK,GAAX,CAAA;AACA,IAAMC,IAAI,GAAV,CAAA;AACA,IAAMC,KAAK,GAAG,CAAd,CAAA;AAEA,IAAMC,cAAc,GAApB,CAAA;AACA,IAAMC,eAAe,GAAG,CAAxB,CAAA;AAEA,IAAMC,gCAAgC,GAAtC,EAAA;AACA,IAAMC,sBAAsB,GAA5B,CAAA;AAEA,IAAMC,oBAAoB,GAA1B,KAAA;AAEA,IAAMC,aAAa,GAAG;EACpBC,SAAS,EADW,IAAA;EAEpBC,OAAO,EAFa,GAAA;EAGpBC,IAAI,EAHgB,CAAA;EAIpBC,iBAAiB,EAJG,IAAA;EAKpBC,yBAAyB,EALL,IAAA;EAMpBC,kBAAkB,EANpB;AAAsB,CAAtB;AASA,IAAMC,aAAa,GAAG,IAAIjB,QAAQ,CAAZ,KAAA,CAAtB,CAAsB,CAAtB;AACA,IAAMkB,YAAY,GAAG,IAAIlB,QAAQ,CAAZ,KAAA,CAArB,CAAqB,CAArB;;AA6BqBmB,IAAAA,U;;;;;EAA0C,SAAA,UAAA,GAAA;IAAA,IAAA,KAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;IAAA;;IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EA8ErCoB,UAAD,CAACA,EAAqB;MAC3C,IAAA,WAAA,GAA0B,KAAA,CAA1B,KAAA;MAAA,IAAQJ,IAAR,GAAA,WAAA,CAAA,IAAA;MAAA,IAAcK,OAAd,GAAA,WAAA,CAAA,OAAA;;MAEA,IAAID,CAAC,CAADA,GAAAA,KAAJ,QAAA,EAAwB;QACtB,IAAA,IAAA,EAAU;UACRC,OAAO;QAEV;MArF0D;IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,sBAAA,EAwF9B,YAAM;MACnC,IAAI,KAAA,CAAA,iBAAA,KAAJ,SAAA,EAA0C;QACxCC,kBAAkB,CAAlBA,sBAAAA,CAA0C,KAAA,CAA1CA,iBAAAA;QACA,KAAA,CAAA,iBAAA,GAAA,SAAA;MA3FyD;IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,wBAAA,EA+F5B,YAAM;MACrC,IAAI,KAAA,CAAA,iBAAA,KAAJ,SAAA,EAA0C;QACxC,KAAA,CAAA,iBAAA,GAAyBA,kBAAkB,CAA3C,uBAAyBA,EAAzB;MAjGyD;IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAqGpC,YAAc;MACrC,IAAA,YAAA,GAAoC,KAAA,CAApC,KAAA;MAAA,IAAQC,WAAR,GAAA,YAAA,CAAA,WAAA;MAAA,IAAqBC,UAArB,GAAA,YAAA,CAAA,UAAA;;MACA,IAAA,IAAA,GACEE,UAAU,CAAVA,OAAAA,CAAAA,WAAAA,KADF,EAAA;MAAA,IAAA,UAAA,GAAA,IAAA,CAAA,KAAA;MAAA,IAAQD,KAAR,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,oBAAA,GAAA,UAAA;;MAGA,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6BA,KAAK,CAALA,QAAAA,CAAjC,GAAiCA,CAAjC,EAAsD;QAEpD,IAAME,UAAU,GAAGC,MAAM,CAACH,KAAK,CAALA,OAAAA,CAAAA,IAAAA,EAA1B,EAA0BA,CAAD,CAAzB;;QAEA,IAAIG,MAAM,CAANA,QAAAA,CAAJ,UAAIA,CAAJ,EAAiC;UAC/B,OAAOJ,UAAU,CAAVA,KAAAA,IAAoBG,UAAU,GAArC,GAAOH,CAAP;QAEH;MAED;;MAAA,OAAO,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,GAnHoD,CAmH3D;IAnH2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAsH7C,IAtH6C,KAsH7C,EAtH6C,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EAyHjC,IAAA,KAAA,CAC1B,KAAA,CAAA,KAAA,CAAA,UAAA,KAAA,OAAA,GAAA,IAAA,GA1H2D,KAyHjC,CAzHiC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EA6H5C,IAAA,KAAA,CAAkB,KAAA,CAAA,KAAA,CAAA,IAAA,GAAA,IAAA,GA7H0B,KA6H5C,CA7H4C,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EA8HxC,IAAA,KAAA,CA9HwC,KA8HxC,CA9HwC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EA+HzC,IAAA,KAAA,CA/HyC,KA+HzC,CA/HyC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EAiIhC,KAAA,CAjIgC,cAiIhC,EAjIgC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAmItC,IAAA,KAAA,CAAkBK,YAAY,CAnIQ,YAmItC,CAnIsC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAoI5C,IAAA,KAAA,CApI4C,CAoI5C,CApI4C,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAqIzC,IAAA,KAAA,CArIyC,CAqIzC,CArIyC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAsI1C,IAAA,KAAA,CAtI0C,CAsI1C,CAtI0C,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAuI3C,IAAA,KAAA,CAvI2C,CAuI3C,CAvI2C,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAwI1C,IAAA,KAAA,CACjB,KAAA,CAAA,KAAA,CAAA,IAAA,GACI,KAAA,CAAA,kBAAA,IACC,KAAA,CAAA,KAAA,CAAA,cAAA,KAAA,OAAA,GAAA,eAAA,GAFL,cACI,CADJ,GAzI2D,CAwI1C,CAxI0C,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAiJpC,IAAA,KAAA,CAAkB,KAAA,CAAA,KAAA,CAAA,UAAA,CAjJkB,KAiJpC,CAjJoC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAkJvC,IAAA,KAAA,CAAkB,KAAA,CAlJqB,kBAkJvC,CAlJuC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAmJrC,IAAA,KAAA,CACtB,KAAA,CAAA,KAAA,CAAA,UAAA,KAAA,WAAA,GAAA,CAAA,GApJ2D,CAmJrC,CAnJqC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAsJpC,IAAA,KAAA,CACvB,KAAA,CAAA,KAAA,CAAA,cAAA,KAAA,OAAA,GAAA,eAAA,GAvJ2D,cAsJpC,CAtJoC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,yBAAA,EAmL3B7D,IAAI,CACpC,KAAA,CADoC,iBAAA,EAEpCA,IAAI,CACFE,EAAE,CAAC,KAAA,CAAD,cAAA,EADA,cACA,CADA,EAEFI,GAAG,CAEDM,GAAG,CAACA,GAAG,CAAC,KAAA,CAAD,MAAA,EAAc,KAAA,CAAlB,QAAI,CAAJ,EAAkC,KAAA,CAFpC,WAEE,CAFF,EAFD,CAEC,CAFD,EAOFL,GAAG,CACDC,QAAQ,CAENI,GAAG,CACDA,GAAG,CAAC,KAAA,CAAD,cAAA,EAAsB,KAAA,CADxB,WACE,CADF,EAEDA,GAAG,CAAC,KAAA,CAAD,MAAA,EAAc,KAAA,CAJb,QAID,CAFF,CAFG,EADP,eACO,CADP,EAT+B,CAS/B,CAPD,CAFgC,EAnLuB,CAmLvB,CAnLuB,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,wBAAA,EA2M5B,IAAA,KAAA,CAC/B,KAAA,CAAA,KAAA,CAAA,sBAAA,KAAA,SAAA,GACI,KAAA,CAAA,KAAA,CADJ,sBAAA,GA5M2D,gCA2M5B,CA3M4B,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,wBAAA,EAgN5B,IAAA,KAAA,CAC/B,KAAA,CAAA,KAAA,CAjN2D,sBAgN5B,CAhN4B,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,EAoNzB,KAAA,CAAA,KAAA,CApNyB,IAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EAAA,KAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,uBAAA,EAyN7B,IAAA,KAAA,CAzN6B,KAyN7B,CAzN6B,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EA2NrCkD,UAAD,MAACA,EAA2C;MACjE,IAAMC,OAAO,GAAG,IAAA,KAAA,CAAhB,CAAgB,CAAhB;MACA,IAAMC,SAAS,GAAG,IAAA,KAAA,CAAlB,CAAkB,CAAlB;MAEA,IAAMC,KAAK,GAAG;QACZC,QAAQ,EAAE,KAAA,CADE,QAAA;QAEZC,IAAI,EAAE,IAAA,KAAA,CAFM,CAEN,CAFM;QAGZC,QAAQ,EAAE,IAAA,KAAA,CAHE,KAGF,CAHE;QAIZC,QAAQ,EAAE,IAAA,KAAA,CAJZ,CAIY;MAJE,CAAd;MAOA,OAAOvE,KAAK,CAAC,CACXE,IAAI,CAACT,YAAY,CAAC,KAAA,CAAd,KAAa,CAAb,EAAA,IAAA,EAAiC,CAGnCoB,GAAG,CAAA,OAAA,EAAUH,QAAQ,CAAA,MAAA,EAAS,KAAA,CAAT,WAAA,EAA2B,KAAA,CAHb,cAGd,CAAlB,CAHgC,EAInCG,GAAG,CAAA,SAAA,EAJgC,CAIhC,CAJgC,EAKnCA,GAAG,CAACsD,KAAK,CAAN,IAAA,EALgC,CAKhC,CALgC,EAMnCtD,GAAG,CAACsD,KAAK,CAAN,QAAA,EANgC,KAMhC,CANgC,EAOnCtD,GAAG,CAACsD,KAAK,CAAN,QAAA,EAAiB,KAAA,CAPe,SAOhC,CAPgC,EAQnCtD,GAAG,CAAC,KAAA,CAAD,MAAA,EARgC,MAQhC,CARgC,EASnCnB,UAAU,CAAC,KAAA,CATwB,KASzB,CATyB,EAUnCO,IAAI,CAAA,EAAA,EAAK,KAAA,CAV0B,sBAU/B,CAV+B,EAWnCY,GAAG,CAAC,KAAA,CAAD,qBAAA,EAZM,KAYN,CAXgC,CAAjC,CADO,EAcXjB,MAAM,CAAC,KAAA,CAAD,KAAA,EAAA,KAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA;QAAwCqE,OAAAA,EAdnC;MAcL,CAAA,CAAA,CAdK,EAeX/D,IAAI,CAACiE,KAAK,CAAN,QAAA,EAAiB,CAEnBtD,GAAG,CAAC,KAAA,CAAD,MAAA,EAFgB,CAEhB,CAFgB,EAGnBA,GAAG,CAAC,KAAA,CAAD,QAAA,EAHgB,CAGhB,CAHgB,EAInBA,GAAG,CAAC,KAAA,CAAD,SAAA,EAJgB,CAIhB,CAJgB,EAKnBA,GAAG,CAAC,KAAA,CAAD,OAAA,EALgB,CAKhB,CALgB,EAOnBlB,SAAS,CAAC,KAAA,CAPS,KAOV,CAPU,EAQnBM,IAAI,CAAC,CAAC,KAAA,CAAF,MAAC,CAAD,EAAgB,UAAA,KAAA,EAAgC;QAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;QAAA,IAA9BuE,KAA8B,GAAA,KAAA,CAAA,CAAA,CAAA;;QAClD,IAAMtB,IAAI,GAAGuB,OAAO,CAApB,KAAoB,CAApB;;QACA,KAAA,CAAA,oBAAA;;QAEA,IAAIvB,IAAI,KAAK,KAAA,CAAA,KAAA,CAAb,IAAA,EAA8B;UAG5B,KAAA,CAAA,YAAA,CAAkB,KAAA,CAAA,KAAA,CAAlB,IAAA;QAPA;MA7PmD,CA6PnD,CARe,CAAjB,CAfO,CAAD,CAAZ;IAtO2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EA2Q7ClD,KAAK,CAAC,CACpBR,QAAQ,CACN,KAAA,CADM,MAAA,EAENS,IAAI,CAAC,CAAC,KAAA,CAAF,MAAC,CAAD,EAAgB,UAAA,KAAA,EAAgC;MAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;MAAA,IAA9BuE,KAA8B,GAAA,KAAA,CAAA,CAAA,CAAA;;MAClD,IAAMtB,IAAI,GAAGuB,OAAO,CAApB,KAAoB,CAApB;MAEA,KAAA,CAAA,gBAAA,GAAA,IAAA;;MAGA,IAAIvB,IAAI,KAAK,KAAA,CAAA,KAAA,CAAb,IAAA,EAA8B;QAE5B,IAAA,IAAA,EAAU;UACR,KAAA,CAAA,KAAA,CADF,MACE;QADF,CAAA,MAEO;UACL,KAAA,CAAA,KAAA,CAAA,OAAA;QAGF;;QAAA,KAAA,CAAA,gBAAA,GAAA,IAAA;;QAKA,KAAA,CAAA,WAAA;MAnBA;IAHc,CAGd,CAFE,CADY,EA0BpB1D,QAAQ,CACN,KAAA,CADM,UAAA,EAENU,IAAI,CAACS,GAAG,CAAC,KAAA,CAAD,UAAA,EAAJ,KAAI,CAAJ,EAA8B,CAEhCT,IAAI,CAACT,YAAY,CAAC,KAAA,CAAd,KAAa,CAAb,EAA2BE,SAAS,CAAC,KAAA,CAFT,KAEQ,CAApC,CAF4B,EAIhCkB,GAAG,CAAC,KAAA,CAAD,MAAA,EAAc,KAAA,CAJe,UAI7B,CAJ6B,EAKhCA,GAAG,CAAC,KAAA,CAAD,QAAA,EAL6B,CAK7B,CAL6B,EAMhCA,GAAG,CAAC,KAAA,CAAD,UAAA,EAlCa,KAkCb,CAN6B,CAA9B,CAFE,CA1BY,EAsCpBrB,QAAQ,CACN,KAAA,CADM,SAAA,EAKNS,IAAI,CAAC,CAAC,KAAA,CAAF,SAAC,CAAD,EAAmB,UAAA,KAAA,EAAgC;MAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;MAAA,IAA9BuE,KAA8B,GAAA,KAAA,CAAA,CAAA,CAAA;;MACrD,IAAQ3B,mBAAR,GAAgC,KAAA,CAAhC,KAAgC,CAAhC,mBAAA;;MAEA,IAAI2B,KAAK,KAAT,IAAA,EAAoB;QAClB,IAAI3B,mBAAmB,KAAvB,SAAA,EAAuC;UACrC6B,QAAQ,CAARA,OAAAA;QAGF;;QAAA,KAAA,CAAA,eAAA,CALF,IAKE;MALF,CAAA,MAMO;QACL,KAAA,CAAA,eAAA,CAAqB,KAAA,CAArB,gBAAA;MAVA;IA3Cc,CA2Cd,CALE,CAtCY,EAyDpBlF,QAAQ,CACN,KAAA,CADM,YAAA,EAENU,IAAI,CACFE,EAAE,CAAC,KAAA,CAAD,YAAA,EAAoB2D,YAAY,CADhC,MACA,CADA,EAEF9D,IAAI,CAAA,EAAA,EAAK,KAAA,CA7DO,sBA6DZ,CAFF,CAFE,CAzDY,EAgEpBC,IAAI,CACFE,EAAE,CAAC,KAAA,CAAD,YAAA,EAAoB2D,YAAY,CADhC,MACA,CADA,EAEF,CACE7D,IAAI,CAAC,KAAA,CAAD,SAAA,EAAA,IAAA,EAAuB,CAEzBW,GAAG,CAAC,KAAA,CAAD,SAAA,EAFsB,IAEtB,CAFsB,EAIzBA,GAAG,CAAC,KAAA,CAAD,OAAA,EAAe,KAAA,CALtB,QAKO,CAJsB,CAAvB,CADN,EAQEA,GAAG,CACD,KAAA,CADC,QAAA,EAEDf,GAAG,CAAC,KAAA,CAAD,OAAA,EAAe,KAAA,CAAf,QAAA,EAA8B,KAAA,CAVrC,uBAUO,CAFF,CARL,EAaEH,SAAS,CAAC,KAAA,CAfV,KAeS,CAbX,CAFE,EAiBF,CACEkB,GAAG,CAAC,KAAA,CAAD,SAAA,EADL,KACK,CADL,EAEEA,GAAG,CAAC,KAAA,CAAD,MAAA,EAFL,CAEK,CAFL,EAGE,KAAA,CAAA,YAAA,CACEX,IAAI,CACF,KAAA,CADE,qBAAA,EAEF,KAAA,CAFE,MAAA,EAGFA,IAAI,CACFU,EAAE,CACAb,GAAG,CACDO,WAAW,CAACT,GAAG,CAAC,KAAA,CAAL,QAAI,CAAJ,EADV,sBACU,CADV,EAEDS,WAAW,CAACT,GAAG,CAAC,KAAA,CAAL,SAAI,CAAJ,EAAsB,KAAA,CAHnC,sBAGa,CAFV,CADH,EAKAS,WAAW,CAACT,GAAG,CAAC,KAAA,CAAL,QAAI,CAAJ,EAAqB,KAAA,CANhC,sBAMW,CALX,CADA,EAQFK,IAAI,CACFE,EAAE,CAAC,KAAA,CAAD,cAAA,EADA,cACA,CADA,EAGFE,WAAW,CACTJ,IAAI,CAACE,EAAE,CAAC,KAAA,CAAD,SAAA,EAAH,CAAG,CAAH,EAAwB,KAAA,CAAxB,QAAA,EAAuC,KAAA,CADlC,SACL,CADK,EAHT,CAGS,CAHT,EAQFG,QAAQ,CACNL,IAAI,CAACE,EAAE,CAAC,KAAA,CAAD,SAAA,EAAH,CAAG,CAAH,EAAwB,KAAA,CAAxB,QAAA,EAAuC,KAAA,CADrC,SACF,CADE,EAhBR,CAgBQ,CARN,CARF,EAqBF,KAAA,CA7GU,MAwFR,CAHF,CADN,CAHF,CAjBE,CAhEgB,EAmHpB,KAAA,CA9X2D,QA2QvC,CAAD,CA3QwC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAiYxCF,IAAI,CACvBE,EAAE,CAAC,KAAA,CAAD,cAAA,EADqB,eACrB,CADqB,EAEvBK,GAAG,CAACD,GAAG,CAACE,QAAQ,CAAC,KAAA,CAAD,WAAA,EAAmB,CAA5B,CAAS,CAAT,EAAiC,KAAA,CAArC,KAAI,CAAJ,EAFoB,CAEpB,CAFoB,EAGvBF,GAAG,CAACC,GAAG,CAAC,KAAA,CAAD,WAAA,EAAmB,KAAA,CAAvB,KAAI,CAAJ,EApYwD,CAoYxD,CAHoB,CAjYoC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAuY1CP,IAAI,CAErBE,EAAE,CAAC,KAAA,CAAD,WAAA,EAFmB,CAEnB,CAFmB,EAAA,CAAA,EAIrBP,GAAG,CAACM,MAAM,CAAC,KAAA,CAAD,UAAA,EAAkB,KAAA,CA3Y+B,WA2YjD,CAAP,CAJkB,CAvYsC,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EA8YhCE,KAAK,CAAC,CACjC;MACEsE,WAAW,EAAE;QACXC,CAAC,EAAE,KAAA,CADQ,MAAA;QAEXC,YAAY,EAAE,KAAA,CAFH,QAAA;QAGXC,SAAS,EAAE,KAAA,CAnZ4C;MAgZ5C;IADf,CADiC,CAAD,CA9Y2B,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,0BAAA,EAwZ1BzE,KAAK,CAAC,CACvC;MACEsE,WAAW,EAAE;QACXR,KAAK,EAAGY,SAAAA,KAAAA,CAAD,CAACA,EAAD;UAAA,OAA+BlE,GAAG,CAAC,KAAA,CAAD,YAAA,EAAlC,CAAkC,CAAlC;QA3ZgD;MA0Z5C;IADf,CADuC,CAAD,CAxZqB,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,sBAAA,EAga9BR,KAAK,CAAC,CACnC;MACEsE,WAAW,EAAE;QACXK,QAAQ,EAAGD,SAAAA,QAAAA,CAAD,CAACA,EAAD;UAAA,OACR7E,IAAI,CACFE,EAAE,CAAA,CAAA,EAAI2D,YAAY,CADhB,MACA,CADA,EAEFlD,GAAG,CAAC,KAAA,CAAD,qBAAA,EAHG,IAGH,CAFD,CADI;QAna6C;MAka5C;IADf,CADmC,CAAD,CAhayB,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,uBAAA,EA4a5ByC,UAAD,CAACA,EAAD;MAAA,OAC9B,KAAA,CAAA,cAAA,CAAA,QAAA,CAA6BA,CAAC,CAADA,WAAAA,CAAAA,MAAAA,CADC,KAC9B,CAD8B;IA5a6B,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EA+a/BA,UAAD,CAACA,EAAyB;MACrD,KAAA,CAAA,WAAA,CAAA,QAAA,CAA0BA,CAAC,CAADA,WAAAA,CAAAA,MAAAA,CAA1B,KAAA;;MACA,KAAA,CAAA,YAAA,CAAkB,KAAA,CAAA,KAAA,CAAlB,IAAA;;MAKA2B,qBAAqB,CAAC,YAAA;QAAA,OACpBA,qBAAqB,CAAC,YAAA;UAAA,OAAM,KAAA,CAAA,aAAA,CAAA,QAAA,CAAN,CAAM,CAAN;QADF,CACC,CADD;MAtbqC,CAsbtC,CAArBA;IAtb2D,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EA2brC/B,UAAD,IAACA,EAAkB;MACxC,IAAI,KAAA,CAAA,gBAAA,KAAJ,IAAA,EAAoC;QAClC,KAAA,CAAA,UAAA,CAAA,QAAA,CAAyBA,IAAI,GAAA,IAAA,GAA7B,KAAA;;QAIA,KAAA,CAAA,gBAAA,GAAA,IAAA;MAjcyD;IAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EAqclCgC,UAAD,MAACA,EAAoB;MAC7C,IAAA,YAAA,GAA8C,KAAA,CAA9C,KAAA;MAAA,IAAQpC,aAAR,GAAA,YAAA,CAAA,aAAA;MAAA,IAAuBC,kBAAvB,GAAA,YAAA,CAAA,kBAAA;;MAEA,IAAID,aAAa,IAAI,KAAA,CAAA,iBAAA,KAArB,MAAA,EAAwD;QACtD,KAAA,CAAA,iBAAA,GAAA,MAAA;QACAqC,SAAS,CAATA,SAAAA,CAAAA,MAAAA,EAAAA,kBAAAA;MA1cyD;IAAA,CAAA,CAAA;;IAAA,OAAA,KAAA;;;;;WAgB7DnC,SAAAA,iBAAAA,GAAoB;MAClB,IAAIN,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;QAAA,IAAA,SAAA,EAAA,cAAA,EAAA,qBAAA;;QACzB,CAAA,SAAA,GAAA,QAAA,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,cAAA,GAAA,SAAA,CAAA,IAAA,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAA,cAAA,CAAA,gBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,cAAA,EAAA,OAAA,EAA4C,KAA5C,YAAA,CAAA;MAEH;;;;WAEDO,SAAAA,kBAAAA,CAAAA,SAAAA,EAAqC;MACnC,IAAA,YAAA,GAOI,KAPJ,KAAA;MAAA,IACEC,IADF,GAAA,YAAA,CAAA,IAAA;MAAA,IAEEb,cAFF,GAAA,YAAA,CAAA,cAAA;MAAA,IAGEE,UAHF,GAAA,YAAA,CAAA,UAAA;MAAA,IAIEY,sBAJF,GAAA,YAAA,CAAA,sBAAA;MAAA,IAKEP,sBALF,GAAA,YAAA,CAAA,sBAAA;MAAA,IAMEE,aANF,GAAA,YAAA,CAAA,aAAA;;MASA,IAEE,OAAO,KAAP,gBAAA,KAAA,SAAA,IACAI,IAAI,KAAK,KAHX,gBAAA,EAIE;QACA,KAAA,YAAA,CAAA,IAAA;MAGF;;MAAA,KAAA,gBAAA,GAAA,SAAA;;MAEA,IAAIA,IAAI,KAAKE,SAAS,CAAlBF,IAAAA,IAAJ,aAAA,EAA8C;QAC5C,KAAA,eAAA,CAAA,IAAA;MAGF;;MAAA,IAAIE,SAAS,CAATA,cAAAA,KAAJ,cAAA,EAAiD;QAC/C,KAAA,cAAA,CAAA,QAAA,CACEf,cAAc,KAAdA,OAAAA,GAAAA,eAAAA,GADF,cAAA;MAKF;;MAAA,IAAIe,SAAS,CAATA,UAAAA,KAAJ,UAAA,EAAyC;QACvC,KAAA,iBAAA,CAAA,QAAA,CAAgCb,UAAU,KAAVA,OAAAA,GAAAA,IAAAA,GAAhC,KAAA;MAGF;;MAAA,IAAIa,SAAS,CAATA,sBAAAA,KAAJ,sBAAA,EAAiE;QAC/D,KAAA,sBAAA,CAAA,QAAA,CACED,sBAAsB,KAAtBA,SAAAA,GAAAA,sBAAAA,GADF,gCAAA;MAOF;;MAAA,IAAIC,SAAS,CAATA,sBAAAA,KAAJ,sBAAA,EAAiE;QAC/D,KAAA,sBAAA,CAAA,QAAA,CAAA,sBAAA;MAEH;;;;WAEDC,SAAAA,oBAAAA,GAAuB;MACrB,KAAA,eAAA,CAAA,KAAA;MACA,KAAA,oBAAA;;MAEA,IAAIX,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;QAAA,IAAA,UAAA,EAAA,eAAA,EAAA,qBAAA;;QACzB,CAAA,UAAA,GAAA,QAAA,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,eAAA,GAAA,UAAA,CAAA,IAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAA,eAAA,CAAA,mBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,eAAA,EAAA,OAAA,EAA+C,KAA/C,YAAA,CAAA;MAEH;;;;WAkYD0C,SAAAA,MAAAA,GAAS;MAAA,IAAA,MAAA,GAAA,IAAA;;MACP,IAAA,YAAA,GAaI,KAbJ,KAAA;MAAA,IACElC,IADF,GAAA,YAAA,CAAA,IAAA;MAAA,IAEEV,cAFF,GAAA,YAAA,CAAA,cAAA;MAAA,IAGEC,YAHF,GAAA,YAAA,CAAA,YAAA;MAAA,IAIEJ,cAJF,GAAA,YAAA,CAAA,cAAA;MAAA,IAKEE,UALF,GAAA,YAAA,CAAA,UAAA;MAAA,IAMEI,cANF,GAAA,YAAA,CAAA,cAAA;MAAA,IAOE0C,mBAPF,GAAA,YAAA,CAAA,mBAAA;MAAA,IAQE5B,WARF,GAAA,YAAA,CAAA,WAAA;MAAA,IASE6B,YATF,GAAA,YAAA,CAAA,YAAA;MAAA,IAUEC,mBAVF,GAAA,YAAA,CAAA,mBAAA;MAAA,IAWEC,kBAXF,GAAA,YAAA,CAAA,kBAAA;MAAA,IAYEC,mBAZF,GAAA,YAAA,CAAA,mBAAA;MAeA,IAAMzB,MAAM,GAAGzB,UAAU,KAAVA,WAAAA,GAAAA,IAAAA,GAAf,IAAA;MACA,IAAMmD,OAAO,GAAGrD,cAAc,KAA9B,OAAA;MAEA,IAAMsD,iBAAiB,GACrBpD,UAAU,KAAVA,OAAAA,IAA0BA,UAAU,KAApCA,WAAAA,GAAAA,aAAAA,GAEI,KAHN,UAAA;MAKA,IAAMqD,gBAAgB,GACpBrD,UAAU,KAAVA,WAAAA,GAAAA,aAAAA,GAEIA,UAAU,KAAVA,MAAAA,GACAD,WAAW,CAAXA,KAAAA,GACE5B,QAAQ,CACNI,GAAG,CAAC,KAAD,cAAA,EAAsB,KADnB,WACH,CADG,EAEN4E,OAAO,GAAA,CAAA,GAAO,CAHlBpD,CACU,CADVA,GADAC,aAAAA,GAOA,KAVN,UAAA;MAYA,IAAMsD,MAAM,GACVtD,UAAU,KAAVA,MAAAA,GAAAA,CAAAA,GAEID,WAAW,CAAXA,KAAAA,GAAAA,MAAAA,GAEA5B,QAAQ,CAAC,KAAD,WAAA,EAAmB,CALjC,CAKc,CALd;MASA,IAAMoF,OAAO,GAAGJ,OAAO,GAGnB;QAAEK,KAAK,EAAP,CAAA;QAAYpC,KAAK,EAAEK,MAAM,GAAA,SAAA,GAHN;MAGnB,CAHmB,GAInB;QAAEgC,IAAI,EAAN,CAAA;QAAWrC,KAAK,EAAEK,MAAM,GAAA,SAAA,GAJ5B;MAII,CAJJ;MAMA,IAAMiC,QAAQ,GAAG1D,UAAU,KAAVA,WAAAA,GAAAA,YAAAA,GAA4C,KAA7D,QAAA;MAEA,OACEJ,KAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,EAAAA,QAAAA,CAAAA;QACE+D,aAAa,EAAE,CAAC,CAAD,sBAAA,EADjB/D,sBACiB,CADjBA;QAEEgE,WAAW,EAAE,CAAC,CAAD,sBAAA,EAFfhE,sBAEe,CAFfA;QAGEiE,cAAc,EAAE,KAHlBjE,kBAAAA;QAIEkE,oBAAoB,EAAE,KAJxBlE,wBAAAA;QAKE2D,OAAO,EALT3D,OAAAA;QAMEmE,OAAO,EAAE/D,UAAU,KAAVA,WAAAA,IAAAA,cAAAA,IANXJ;MAAAA,CAAAA,EAAAA,mBAAAA,CAAAA,EASEA,KAAAA,CAAAA,aAAAA,CAACpB,QAADoB,CAAAA,IAAAA,EAAAA;QACEoE,QAAQ,EAAE,KADZpE,qBAAAA;QAEEqE,KAAK,EAAE,CACLC,MAAM,CADD,IAAA,EAEL;UACEC,aAAa,EACXnE,UAAU,KAAVA,WAAAA,IAA8B,CAA9BA,OAAAA,GAAAA,aAAAA,GANRJ;QAII,CAFK;MAFTA,CAAAA,EAUEA,KAAAA,CAAAA,aAAAA,CAACpB,QAADoB,CAAAA,IAAAA,EAAAA;QACEqE,KAAK,EAAE,CACLC,MAAM,CADD,OAAA,EAEL;UAAEE,SAAS,EAAE,CAAC;YAAEC,UAAU,EAFrB;UAES,CAAD;QAAb,CAFK,EADTzE,mBACS;MADTA,CAAAA,EAOEA,KAAAA,CAAAA,aAAAA,CAAAA,IAAAA,EAAAA;QACE0E,2BAA2B,EAAE7C,MAAM,IAAIzB,UAAU,KADnDJ,WAAAA;QAEE2E,yBAAyB,EACvB9C,MAAM,IAAIzB,UAAU,KAApByB,WAAAA,GAAAA,qBAAAA,GAHJ7B,MAAAA;QAOEqE,KAAK,EAAEC,MAAM,CAPftE;MAAAA,CAAAA,EASGqD,kBAAkB,CAAC;QAAES,QAAAA,EAhB1B9D;MAgBwB,CAAD,CATrBA,CAPFA,EAoBII,UAAU,KAAVA,WAAAA,GAAAA,IAAAA,GAAoCG,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAClCA,QAAQ,CAARA,EAAAA,KADkCA,SAAAA,IAElCA,QAAQ,CAARA,EAAAA,KAFkCA,OAAAA,GAGlCP,KAAAA,CAAAA,aAAAA,CAAAA,wBAAAA,EAAAA;QACE4E,OAAO,EACLvE,cAAc,GAAG,YAAA;UAAA,OAAM,MAAA,CAAA,YAAA,CAAN,KAAM,CAAN;QAAH,CAAA,GAFlBL;MAAAA,CAAAA,EAKEA,KAAAA,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA;QAAS8D,QAAQ,EAAjB9D,QAAAA;QAA6BqE,KAAK,EARF9D;MAQhCP,CAAAA,CALFA,CAHkCO,GAWlCP,KAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,EAAAA;QACEmE,OAAO,EADTnE,cAAAA;QAEEkE,oBAAoB,EAAE,KAFxBlE;MAAAA,CAAAA,EAIEA,KAAAA,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA;QAAS8D,QAAQ,EAAjB9D,QAAAA;QAA6BqE,KAAK,EA7C5CrE;MA6CUA,CAAAA,CAJFA,CA/BNA,CAVFA,EAkDEA,KAAAA,CAAAA,aAAAA,CAACpB,QAADoB,CAAAA,IAAAA,EAAAA;QAGE6E,IAAI,EAAE,KArDV7E;MAkDEA,CAAAA,CAlDFA,EAuDGI,UAAU,KAAVA,WAAAA,GAAAA,IAAAA,GACCJ,KAAAA,CAAAA,aAAAA,CAACpB,QAADoB,CAAAA,IAAAA,EAAAA;QACE6E,IAAI,EAAEhH,KAAK,CAAC,CACVR,QAAQ,CAAC,KAAD,qBAAA,EAA6B,CACnCU,IAAI,CAACE,EAAE,CAAC,KAAD,qBAAA,EAAH,IAAG,CAAH,EAAuC,CACzCS,GAAG,CAAC,KAAD,UAAA,EADsC,KACtC,CADsC,EAEzCZ,IAAI,CAAA,EAAA,EAAK,YAAA;UAAA,OAAO,MAAA,CAAA,gBAAA,GAAP,KAAA;QA7DrBkC,CA6DgB,CAFqC,CAAvC,CAD+B,CAA7B,CADE,CAAD;MADbA,CAAAA,CAxDJA,EAmEEA,KAAAA,CAAAA,aAAAA,CAACpB,QAADoB,CAAAA,IAAAA,EAAAA;QACE8E,wBAAwB,EAAEjD,MAAM,IAAIzB,UAAU,KADhDJ,WAAAA;QAEE+E,qBAAqB,EAAExE,QAAQ,CAARA,EAAAA,KAFzBP,KAAAA;QAGEoE,QAAQ,EAAE,KAHZpE,kBAAAA;QAIEqE,KAAK,EAAE,CACLC,MAAM,CADD,SAAA,EAEL;UACEE,SAAS,EAAE,CAAC;YAAEC,UAAU,EAD1B;UACc,CAAD,CADb;UAEEO,OAAO,EAAE,KAJN;QAEL,CAFK,EAML5E,UAAU,KAAVA,WAAAA,GAEImD,OAAO,GACL;UAAEK,KAAK,EADF;QACL,CADK,GAEL;UAAEC,IAAI,EAJZzD;QAIM,CAJNA,GAKI,CACEkE,MAAM,CADR,YAAA,EAEEf,OAAO,GAAG;UAAEK,KAAK,EAAV;QAAG,CAAH,GAAuB;UAAEC,IAAI,EAFtC;QAEgC,CAFhC,EAGE;UAAEoB,MAAM,EAAE7E,UAAU,KAAVA,MAAAA,GAAwB,CAAxBA,CAAAA,GAdX;QAcC,CAHF,CAXC,EAJTJ,WAIS;MAJTA,CAAAA,EAuBGoD,mBAAmB,CAAC;QAAEU,QAAAA,EApG/B;MAoG6B,CAAD,CAvBtB9D,CAnEFA,CATFA,CADF;;;;;EAngBoCA,KAAK,CAACC,S,CAAzBF;;SAAAA,U;;gBAAAA,U,kBACG;EACpBG,cAAc,EAAEC,WAAW,CAAXA,KAAAA,GAAAA,MAAAA,GADI,OAAA;EAEpBC,UAAU,EAFU,OAAA;EAGpBC,cAAc,EAHM,IAAA;EAIpBC,YAAY,EACVC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IACAA,QAAQ,CAARA,EAAAA,KADAA,SAAAA,IAEAA,QAAQ,CAARA,EAAAA,KAPkB,OAAA;EAQpBC,cAAc,EARM,EAAA;EASpBC,sBAAsB,EATF,GAAA;EAUpBC,mBAAmB,EAVC,SAAA;EAWpBC,aAAa,EAXO,KAAA;EAYpBC,kBAAkB,EAZE;AAAA,C;;AA8mBxB,IAAM0D,MAAM,GAAG7C,UAAU,CAAVA,MAAAA,CAAkB;EAC/ByD,SAAS,EAAE;IACTC,eAAe,EADN,OAAA;IAETC,QAAQ,EAHqB;EACpB,CADoB;EAK/BC,YAAY,EAAE;IACZpD,QAAQ,EADI,UAAA;IAEZqD,GAAG,EAFS,CAAA;IAGZC,MAAM,EAHM,CAAA;IAIZ/D,KAAK,EATwB;EAKjB,CALiB;EAW/BgE,OAAO,EAAE;IACPC,IAAI,EAZyB;EAWtB,CAXsB;EAc/BC,IAAI,EAAA,aAAA,CAAA;IACFD,IAAI,EADF;EAAA,CAAA,EAEClF,QAAQ,CAARA,MAAAA,CAAgB;IAGjBoF,GAAG,EAHc,IAAA;IAIjBC,OAAO,EAAE;MAAEC,QAAQ,EApBzB;IAoBe;EAJQ,CAAhBtF,CAFD;AAd2B,CAAlBkB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ||\n                Platform.OS === 'windows' ||\n                Platform.OS === 'macos' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}