{"ast":null,"code":"import * as React from 'react';\nimport { CurrentRenderContext } from '@react-navigation/core';\nimport ServerContext from \"./ServerContext\";\nexport default React.forwardRef(function ServerContainer(_ref, ref) {\n  var children = _ref.children,\n      location = _ref.location;\n  React.useEffect(function () {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  var current = {};\n\n  if (ref) {\n    var value = {\n      getCurrentOptions: function getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      ref.current = value;\n    }\n  }\n\n  return React.createElement(ServerContext.Provider, {\n    value: {\n      location: location\n    }\n  }, React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["React","children","location","console","current","value","getCurrentOptions","ref","ServerContext","CurrentRenderContext"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,oBAAA,QAAA,wBAAA;AACA,OAAA,aAAA;AAcA,eAAeA,KAAK,CAALA,UAAAA,CAAiB,SAAA,eAAA,CAAA,IAAA,EAAA,GAAA,EAG9B;EAFEC,IAAAA,QAEF,GAAA,IAAA,CAFEA,QAAAA;EAAAA,IAAUC,QAEZ,GAAA,IAAA,CAFYA,QAAVD;EAGFD,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBG,OAAO,CAAPA,KAAAA,CADFH,sFACEG;EADFH,CAAAA,EAAAA,EAAAA;EAMA,IAAMI,OAA6B,GAAnC,EAAA;;EAEA,IAAA,GAAA,EAAS;IACP,IAAMC,KAAK,GAAG;MACZC,iBADY,EAAA,SAAA,iBAAA,GACQ;QAClB,OAAOF,OAAO,CAAd,OAAA;MAFJ;IAAc,CAAd;;IAUA,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;MAC7BG,GAAG,CADL,KACK,CAAHA;IADF,CAAA,MAEO;MAELA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;IAEH;EAED;;EAAA,OACEP,KAAAA,CAAAA,aAAAA,CAACQ,aAADR,CAAAA,QAAAA,EAAAA;IAAwBK,KAAK,EAAE;MAAEH,QAAAA,EAAjCF;IAA+B;EAA/BA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAACS,oBAADT,CAAAA,QAAAA,EAAAA;IAA+BK,KAAK,EAApCL;EAAAA,CAAAA,EAjCSA,QAiCTA,CADFA,CADF;AA/BF,CAAeA,CAAf","sourcesContent":["import * as React from 'react';\nimport { CurrentRenderContext } from '@react-navigation/core';\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}