{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlay = _ref.cardOverlay,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      mode = _ref.mode,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      transitionSpec = _ref.transitionSpec;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.route;\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.route;\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.route;\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","useTheme","pointerEvents","setPointerEvents","React","listener","value","isCurrentHeaderShown","previousScene","current","next","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","style","overflow","StyleSheet","styles","PreviousSceneContext","HeaderShownContext","HeaderHeightContext","scenes","onContentHeightChange","container","flex","flexDirection"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,SAAA,QAAA,QAAA,0BAAA;AAEA,OAAA,IAAA;AACA,OAAA,mBAAA;AACA,OAAA,kBAAA;AACA,OAAA,oBAAA;AAgEA,IAAMA,OAAO,GAAb,GAAA;;AAEA,SAAA,aAAA,CAAA,IAAA,EA4CU;EA3CRC,IAAAA,MA2CQ,GAAA,IAAA,CA3CRA,MAAAA;EAAAA,IACAC,WA0CQ,GAAA,IAAA,CA1CRA,WADAD;EAAAA,IAEAE,kBAyCQ,GAAA,IAAA,CAzCRA,kBAFAF;EAAAA,IAGAG,iBAwCQ,GAAA,IAAA,CAxCRA,iBAHAH;EAAAA,IAIAI,SAuCQ,GAAA,IAAA,CAvCRA,SAJAJ;EAAAA,IAKAK,qBAsCQ,GAAA,IAAA,CAtCRA,qBALAL;EAAAA,IAMAM,OAqCQ,GAAA,IAAA,CArCRA,OANAN;EAAAA,IAOAO,OAoCQ,GAAA,IAAA,CApCRA,OAPAP;EAAAA,IAQAQ,OAmCQ,GAAA,IAAA,CAnCRA,OARAR;EAAAA,IASAS,gBAkCQ,GAAA,IAAA,CAlCRA,gBATAT;EAAAA,IAUAU,cAiCQ,GAAA,IAAA,CAjCRA,cAVAV;EAAAA,IAWAW,uBAgCQ,GAAA,IAAA,CAhCRA,uBAXAX;EAAAA,IAYAY,qBA+BQ,GAAA,IAAA,CA/BRA,qBAZAZ;EAAAA,IAaAa,gBA8BQ,GAAA,IAAA,CA9BRA,gBAbAb;EAAAA,IAcAc,eA6BQ,GAAA,IAAA,CA7BRA,eAdAd;EAAAA,IAeAe,IA4BQ,GAAA,IAAA,CA5BRA,IAfAf;EAAAA,IAgBAgB,UA2BQ,GAAA,IAAA,CA3BRA,UAhBAhB;EAAAA,IAiBAiB,WA0BQ,GAAA,IAAA,CA1BRA,WAjBAjB;EAAAA,IAkBAkB,uBAyBQ,GAAA,IAAA,CAzBRA,uBAlBAlB;EAAAA,IAmBAmB,iBAwBQ,GAAA,IAAA,CAxBRA,iBAnBAnB;EAAAA,IAoBAoB,YAuBQ,GAAA,IAAA,CAvBRA,YApBApB;EAAAA,IAqBAqB,oBAsBQ,GAAA,IAAA,CAtBRA,oBArBArB;EAAAA,IAsBAsB,mBAqBQ,GAAA,IAAA,CArBRA,mBAtBAtB;EAAAA,IAuBAuB,KAoBQ,GAAA,IAAA,CApBRA,KAvBAvB;EAAAA,IAwBAwB,MAmBQ,GAAA,IAAA,CAnBRA,MAxBAxB;EAAAA,IAyBAyB,YAkBQ,GAAA,IAAA,CAlBRA,YAzBAzB;EAAAA,IA0BA0B,WAiBQ,GAAA,IAAA,CAjBRA,WA1BA1B;EAAAA,IA2BA2B,kBAgBQ,GAAA,IAAA,CAhBRA,kBA3BA3B;EAAAA,IA4BA4B,mBAeQ,GAAA,IAAA,CAfRA,mBA5BA5B;EAAAA,IA6BA6B,iBAcQ,GAAA,IAAA,CAdRA,iBA7BA7B;EAAAA,IA8BA8B,eAaQ,GAAA,IAAA,CAbRA,eA9BA9B;EAAAA,IA+BA+B,YAYQ,GAAA,IAAA,CAZRA,YA/BA/B;EAAAA,IAgCAgC,cAWQ,GAAA,IAAA,CAXRA,cAhCAhC;EAAAA,IAiCAiC,eAUQ,GAAA,IAAA,CAVRA,eAjCAjC;EAAAA,IAkCAkC,iBASQ,GAAA,IAAA,CATRA,iBAlCAlC;EAAAA,IAmCAmC,YAQQ,GAAA,IAAA,CARRA,YAnCAnC;EAAAA,IAoCAoC,WAOQ,GAAA,IAAA,CAPRA,WApCApC;EAAAA,IAqCAqC,mBAMQ,GAAA,IAAA,CANRA,mBArCArC;EAAAA,IAsCAsC,iBAKQ,GAAA,IAAA,CALRA,iBAtCAtC;EAAAA,IAuCAuC,kBAIQ,GAAA,IAAA,CAJRA,kBAvCAvC;EAAAA,IAwCAwC,gBAGQ,GAAA,IAAA,CAHRA,gBAxCAxC;EAAAA,IAyCAyC,KAEQ,GAAA,IAAA,CAFRA,KAzCAzC;EAAAA,IA0CA0C,cACQ,GAAA,IAAA,CADRA,cA1CA1C;;EA4CA,IAAM2C,UAAU,GAAVA,SAAAA,UAAAA,GAAmB;IACvB,IAAQC,KAAR,GAAkBH,KAAlB,CAAA,KAAA;IAEAR,eAAe,KAAfA,IAAAA,IAAAA,eAAe,KAAA,KAAfA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAG;MAAEW,KAAAA,EAAL;IAAG,CAAH,EAAfX,KAAe,CAAfA;IACAP,WAAW,CAAC;MAAEkB,KAAAA,EAJhB;IAIc,CAAD,CAAXlB;EAJF,CAAA;;EAOA,IAAMmB,WAAW,GAAXA,SAAAA,WAAAA,GAAoB;IACxB,IAAQD,KAAR,GAAkBH,KAAlB,CAAA,KAAA;IAEAR,eAAe,KAAfA,IAAAA,IAAAA,eAAe,KAAA,KAAfA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAG;MAAEW,KAAAA,EAAL;IAAG,CAAH,EAAfX,IAAe,CAAfA;IACAR,YAAY,CAAC;MAAEmB,KAAAA,EAJjB;IAIe,CAAD,CAAZnB;EAJF,CAAA;;EAOA,IAAMqB,kBAAkB,GAAlBA,SAAAA,kBAAAA,GAA2B;IAC/B,IAAQF,KAAR,GAAkBH,KAAlB,CAAA,KAAA;IAEAZ,iBAAiB,KAAjBA,IAAAA,IAAAA,iBAAiB,KAAA,KAAjBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAAA,EAAAA;IACAG,cAAc,KAAdA,IAAAA,IAAAA,cAAc,KAAA,KAAdA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,cAAc,CAAG;MAAEY,KAAAA,EAJrB;IAImB,CAAH,CAAdZ;EAJF,CAAA;;EAOA,IAAMe,qBAAqB,GAArBA,SAAAA,qBAAAA,GAA8B;IAClC,IAAQH,KAAR,GAAkBH,KAAlB,CAAA,KAAA;IAEAd,kBAAkB,KAAlBA,IAAAA,IAAAA,kBAAkB,KAAA,KAAlBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAAA,EAAAA;IACAG,eAAe,KAAfA,IAAAA,IAAAA,eAAe,KAAA,KAAfA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAG;MAAEc,KAAAA,EAJtB;IAIoB,CAAH,CAAfd;EAJF,CAAA;;EAOA,IAAMkB,gBAAgB,GAAhBA,SAAAA,gBAAAA,GAAyB;IAC7B,IAAQJ,KAAR,GAAkBH,KAAlB,CAAA,KAAA;IAEAV,YAAY,KAAZA,IAAAA,IAAAA,YAAY,KAAA,KAAZA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAG;MAAEa,KAAAA,EAHnB;IAGiB,CAAH,CAAZb;EAHF,CAAA;;EAMA,IAAMkB,gBAAgB,GAAhBA,SAAAA,gBAAAA,CAAmB,KAAnBA,EAMA;IALJ3C,IAAAA,OAKI,GAAA,KAAA,CALJA,OAAAA;IAAAA,IACAC,OAII,GAAA,KAAA,CAJJA,OADAD;IAMA,IAAQsC,KAAR,GAAkBH,KAAlB,CAAA,KAAA;;IAEA,IAAI,CAAJ,OAAA,EAAc;MACZb,mBAAmB,KAAnBA,IAAAA,IAAAA,mBAAmB,KAAA,KAAnBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAmB,CADrB,IACqB,CAAnBA;IADF,CAAA,MAEO,IAAI5B,MAAM,IAAV,OAAA,EAAuB;MAC5B4B,mBAAmB,KAAnBA,IAAAA,IAAAA,mBAAmB,KAAA,KAAnBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAmB,CADd,KACc,CAAnBA;IADK,CAAA,MAEA;MACLD,kBAAkB,KAAlBA,IAAAA,IAAAA,kBAAkB,KAAA,KAAlBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAAA,EAAAA;IAGFO;;IAAAA,iBAAiB,KAAjBA,IAAAA,IAAAA,iBAAiB,KAAA,KAAjBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,CAAG;MAAEU,KAAAA,EAAL;IAAG,CAAH,EAjBnB,OAiBmB,CAAjBV;EAjBF,CAAA;;EAoBA,IAAMgB,MAAM,GAAG;IACbC,GAAG,EADU,gBAAA;IAEbC,KAAK,EAFQ,kBAAA;IAGbC,MAAM,EAHO,mBAAA;IAIbC,IAAI,EAJN;EAAe,CAAf;;EAOA,IAAA,SAAA,GAAmBE,QAAnB,EAAA;EAAA,IAAQD,MAAR,GAAA,SAAA,CAAA,MAAA;;EAEA,IAAA,eAAA,GAA0CI,KAAK,CAALA,QAAAA,CAA1C,UAA0CA,CAA1C;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,aAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAsBC,gBAAtB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EAIAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IAAA,IAAA,oBAAA,EAAA,qBAAA;;IAEpB,IAAMC,QAAQ,GAAA,CAAA,oBAAA,GAAGnB,KAAK,CAALA,QAAAA,CAAH,IAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAGA,oBAAAA,CAAH,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,qBAAAA,CAAAA,IAAAA,CAAAA,oBAAAA,EACf,UAAA,KAAA,EAAkC;MAA/BoB,IAAAA,KAA+B,GAAA,KAAA,CAA/BA,KAAAA;MACDH,gBAAgB,CAACG,KAAK,IAALA,OAAAA,GAAAA,UAAAA,GAFJpB,MAEG,CAAhBiB;IAFJ,CAAiBjB,CAAjB;IAMA,OAAO,YAAM;MACX,IAAA,QAAA,EAAc;QAAA,IAAA,qBAAA,EAAA,qBAAA;;QAEZ,CAAA,qBAAA,GAAA,KAAK,CAAL,QAAA,CAAA,IAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAA,qBAAA,CAAA,cAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,qBAAA,EAAA,QAAA,CAAA;MAHJ;IARFkB,CAQE;EARFA,CAAAA,EAcG,CAAA,aAAA,EAAgBlB,KAAK,CAALA,QAAAA,CAdnBkB,IAcG,CAdHA;EAgBA,IAAMG,oBAAoB,GAAG9C,UAAU,KAAVA,MAAAA,IAAyBC,WAAW,KAAjE,KAAA;EACA,IAAM8C,aAAa,GAAGlD,gBAAgB,CAAC;IAAE+B,KAAK,EAAEH,KAAK,CAArD;EAAuC,CAAD,CAAtC;EAEA,OACEkB,KAAAA,CAAAA,aAAAA,CAAAA,IAAAA,EAAAA;IACEpC,KAAK,EADPoC,KAAAA;IAEElD,gBAAgB,EAFlBkD,gBAAAA;IAGEnC,MAAM,EAHRmC,MAAAA;IAIET,MAAM,EAJRS,MAAAA;IAKEpD,OAAO,EALToD,OAAAA;IAMEK,OAAO,EAAEvB,KAAK,CAALA,QAAAA,CANXkB,OAAAA;IAOEM,IAAI,EAAExB,KAAK,CAALA,QAAAA,CAPRkB,IAAAA;IAQErD,OAAO,EARTqD,OAAAA;IASEO,MAAM,EATRP,UAAAA;IAUEQ,OAAO,EAVTR,WAAAA;IAWES,OAAO,EAXTT,WAAAA;IAYEU,cAAc,EAZhBV,kBAAAA;IAaEW,aAAa,EAbfX,iBAAAA;IAcEY,YAAY,EAddZ,gBAAAA;IAeEa,cAAc,EAfhBb,kBAAAA;IAgBEc,iBAAiB,EAhBnBd,qBAAAA;IAiBE5B,YAAY,EAjBd4B,gBAAAA;IAkBEjD,cAAc,EAlBhBiD,cAAAA;IAmBEhD,uBAAuB,EAnBzBgD,uBAAAA;IAoBE/C,qBAAqB,EApBvB+C,qBAAAA;IAqBEjB,cAAc,EArBhBiB,cAAAA;IAsBEe,iBAAiB,EAtBnBf,qBAAAA;IAuBEgB,2BAA2B,EAAE,CAvB/BhB,OAAAA;IAwBEiB,yBAAyB,EAAEpE,OAAO,GAAA,MAAA,GAxBpCmD,qBAAAA;IAyBEF,aAAa,EAAEzD,MAAM,GAAA,UAAA,GAzBvB2D,aAAAA;IA0BEkB,mBAAmB,EAAE7D,UAAU,KAAVA,QAAAA,IAA2BD,IAAI,KA1BtD4C,MAAAA;IA2BEmB,cAAc,EAAE3D,iBAAiB,GAAG;MAAE4D,SAAS,EAAd;IAAG,CAAH,GA3BnCpB,IAAAA;IA4BEqB,YAAY,EAAE,CAAC;MAAEC,eAAe,EAAE1B,MAAM,CAA1B;IAAC,CAAD,EA5BhBI,SA4BgB,CA5BhBA;IA6BEuB,KAAK,EAAE,CACL;MAGEC,QAAQ,EAAEnF,MAAM,GAAA,SAAA,GAJb;IACL,CADK,EAMLoF,UAAU,CAnCdzB,YA6BS;EA7BTA,CAAAA,EAsCEA,KAAAA,CAAAA,aAAAA,CAAAA,IAAAA,EAAAA;IAAMuB,KAAK,EAAEG,MAAM,CAAnB1B;EAAAA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAAAA,IAAAA,EAAAA;IAAMuB,KAAK,EAAEG,MAAM,CAAnB1B;EAAAA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAAC2B,oBAAD3B,CAAAA,QAAAA,EAAAA;IAA+BE,KAAK,EAApCF;EAAAA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAAC4B,kBAAD5B,CAAAA,QAAAA,EAAAA;IACEE,KAAK,EAAEvC,mBAAmB,IAD5BqC;EAAAA,CAAAA,EAGEA,KAAAA,CAAAA,aAAAA,CAAC6B,mBAAD7B,CAAAA,QAAAA,EAAAA;IAA8BE,KAAK,EAAnCF;EAAAA,CAAAA,EACGvB,WAAW,CAAC;IAAEQ,KAAK,EAAEH,KAAK,CAPrCkB;EAOuB,CAAD,CADdA,CAHFA,CADFA,CADFA,CADFA,EAYG3C,UAAU,KAAVA,QAAAA,GACGmB,YAAY,CAAC;IACXpB,IAAI,EADO,QAAA;IAEXS,MAFW,EAAA,MAAA;IAGX0B,MAHW,EAAA,MAAA;IAIXuC,MAAM,EAAE,CAAA,aAAA,EAJG,KAIH,CAJG;IAKX5E,gBALW,EAAA,gBAAA;IAMXC,eANW,EAAA,eAAA;IAOXL,gBAPW,EAAA,gBAAA;IAQXiE,iBAAiB,EARN,uBAAA;IASXgB,qBAAqB,EAV1B1E;EACgB,CAAD,CADfA,GAnDP,IAuCI2C,CAtCFA,CADF;AAqEF;;AAAA,eAAeA,KAAK,CAALA,IAAAA,CAAf,aAAeA,CAAf;AAEA,IAAM0B,MAAM,GAAGD,UAAU,CAAVA,MAAAA,CAAkB;EAC/BO,SAAS,EAAE;IACTC,IAAI,EADK,CAAA;IAETC,aAAa,EAHgB;EACpB,CADoB;EAK/BpD,KAAK,EAAE;IACLmD,IAAI,EANR;EAKS;AALwB,CAAlBR,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}