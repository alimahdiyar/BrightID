{"ast":null,"code":"'use strict';\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nvar emptyFunction = function emptyFunction() {};\n\nfunction supportsPassiveEvents() {\n  var supported = false;\n\n  if (canUseDOM) {\n    try {\n      var options = {};\n      Object.defineProperty(options, 'passive', {\n        get: function get() {\n          supported = true;\n          return false;\n        }\n      });\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    } catch (e) {}\n  }\n\n  return supported;\n}\n\nvar canUsePassiveEvents = supportsPassiveEvents();\n\nfunction getOptions(options) {\n  if (options == null) {\n    return false;\n  }\n\n  return canUsePassiveEvents ? options : Boolean(options.capture);\n}\n\nfunction isPropagationStopped() {\n  return this.cancelBubble;\n}\n\nfunction isDefaultPrevented() {\n  return this.defaultPrevented;\n}\n\nfunction normalizeEvent(event) {\n  event.nativeEvent = event;\n  event.persist = emptyFunction;\n  event.isDefaultPrevented = isDefaultPrevented;\n  event.isPropagationStopped = isPropagationStopped;\n  return event;\n}\n\nexport default function createEventHandle(type, options) {\n  var opts = getOptions(options);\n  return function (target, listener) {\n    if (target == null || typeof target.addEventListener !== 'function') {\n      throw new Error('createEventHandle: called on an invalid target.');\n    }\n\n    var element = target;\n\n    if (listener != null) {\n      var compatListener = function compatListener(e) {\n        return listener(normalizeEvent(e));\n      };\n\n      element.addEventListener(type, compatListener, opts);\n      return function removeListener() {\n        if (element != null) {\n          element.removeEventListener(type, compatListener, opts);\n        }\n      };\n    } else {\n      return emptyFunction;\n    }\n  };\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/modules/createEventHandle/index.js"],"names":["emptyFunction","supported","options","Object","get","window","canUsePassiveEvents","supportsPassiveEvents","Boolean","event","opts","getOptions","target","element","listener","compatListener","normalizeEvent"],"mappings":"AAQA;;AAEA,SAAA,SAAA,QAAA,+BAAA;;AAEA,IAAIA,aAAa,GAAG,SAAA,aAAA,GAAyB,CAA7C,CAAA;;AAEA,SAAA,qBAAA,GAAiC;EAC/B,IAAIC,SAAS,GAAb,KAAA;;EAGA,IAAA,SAAA,EAAe;IACb,IAAI;MACF,IAAIC,OAAO,GAAX,EAAA;MACAC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAA0C;QACxCC,GAAG,EAAE,SAAA,GAAA,GAAe;UAClBH,SAAS,GAATA,IAAAA;UACA,OAAA,KAAA;QAHJE;MAA0C,CAA1CA;MAMAE,MAAM,CAANA,gBAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,OAAAA;MACAA,MAAM,CAANA,mBAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,OAAAA;IACA,CAVF,CAUE,OAAA,CAAA,EAAU,CACb;EAED;;EAAA,OAAA,SAAA;AAGF;;AAAA,IAAIC,mBAAmB,GAAGC,qBAA1B,EAAA;;AAEA,SAAA,UAAA,CAAA,OAAA,EAA6B;EAC3B,IAAIL,OAAO,IAAX,IAAA,EAAqB;IACnB,OAAA,KAAA;EAGF;;EAAA,OAAOI,mBAAmB,GAAA,OAAA,GAAaE,OAAO,CAACN,OAAO,CAAtD,OAA8C,CAA9C;AASF;;AAAA,SAAA,oBAAA,GAAgC;EAC9B,OAAO,KAAP,YAAA;AAGF;;AAAA,SAAA,kBAAA,GAA8B;EAC5B,OAAO,KAAP,gBAAA;AAGF;;AAAA,SAAA,cAAA,CAAA,KAAA,EAA+B;EAC7BO,KAAK,CAALA,WAAAA,GAAAA,KAAAA;EACAA,KAAK,CAALA,OAAAA,GAAAA,aAAAA;EACAA,KAAK,CAALA,kBAAAA,GAAAA,kBAAAA;EACAA,KAAK,CAALA,oBAAAA,GAAAA,oBAAAA;EACA,OAAA,KAAA;AAOF;;AAAA,eAAe,SAAA,iBAAA,CAAA,IAAA,EAAA,OAAA,EAA0C;EACvD,IAAIC,IAAI,GAAGC,UAAU,CAArB,OAAqB,CAArB;EACA,OAAO,UAAA,MAAA,EAAA,QAAA,EAA4B;IACjC,IAAIC,MAAM,IAANA,IAAAA,IAAkB,OAAOA,MAAM,CAAb,gBAAA,KAAtB,UAAA,EAAqE;MACnE,MAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;IAGF;;IAAA,IAAIC,OAAO,GAAX,MAAA;;IAEA,IAAIC,QAAQ,IAAZ,IAAA,EAAsB;MACpB,IAAIC,cAAc,GAAG,SAAA,cAAA,CAAA,CAAA,EAA2B;QAC9C,OAAOD,QAAQ,CAACE,cAAc,CAA9B,CAA8B,CAAf,CAAf;MADF,CAAA;;MAIAH,OAAO,CAAPA,gBAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAAA,IAAAA;MACA,OAAO,SAAA,cAAA,GAA0B;QAC/B,IAAIA,OAAO,IAAX,IAAA,EAAqB;UACnBA,OAAO,CAAPA,mBAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAAA,IAAAA;QAEH;MAJD,CAAA;IANF,CAAA,MAWO;MACL,OAAA,aAAA;IAEH;EArBD,CAAA;AAsBD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nvar emptyFunction = function emptyFunction() {};\n\nfunction supportsPassiveEvents() {\n  var supported = false; // Check if browser supports event with passive listeners\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n\n  if (canUseDOM) {\n    try {\n      var options = {};\n      Object.defineProperty(options, 'passive', {\n        get: function get() {\n          supported = true;\n          return false;\n        }\n      });\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    } catch (e) {}\n  }\n\n  return supported;\n}\n\nvar canUsePassiveEvents = supportsPassiveEvents();\n\nfunction getOptions(options) {\n  if (options == null) {\n    return false;\n  }\n\n  return canUsePassiveEvents ? options : Boolean(options.capture);\n}\n/**\n * Shim generic API compatibility with ReactDOM's synthetic events, without needing the\n * large amount of code ReactDOM uses to do this. Ideally we wouldn't use a synthetic\n * event wrapper at all.\n */\n\n\nfunction isPropagationStopped() {\n  return this.cancelBubble;\n}\n\nfunction isDefaultPrevented() {\n  return this.defaultPrevented;\n}\n\nfunction normalizeEvent(event) {\n  event.nativeEvent = event;\n  event.persist = emptyFunction;\n  event.isDefaultPrevented = isDefaultPrevented;\n  event.isPropagationStopped = isPropagationStopped;\n  return event;\n}\n/**\n *\n */\n\n\nexport default function createEventHandle(type, options) {\n  var opts = getOptions(options);\n  return function (target, listener) {\n    if (target == null || typeof target.addEventListener !== 'function') {\n      throw new Error('createEventHandle: called on an invalid target.');\n    }\n\n    var element = target;\n\n    if (listener != null) {\n      var compatListener = function compatListener(e) {\n        return listener(normalizeEvent(e));\n      };\n\n      element.addEventListener(type, compatListener, opts);\n      return function removeListener() {\n        if (element != null) {\n          element.removeEventListener(type, compatListener, opts);\n        }\n      };\n    } else {\n      return emptyFunction;\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}