{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifiedConnectionsSelector = exports.updateConnections = exports.staleConnection = exports.setReportReason = exports.setFirstRecoveryTime = exports.setFilters = exports.setConnectionsSort = exports.setConnectionsSearchOpen = exports.setConnectionsSearch = exports.setConnections = exports.setConnectionVerifications = exports.setConnectionLevel = exports.selectConnectionById = exports.selectAllConnections = exports.reportAndHideConnection = exports.recoveryConnectionsSelector = exports.firstRecoveryTimeSelector = exports.deleteConnection = exports.default = exports.connectionTotal = exports.addConnection = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _immer = require(\"immer\");\n\nvar _ramda = require(\"ramda\");\n\nvar _constants = require(\"../utils/constants\");\n\nvar _resetStore = require(\"../actions/resetStore\");\n\nvar connectionsAdapter = (0, _toolkit.createEntityAdapter)();\nvar initialState = {\n  connections: connectionsAdapter.getInitialState(),\n  connectionsSort: '',\n  searchParam: '',\n  searchOpen: false,\n  firstRecoveryTime: 0,\n  filters: [_constants.connection_levels.SUSPICIOUS, _constants.connection_levels.JUST_MET, _constants.connection_levels.ALREADY_KNOWN, _constants.connection_levels.RECOVERY]\n};\nvar connectionsSlice = (0, _toolkit.createSlice)({\n  name: 'connections',\n  initialState: initialState,\n  reducers: {\n    setConnections: function setConnections(state, action) {\n      state.connections = connectionsAdapter.setAll(state.connections, action);\n    },\n    setConnectionsSearch: function setConnectionsSearch(state, action) {\n      state.searchParam = action.payload;\n    },\n    setConnectionsSearchOpen: function setConnectionsSearchOpen(state, action) {\n      state.searchOpen = action.payload;\n    },\n    setConnectionsSort: function setConnectionsSort(state, action) {\n      state.connectionsSort = action.payload;\n    },\n    updateConnections: function updateConnections(state, action) {\n      console.log('updating connections state');\n\n      var _original = (0, _immer.original)(state.connections),\n          entities = _original.entities,\n          ids = _original.ids;\n\n      if (ids.length !== action.payload.length) {\n        var payloadIds = action.payload.map(function (conn) {\n          return conn.id;\n        });\n        var diff = (0, _ramda.difference)(ids, payloadIds);\n        diff.forEach(function (id) {\n          if (entities[id].status === 'verified') {\n            state.connections = connectionsAdapter.updateOne(state.connections, {\n              id: id,\n              changes: {\n                status: 'deleted'\n              }\n            });\n          }\n        });\n      }\n\n      state.connections = connectionsAdapter.updateMany(state.connections, action.payload.map(function (conn) {\n        conn.status = 'verified';\n        return {\n          id: conn.id,\n          changes: conn\n        };\n      }));\n    },\n    deleteConnection: function deleteConnection(state, action) {\n      state.connections = connectionsAdapter.removeOne(state.connections, action);\n    },\n    addConnection: function addConnection(state, action) {\n      state.connections = connectionsAdapter.upsertOne(state.connections, action);\n    },\n    reportAndHideConnection: function reportAndHideConnection(state, action) {\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          reason = _action$payload.reason;\n      var update = {\n        id: id,\n        changes: {\n          level: _constants.connection_levels.REPORTED,\n          reportReason: reason\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    staleConnection: function staleConnection(state, action) {\n      var update = {\n        id: action.payload,\n        changes: {\n          status: 'stale'\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setConnectionLevel: function setConnectionLevel(state, action) {\n      var _action$payload2 = action.payload,\n          id = _action$payload2.id,\n          level = _action$payload2.level;\n      var update = {\n        id: id,\n        changes: {\n          level: level\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setReportReason: function setReportReason(state, action) {\n      var _action$payload3 = action.payload,\n          id = _action$payload3.id,\n          reason = _action$payload3.reason;\n      var update = {\n        id: id,\n        changes: {\n          reportReason: reason\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setConnectionVerifications: function setConnectionVerifications(state, action) {\n      var _action$payload4 = action.payload,\n          id = _action$payload4.id,\n          verifications = _action$payload4.verifications;\n      var update = {\n        id: id,\n        changes: {\n          verifications: verifications\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setFilters: function setFilters(state, action) {\n      state.filters = action.payload;\n    },\n    setFirstRecoveryTime: function setFirstRecoveryTime(state, action) {\n      state.firstRecoveryTime = action.payload;\n    }\n  },\n  extraReducers: (0, _defineProperty2.default)({}, _resetStore.RESET_STORE, function () {\n    return initialState;\n  })\n});\nvar _connectionsSlice$act = connectionsSlice.actions,\n    setConnections = _connectionsSlice$act.setConnections,\n    setConnectionsSearch = _connectionsSlice$act.setConnectionsSearch,\n    setConnectionsSearchOpen = _connectionsSlice$act.setConnectionsSearchOpen,\n    setConnectionsSort = _connectionsSlice$act.setConnectionsSort,\n    updateConnections = _connectionsSlice$act.updateConnections,\n    deleteConnection = _connectionsSlice$act.deleteConnection,\n    addConnection = _connectionsSlice$act.addConnection,\n    reportAndHideConnection = _connectionsSlice$act.reportAndHideConnection,\n    staleConnection = _connectionsSlice$act.staleConnection,\n    setFilters = _connectionsSlice$act.setFilters,\n    setConnectionLevel = _connectionsSlice$act.setConnectionLevel,\n    setConnectionVerifications = _connectionsSlice$act.setConnectionVerifications,\n    setReportReason = _connectionsSlice$act.setReportReason,\n    setFirstRecoveryTime = _connectionsSlice$act.setFirstRecoveryTime;\nexports.setFirstRecoveryTime = setFirstRecoveryTime;\nexports.setReportReason = setReportReason;\nexports.setConnectionVerifications = setConnectionVerifications;\nexports.setConnectionLevel = setConnectionLevel;\nexports.setFilters = setFilters;\nexports.staleConnection = staleConnection;\nexports.reportAndHideConnection = reportAndHideConnection;\nexports.addConnection = addConnection;\nexports.deleteConnection = deleteConnection;\nexports.updateConnections = updateConnections;\nexports.setConnectionsSort = setConnectionsSort;\nexports.setConnectionsSearchOpen = setConnectionsSearchOpen;\nexports.setConnectionsSearch = setConnectionsSearch;\nexports.setConnections = setConnections;\n\nvar _connectionsAdapter$g = connectionsAdapter.getSelectors(function (state) {\n  return state.connections.connections;\n}),\n    selectConnectionById = _connectionsAdapter$g.selectById,\n    selectAllConnections = _connectionsAdapter$g.selectAll,\n    connectionTotal = _connectionsAdapter$g.selectTotal;\n\nexports.connectionTotal = connectionTotal;\nexports.selectAllConnections = selectAllConnections;\nexports.selectConnectionById = selectConnectionById;\nvar verifiedConnectionsSelector = (0, _toolkit.createSelector)(selectAllConnections, function (connections) {\n  return connections.filter(function (conn) {\n    return (conn == null ? void 0 : conn.status) === 'verified';\n  });\n});\nexports.verifiedConnectionsSelector = verifiedConnectionsSelector;\nvar recoveryConnectionsSelector = (0, _toolkit.createSelector)([verifiedConnectionsSelector], function (connections) {\n  return connections.filter(function (conn) {\n    return (conn == null ? void 0 : conn.level) === _constants.connection_levels.RECOVERY;\n  });\n});\nexports.recoveryConnectionsSelector = recoveryConnectionsSelector;\n\nvar firstRecoveryTimeSelector = function firstRecoveryTimeSelector(state) {\n  return state.connections.firstRecoveryTime;\n};\n\nexports.firstRecoveryTimeSelector = firstRecoveryTimeSelector;\nvar _default = connectionsSlice.reducer;\nexports.default = _default;","map":{"version":3,"names":["connectionsAdapter","createEntityAdapter","initialState","connections","getInitialState","connectionsSort","searchParam","searchOpen","firstRecoveryTime","filters","connection_levels","SUSPICIOUS","JUST_MET","ALREADY_KNOWN","RECOVERY","connectionsSlice","createSlice","name","reducers","setConnections","state","action","setAll","setConnectionsSearch","payload","setConnectionsSearchOpen","setConnectionsSort","updateConnections","console","log","original","entities","ids","length","payloadIds","map","conn","id","diff","difference","forEach","status","updateOne","changes","updateMany","deleteConnection","removeOne","addConnection","upsertOne","reportAndHideConnection","reason","update","level","REPORTED","reportReason","staleConnection","setConnectionLevel","setReportReason","setConnectionVerifications","verifications","setFilters","setFirstRecoveryTime","extraReducers","RESET_STORE","actions","getSelectors","selectConnectionById","selectById","selectAllConnections","selectAll","connectionTotal","selectTotal","verifiedConnectionsSelector","createSelector","filter","recoveryConnectionsSelector","firstRecoveryTimeSelector","reducer"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/connectionsSlice.ts"],"sourcesContent":["import {\n  createSelector,\n  createSlice,\n  createEntityAdapter,\n  PayloadAction,\n  Update,\n} from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { difference } from 'ramda';\nimport { connection_levels } from '@/utils/constants';\nimport { RESET_STORE } from '@/actions/resetStore';\n\n/* ******** INITIAL STATE ************** */\n\nconst connectionsAdapter = createEntityAdapter<Connection>();\n\nconst initialState: ConnectionsState = {\n  connections: connectionsAdapter.getInitialState(),\n  connectionsSort: '',\n  searchParam: '',\n  searchOpen: false,\n  firstRecoveryTime: 0,\n  filters: [\n    connection_levels.SUSPICIOUS,\n    connection_levels.JUST_MET,\n    connection_levels.ALREADY_KNOWN,\n    connection_levels.RECOVERY,\n  ],\n};\n\nconst connectionsSlice = createSlice({\n  name: 'connections',\n  initialState,\n  reducers: {\n    setConnections(state, action: PayloadAction<Connection[]>) {\n      state.connections = connectionsAdapter.setAll(state.connections, action);\n    },\n    setConnectionsSearch(state, action: PayloadAction<string>) {\n      state.searchParam = action.payload;\n    },\n    setConnectionsSearchOpen(state, action: PayloadAction<boolean>) {\n      state.searchOpen = action.payload;\n    },\n    setConnectionsSort(state, action: PayloadAction<string>) {\n      state.connectionsSort = action.payload;\n    },\n    updateConnections(state, action: PayloadAction<ConnectionInfo[]>) {\n      console.log('updating connections state');\n      const { entities, ids } = original(state.connections);\n\n      // check to see if any connections are deleted\n      if (ids.length !== action.payload.length) {\n        const payloadIds = action.payload.map((conn) => conn.id);\n        const diff = difference(ids, payloadIds);\n        diff.forEach((id) => {\n          if (entities[id].status === 'verified') {\n            state.connections = connectionsAdapter.updateOne(\n              state.connections,\n              {\n                id,\n                changes: {\n                  status: 'deleted',\n                },\n              },\n            );\n          }\n        });\n      }\n\n      state.connections = connectionsAdapter.updateMany(\n        state.connections,\n        action.payload.map((conn: Connection) => {\n          conn.status = 'verified';\n          return { id: conn.id, changes: conn };\n        }),\n      );\n    },\n    deleteConnection(state, action: PayloadAction<string>) {\n      state.connections = connectionsAdapter.removeOne(\n        state.connections,\n        action,\n      );\n    },\n    addConnection(state, action: PayloadAction<Connection>) {\n      state.connections = connectionsAdapter.upsertOne(\n        state.connections,\n        action,\n      );\n    },\n    reportAndHideConnection(\n      state,\n      action: PayloadAction<{ id: string; reason: string }>,\n    ) {\n      const { id, reason } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: {\n          level: connection_levels.REPORTED,\n          reportReason: reason,\n        },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    staleConnection(state, action: PayloadAction<string>) {\n      const update: Update<Connection> = {\n        id: action.payload,\n        changes: { status: 'stale' },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setConnectionLevel(\n      state,\n      action: PayloadAction<{ id: string; level: ConnectionLevel }>,\n    ) {\n      const { id, level } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: { level },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setReportReason(\n      state,\n      action: PayloadAction<{ id: string; reason: string | null }>,\n    ) {\n      const { id, reason } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: { reportReason: reason },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setConnectionVerifications(\n      state,\n      action: PayloadAction<{ id: string; verifications: Verification[] }>,\n    ) {\n      const { id, verifications } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: { verifications },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setFilters(state, action: PayloadAction<ConnectionLevel[]>) {\n      state.filters = action.payload;\n    },\n    setFirstRecoveryTime(state, action) {\n      state.firstRecoveryTime = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\n// Export channel actions\nexport const {\n  setConnections,\n  setConnectionsSearch,\n  setConnectionsSearchOpen,\n  setConnectionsSort,\n  updateConnections,\n  deleteConnection,\n  addConnection,\n  reportAndHideConnection,\n  staleConnection,\n  setFilters,\n  setConnectionLevel,\n  setConnectionVerifications,\n  setReportReason,\n  setFirstRecoveryTime,\n} = connectionsSlice.actions;\n\nexport const {\n  selectById: selectConnectionById,\n  selectAll: selectAllConnections,\n  selectTotal: connectionTotal,\n} = connectionsAdapter.getSelectors(\n  (state: State) => state.connections.connections,\n);\n\nexport const verifiedConnectionsSelector = createSelector(\n  selectAllConnections,\n  (connections) => {\n    return connections.filter((conn) => conn?.status === 'verified');\n  },\n);\n\nexport const recoveryConnectionsSelector = createSelector(\n  [verifiedConnectionsSelector],\n  (connections) => {\n    return connections.filter(\n      (conn) => conn?.level === connection_levels.RECOVERY,\n    );\n  },\n);\n\nexport const firstRecoveryTimeSelector = (state: State) =>\n  state.connections.firstRecoveryTime;\n\n// Export reducer\nexport default connectionsSlice.reducer;\n"],"mappings":";;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AACA;;AAIA,IAAMA,kBAAkB,GAAG,IAAAC,4BAAA,GAA3B;AAEA,IAAMC,YAA8B,GAAG;EACrCC,WAAW,EAAEH,kBAAkB,CAACI,eAAnB,EADwB;EAErCC,eAAe,EAAE,EAFoB;EAGrCC,WAAW,EAAE,EAHwB;EAIrCC,UAAU,EAAE,KAJyB;EAKrCC,iBAAiB,EAAE,CALkB;EAMrCC,OAAO,EAAE,CACPC,4BAAA,CAAkBC,UADX,EAEPD,4BAAA,CAAkBE,QAFX,EAGPF,4BAAA,CAAkBG,aAHX,EAIPH,4BAAA,CAAkBI,QAJX;AAN4B,CAAvC;AAcA,IAAMC,gBAAgB,GAAG,IAAAC,oBAAA,EAAY;EACnCC,IAAI,EAAE,aAD6B;EAEnCf,YAAY,EAAZA,YAFmC;EAGnCgB,QAAQ,EAAE;IACRC,cADQ,0BACOC,KADP,EACcC,MADd,EACmD;MACzDD,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAACsB,MAAnB,CAA0BF,KAAK,CAACjB,WAAhC,EAA6CkB,MAA7C,CAApB;IACD,CAHO;IAIRE,oBAJQ,gCAIaH,KAJb,EAIoBC,MAJpB,EAImD;MACzDD,KAAK,CAACd,WAAN,GAAoBe,MAAM,CAACG,OAA3B;IACD,CANO;IAORC,wBAPQ,oCAOiBL,KAPjB,EAOwBC,MAPxB,EAOwD;MAC9DD,KAAK,CAACb,UAAN,GAAmBc,MAAM,CAACG,OAA1B;IACD,CATO;IAURE,kBAVQ,8BAUWN,KAVX,EAUkBC,MAVlB,EAUiD;MACvDD,KAAK,CAACf,eAAN,GAAwBgB,MAAM,CAACG,OAA/B;IACD,CAZO;IAaRG,iBAbQ,6BAaUP,KAbV,EAaiBC,MAbjB,EAa0D;MAChEO,OAAO,CAACC,GAAR,CAAY,4BAAZ;;MACA,gBAA0B,IAAAC,eAAA,EAASV,KAAK,CAACjB,WAAf,CAA1B;MAAA,IAAQ4B,QAAR,aAAQA,QAAR;MAAA,IAAkBC,GAAlB,aAAkBA,GAAlB;;MAGA,IAAIA,GAAG,CAACC,MAAJ,KAAeZ,MAAM,CAACG,OAAP,CAAeS,MAAlC,EAA0C;QACxC,IAAMC,UAAU,GAAGb,MAAM,CAACG,OAAP,CAAeW,GAAf,CAAmB,UAACC,IAAD;UAAA,OAAUA,IAAI,CAACC,EAAf;QAAA,CAAnB,CAAnB;QACA,IAAMC,IAAI,GAAG,IAAAC,iBAAA,EAAWP,GAAX,EAAgBE,UAAhB,CAAb;QACAI,IAAI,CAACE,OAAL,CAAa,UAACH,EAAD,EAAQ;UACnB,IAAIN,QAAQ,CAACM,EAAD,CAAR,CAAaI,MAAb,KAAwB,UAA5B,EAAwC;YACtCrB,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC0C,SAAnB,CAClBtB,KAAK,CAACjB,WADY,EAElB;cACEkC,EAAE,EAAFA,EADF;cAEEM,OAAO,EAAE;gBACPF,MAAM,EAAE;cADD;YAFX,CAFkB,CAApB;UASD;QACF,CAZD;MAaD;;MAEDrB,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC4C,UAAnB,CAClBxB,KAAK,CAACjB,WADY,EAElBkB,MAAM,CAACG,OAAP,CAAeW,GAAf,CAAmB,UAACC,IAAD,EAAsB;QACvCA,IAAI,CAACK,MAAL,GAAc,UAAd;QACA,OAAO;UAAEJ,EAAE,EAAED,IAAI,CAACC,EAAX;UAAeM,OAAO,EAAEP;QAAxB,CAAP;MACD,CAHD,CAFkB,CAApB;IAOD,CA3CO;IA4CRS,gBA5CQ,4BA4CSzB,KA5CT,EA4CgBC,MA5ChB,EA4C+C;MACrDD,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC8C,SAAnB,CAClB1B,KAAK,CAACjB,WADY,EAElBkB,MAFkB,CAApB;IAID,CAjDO;IAkDR0B,aAlDQ,yBAkDM3B,KAlDN,EAkDaC,MAlDb,EAkDgD;MACtDD,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAACgD,SAAnB,CAClB5B,KAAK,CAACjB,WADY,EAElBkB,MAFkB,CAApB;IAID,CAvDO;IAwDR4B,uBAxDQ,mCAyDN7B,KAzDM,EA0DNC,MA1DM,EA2DN;MACA,sBAAuBA,MAAM,CAACG,OAA9B;MAAA,IAAQa,EAAR,mBAAQA,EAAR;MAAA,IAAYa,MAAZ,mBAAYA,MAAZ;MACA,IAAMC,MAA0B,GAAG;QACjCd,EAAE,EAAFA,EADiC;QAEjCM,OAAO,EAAE;UACPS,KAAK,EAAE1C,4BAAA,CAAkB2C,QADlB;UAEPC,YAAY,EAAEJ;QAFP;MAFwB,CAAnC;MAOA9B,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC0C,SAAnB,CAClBtB,KAAK,CAACjB,WADY,EAElBgD,MAFkB,CAApB;IAID,CAxEO;IAyERI,eAzEQ,2BAyEQnC,KAzER,EAyEeC,MAzEf,EAyE8C;MACpD,IAAM8B,MAA0B,GAAG;QACjCd,EAAE,EAAEhB,MAAM,CAACG,OADsB;QAEjCmB,OAAO,EAAE;UAAEF,MAAM,EAAE;QAAV;MAFwB,CAAnC;MAIArB,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC0C,SAAnB,CAClBtB,KAAK,CAACjB,WADY,EAElBgD,MAFkB,CAApB;IAID,CAlFO;IAmFRK,kBAnFQ,8BAoFNpC,KApFM,EAqFNC,MArFM,EAsFN;MACA,uBAAsBA,MAAM,CAACG,OAA7B;MAAA,IAAQa,EAAR,oBAAQA,EAAR;MAAA,IAAYe,KAAZ,oBAAYA,KAAZ;MACA,IAAMD,MAA0B,GAAG;QACjCd,EAAE,EAAFA,EADiC;QAEjCM,OAAO,EAAE;UAAES,KAAK,EAALA;QAAF;MAFwB,CAAnC;MAIAhC,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC0C,SAAnB,CAClBtB,KAAK,CAACjB,WADY,EAElBgD,MAFkB,CAApB;IAID,CAhGO;IAiGRM,eAjGQ,2BAkGNrC,KAlGM,EAmGNC,MAnGM,EAoGN;MACA,uBAAuBA,MAAM,CAACG,OAA9B;MAAA,IAAQa,EAAR,oBAAQA,EAAR;MAAA,IAAYa,MAAZ,oBAAYA,MAAZ;MACA,IAAMC,MAA0B,GAAG;QACjCd,EAAE,EAAFA,EADiC;QAEjCM,OAAO,EAAE;UAAEW,YAAY,EAAEJ;QAAhB;MAFwB,CAAnC;MAIA9B,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC0C,SAAnB,CAClBtB,KAAK,CAACjB,WADY,EAElBgD,MAFkB,CAApB;IAID,CA9GO;IA+GRO,0BA/GQ,sCAgHNtC,KAhHM,EAiHNC,MAjHM,EAkHN;MACA,uBAA8BA,MAAM,CAACG,OAArC;MAAA,IAAQa,EAAR,oBAAQA,EAAR;MAAA,IAAYsB,aAAZ,oBAAYA,aAAZ;MACA,IAAMR,MAA0B,GAAG;QACjCd,EAAE,EAAFA,EADiC;QAEjCM,OAAO,EAAE;UAAEgB,aAAa,EAAbA;QAAF;MAFwB,CAAnC;MAIAvC,KAAK,CAACjB,WAAN,GAAoBH,kBAAkB,CAAC0C,SAAnB,CAClBtB,KAAK,CAACjB,WADY,EAElBgD,MAFkB,CAApB;IAID,CA5HO;IA6HRS,UA7HQ,sBA6HGxC,KA7HH,EA6HUC,MA7HV,EA6HoD;MAC1DD,KAAK,CAACX,OAAN,GAAgBY,MAAM,CAACG,OAAvB;IACD,CA/HO;IAgIRqC,oBAhIQ,gCAgIazC,KAhIb,EAgIoBC,MAhIpB,EAgI4B;MAClCD,KAAK,CAACZ,iBAAN,GAA0Ba,MAAM,CAACG,OAAjC;IACD;EAlIO,CAHyB;EAuInCsC,aAAa,oCACVC,uBADU,EACI,YAAM;IACnB,OAAO7D,YAAP;EACD,CAHU;AAvIsB,CAAZ,CAAzB;AA+IO,4BAeHa,gBAAgB,CAACiD,OAfd;AAAA,IACL7C,cADK,yBACLA,cADK;AAAA,IAELI,oBAFK,yBAELA,oBAFK;AAAA,IAGLE,wBAHK,yBAGLA,wBAHK;AAAA,IAILC,kBAJK,yBAILA,kBAJK;AAAA,IAKLC,iBALK,yBAKLA,iBALK;AAAA,IAMLkB,gBANK,yBAMLA,gBANK;AAAA,IAOLE,aAPK,yBAOLA,aAPK;AAAA,IAQLE,uBARK,yBAQLA,uBARK;AAAA,IASLM,eATK,yBASLA,eATK;AAAA,IAULK,UAVK,yBAULA,UAVK;AAAA,IAWLJ,kBAXK,yBAWLA,kBAXK;AAAA,IAYLE,0BAZK,yBAYLA,0BAZK;AAAA,IAaLD,eAbK,yBAaLA,eAbK;AAAA,IAcLI,oBAdK,yBAcLA,oBAdK;;;;;;;;;;;;;;;;AAiBA,4BAIH7D,kBAAkB,CAACiE,YAAnB,CACF,UAAC7C,KAAD;EAAA,OAAkBA,KAAK,CAACjB,WAAN,CAAkBA,WAApC;AAAA,CADE,CAJG;AAAA,IACO+D,oBADP,yBACLC,UADK;AAAA,IAEMC,oBAFN,yBAELC,SAFK;AAAA,IAGQC,eAHR,yBAGLC,WAHK;;;;;AAQA,IAAMC,2BAA2B,GAAG,IAAAC,uBAAA,EACzCL,oBADyC,EAEzC,UAACjE,WAAD,EAAiB;EACf,OAAOA,WAAW,CAACuE,MAAZ,CAAmB,UAACtC,IAAD;IAAA,OAAU,CAAAA,IAAI,QAAJ,YAAAA,IAAI,CAAEK,MAAN,MAAiB,UAA3B;EAAA,CAAnB,CAAP;AACD,CAJwC,CAApC;;AAOA,IAAMkC,2BAA2B,GAAG,IAAAF,uBAAA,EACzC,CAACD,2BAAD,CADyC,EAEzC,UAACrE,WAAD,EAAiB;EACf,OAAOA,WAAW,CAACuE,MAAZ,CACL,UAACtC,IAAD;IAAA,OAAU,CAAAA,IAAI,QAAJ,YAAAA,IAAI,CAAEgB,KAAN,MAAgB1C,4BAAA,CAAkBI,QAA5C;EAAA,CADK,CAAP;AAGD,CANwC,CAApC;;;AASA,IAAM8D,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACxD,KAAD;EAAA,OACvCA,KAAK,CAACjB,WAAN,CAAkBK,iBADqB;AAAA,CAAlC;;;eAIQO,gBAAgB,CAAC8D,O"},"metadata":{},"sourceType":"script"}