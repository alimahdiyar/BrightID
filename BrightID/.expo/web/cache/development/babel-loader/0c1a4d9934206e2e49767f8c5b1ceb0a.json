{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(_props) {\n    var _this;\n\n    _classCallCheck(this, DrawerLayout);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"openValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"accessibilityIsModalView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerEventsView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"panGestureHandler\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerShown\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n\n      _this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this.drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n          drawerWidth = _this$props6.drawerWidth,\n          drawerPosition = _this$props6.drawerPosition,\n          drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n          drawerPosition = _this$props7.drawerPosition,\n          minSwipeDistance = _this$props7.minSwipeDistance,\n          edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this.updateShowing(willShow);\n\n      _this.emitStateChanged(SETTLING, willShow);\n\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderOverlay\", function () {\n      invariant(_this.openValue, 'should be set');\n\n      var overlayOpacity = _this.openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n          drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n          drawerWidth = _this$props8.drawerWidth,\n          drawerPosition = _this$props8.drawerPosition,\n          drawerType = _this$props8.drawerType,\n          drawerContainerStyle = _this$props8.drawerContainerStyle,\n          contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n\n    var _dragX = new Animated.Value(0);\n\n    var _touchX = new Animated.Value(0);\n\n    var _drawerTranslation = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n\n    _this.updateAnimatedEvent(_props, _this.state);\n\n    return _this;\n  }\n\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n          drawerPosition = _this$props9.drawerPosition,\n          drawerLockMode = _this$props9.drawerLockMode,\n          edgeWidth = _this$props9.edgeWidth,\n          minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n\n  return DrawerLayout;\n}(Component);\n\nexport { DrawerLayout as default };\n\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\n\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"sources":["DrawerLayout.tsx"],"names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","Component","drawerWidth","drawerPosition","useNativeAnimations","drawerType","edgeWidth","minSwipeDistance","overlayColor","drawerLockMode","enableTrackpadTwoFingerGesture","constructor","dragX","Animated","touchX","drawerTranslation","containerWidth","UNSAFE_componentWillUpdate","props","state","React","Left","Right","dragXValue","touchXValue","translationX","startPositionX","dragOffsetFromOnStartPosition","inputRange","outputRange","extrapolate","gestureOptions","useNativeDriver","ev","Math","position","nativeEvent","x","State","Keyboard","StatusBar","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","showing","accessibilityViewIsModal","pointerEvents","fromLeft","gestureOrientation","hitSlop","left","width","right","activeOffsetX","fromValue","nextFramePosition","velocity","willShow","toValue","bounciness","speed","finished","options","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","onHandlerStateChange","ref","style","styles","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","dynamicDrawerStyles","openValue","containerTranslateX","containerStyles","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","onLayout","importantForAccessibility","render","failOffsetY","onGestureEvent","enabled","StyleSheet","drawerContainer","zIndex","containerInFront","containerOnBack","main","flex","overflow","overlay"],"mappings":"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","sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  TapGestureHandler,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n  drawerPosition?: DrawerPosition;\n  drawerWidth?: number;\n  drawerBackgroundColor?: string;\n  drawerLockMode?: DrawerLockMode;\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n  edgeWidth?: number;\n  minSwipeDistance?: number;\n  hideStatusBar?: boolean;\n  statusBarAnimation?: StatusBarAnimation;\n  overlayColor?: string;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n  enableTrackpadTwoFingerGesture?: boolean;\n  onDrawerSlide?: (position: number) => void;\n  onGestureRef?: (ref: PanGestureHandler) => void;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    const overlayOpacity = this.openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK\n    // taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}