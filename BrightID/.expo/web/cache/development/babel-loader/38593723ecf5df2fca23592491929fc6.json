{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useState } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../../store\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { WHITE, BLACK, DARKER_GREY, ORANGE, RED } from \"../../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { setPassword as setUserPassword } from \"../../../actions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar PASSWORD_LENGTH = 8;\nexport var PasswordScreen = function PasswordScreen() {\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var passwordInput = useRef(null);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmPassword = _useState4[0],\n      setConfirmPassword = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errors = _useState6[0],\n      setErrors = _useState6[1];\n\n  var id = useSelector(function (state) {\n    return state.user.id;\n  });\n\n  var checkPassword = function checkPassword() {\n    return new Promise(function (res) {\n      if (password.length < PASSWORD_LENGTH) {\n        var _passwordInput$curren;\n\n        setErrors([\"Password must be \" + PASSWORD_LENGTH + \" characters\"]);\n        setPassword('');\n        setConfirmPassword('');\n        (_passwordInput$curren = passwordInput.current) == null ? void 0 : _passwordInput$curren.focus();\n      } else if (password !== confirmPassword) {\n        var _passwordInput$curren2;\n\n        setErrors([null, 'Passwords must match']);\n        setPassword('');\n        setConfirmPassword('');\n        (_passwordInput$curren2 = passwordInput.current) == null ? void 0 : _passwordInput$curren2.focus();\n      } else {\n        setErrors([]);\n        res(true);\n      }\n    });\n  };\n\n  var handleSubmit = function handleSubmit() {\n    checkPassword().then(function () {\n      dispatch(setUserPassword(password));\n      navigation.navigate('OnboardSuccess');\n    });\n  };\n\n  var handleSkip = function handleSkip() {\n    navigation.navigate('OnboardSuccess');\n  };\n\n  var submitDisabled = !password || !confirmPassword;\n  var skipDisabled = !!password && !!confirmPassword;\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      backgroundColor: WHITE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      testID: \"PasswordScreen\",\n      children: [_jsx(View, {\n        style: styles.descContainer,\n        children: _jsx(Text, {\n          style: styles.registerText,\n          children: t('signup.text.createPassword')\n        })\n      }), _jsx(TextInput, {\n        style: styles.invisibleUsername,\n        placeholder: \"Username\",\n        textContentType: \"username\",\n        autoComplete: \"username\",\n        autoCorrect: false,\n        value: id\n      }), _jsxs(View, {\n        style: styles.midContainer,\n        children: [_jsxs(View, {\n          style: styles.passwordContainer,\n          children: [_jsx(TextInput, {\n            autoComplete: \"password\",\n            autoCorrect: false,\n            secureTextEntry: true,\n            style: styles.textInput,\n            textContentType: \"password\",\n            underlineColorAndroid: \"transparent\",\n            testID: \"password\",\n            onChangeText: setPassword,\n            value: password,\n            placeholder: t('signup.placeholder.password'),\n            placeholderTextColor: DARKER_GREY,\n            blurOnSubmit: true,\n            ref: passwordInput\n          }), errors[0] ? _jsx(Text, {\n            style: styles.errorText,\n            children: errors[0]\n          }) : null]\n        }), _jsxs(View, {\n          style: styles.passwordContainer,\n          children: [_jsx(TextInput, {\n            autoComplete: \"password\",\n            autoCorrect: false,\n            secureTextEntry: true,\n            style: styles.textInput,\n            textContentType: \"password\",\n            underlineColorAndroid: \"transparent\",\n            testID: \"confirmPassword\",\n            onChangeText: setConfirmPassword,\n            value: confirmPassword,\n            placeholder: t('signup.placeholder.confirmPassword'),\n            placeholderTextColor: DARKER_GREY,\n            blurOnSubmit: true\n          }), errors[1] ? _jsx(Text, {\n            style: styles.errorText,\n            children: errors[1]\n          }) : null]\n        }), _jsx(Text, {\n          style: styles.privacyText,\n          children: t('signup.text.passwordInfo')\n        })]\n      }), _jsxs(View, {\n        style: styles.submitContainer,\n        children: [_jsx(TouchableOpacity, {\n          testID: \"submitBtn\",\n          style: [styles.submitBtn, {\n            opacity: submitDisabled ? 0.7 : 1\n          }],\n          onPress: handleSubmit,\n          accessibilityLabel: t('signup.button.submit'),\n          disabled: submitDisabled,\n          children: _jsx(Text, {\n            style: styles.submitBtnText,\n            children: t('signup.button.submit')\n          })\n        }), _jsx(TouchableOpacity, {\n          style: [styles.skipBtn, {\n            opacity: skipDisabled ? 0.7 : 1\n          }],\n          onPress: handleSkip,\n          accessibilityLabel: t('signup.button.skip'),\n          testID: \"skipBtn\",\n          disabled: skipDisabled,\n          children: _jsx(Text, {\n            style: styles.skipBtnText,\n            children: t('signup.button.skip')\n          })\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 2\n  },\n  descContainer: {\n    marginTop: DEVICE_LARGE ? 100 : 85\n  },\n  midContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-evenly'\n  },\n  invisibleUsername: {\n    position: 'absolute',\n    left: -100,\n    width: 1,\n    height: 1\n  },\n  registerText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: DEVICE_LARGE ? 26 : 24\n  },\n  passwordContainer: {\n    flexDirection: 'column',\n    width: '60%',\n    alignItems: 'center'\n  },\n  textInput: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[14],\n    color: BLACK,\n    borderBottomWidth: 1,\n    borderBottomColor: DARKER_GREY,\n    width: '100%',\n    textAlign: 'center',\n    paddingBottom: 10\n  },\n  errorText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    color: RED,\n    marginTop: 12\n  },\n  privacyText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[11],\n    color: DARKER_GREY,\n    textAlign: 'center',\n    width: '72%'\n  },\n  submitContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70\n  },\n  submitBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 4\n  },\n  submitBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE\n  },\n  skipBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: WHITE,\n    borderRadius: 100,\n    borderWidth: 1,\n    borderColor: ORANGE,\n    marginLeft: 12\n  },\n  skipBtnText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[16],\n    color: ORANGE\n  }\n});\nexport default PasswordScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/SignUpFlow/PasswordScreen.tsx"],"names":["setPassword","PASSWORD_LENGTH","PasswordScreen","dispatch","useDispatch","navigation","useNavigation","t","useTranslation","passwordInput","useRef","password","useState","confirmPassword","setConfirmPassword","errors","setErrors","id","useSelector","state","checkPassword","res","handleSubmit","setUserPassword","handleSkip","submitDisabled","skipDisabled","styles","opacity","StyleSheet","orangeTop","backgroundColor","height","DEVICE_LARGE","width","zIndex","container","flex","borderTopLeftRadius","marginTop","overflow","descContainer","midContainer","alignItems","justifyContent","invisibleUsername","position","left","registerText","fontFamily","fontSize","textAlign","lineHeight","passwordContainer","flexDirection","textInput","color","borderBottomWidth","borderBottomColor","paddingBottom","errorText","privacyText","submitContainer","marginBottom","submitBtn","borderRadius","elevation","shadowColor","shadowOffset","shadowRadius","submitBtnText","skipBtn","borderWidth","borderColor","marginLeft","skipBtnText"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { fontSize } from '@/theme/fonts';\nimport { WHITE, BLACK, DARKER_GREY, ORANGE, RED } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { setPassword as setUserPassword } from '@/actions';\n\n/* Description */\n\n/* ======================================== */\n\n/**\n * Initial Onboarding screen of BrightID\n */\n\n/* Onboarding Screen */\n\n/* ======================================== */\nconst PASSWORD_LENGTH = 8;\n\nexport const PasswordScreen = () => {\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n  const passwordInput = useRef(null);\n\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errors, setErrors] = useState([]);\n\n  const id = useSelector((state: State) => state.user.id);\n\n  const checkPassword = () =>\n    new Promise((res) => {\n      if (password.length < PASSWORD_LENGTH) {\n        // using array to indicate where to display the message\n        setErrors([`Password must be ${PASSWORD_LENGTH} characters`]);\n        setPassword('');\n        setConfirmPassword('');\n        passwordInput.current?.focus();\n      } else if (password !== confirmPassword) {\n        // using array to indicate where to display the message\n        setErrors([null, 'Passwords must match']);\n        setPassword('');\n        setConfirmPassword('');\n        passwordInput.current?.focus();\n      } else {\n        // all good\n        setErrors([]);\n        res(true);\n      }\n    });\n\n  const handleSubmit = () => {\n    checkPassword().then(() => {\n      dispatch(setUserPassword(password));\n      navigation.navigate('OnboardSuccess');\n    });\n  };\n\n  const handleSkip = () => {\n    navigation.navigate('OnboardSuccess');\n  };\n\n  const submitDisabled = !password || !confirmPassword;\n  const skipDisabled = !!password && !!confirmPassword;\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        backgroundColor={WHITE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"PasswordScreen\">\n        <View style={styles.descContainer}>\n          <Text style={styles.registerText}>\n            {t('signup.text.createPassword')}\n          </Text>\n        </View>\n        <TextInput\n          style={styles.invisibleUsername}\n          placeholder=\"Username\"\n          textContentType=\"username\"\n          autoComplete=\"username\"\n          autoCorrect={false}\n          value={id}\n        />\n        <View style={styles.midContainer}>\n          <View style={styles.passwordContainer}>\n            <TextInput\n              autoComplete=\"password\"\n              autoCorrect={false}\n              secureTextEntry={true}\n              style={styles.textInput}\n              textContentType=\"password\" // passwordrules=\"minlength: 16; required: lower; required: upper; required: digit; required: [-];\"\n              underlineColorAndroid=\"transparent\"\n              testID=\"password\"\n              onChangeText={setPassword}\n              value={password}\n              placeholder={t('signup.placeholder.password')}\n              placeholderTextColor={DARKER_GREY}\n              blurOnSubmit={true}\n              ref={passwordInput}\n            />\n            {errors[0] ? (\n              <Text style={styles.errorText}>{errors[0]}</Text>\n            ) : null}\n          </View>\n          <View style={styles.passwordContainer}>\n            <TextInput\n              autoComplete=\"password\"\n              autoCorrect={false}\n              secureTextEntry={true}\n              style={styles.textInput}\n              textContentType=\"password\" // passwordrules=\"minlength: 16; required: lower; required: upper; required: digit; required: [-];\"\n              underlineColorAndroid=\"transparent\"\n              testID=\"confirmPassword\"\n              onChangeText={setConfirmPassword}\n              value={confirmPassword}\n              placeholder={t('signup.placeholder.confirmPassword')}\n              placeholderTextColor={DARKER_GREY}\n              blurOnSubmit={true}\n            />\n            {errors[1] ? (\n              <Text style={styles.errorText}>{errors[1]}</Text>\n            ) : null}\n          </View>\n          <Text style={styles.privacyText}>\n            {t('signup.text.passwordInfo')}\n          </Text>\n        </View>\n        <View style={styles.submitContainer}>\n          <TouchableOpacity\n            testID=\"submitBtn\"\n            style={[styles.submitBtn, { opacity: submitDisabled ? 0.7 : 1 }]}\n            onPress={handleSubmit}\n            accessibilityLabel={t('signup.button.submit')}\n            disabled={submitDisabled}\n          >\n            <Text style={styles.submitBtnText}>\n              {t('signup.button.submit')}\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.skipBtn, { opacity: skipDisabled ? 0.7 : 1 }]}\n            onPress={handleSkip}\n            accessibilityLabel={t('signup.button.skip')}\n            testID=\"skipBtn\"\n            disabled={skipDisabled}\n          >\n            <Text style={styles.skipBtnText}>{t('signup.button.skip')}</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 2,\n  },\n  descContainer: {\n    marginTop: DEVICE_LARGE ? 100 : 85,\n  },\n  midContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  invisibleUsername: {\n    position: 'absolute',\n    left: -100,\n    width: 1,\n    height: 1,\n  },\n  registerText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: DEVICE_LARGE ? 26 : 24,\n  },\n  passwordContainer: {\n    flexDirection: 'column',\n    width: '60%',\n    alignItems: 'center',\n  },\n  textInput: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[14],\n    color: BLACK,\n    borderBottomWidth: 1,\n    borderBottomColor: DARKER_GREY,\n    width: '100%',\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  errorText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    color: RED,\n    marginTop: 12,\n  },\n  privacyText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[11],\n    color: DARKER_GREY,\n    textAlign: 'center',\n    width: '72%',\n  },\n  submitContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70,\n  },\n  submitBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 4,\n  },\n  submitBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE,\n  },\n  skipBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: WHITE,\n    borderRadius: 100,\n    borderWidth: 1,\n    borderColor: ORANGE,\n    marginLeft: 12,\n  },\n  skipBtnText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[16],\n    color: ORANGE,\n  },\n});\n\nexport default PasswordScreen;\n"]},"metadata":{},"sourceType":"module"}