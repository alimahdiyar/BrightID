{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/modules/useResponderEvents/createResponderEvent.js"],"names":["emptyFunction","emptyObject","emptyArray","identifier","propagationWasStopped","domEventChangedTouches","domEvent","domEventType","metaKey","shiftKey","force","normalizeIdentifier","clientX","clientY","pageX","pageY","preventDefault","timestamp","Array","touch","locationX","locationY","target","changedTouches","normalizeTouches","touches","emulatedTouches","responderEvent","bubbles","cancelable","currentTarget","defaultPrevented","dispatchConfig","eventPhase","isDefaultPrevented","isPropagationStopped","isTrusted","nativeEvent","altKey","ctrlKey","type","persist","stopPropagation","timeStamp","touchHistory","ResponderTouchHistoryStore","rect","getBoundingClientRect","x","y"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n/**\n * Safari produces very large identifiers that would cause the `touchBank` array\n * length to be so large as to crash the browser, if not normalized like this.\n * In the future the `touchBank` should use an object/map instead.\n */\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n/**\n * Converts a native DOM event to a ResponderEvent.\n * Mouse events are transformed into fake touch events.\n */\n\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    // `currentTarget` is set before dispatch\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  }; // Using getters and functions serves two purposes:\n  // 1) The value of `currentTarget` is not initially available.\n  // 2) Measuring the clientRect may cause layout jank and should only be done on-demand.\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}"]},"metadata":{},"sourceType":"module"}