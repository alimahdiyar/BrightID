{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkProps;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _core = require(\"@react-navigation/core\");\n\nvar _useLinkTo = _interopRequireDefault(require(\"./useLinkTo\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useLinkProps(_ref) {\n  var to = _ref.to,\n      action = _ref.action;\n  var navigation = React.useContext(_core.NavigationHelpersContext);\n  var linkTo = (0, _useLinkTo.default)();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (_reactNative.Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\"To 'to' option is invalid (found '\".concat(String(to), \"'. It must be a valid string for navigation.\"));\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["action","navigation","React","linkTo","onPress","e","shouldHandle","Platform","String","href","accessibilityRole"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIA;;;;;;AAae,SAAA,YAAA,OAA6C;EAAA,IAAvB,EAAuB,QAAvB,EAAuB;EAAA,IAAjBA,MAAiB,QAAjBA,MAAiB;EAC1D,IAAMC,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,8BAAmBA,CAAnB;EACA,IAAMC,MAAM,GAAZ,IAAA,kBAAA,GAAA;;EAEA,IAAMC,OAAO,GACXC,SADID,OACJC,CAAAA,CADc,EAEX;IAAA,IAAA,gBAAA;;IACH,IAAIC,YAAY,GAAhB,KAAA;;IAEA,IAAIC,qBAAAA,CAAAA,EAAAA,KAAAA,KAAAA,IAAyB,CAA7B,CAAA,EAAiC;MAC/BD,YAAY,GAAGD,CAAC,GAAG,CAACA,CAAC,CAAL,gBAAA,GAAhBC,IAAAA;IADF,CAAA,MAEO,IACL,CAACD,CAAC,CAAF,gBAAA,IAEA,EAAEA,CAAC,CAADA,OAAAA,IAAaA,CAAC,CAAdA,MAAAA,IAAyBA,CAAC,CAA1BA,OAAAA,IAAsCA,CAAC,CAFzC,QAEA,CAFA,KAICA,CAAC,CAADA,MAAAA,IAAAA,IAAAA,IAAoBA,CAAC,CAADA,MAAAA,KAJrB,CAAA,KAMA,CAAA,SAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,CAAA,CAAA,gBAAA,GAAuCA,CAAC,CAAxC,aAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAuCA,gBAAAA,CAPlC,MAOL,CAPK,EAQL;MACAA,CAAC,CAADA,cAAAA;MACAC,YAAY,GAAZA,IAAAA;IACD;;IAED,IAAA,YAAA,EAAkB;MAChB,IAAA,MAAA,EAAY;QACV,IAAA,UAAA,EAAgB;UACdL,UAAU,CAAVA,QAAAA,CAAAA,MAAAA;QADF,CAAA,MAEO;UACL,MAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;QACD;MALH,CAAA,MAMO;QACL,IAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;UAC1B,MAAM,IAAA,KAAA,CAAA,qCAAA,MAAA,CACiCO,MAAM,CADvC,EACuC,CADvC,EAAN,8CAAM,CAAA,CAAN;QAKD;;QAEDL,MAAM,CAANA,EAAM,CAANA;MACD;IACF;EAtCH,CAAA;;EAyCA,OAAO;IACLM,IAAI,EADC,EAAA;IAELC,iBAAiB,EAFZ,MAAA;IAGLN,OAAAA,EAAAA;EAHK,CAAP;AAKD","sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}