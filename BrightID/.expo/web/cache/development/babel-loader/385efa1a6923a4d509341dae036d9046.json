{"ast":null,"code":"import modPow from 'react-native-modpow';\nimport CryptoJS from 'crypto-js';\nimport { BigInteger } from 'jsbn';\n\nif (!__DEV__) {\n  console.log(\"Monkey-patching BigNumber.modPow to use react-native-modpow\");\n\n  BigInteger.prototype.modPow = function nativeModPow(e, m) {\n    var result = modPow({\n      target: this.toString(16),\n      value: e.toString(16),\n      modifier: m.toString(16)\n    });\n    return new BigInteger(result, 16);\n  };\n} else {\n  console.log(\"Using js implementation of BigNumber.modPow\");\n}\n\nfunction sha256(s) {\n  return new BigInteger(CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex), 16);\n}\n\nfunction WISchnorrClient(publicKey) {\n  this.p = new BigInteger(publicKey.p);\n  this.q = new BigInteger(publicKey.q);\n  this.g = new BigInteger(publicKey.g);\n  this.y = new BigInteger(publicKey.y);\n}\n\nWISchnorrClient.prototype.GenerateRandomNumber = function () {\n  var bytes = Math.floor(Math.random() * (this.q.bitLength() / 8 - 1 + 1)) + 1;\n  var r = CryptoJS.lib.WordArray.random(bytes);\n  var rhex = CryptoJS.enc.Hex.stringify(r);\n  return new BigInteger(rhex, 16).mod(this.q);\n};\n\nWISchnorrClient.prototype.GenerateWISchnorrClientChallenge = function (params, info, msg) {\n  var t1 = this.GenerateRandomNumber();\n  var t2 = this.GenerateRandomNumber();\n  var t3 = this.GenerateRandomNumber();\n  var t4 = this.GenerateRandomNumber();\n  var F = sha256(info);\n  var z = F.modPow(this.p.subtract(new BigInteger('1')).divide(this.q), this.p);\n  var a = new BigInteger(params.a);\n  var alpha = a.multiply(this.g.modPow(t1, this.p)).multiply(this.y.modPow(t2, this.p)).mod(this.p);\n  var b = new BigInteger(params.b);\n  var beta = b.multiply(this.g.modPow(t3, this.p)).multiply(z.modPow(t4, this.p)).mod(this.p);\n  var H = sha256(alpha.toString() + beta.toString() + z.toString() + msg);\n  var epsilon = H.mod(this.q);\n  var e = epsilon.subtract(t2).subtract(t4).mod(this.q);\n  return {\n    e: e.toString(),\n    t: {\n      t1: t1,\n      t2: t2,\n      t3: t3,\n      t4: t4\n    }\n  };\n};\n\nWISchnorrClient.prototype.GenerateWISchnorrBlindSignature = function (challenge, response) {\n  var r = new BigInteger(response.r);\n  var rho = r.add(challenge.t1).mod(this.q);\n  var c = new BigInteger(response.c);\n  var omega = c.add(challenge.t2).mod(this.q);\n  var s = new BigInteger(response.s);\n  var sigma = s.add(challenge.t3).mod(this.q);\n  var d = new BigInteger(response.d);\n  var delta = d.add(challenge.t4).mod(this.q);\n  return {\n    rho: rho.toString(),\n    omega: omega.toString(),\n    sigma: sigma.toString(),\n    delta: delta.toString()\n  };\n};\n\nWISchnorrClient.prototype.VerifyWISchnorrBlindSignature = function (signature, info, msg) {\n  var F = sha256(info);\n  var z = F.modPow(this.p.subtract(new BigInteger('1')).divide(this.q), this.p);\n  var gp = this.g.modPow(new BigInteger(signature.rho), this.p);\n  var yw = this.y.modPow(new BigInteger(signature.omega), this.p);\n  var gpyw = gp.multiply(yw).mod(this.p);\n  var gs = this.g.modPow(new BigInteger(signature.sigma), this.p);\n  var zd = z.modPow(new BigInteger(signature.delta), this.p);\n  var gszd = gs.multiply(zd).mod(this.p);\n  var H = sha256(gpyw.toString() + gszd.toString() + z.toString() + msg);\n  var hsig = H.mod(this.q);\n  var vsig = new BigInteger(signature.omega).add(new BigInteger(signature.delta)).mod(this.q);\n  return vsig.compareTo(hsig) === 0;\n};\n\nmodule.exports = WISchnorrClient;","map":{"version":3,"names":["modPow","CryptoJS","BigInteger","__DEV__","console","log","prototype","nativeModPow","e","m","result","target","toString","value","modifier","sha256","s","SHA256","enc","Hex","WISchnorrClient","publicKey","p","q","g","y","GenerateRandomNumber","bytes","Math","floor","random","bitLength","r","lib","WordArray","rhex","stringify","mod","GenerateWISchnorrClientChallenge","params","info","msg","t1","t2","t3","t4","F","z","subtract","divide","a","alpha","multiply","b","beta","H","epsilon","t","GenerateWISchnorrBlindSignature","challenge","response","rho","add","c","omega","sigma","d","delta","VerifyWISchnorrBlindSignature","signature","gp","yw","gpyw","gs","zd","gszd","hsig","vsig","compareTo","module","exports"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/WISchnorrClient.ts"],"sourcesContent":["/**\n\t-- WISchnorrClient.js --\n\tAuthor : Christof Torres <christof.ferreira.001@student.uni.lu>\n\tDate   : September 2016\n* */\nimport modPow from 'react-native-modpow';\nimport CryptoJS from 'crypto-js';\nimport { BigInteger } from 'jsbn';\n\nif (!__DEV__) {\n  console.log(`Monkey-patching BigNumber.modPow to use react-native-modpow`);\n  BigInteger.prototype.modPow = function nativeModPow(e, m) {\n    const result = modPow({\n      target: this.toString(16),\n      value: e.toString(16),\n      modifier: m.toString(16),\n    });\n    return new BigInteger(result, 16);\n  };\n} else {\n  console.log(`Using js implementation of BigNumber.modPow`);\n}\n\nfunction sha256(s) {\n  return new BigInteger(CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex), 16);\n}\n\n/* Initializes the WISchnorClient based on a given public key */\nfunction WISchnorrClient(\n  this: { p: BigInteger; q: BigInteger; g: BigInteger; y: BigInteger },\n  publicKey,\n) {\n  // Discrete logarithm parameters\n  this.p = new BigInteger(publicKey.p);\n  this.q = new BigInteger(publicKey.q);\n  this.g = new BigInteger(publicKey.g);\n  // Public key\n  this.y = new BigInteger(publicKey.y);\n}\n\n/* Generates a cryptographically secure random number modulo q */\nWISchnorrClient.prototype.GenerateRandomNumber = function () {\n  const bytes =\n    Math.floor(Math.random() * (this.q.bitLength() / 8 - 1 + 1)) + 1;\n  const r = CryptoJS.lib.WordArray.random(bytes);\n  const rhex = CryptoJS.enc.Hex.stringify(r);\n  return new BigInteger(rhex, 16).mod(this.q);\n};\n\n/* Generates a challenge 'e' for the server */\nWISchnorrClient.prototype.GenerateWISchnorrClientChallenge = function (\n  params,\n  info,\n  msg,\n): WISchnorrChallenge {\n  const t1: BigInteger = this.GenerateRandomNumber();\n  const t2: BigInteger = this.GenerateRandomNumber();\n  const t3: BigInteger = this.GenerateRandomNumber();\n  const t4: BigInteger = this.GenerateRandomNumber();\n\n  const F = sha256(info);\n  // z = F^((p-1)/q) mod p\n  const z = F.modPow(\n    this.p.subtract(new BigInteger('1')).divide(this.q),\n    this.p,\n  );\n  // alpha = a * g^t1 * y^t2\n  const a = new BigInteger(params.a);\n  const alpha = a\n    .multiply(this.g.modPow(t1, this.p))\n    .multiply(this.y.modPow(t2, this.p))\n    .mod(this.p);\n\n  // beta = b * g^t3 * z^t4\n  const b = new BigInteger(params.b);\n  const beta = b\n    .multiply(this.g.modPow(t3, this.p))\n    .multiply(z.modPow(t4, this.p))\n    .mod(this.p);\n\n  const H = sha256(alpha.toString() + beta.toString() + z.toString() + msg);\n  // epsilon = H mod q\n  const epsilon = H.mod(this.q);\n\n  // e = eplison - t2 - t4 mod q\n  const e = epsilon.subtract(t2).subtract(t4).mod(this.q);\n\n  return { e: e.toString(), t: { t1, t2, t3, t4 } };\n};\n\n/* Generates a WISchnorr partially blind signature based on the response from the server */\nWISchnorrClient.prototype.GenerateWISchnorrBlindSignature = function (\n  challenge,\n  response,\n): WISchnorrBlindSignature {\n  // rho = r + t1 mod q\n  const r = new BigInteger(response.r);\n  const rho = r.add(challenge.t1).mod(this.q);\n\n  // omega = c + t2 mod q\n  const c = new BigInteger(response.c);\n  const omega = c.add(challenge.t2).mod(this.q);\n\n  // sigma = s + t3 mod q\n  const s = new BigInteger(response.s);\n  const sigma = s.add(challenge.t3).mod(this.q);\n\n  // delta = d + t4 mod q\n  const d = new BigInteger(response.d);\n  const delta = d.add(challenge.t4).mod(this.q);\n\n  return {\n    rho: rho.toString(),\n    omega: omega.toString(),\n    sigma: sigma.toString(),\n    delta: delta.toString(),\n  };\n};\n\n/* Verifies a WISchnorr partially blind signature */\nWISchnorrClient.prototype.VerifyWISchnorrBlindSignature = function (\n  signature,\n  info,\n  msg,\n) {\n  const F = sha256(info);\n  // z = F^((p-1)/q) mod p\n  const z = F.modPow(\n    this.p.subtract(new BigInteger('1')).divide(this.q),\n    this.p,\n  );\n\n  // g^rho mod p\n  const gp = this.g.modPow(new BigInteger(signature.rho), this.p);\n  // y^omega mod p\n  const yw = this.y.modPow(new BigInteger(signature.omega), this.p);\n  // g^rho * y^omega mod p\n  const gpyw = gp.multiply(yw).mod(this.p);\n\n  // g^sigma mod p\n  const gs = this.g.modPow(new BigInteger(signature.sigma), this.p);\n  // z^delta mod p\n  const zd = z.modPow(new BigInteger(signature.delta), this.p);\n  // g^sigma * z^delta mod p\n  const gszd = gs.multiply(zd).mod(this.p);\n\n  const H = sha256(gpyw.toString() + gszd.toString() + z.toString() + msg);\n  // hsig = H mod q\n  const hsig = H.mod(this.q);\n\n  // vsig = omega + delta mod q\n  const vsig = new BigInteger(signature.omega)\n    .add(new BigInteger(signature.delta))\n    .mod(this.q);\n\n  return vsig.compareTo(hsig) === 0;\n};\n\nmodule.exports = WISchnorrClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}