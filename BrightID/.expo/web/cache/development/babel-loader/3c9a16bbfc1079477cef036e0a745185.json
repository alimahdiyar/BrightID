{"ast":null,"code":"'use strict';\n\nvar validateFormat = process.env.NODE_ENV !== \"production\" ? function (format) {} : function (format) {\n  if (format === undefined) {\n    throw new Error('invariant(...): Second argument must be a string.');\n  }\n};\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-reanimated/node_modules/fbjs/lib/invariant.js"],"names":["validateFormat","process","format","_len","arguments","args","_key","error","argIndex","String","module"],"mappings":"AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,GAAwC,UAAA,MAAA,EAAkB,CAA1DA,CAAAA,GAA+D,UAAA,MAAA,EAAkB;EACpG,IAAIC,MAAM,KAAV,SAAA,EAA0B;IACxB,MAAM,IAAA,KAAA,CAAN,mDAAM,CAAN;EAEH;AAJD,CAAA;;AAeA,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAsC;EACpC,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAApB,MAAA,EAA6BC,IAAI,GAAG,IAAA,KAAA,CAAUF,IAAI,GAAJA,CAAAA,GAAWA,IAAI,GAAfA,CAAAA,GAA9C,CAAoC,CAApC,EAAwEG,IAAI,GAAjF,CAAA,EAAuFA,IAAI,GAA3F,IAAA,EAAoGA,IAApG,EAAA,EAA4G;IAC1GD,IAAI,CAACC,IAAI,GAATD,CAAI,CAAJA,GAAiBD,SAAS,CAA1BC,IAA0B,CAA1BA;EAGFL;;EAAAA,cAAc,CAAdA,MAAc,CAAdA;;EAEA,IAAI,CAAJ,SAAA,EAAgB;IACd,IAAA,KAAA;;IAEA,IAAIE,MAAM,KAAV,SAAA,EAA0B;MACxBK,KAAK,GAAG,IAAA,KAAA,CAAU,uEAAlBA,6DAAQ,CAARA;IADF,CAAA,MAEO;MACL,IAAIC,QAAQ,GAAZ,CAAA;MACAD,KAAK,GAAG,IAAA,KAAA,CAAUL,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAsB,YAAY;QAClD,OAAOO,MAAM,CAACJ,IAAI,CAACG,QAAnB,EAAkB,CAAL,CAAb;MADFD,CAAkBL,CAAV,CAARK;MAGAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;IAGFA;;IAAAA,KAAK,CAALA,WAAAA,GAAAA,CAAAA;IAEA,MAAA,KAAA;EAEH;AAEDG;;AAAAA,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nvar validateFormat = process.env.NODE_ENV !== \"production\" ? function (format) {} : function (format) {\n  if (format === undefined) {\n    throw new Error('invariant(...): Second argument must be a string.');\n  }\n};\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments to provide\n * information about what broke and what you were expecting.\n *\n * The invariant message will be stripped in production, but the invariant will\n * remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"]},"metadata":{},"sourceType":"script"}