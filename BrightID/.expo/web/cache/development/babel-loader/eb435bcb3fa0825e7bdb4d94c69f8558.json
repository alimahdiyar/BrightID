{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _base = require(\"../base\");\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"../core/InternalAnimatedValue\"));\n\nvar MAX_STEPS_MS = 64;\n\nfunction spring(clock, state, config) {\n  var lastTime = (0, _base.cond)(state.time, state.time, clock);\n  var deltaTime = (0, _base.min)((0, _base.sub)(clock, lastTime), MAX_STEPS_MS);\n  var c = config.damping;\n  var m = config.mass;\n  var k = config.stiffness;\n  var v0 = (0, _base.multiply)(-1, state.velocity);\n  var x0 = (0, _base.sub)(config.toValue, state.position);\n  var zeta = (0, _base.divide)(c, (0, _base.multiply)(2, (0, _base.sqrt)((0, _base.multiply)(k, m))));\n  var omega0 = (0, _base.sqrt)((0, _base.divide)(k, m));\n  var omega1 = (0, _base.multiply)(omega0, (0, _base.sqrt)((0, _base.sub)(1, (0, _base.multiply)(zeta, zeta))));\n  var t = (0, _base.divide)(deltaTime, 1000);\n  var sin1 = (0, _base.sin)((0, _base.multiply)(omega1, t));\n  var cos1 = (0, _base.cos)((0, _base.multiply)(omega1, t));\n  var underDampedEnvelope = (0, _base.exp)((0, _base.multiply)(-1, zeta, omega0, t));\n  var underDampedFrag1 = (0, _base.multiply)(underDampedEnvelope, (0, _base.add)((0, _base.multiply)(sin1, (0, _base.divide)((0, _base.add)(v0, (0, _base.multiply)(zeta, omega0, x0)), omega1)), (0, _base.multiply)(x0, cos1)));\n  var underDampedPosition = (0, _base.sub)(config.toValue, underDampedFrag1);\n  var underDampedVelocity = (0, _base.sub)((0, _base.multiply)(zeta, omega0, underDampedFrag1), (0, _base.multiply)(underDampedEnvelope, (0, _base.sub)((0, _base.multiply)(cos1, (0, _base.add)(v0, (0, _base.multiply)(zeta, omega0, x0))), (0, _base.multiply)(omega1, x0, sin1))));\n  var criticallyDampedEnvelope = (0, _base.exp)((0, _base.multiply)(-1, omega0, t));\n  var criticallyDampedPosition = (0, _base.sub)(config.toValue, (0, _base.multiply)(criticallyDampedEnvelope, (0, _base.add)(x0, (0, _base.multiply)((0, _base.add)(v0, (0, _base.multiply)(omega0, x0)), t))));\n  var criticallyDampedVelocity = (0, _base.multiply)(criticallyDampedEnvelope, (0, _base.add)((0, _base.multiply)(v0, (0, _base.sub)((0, _base.multiply)(t, omega0), 1)), (0, _base.multiply)(t, x0, omega0, omega0)));\n  var prevPosition = state.prevPosition ? state.prevPosition : new _InternalAnimatedValue.default(0);\n  var isOvershooting = (0, _base.cond)((0, _base.and)(config.overshootClamping, (0, _base.neq)(config.stiffness, 0)), (0, _base.cond)((0, _base.lessThan)(prevPosition, config.toValue), (0, _base.greaterThan)(state.position, config.toValue), (0, _base.lessThan)(state.position, config.toValue)));\n  var isVelocity = (0, _base.lessThan)((0, _base.abs)(state.velocity), config.restSpeedThreshold);\n  var isDisplacement = (0, _base.or)((0, _base.eq)(config.stiffness, 0), (0, _base.lessThan)((0, _base.abs)((0, _base.sub)(config.toValue, state.position)), config.restDisplacementThreshold));\n  return (0, _base.block)([(0, _base.set)(prevPosition, state.position), (0, _base.cond)((0, _base.lessThan)(zeta, 1), [(0, _base.set)(state.position, underDampedPosition), (0, _base.set)(state.velocity, underDampedVelocity)], [(0, _base.set)(state.position, criticallyDampedPosition), (0, _base.set)(state.velocity, criticallyDampedVelocity)]), (0, _base.set)(state.time, clock), (0, _base.cond)((0, _base.or)(isOvershooting, (0, _base.and)(isVelocity, isDisplacement)), [(0, _base.cond)((0, _base.neq)(config.stiffness, 0), [(0, _base.set)(state.velocity, 0), (0, _base.set)(state.position, config.toValue)]), (0, _base.set)(state.finished, 1)])]);\n}\n\nvar procSpring = (0, _base.proc)(function (finished, velocity, position, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock) {\n  return spring(clock, {\n    finished: finished,\n    velocity: velocity,\n    position: position,\n    time: time,\n    prevPosition: prevPosition\n  }, {\n    toValue: toValue,\n    damping: damping,\n    mass: mass,\n    stiffness: stiffness,\n    overshootClamping: overshootClamping,\n    restDisplacementThreshold: restDisplacementThreshold,\n    restSpeedThreshold: restSpeedThreshold\n  });\n});\n\nvar _default = function _default(clock, _ref, _ref2) {\n  var finished = _ref.finished,\n      velocity = _ref.velocity,\n      position = _ref.position,\n      time = _ref.time,\n      prevPosition = _ref.prevPosition;\n  var toValue = _ref2.toValue,\n      damping = _ref2.damping,\n      mass = _ref2.mass,\n      stiffness = _ref2.stiffness,\n      overshootClamping = _ref2.overshootClamping,\n      restDisplacementThreshold = _ref2.restDisplacementThreshold,\n      restSpeedThreshold = _ref2.restSpeedThreshold;\n  return procSpring(finished, velocity, position, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock);\n};\n\nexports.default = _default;","map":{"version":3,"sources":["spring.js"],"names":["MAX_STEPS_MS","lastTime","cond","state","deltaTime","min","sub","c","config","m","k","v0","multiply","x0","zeta","divide","sqrt","omega0","omega1","t","sin1","sin","cos1","cos","underDampedEnvelope","exp","underDampedFrag1","add","underDampedPosition","underDampedVelocity","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","prevPosition","isOvershooting","and","neq","lessThan","greaterThan","isVelocity","abs","isDisplacement","or","eq","block","set","procSpring","proc","spring","finished","velocity","position","time","toValue","damping","mass","stiffness","overshootClamping","restDisplacementThreshold","restSpeedThreshold"],"mappings":"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","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  sqrt,\n  add,\n  block,\n  set,\n  exp,\n  sin,\n  cos,\n  eq,\n  or,\n  neq,\n  and,\n  lessThan,\n  greaterThan,\n  proc,\n  min,\n  abs,\n} from '../base';\nimport AnimatedValue from '../core/InternalAnimatedValue';\n\nconst MAX_STEPS_MS = 64;\n\nfunction spring(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n\n  const deltaTime = min(sub(clock, lastTime), MAX_STEPS_MS);\n\n  const c = config.damping;\n  const m = config.mass;\n  const k = config.stiffness;\n\n  const v0 = multiply(-1, state.velocity);\n  const x0 = sub(config.toValue, state.position);\n\n  const zeta = divide(c, multiply(2, sqrt(multiply(k, m)))); // damping ratio\n  const omega0 = sqrt(divide(k, m)); // undamped angular frequency of the oscillator (rad/ms)\n  const omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta)))); // exponential decay\n\n  const t = divide(deltaTime, 1000); // in seconds\n\n  const sin1 = sin(multiply(omega1, t));\n  const cos1 = cos(multiply(omega1, t));\n\n  // under damped\n  const underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));\n  const underDampedFrag1 = multiply(\n    underDampedEnvelope,\n    add(\n      multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)),\n      multiply(x0, cos1)\n    )\n  );\n  const underDampedPosition = sub(config.toValue, underDampedFrag1);\n  // This looks crazy -- it's actually just the derivative of the oscillation function\n  const underDampedVelocity = sub(\n    multiply(zeta, omega0, underDampedFrag1),\n    multiply(\n      underDampedEnvelope,\n      sub(\n        multiply(cos1, add(v0, multiply(zeta, omega0, x0))),\n        multiply(omega1, x0, sin1)\n      )\n    )\n  );\n\n  // critically damped\n  const criticallyDampedEnvelope = exp(multiply(-1, omega0, t));\n  const criticallyDampedPosition = sub(\n    config.toValue,\n    multiply(\n      criticallyDampedEnvelope,\n      add(x0, multiply(add(v0, multiply(omega0, x0)), t))\n    )\n  );\n  const criticallyDampedVelocity = multiply(\n    criticallyDampedEnvelope,\n    add(\n      multiply(v0, sub(multiply(t, omega0), 1)),\n      multiply(t, x0, omega0, omega0)\n    )\n  );\n\n  // conditions for stopping the spring animations\n  const prevPosition = state.prevPosition\n    ? state.prevPosition\n    : new AnimatedValue(0);\n\n  const isOvershooting = cond(\n    and(config.overshootClamping, neq(config.stiffness, 0)),\n    cond(\n      lessThan(prevPosition, config.toValue),\n      greaterThan(state.position, config.toValue),\n      lessThan(state.position, config.toValue)\n    )\n  );\n  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);\n  const isDisplacement = or(\n    eq(config.stiffness, 0),\n    lessThan(\n      abs(sub(config.toValue, state.position)),\n      config.restDisplacementThreshold\n    )\n  );\n\n  return block([\n    set(prevPosition, state.position),\n    cond(\n      lessThan(zeta, 1),\n      [\n        set(state.position, underDampedPosition),\n        set(state.velocity, underDampedVelocity),\n      ],\n      [\n        set(state.position, criticallyDampedPosition),\n        set(state.velocity, criticallyDampedVelocity),\n      ]\n    ),\n    set(state.time, clock),\n    cond(or(isOvershooting, and(isVelocity, isDisplacement)), [\n      cond(neq(config.stiffness, 0), [\n        set(state.velocity, 0),\n        set(state.position, config.toValue),\n      ]),\n      set(state.finished, 1),\n    ]),\n  ]);\n}\n\nconst procSpring = proc(\n  (\n    finished,\n    velocity,\n    position,\n    time,\n    prevPosition,\n    toValue,\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    clock\n  ) =>\n    spring(\n      clock,\n      {\n        finished,\n        velocity,\n        position,\n        time,\n        // @ts-ignore\n        prevPosition,\n      },\n      {\n        toValue,\n        damping,\n        mass,\n        stiffness,\n        overshootClamping,\n        restDisplacementThreshold,\n        restSpeedThreshold,\n      }\n    )\n);\n\nexport default (\n  clock,\n  {\n    finished,\n    velocity,\n    position,\n    time,\n    // @ts-ignore\n    prevPosition,\n  },\n  {\n    toValue,\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restDisplacementThreshold,\n    restSpeedThreshold,\n  }\n) =>\n  procSpring(\n    finished,\n    velocity,\n    position,\n    time,\n    prevPosition,\n    toValue,\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    clock\n  );\n"]},"metadata":{},"sourceType":"script"}