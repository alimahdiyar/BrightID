{"ast":null,"code":"import PushNotificationIOS from '@react-native-community/push-notification-ios';\nimport * as PushNotification from 'react-native-push-notification';\nimport { setDeviceToken, setNotificationToken } from \"./actions\";\nimport { store } from \"./store\";\nimport notificationService from \"./api/notificationService\";\nexport function notificationSubscription() {\n  PushNotification.configure({\n    onRegister: function onRegister(_ref) {\n      var token = _ref.token;\n\n      var _store$getState = store.getState(),\n          notifications = _store$getState.notifications;\n\n      if (token) {\n        console.log('RECIEVED_NOTIFICATION_TOKEN', token);\n        var oldDeviceToken = notifications.deviceToken && notifications.deviceToken !== token ? notifications.deviceToken : null;\n        notificationService.getToken({\n          deviceToken: token,\n          notificationToken: notifications.notificationToken,\n          oldDeviceToken: oldDeviceToken\n        }).then(function (_ref2) {\n          var notificationToken = _ref2.notificationToken;\n          if (notificationToken && notificationToken !== notifications.notificationToken) store.dispatch(setNotificationToken(notificationToken));\n        }).catch(function (err) {\n          console.log(err.message);\n        });\n        store.dispatch(setDeviceToken(token));\n      }\n    },\n    onNotification: function onNotification(notification) {\n      console.log('NOTIFICATION:', notification);\n      notification.finish(PushNotificationIOS.FetchResult.NoData);\n    },\n    onAction: function onAction(notification) {\n      console.log('ACTION:', notification.action);\n      console.log('NOTIFICATION:', notification);\n    },\n    onRegistrationError: function onRegistrationError(err) {\n      console.log(err.message, err);\n    },\n    permissions: {\n      alert: true,\n      badge: true,\n      sound: true\n    },\n    popInitialNotification: true,\n    requestPermissions: true\n  });\n  PushNotification.createChannel({\n    channelId: 'brightid-main',\n    channelName: 'Brightid Main',\n    channelDescription: 'A channel to recieve BrightID notifications',\n    soundName: 'default',\n    importance: 4,\n    vibrate: true\n  }, function (created) {\n    return console.log(\"createChannel returned '\" + created + \"'\");\n  });\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/NotificationService.ts"],"names":["PushNotification","onRegister","token","notifications","store","console","oldDeviceToken","notificationService","deviceToken","notificationToken","setNotificationToken","err","setDeviceToken","onNotification","notification","PushNotificationIOS","onAction","onRegistrationError","permissions","alert","badge","sound","popInitialNotification","requestPermissions","channelId","channelName","channelDescription","soundName","importance","vibrate"],"mappings":"AAAA,OAAA,mBAAA,MAAA,+CAAA;AACA,OAAO,KAAP,gBAAA,MAAA,gCAAA;AACA,SAAA,cAAA,EAAA,oBAAA;AACA,SAAA,KAAA;AACA,OAAA,mBAAA;AAEA,OAAO,SAAA,wBAAA,GAAoC;EAEzCA,gBAAgB,CAAhBA,SAAAA,CAA2B;IAEzBC,UAFyB,EAAA,SAAA,UAAA,CAAA,IAAA,EAEH;MAATC,IAAAA,KAAS,GAAA,IAAA,CAATA,KAAAA;;MACX,IAAA,eAAA,GAA0BE,KAAK,CAA/B,QAA0BA,EAA1B;MAAA,IAAQD,aAAR,GAAA,eAAA,CAAA,aAAA;;MAEA,IAAA,KAAA,EAAW;QACTE,OAAO,CAAPA,GAAAA,CAAAA,6BAAAA,EAAAA,KAAAA;QAKA,IAAMC,cAAc,GAClBH,aAAa,CAAbA,WAAAA,IAA6BA,aAAa,CAAbA,WAAAA,KAA7BA,KAAAA,GACIA,aAAa,CADjBA,WAAAA,GADF,IAAA;QAKAI,mBAAmB,CAAnBA,QAAAA,CACY;UACRC,WAAW,EADH,KAAA;UAERC,iBAAiB,EAAEN,aAAa,CAFxB,iBAAA;UAGRG,cAAc,EAJlBC;QACY,CADZA,EAAAA,IAAAA,CAMQ,UAAA,KAAA,EAA2B;UAAxBE,IAAAA,iBAAwB,GAAA,KAAA,CAAxBA,iBAAAA;UACP,IACEA,iBAAiB,IACjBA,iBAAiB,KAAKN,aAAa,CAFrC,iBAAA,EAIEC,KAAK,CAALA,QAAAA,CAAeM,oBAAoB,CAAnCN,iBAAmC,CAAnCA;QAXNG,CAAAA,EAAAA,KAAAA,CAaS,UAAA,GAAA,EAAS;UACdF,OAAO,CAAPA,GAAAA,CAAYM,GAAG,CAAfN,OAAAA;QAdJE,CAAAA;QAgBAH,KAAK,CAALA,QAAAA,CAAeQ,cAAc,CAA7BR,KAA6B,CAA7BA;MAEH;IAlCwB,CAAA;IAqCzBS,cArCyB,EAAA,SAAA,cAAA,CAAA,YAAA,EAqCI;MAC3BR,OAAO,CAAPA,GAAAA,CAAAA,eAAAA,EAAAA,YAAAA;MAKAS,YAAY,CAAZA,MAAAA,CAAoBC,mBAAmB,CAAnBA,WAAAA,CAApBD,MAAAA;IA3CuB,CAAA;IA+CzBE,QA/CyB,EAAA,SAAA,QAAA,CAAA,YAAA,EA+CF;MACrBX,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,EAAuBS,YAAY,CAAnCT,MAAAA;MACAA,OAAO,CAAPA,GAAAA,CAAAA,eAAAA,EAAAA,YAAAA;IAjDuB,CAAA;IAuDzBY,mBAvDyB,EAAA,SAAA,mBAAA,CAAA,GAAA,EAuDA;MACvBZ,OAAO,CAAPA,GAAAA,CAAYM,GAAG,CAAfN,OAAAA,EAAAA,GAAAA;IAxDuB,CAAA;IA4DzBa,WAAW,EAAE;MACXC,KAAK,EADM,IAAA;MAEXC,KAAK,EAFM,IAAA;MAGXC,KAAK,EA/DkB;IA4DZ,CA5DY;IAoEzBC,sBAAsB,EApEG,IAAA;IA6EzBC,kBAAkB,EA7EpBvB;EAA2B,CAA3BA;EAgFAA,gBAAgB,CAAhBA,aAAAA,CACE;IACEwB,SAAS,EADX,eAAA;IAEEC,WAAW,EAFb,eAAA;IAGEC,kBAAkB,EAHpB,6CAAA;IAIEC,SAAS,EAJX,SAAA;IAKEC,UAAU,EALZ,CAAA;IAMEC,OAAO,EAPX7B;EACE,CADFA,EASE,UAAA,OAAA,EAAA;IAAA,OAAaK,OAAO,CAAPA,GAAAA,CAAAA,6BAAAA,OAAAA,GAAb,GAAaA,CAAb;EATFL,CAAAA;AAWD","sourcesContent":["import PushNotificationIOS from '@react-native-community/push-notification-ios';\nimport * as PushNotification from 'react-native-push-notification';\nimport { setDeviceToken, setNotificationToken } from '@/actions';\nimport { store } from '@/store';\nimport notificationService from '@/api/notificationService';\n\nexport function notificationSubscription() {\n  // Must be outside of any component LifeCycle (such as `componentDidMount`).\n  PushNotification.configure({\n    // (optional) Called when Token is generated (iOS and Android)\n    onRegister({ token }) {\n      const { notifications } = store.getState();\n\n      if (token) {\n        console.log('RECIEVED_NOTIFICATION_TOKEN', token);\n        // always update the server with our device token.\n        // if notificationToken exists, then our connections already have it\n        // so we need to make sure that the notification server is also synced\n\n        const oldDeviceToken =\n          notifications.deviceToken && notifications.deviceToken !== token\n            ? notifications.deviceToken\n            : null;\n\n        notificationService\n          .getToken({\n            deviceToken: token,\n            notificationToken: notifications.notificationToken,\n            oldDeviceToken,\n          })\n          .then(({ notificationToken }) => {\n            if (\n              notificationToken &&\n              notificationToken !== notifications.notificationToken\n            )\n              store.dispatch(setNotificationToken(notificationToken));\n          })\n          .catch((err) => {\n            console.log(err.message);\n          });\n        store.dispatch(setDeviceToken(token));\n      }\n    },\n\n    // (required) Called when a remote is received or opened, or local notification is opened\n    onNotification(notification) {\n      console.log('NOTIFICATION:', notification);\n\n      // process the notification\n\n      // (required) Called when a remote is received or opened, or local notification is opened\n      notification.finish(PushNotificationIOS.FetchResult.NoData);\n    },\n\n    // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)\n    onAction(notification) {\n      console.log('ACTION:', notification.action);\n      console.log('NOTIFICATION:', notification);\n\n      // process the action\n    },\n\n    // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)\n    onRegistrationError(err) {\n      console.log(err.message, err);\n    },\n\n    // IOS ONLY (optional): default: all - Permissions to register.\n    permissions: {\n      alert: true,\n      badge: true,\n      sound: true,\n    },\n\n    // Should the initial notification be popped automatically\n    // default: true\n    popInitialNotification: true,\n\n    /**\n     * (optional) default: true\n     * - Specified if permissions (ios) and token (android and ios) will requested or not,\n     * - if not, you must call PushNotificationsHandler.requestPermissions() later\n     * - if you are not using remote notification or do not have Firebase installed, use this:\n     *     requestPermissions: Platform.OS === 'ios'\n     */\n    requestPermissions: true,\n  });\n\n  PushNotification.createChannel(\n    {\n      channelId: 'brightid-main', // (required)\n      channelName: 'Brightid Main', // (required)\n      channelDescription: 'A channel to recieve BrightID notifications', // (optional) default: undefined.\n      soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function\n      importance: 4, // (optional) default: 4. Int value of the Android notification importance\n      vibrate: true, // (optional) default: true. Creates the default vibration patten if true.\n    },\n    (created) => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.\n  );\n}\n"]},"metadata":{},"sourceType":"module"}