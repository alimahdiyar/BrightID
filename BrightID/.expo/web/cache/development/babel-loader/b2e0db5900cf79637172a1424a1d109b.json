{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"key\", \"routeNames\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useChildListeners from \"./useChildListeners\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useSyncState from \"./useSyncState\";\nimport checkSerializable from \"./checkSerializable\";\nvar NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/5.x/navigating-without-navigation-prop#handling-initialization for more details.\";\nvar serializableWarnings = [];\n\ntry {\n  Object.defineProperty(global, 'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED', {\n    set: function set(_) {\n      console.warn(\"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/5.x/devtools\");\n    }\n  });\n} catch (e) {}\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, _excluded);\n\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = useChildListeners(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = function dispatch(action) {\n    if (listeners.focus[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners.focus[0](function (navigation) {\n      return navigation.dispatch(action);\n    });\n  };\n\n  var canGoBack = function canGoBack() {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners.focus[0](function (navigation) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n        target: target\n      }));\n    });\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state === undefined) {\n      return undefined;\n    }\n\n    while (state.routes[state.index].state !== undefined) {\n      state = state.routes[state.index].state;\n    }\n\n    return state.routes[state.index];\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n\n  var _useOptionsGetters = useOptionsGetters({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  React.useImperativeHandle(ref, function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      resetRoot: resetRoot,\n      dispatch: dispatch,\n      canGoBack: canGoBack,\n      getRootState: getRootState,\n      getState: function getState() {\n        return state;\n      },\n      getParent: function getParent() {\n        return undefined;\n      },\n      dangerouslyGetState: function dangerouslyGetState() {\n        return state;\n      },\n      dangerouslyGetParent: function dangerouslyGetParent() {\n        return undefined;\n      },\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions\n    });\n  });\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n  });\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined) {\n        var result = checkSerializable(state);\n\n        if (!result.serializable) {\n          var location = result.location,\n              reason = result.reason;\n          var path = '';\n          var pointer = state;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \".concat(curr);\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\".concat(curr, \"]\");\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\".concat(curr);\n              } else {\n                path += \"[\".concat(JSON.stringify(curr), \"]\");\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\".concat(path, \" (\").concat(reason, \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/5.x/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\");\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(getRootState());\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\".concat(action.type, \"'\").concat(payload ? \" with payload \".concat(JSON.stringify(action.payload)) : '', \" was not handled by any navigator.\");\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\".concat(payload.name, \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/5.x/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\");\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/5.x/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children)))));\n\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["NOT_INITIALIZED_ERROR","serializableWarnings","Object","set","console","getPartialState","state","key","routeNames","partialState","stale","routes","route","BaseNavigationContainer","React","initialState","onStateChange","onUnhandledAction","independent","children","parent","getState","setState","scheduleUpdate","flushUpdates","useSyncState","isFirstMountRef","navigatorKeyRef","getKey","setKey","listeners","addListener","useChildListeners","keyedListeners","addKeyedListener","useKeyedChildListeners","dispatch","navigation","canGoBack","result","handled","resetRoot","target","CommonActions","getRootState","getCurrentRoute","emitter","useEventEmitter","addOptionsGetter","getCurrentOptions","useOptionsGetters","acc","getParent","dangerouslyGetState","dangerouslyGetParent","onDispatchAction","type","data","action","noop","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","process","checkSerializable","location","reason","path","pointer","params","i","curr","prev","JSON","message","defaultOnUnhandledAction","payload","element","ScheduleUpdateContext","value","NavigationBuilderContext","NavigationStateContext","UnhandledActionContext","NavigationRouteContext","NavigationContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationContext from './NavigationContext';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useChildListeners from './useChildListeners';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nimport checkSerializable from './checkSerializable';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerProps,\n} from './types';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/5.x/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nconst serializableWarnings: string[] = [];\n\ntry {\n  /**\n   * Migration instructions for removal of devtools from core\n   */\n  Object.defineProperty(\n    global,\n    'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED',\n    {\n      set(_) {\n        console.warn(\n          \"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/5.x/devtools\"\n        );\n      },\n    }\n  );\n} catch (e) {\n  // Ignore\n}\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [\n      state,\n      getState,\n      setState,\n      scheduleUpdate,\n      flushUpdates,\n    ] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners.focus[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners.focus[0]((navigation) => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          throw new Error(NOT_INITIALIZED_ERROR);\n        }\n\n        listeners.focus[0]((navigation) =>\n          navigation.dispatch({\n            ...CommonActions.reset(state),\n            target,\n          })\n        );\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      let state = getRootState();\n      if (state === undefined) {\n        return undefined;\n      }\n      while (state.routes[state.index].state !== undefined) {\n        state = state.routes[state.index].state as NavigationState;\n      }\n      return state.routes[state.index];\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-expect-error: we can't know the type statically\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n      getState: () => state,\n      getParent: () => undefined,\n      dangerouslyGetState: () => state,\n      dangerouslyGetParent: () => undefined,\n      getCurrentRoute,\n      getCurrentOptions,\n    }));\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({ type: '__unsafe_action__', data: { action, noop } });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n    });\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (state !== undefined) {\n          const result = checkSerializable(state);\n\n          if (!result.serializable) {\n            const { location, reason } = result;\n\n            let path = '';\n            let pointer: Record<any, any> = state;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/5.x/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/5.x/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/5.x/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <ScheduleUpdateContext.Provider value={scheduleContext}>\n        <NavigationBuilderContext.Provider value={builderContext}>\n          <NavigationStateContext.Provider value={context}>\n            <UnhandledActionContext.Provider\n              value={onUnhandledAction ?? defaultOnUnhandledAction}\n            >\n              <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n            </UnhandledActionContext.Provider>\n          </NavigationStateContext.Provider>\n        </NavigationBuilderContext.Provider>\n      </ScheduleUpdateContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}