{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from \"./NavigationContext\";\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n      emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["state","emitter","navigation","React","lastFocusedKeyRef","currentFocusedKey","type","target","lastFocusedKey"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,iBAAA;AAYA,eAAe,SAAA,cAAA,CAAA,IAAA,EAGI;EAFjBA,IAAAA,KAEiB,GAAA,IAAA,CAFjBA,KAAAA;EAAAA,IACAC,OACiB,GAAA,IAAA,CADjBA,OADAD;EAGA,IAAME,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,iBAAmBA,CAAnB;EACA,IAAMC,iBAAiB,GAAGD,KAAK,CAA/B,MAA0BA,EAA1B;EAEA,IAAME,iBAAiB,GAAGL,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAA1B,GAAA;EAIAG,KAAK,CAALA,SAAAA,CACE,YAAA;IAAA,OACED,UADF,KAAA,IACEA,IAAAA,UADF,KAAA,KAAA,CACEA,GADF,KAAA,CACEA,GAAAA,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAiC,YAAM;MACrCE,iBAAiB,CAAjBA,OAAAA,GAAAA,iBAAAA;MACAH,OAAO,CAAPA,IAAAA,CAAa;QAAEK,IAAI,EAAN,OAAA;QAAiBC,MAAM,EAFtCL;MAEe,CAAbD;IAHJ,CACEC,CADF;EADFC,CAAAA,EAME,CAAA,iBAAA,EAAA,OAAA,EANFA,UAME,CANFA;EASAA,KAAK,CAALA,SAAAA,CACE,YAAA;IAAA,OACED,UADF,KAAA,IACEA,IAAAA,UADF,KAAA,KAAA,CACEA,GADF,KAAA,CACEA,GAAAA,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAAgC,YAAM;MACpCE,iBAAiB,CAAjBA,OAAAA,GAAAA,SAAAA;MACAH,OAAO,CAAPA,IAAAA,CAAa;QAAEK,IAAI,EAAN,MAAA;QAAgBC,MAAM,EAFrCL;MAEe,CAAbD;IAHJ,CACEC,CADF;EADFC,CAAAA,EAME,CAAA,iBAAA,EAAA,OAAA,EANFA,UAME,CANFA;EASAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMK,cAAc,GAAGJ,iBAAiB,CAAxC,OAAA;IAEAA,iBAAiB,CAAjBA,OAAAA,GAAAA,iBAAAA;;IAIA,IAAII,cAAc,KAAdA,SAAAA,IAAgC,CAApC,UAAA,EAAiD;MAC/CP,OAAO,CAAPA,IAAAA,CAAa;QAAEK,IAAI,EAAN,OAAA;QAAiBC,MAAM,EARlB;MAQL,CAAbN;IAKF;;IAAA,IACEO,cAAc,KAAdA,iBAAAA,IACA,EAAEN,UAAU,GAAGA,UAAU,CAAb,SAAGA,EAAH,GAFd,IAEE,CAFF,EAGE;MACA;IAGF;;IAAA,IAAIM,cAAc,KAAlB,SAAA,EAAkC;MAEhC;IAGFP;;IAAAA,OAAO,CAAPA,IAAAA,CAAa;MAAEK,IAAI,EAAN,MAAA;MAAgBC,MAAM,EAAnCN;IAAa,CAAbA;IACAA,OAAO,CAAPA,IAAAA,CAAa;MAAEK,IAAI,EAAN,OAAA;MAAiBC,MAAM,EA1BtCJ;IA0Be,CAAbF;EA1BFE,CAAAA,EA2BG,CAAA,iBAAA,EAAA,OAAA,EA3BHA,UA2BG,CA3BHA;AA4BD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}