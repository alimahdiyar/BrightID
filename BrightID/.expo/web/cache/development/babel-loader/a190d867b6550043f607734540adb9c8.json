{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React from 'react';\nimport ReactNative from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar NativeModules = ReactNative.NativeModules,\n    processColor = ReactNative.processColor,\n    requireNativeComponent = ReactNative.requireNativeComponent,\n    View = ReactNative.View;\nvar RNSpinkit = null;\n\nvar Spinkit = function (_React$Component) {\n  _inherits(Spinkit, _React$Component);\n\n  var _super = _createSuper(Spinkit);\n\n  function Spinkit() {\n    _classCallCheck(this, Spinkit);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Spinkit, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.isVisible) return _jsx(View, {});\n      var size = {\n        height: this.props.size,\n        width: this.props.size\n      };\n      var colorNumber = processColor(this.props.color);\n      return _jsx(RNSpinkit, {\n        type: String(this.props.type),\n        size: parseInt(this.props.size),\n        color: colorNumber,\n        style: [size, this.props.style]\n      });\n    }\n  }]);\n\n  return Spinkit;\n}(React.Component);\n\nSpinkit.propTypes = {\n  type: PropTypes.string,\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  size: PropTypes.number,\n  isVisible: PropTypes.bool,\n  testID: PropTypes.string,\n  accessibilityComponentType: PropTypes.string,\n  accessibilityLabel: PropTypes.string,\n  accessibilityLiveRegion: PropTypes.string,\n  renderToHardwareTextureAndroid: PropTypes.bool,\n  importantForAccessibility: PropTypes.string,\n  onLayout: PropTypes.func,\n  style: PropTypes.object\n};\nSpinkit.defaultProps = {\n  size: 37,\n  color: \"#000000\",\n  isVisible: true\n};\nNativeModules.RNSpinkit;\nRNSpinkit = requireNativeComponent('RNSpinkit', Spinkit, {\n  nativeOnly: {\n    'nativeID': true\n  }\n});\nmodule.exports = Spinkit;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-spinkit/index.js"],"names":["ReactNative","NativeModules","processColor","requireNativeComponent","View","RNSpinkit","Spinkit","React","Component","propTypes","type","PropTypes","color","size","isVisible","testID","accessibilityComponentType","accessibilityLabel","accessibilityLiveRegion","renderToHardwareTextureAndroid","importantForAccessibility","onLayout","style","defaultProps","height","width","colorNumber","String","parseInt","nativeOnly","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAA,KAAA,MAAA,OAAA;AACOA,OAAAA,WAAAA,M,6BAAAA;AACP,OAAA,SAAA,MAAA,YAAA;;AAEA,IACCC,aADD,GAKID,WALJ,CAAA,aAAA;AAAA,IAECE,YAFD,GAKIF,WALJ,CAAA,YAAA;AAAA,IAGCG,sBAHD,GAKIH,WALJ,CAAA,sBAAA;AAAA,IAICI,IAJD,GAKIJ,WALJ,CAAA,IAAA;AAOA,IAAIK,SAAS,GAAb,IAAA;;AAEMC,IAAAA,O;;;;;;;;;;;;;WA+BL,SAAA,MAAA,GAAS;MACR,IAAI,CAAC,KAAA,KAAA,CAAL,SAAA,EAA2B,OAAO,IAAA,CAAA,IAAA,EAAP,EAAO,CAAP;MAE3B,IAAIO,IAAI,GAAG;QAACW,MAAM,EAAE,KAAA,KAAA,CAAT,IAAA;QAA0BC,KAAK,EAAE,KAAA,KAAA,CAA5C;MAAW,CAAX;MAOA,IAAIC,WAAW,GAAGxB,YAAY,CAAC,KAAA,KAAA,CAA/B,KAA8B,CAA9B;MAEA,OACC,IAAA,CAAA,SAAA,EAAA;QACC,IAAI,EAAEyB,MAAM,CAAC,KAAA,KAAA,CADd,IACa,CADb;QAEC,IAAI,EAAEC,QAAQ,CAAC,KAAA,KAAA,CAFhB,IAEe,CAFf;QAGC,KAAK,EAHN,WAAA;QAIC,KAAK,EAAE,CAAA,IAAA,EAAO,KAAA,KAAA,CALhB,KAKS;MAJR,CAAA,CADD;;;;;EA3CoBrB,KAAK,CAACC,S,CAAtBF;;AAAAA,O,CAEEG,SAFFH,GAEc;EAClBI,IAAI,EAAEC,SAAS,CADG,MAAA;EAUlBC,KAAK,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAVrC,MAUS,CAApBA,CAVW;EAWlBE,IAAI,EAAEF,SAAS,CAXG,MAAA;EAYlBG,SAAS,EAAEH,SAAS,CAZF,IAAA;EAalBI,MAAM,EAAEJ,SAAS,CAbC,MAAA;EAclBK,0BAA0B,EAAEL,SAAS,CAdnB,MAAA;EAelBM,kBAAkB,EAAEN,SAAS,CAfX,MAAA;EAgBlBO,uBAAuB,EAAEP,SAAS,CAhBhB,MAAA;EAiBlBQ,8BAA8B,EAAER,SAAS,CAjBvB,IAAA;EAkBlBS,yBAAyB,EAAET,SAAS,CAlBlB,MAAA;EAmBlBU,QAAQ,EAAEV,SAAS,CAnBD,IAAA;EAoBlBW,KAAK,EAAEX,SAAS,CApBE;AAAA,CAFdL;AAAAA,O,CAyBEiB,YAzBFjB,GAyBiB;EACrBO,IAAI,EADiB,EAAA;EAErBD,KAAK,EAFgB,SAAA;EAGrBE,SAAS,EAHY;AAAA,CAzBjBR;AAwDNL,aAAa,CAAbA,SAAAA;AAGAI,SAAS,GAAGF,sBAAsB,CAAA,WAAA,EAAA,OAAA,EAG9B;EACI0B,UAAU,EAAE;IACR,YALZxB;EAIoB;AADhB,CAH8B,CAAlCA;AAWAyB,MAAM,CAANA,OAAAA,GAAAA,OAAAA","sourcesContent":["import React from 'react'\nimport ReactNative from 'react-native'\nimport PropTypes from 'prop-types';\n\nvar {\n\tNativeModules,\n\tprocessColor,\n\trequireNativeComponent,\n\tView\n} = ReactNative;\n\nvar RNSpinkit = null;\n\nclass Spinkit extends React.Component {\n\n\tstatic propTypes = {\n\t\ttype: PropTypes.string,\n\t\t/**\n\t\t * @prop color\n\t\t * @NOTE This is typically passed as a string, but technically can also be\n\t\t *\ta number (see https://facebook.github.io/react/docs/typechecking-with-proptypes.html).\n\t\t *\tIn addition, allowing a number prop type eliminates the PropType warning\n\t\t *\tReact Native will throw if passing a string into this component but a\n\t\t *\tdifferent type (number) down to the native module.\n\t\t */\n\t\tcolor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\tsize: PropTypes.number,\n\t\tisVisible: PropTypes.bool,\n\t\ttestID: PropTypes.string,\n\t\taccessibilityComponentType: PropTypes.string,\n\t\taccessibilityLabel: PropTypes.string,\n\t\taccessibilityLiveRegion: PropTypes.string,\n\t\trenderToHardwareTextureAndroid: PropTypes.bool,\n\t\timportantForAccessibility: PropTypes.string,\n\t\tonLayout: PropTypes.func,\n\t\tstyle: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tsize: 37,\n\t\tcolor: \"#000000\",\n\t\tisVisible: true\n\t};\n\n\trender() {\n\t\tif (!this.props.isVisible) return <View/>;\n\n\t\tvar size = {height: this.props.size, width: this.props.size};\n\n\t\t// In order to handle all the color specifications allowed in React Native\n\t\t// as a whole, we need to call processColor here, and can pass in the\n\t\t// resulting number directly. RCTConvert will be called on iOS to parse\n\t\t// into #AARRGGBB form; on Android, this int can be used directly for\n\t\t// setting the color.\n\t\tvar colorNumber = processColor(this.props.color);\n\n\t\treturn (\n\t\t\t<RNSpinkit\n\t\t\t\ttype={String(this.props.type)}\n\t\t\t\tsize={parseInt(this.props.size)}\n\t\t\t\tcolor={colorNumber}\n\t\t\t\tstyle={[size, this.props.style]}/>\n\t\t);\n\t}\n\n}\n\n// Since RNPM does not recognize `requireNativeComponent`, so we have to\n// add this line, and RNPM will link native modules automatically\nNativeModules.RNSpinkit;\n\n// Native component\nRNSpinkit = requireNativeComponent(\n\t'RNSpinkit',\n\tSpinkit,\n    {\n        nativeOnly: {\n            'nativeID': true\n        }\n    }\n);\n\n\nmodule.exports = Spinkit;\n"]},"metadata":{},"sourceType":"module"}