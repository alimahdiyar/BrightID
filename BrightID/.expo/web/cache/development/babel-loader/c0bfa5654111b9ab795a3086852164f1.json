{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { useMemo, useCallback, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { selectAllConnections, recoveryConnectionsSelector, firstRecoveryTimeSelector } from \"../../reducer/connectionsSlice\";\nimport { addOperation, setConnectionLevel, setConnectionsSearch, setConnectionsSearchOpen, setFirstRecoveryTime } from \"../../actions\";\nimport { toSearchString } from \"../../utils/strings\";\nimport { ORANGE, WHITE, GREY } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from \"../../utils/constants\";\nimport { DEVICE_LARGE, DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport RecoveryConnectionCard from \"./RecoverConnectionsCard\";\nimport AnimatedTopSearchBar from \"./TopSearchBar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar searchParamSelector = function searchParamSelector(state) {\n  return state.connections.searchParam;\n};\n\nvar newRecoveryConnectionSelector = createSelector([selectAllConnections, searchParamSelector], function (connections, search) {\n  var searchString = toSearchString(search);\n  var includeRecovery = Array(connection_levels.ALREADY_KNOWN, connection_levels.RECOVERY);\n  return connections.filter(function (conn) {\n    return includeRecovery.includes(conn.incomingLevel) && conn.level !== connection_levels.RECOVERY && conn.level !== connection_levels.REPORTED && toSearchString(\"\" + (conn == null ? void 0 : conn.name)).includes(searchString);\n  });\n});\n\nvar EmptyList = function EmptyList() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      width: '100%',\n      height: '100%',\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingTop: '50%'\n    },\n    children: _jsx(Text, {\n      style: styles.emptyMessage,\n      children: t('recoveryConnections.text.pleaseMakeSomeConnections')\n    })\n  });\n};\n\nexport var NewRecoveryConnectionList = function NewRecoveryConnectionList(props) {\n  var navigation = props.navigation;\n\n  var _useTranslation2 = useTranslation(),\n      t = _useTranslation2.t;\n\n  var api = useContext(NodeApiContext);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      myId = _useSelector.id;\n\n  var firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  var connections = useSelector(newRecoveryConnectionSelector);\n  var recoveryConnections = useSelector(recoveryConnectionsSelector);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedAccounts = _useState2[0],\n      setSelectedAccounts = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      updateInProgress = _useState4[0],\n      setUpdateInProgress = _useState4[1];\n\n  var filter = useCallback(function (id) {\n    if (selectedAccounts.includes(id)) {\n      setSelectedAccounts(selectedAccounts.filter(function (value) {\n        return value !== id;\n      }));\n    } else {\n      setSelectedAccounts([].concat(_toConsumableArray(selectedAccounts), [id]));\n    }\n  }, [selectedAccounts]);\n\n  var confirm = function _callee() {\n    var totalRecoveryAccount, promises, _iterator, _step, id, ops, _iterator2, _step2, op;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!updateInProgress) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            setUpdateInProgress(true);\n            console.log(recoveryConnections.length);\n            console.log(selectedAccounts.length);\n            totalRecoveryAccount = recoveryConnections.length + selectedAccounts.length;\n\n            if (!(totalRecoveryAccount < 3)) {\n              _context.next = 11;\n              break;\n            }\n\n            Alert.alert(t('common.alert.error'), t('recoveryConnections.text.threeMore', {\n              amount: 3 - totalRecoveryAccount\n            }));\n            _context.next = 19;\n            break;\n\n          case 11:\n            promises = [];\n\n            for (_iterator = _createForOfIteratorHelperLoose(selectedAccounts); !(_step = _iterator()).done;) {\n              id = _step.value;\n              promises.push(api.addConnection(myId, id, connection_levels.RECOVERY, Date.now()));\n              dispatch(setConnectionLevel({\n                id: id,\n                level: connection_levels.RECOVERY\n              }));\n            }\n\n            if (selectedAccounts.length > 0 && !firstRecoveryTime) {\n              dispatch(setFirstRecoveryTime(Date.now()));\n            }\n\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(Promise.all(promises));\n\n          case 16:\n            ops = _context.sent;\n\n            for (_iterator2 = _createForOfIteratorHelperLoose(ops); !(_step2 = _iterator2()).done;) {\n              op = _step2.value;\n              dispatch(addOperation(op));\n            }\n\n            if (firstRecoveryTime && Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION) {\n              navigation.navigate('RecoveryCooldownInfo', {\n                successCallback: function successCallback() {\n                  navigation.navigate('Home');\n                }\n              });\n            } else {\n              Alert.alert(t('common.alert.success'), t('recoveryConnections.text.completed', 'Recovery connections have been successfully added'));\n              navigation.navigate('Home');\n            }\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](2);\n            console.warn(_context.t0.message);\n\n          case 24:\n            _context.prev = 24;\n            setUpdateInProgress(false);\n            return _context.finish(24);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 21, 24, 27]], Promise);\n  };\n\n  var ConnectionsList = useMemo(function () {\n    return _jsx(FlatList, {\n      data: connections,\n      contentContainerStyle: {\n        paddingTop: '5%',\n        paddingBottom: '33%'\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _jsx(RecoveryConnectionCard, _objectSpread(_objectSpread({\n          activeBefore: 0,\n          activeAfter: 0\n        }, item), {}, {\n          index: index,\n          isSelectionActive: true,\n          onSelect: filter,\n          isSelected: selectedAccounts.includes(item.id)\n        }));\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      ListEmptyComponent: _jsx(EmptyList, {})\n    });\n  }, [connections, selectedAccounts, filter]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [recoveryConnections.length === 0 ? _jsx(Text, {\n        style: styles.recoveryMessage,\n        children: t('recoveryConnections.text.chooseThreeConnections')\n      }) : _jsx(Text, {\n        style: styles.recoveryMessage,\n        children: t('recoveryConnections.text.connectionsAlreadyKnown')\n      }), _jsx(AnimatedTopSearchBar, {\n        sortable: false,\n        setSearchValue: setConnectionsSearch,\n        setSearchOpen: setConnectionsSearchOpen,\n        searchOpenSelector: function searchOpenSelector(state) {\n          return state.connections.searchOpen;\n        }\n      }), ConnectionsList, _jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(TouchableOpacity, {\n          disabled: updateInProgress || selectedAccounts.length === 0,\n          style: [styles.button, {\n            backgroundColor: updateInProgress || selectedAccounts.length === 0 ? GREY : ORANGE\n          }],\n          onPress: confirm,\n          children: updateInProgress ? _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: WHITE\n          }) : _jsx(Text, {\n            style: styles.buttonLabel,\n            children: t('recoveryConnections.text.add')\n          })\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: '3%',\n    paddingBottom: DEVICE_ANDROID ? '5%' : '10%',\n    backgroundColor: 'white'\n  },\n  button: {\n    backgroundColor: ORANGE,\n    height: 50,\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50\n  },\n  buttonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: WHITE\n  },\n  recoveryMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginTop: '5%',\n    textAlign: 'center'\n  },\n  emptyMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center'\n  }\n});\nexport default NewRecoveryConnectionList;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/RecoveryConnections/NewRecoveryConnectionScreen.tsx"],"names":["searchParamSelector","state","newRecoveryConnectionSelector","createSelector","searchString","toSearchString","includeRecovery","Array","connection_levels","connections","conn","EmptyList","t","useTranslation","flex","width","height","justifyContent","alignItems","paddingTop","styles","NewRecoveryConnectionList","navigation","props","api","useContext","dispatch","useDispatch","myId","useSelector","firstRecoveryTime","recoveryConnections","selectedAccounts","setSelectedAccounts","useState","updateInProgress","setUpdateInProgress","filter","useCallback","value","confirm","console","totalRecoveryAccount","Alert","amount","promises","id","Date","setConnectionLevel","level","setFirstRecoveryTime","ops","Promise","op","addOperation","successCallback","ConnectionsList","useMemo","paddingBottom","item","index","backgroundColor","StyleSheet","container","borderTopLeftRadius","marginTop","overflow","zIndex","mainContainer","flexDirection","orangeTop","DEVICE_LARGE","buttonContainer","position","bottom","left","right","DEVICE_ANDROID","button","borderRadius","buttonLabel","fontFamily","fontSize","color","recoveryMessage","paddingHorizontal","textAlign","emptyMessage"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useState, useContext } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  StatusBar,\n  TouchableOpacity,\n  FlatList,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\n\n// Redux\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  selectAllConnections,\n  recoveryConnectionsSelector,\n  firstRecoveryTimeSelector,\n} from '@/reducer/connectionsSlice';\nimport {\n  addOperation,\n  setConnectionLevel,\n  setConnectionsSearch,\n  setConnectionsSearchOpen,\n  setFirstRecoveryTime,\n} from '@/actions';\n\nimport { toSearchString } from '@/utils/strings';\nimport { ORANGE, WHITE, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { DEVICE_LARGE, DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { NodeApiContext } from '../NodeApiGate';\n// Import Components Local\nimport RecoveryConnectionCard from './RecoverConnectionsCard';\nimport AnimatedTopSearchBar from './TopSearchBar';\n\nconst searchParamSelector = (state: State) => state.connections.searchParam;\n\nconst newRecoveryConnectionSelector = createSelector(\n  [selectAllConnections, searchParamSelector],\n  (connections, search) => {\n    const searchString = toSearchString(search);\n    const includeRecovery = Array<ConnectionLevel>(\n      connection_levels.ALREADY_KNOWN,\n      connection_levels.RECOVERY,\n    );\n    return connections.filter(\n      (conn) =>\n        includeRecovery.includes(conn.incomingLevel) &&\n        conn.level !== connection_levels.RECOVERY &&\n        conn.level !== connection_levels.REPORTED &&\n        toSearchString(`${conn?.name}`).includes(searchString),\n    );\n  },\n);\n\n// Create Custom Local Components\nconst EmptyList = () => {\n  const { t } = useTranslation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '50%',\n      }}\n    >\n      <Text style={styles.emptyMessage}>\n        {t('recoveryConnections.text.pleaseMakeSomeConnections')}\n      </Text>\n    </View>\n  );\n};\n\nexport const NewRecoveryConnectionList = (props) => {\n  const { navigation } = props;\n\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n  const dispatch = useDispatch();\n  const { id: myId } = useSelector((state) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  const connections = useSelector(newRecoveryConnectionSelector);\n  const recoveryConnections = useSelector(recoveryConnectionsSelector);\n\n  const [selectedAccounts, setSelectedAccounts] = useState<string[]>([]);\n  const [updateInProgress, setUpdateInProgress] = useState<boolean>(false);\n\n  // toggle for select and deselect recovery account\n  const filter = useCallback(\n    (id: string) => {\n      if (selectedAccounts.includes(id)) {\n        setSelectedAccounts(selectedAccounts.filter((value) => value !== id));\n      } else {\n        setSelectedAccounts([...selectedAccounts, id]);\n      }\n    },\n    [selectedAccounts],\n  );\n\n  // submit new recovery account\n  const confirm = async () => {\n    if (updateInProgress) return;\n\n    try {\n      setUpdateInProgress(true);\n      console.log(recoveryConnections.length);\n      console.log(selectedAccounts.length);\n\n      const totalRecoveryAccount =\n        recoveryConnections.length + selectedAccounts.length;\n\n      if (totalRecoveryAccount < 3) {\n        Alert.alert(\n          t('common.alert.error'),\n          t('recoveryConnections.text.threeMore', {\n            amount: 3 - totalRecoveryAccount,\n          }),\n        );\n      } else {\n        // apply\n        const promises = [];\n        for (const id of selectedAccounts) {\n          promises.push(\n            api.addConnection(myId, id, connection_levels.RECOVERY, Date.now()),\n          );\n          dispatch(\n            setConnectionLevel({ id, level: connection_levels.RECOVERY }),\n          );\n        }\n        if (selectedAccounts.length > 0 && !firstRecoveryTime) {\n          dispatch(setFirstRecoveryTime(Date.now()));\n        }\n\n        const ops = await Promise.all(promises);\n        for (const op of ops) {\n          dispatch(addOperation(op));\n        }\n\n        // show info about cooldown period\n        if (\n          firstRecoveryTime &&\n          Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n        ) {\n          navigation.navigate('RecoveryCooldownInfo', {\n            successCallback: () => {\n              navigation.navigate('Home');\n            },\n          });\n        } else {\n          Alert.alert(\n            t('common.alert.success'),\n            t(\n              'recoveryConnections.text.completed',\n              'Recovery connections have been successfully added',\n            ),\n          );\n          navigation.navigate('Home');\n        }\n      }\n    } catch (error) {\n      console.warn(error.message);\n    } finally {\n      setUpdateInProgress(false);\n    }\n  };\n\n  const ConnectionsList = useMemo(() => {\n    return (\n      <FlatList\n        data={connections}\n        contentContainerStyle={{\n          paddingTop: '5%',\n          paddingBottom: '33%',\n        }}\n        renderItem={({ item, index }) => (\n          <RecoveryConnectionCard\n            activeBefore={0}\n            activeAfter={0}\n            {...item}\n            index={index}\n            isSelectionActive={true}\n            onSelect={filter}\n            isSelected={selectedAccounts.includes(item.id)}\n          />\n        )}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={<EmptyList />}\n      />\n    );\n  }, [connections, selectedAccounts, filter]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n\n      <View style={styles.container}>\n        {recoveryConnections.length === 0 ? (\n          <Text style={styles.recoveryMessage}>\n            {t('recoveryConnections.text.chooseThreeConnections')}\n          </Text>\n        ) : (\n          <Text style={styles.recoveryMessage}>\n            {t('recoveryConnections.text.connectionsAlreadyKnown')}\n          </Text>\n        )}\n        <AnimatedTopSearchBar\n          sortable={false}\n          setSearchValue={setConnectionsSearch}\n          setSearchOpen={setConnectionsSearchOpen}\n          searchOpenSelector={(state: State) => state.connections.searchOpen}\n        />\n        {ConnectionsList}\n        <View\n          style={styles.buttonContainer}\n          // blurType=\"light\"\n          // blurAmount={5}\n          // reducedTransparencyFallbackColor={WHITE}\n        >\n          <TouchableOpacity\n            disabled={updateInProgress || selectedAccounts.length === 0}\n            style={[\n              styles.button,\n              {\n                backgroundColor:\n                  updateInProgress || selectedAccounts.length === 0\n                    ? GREY\n                    : ORANGE,\n              },\n            ]}\n            onPress={confirm}\n          >\n            {updateInProgress ? (\n              <ActivityIndicator size=\"small\" color={WHITE} />\n            ) : (\n              <Text style={styles.buttonLabel}>\n                {t('recoveryConnections.text.add')}\n              </Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10,\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: '3%',\n    paddingBottom: DEVICE_ANDROID ? '5%' : '10%',\n    backgroundColor: 'white',\n  },\n  button: {\n    backgroundColor: ORANGE,\n    height: 50,\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n  },\n  buttonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: WHITE,\n  },\n  recoveryMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginTop: '5%',\n    textAlign: 'center',\n  },\n  emptyMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n  },\n});\n\nexport default NewRecoveryConnectionList;\n"]},"metadata":{},"sourceType":"module"}