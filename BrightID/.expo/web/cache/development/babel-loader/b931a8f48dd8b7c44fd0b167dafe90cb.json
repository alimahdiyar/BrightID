{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"delayPressIn\"],\n    _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\n\nvar Touchable = function Touchable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      delayPressIn = _ref.delayPressIn,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      }\n    }), children);\n  } else {\n    return React.createElement(TouchableItem, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      delayPressIn: delayPressIn,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["Touchable","children","style","onPress","to","accessibilityRole","delayPressIn","rest","Platform","React","styles","e","colors","useTheme","icon","label","labelStyle","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","props","borderRadius","StyleSheet","color","backgroundColor","iconNode","size","collapsable","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","accessibilityStates","marginLeft","marginVertical","numberOfLines","fontWeight","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight","flex","button","display"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}