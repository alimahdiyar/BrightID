{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _myChannelIds;\n\nimport { createSelector, createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nexport var channel_types;\n\n(function (channel_types) {\n  channel_types[\"GROUP\"] = \"GROUP\";\n  channel_types[\"SINGLE\"] = \"SINGLE\";\n  channel_types[\"STAR\"] = \"STAR\";\n})(channel_types || (channel_types = {}));\n\nexport var channel_states;\n\n(function (channel_states) {\n  channel_states[\"OPEN\"] = \"OPEN\";\n  channel_states[\"CLOSED\"] = \"CLOSED\";\n  channel_states[\"BACKGROUND\"] = \"BACKGROUND\";\n})(channel_states || (channel_states = {}));\n\nexport var channelsAdapter = createEntityAdapter();\nvar initialState = channelsAdapter.getInitialState({\n  displayChannelType: channel_types.SINGLE,\n  myChannelIds: (_myChannelIds = {}, _defineProperty(_myChannelIds, channel_types.SINGLE, ''), _defineProperty(_myChannelIds, channel_types.GROUP, ''), _defineProperty(_myChannelIds, channel_types.STAR, ''), _myChannelIds)\n});\nvar channelSlice = createSlice({\n  name: 'channels',\n  initialState: initialState,\n  reducers: {\n    addChannel: function addChannel(state, action) {\n      state = channelsAdapter.addOne(state, action);\n    },\n    updateChannel: function updateChannel(state, action) {\n      state = channelsAdapter.updateOne(state, action);\n    },\n    closeChannel: function closeChannel(state, action) {\n      var _action$payload = action.payload,\n          channelId = _action$payload.channelId,\n          background = _action$payload.background;\n      state = channelsAdapter.updateOne(state, {\n        id: channelId,\n        changes: {\n          state: background ? channel_states.BACKGROUND : channel_states.CLOSED\n        }\n      });\n      if (state.myChannelIds[channel_types.SINGLE] === channelId) state.myChannelIds[channel_types.SINGLE] = '';\n      if (state.myChannelIds[channel_types.GROUP] === channelId) state.myChannelIds[channel_types.GROUP] = '';\n      if (state.myChannelIds[channel_types.STAR] === channelId) state.myChannelIds[channel_types.STAR] = '';\n    },\n    removeChannel: function removeChannel(state, action) {\n      var channelId = action.payload;\n      state = channelsAdapter.removeOne(state, channelId);\n      if (state.myChannelIds[channel_types.SINGLE] === channelId) state.myChannelIds[channel_types.SINGLE] === '';\n      if (state.myChannelIds[channel_types.GROUP] === channelId) state.myChannelIds[channel_types.GROUP] === '';\n      if (state.myChannelIds[channel_types.STAR] === channelId) state.myChannelIds[channel_types.STAR] = '';\n    },\n    setMyChannel: function setMyChannel(state, action) {\n      var _action$payload2 = action.payload,\n          channelType = _action$payload2.channelType,\n          channelId = _action$payload2.channelId;\n      state.myChannelIds[channelType] = channelId;\n    },\n    setDisplayChannelType: function setDisplayChannelType(state, action) {\n      var channelType = action.payload;\n      state.displayChannelType = channelType;\n    }\n  }\n});\nvar _channelSlice$actions = channelSlice.actions,\n    addChannel = _channelSlice$actions.addChannel,\n    updateChannel = _channelSlice$actions.updateChannel,\n    removeChannel = _channelSlice$actions.removeChannel,\n    setMyChannel = _channelSlice$actions.setMyChannel,\n    closeChannel = _channelSlice$actions.closeChannel,\n    setDisplayChannelType = _channelSlice$actions.setDisplayChannelType;\nexport { addChannel, updateChannel, removeChannel, setMyChannel, closeChannel, setDisplayChannelType };\n\nvar _channelsAdapter$getS = channelsAdapter.getSelectors(function (state) {\n  return state.channels;\n}),\n    selectChannelById = _channelsAdapter$getS.selectById,\n    selectAllChannels = _channelsAdapter$getS.selectAll,\n    selectAllChannelIds = _channelsAdapter$getS.selectIds;\n\nexport { selectChannelById, selectAllChannels, selectAllChannelIds };\nexport var selectAllActiveChannelIds = createSelector(selectAllChannels, function (_, type) {\n  return type;\n}, function (channels, type) {\n  return channels.filter(function (pc) {\n    return pc.type === type;\n  }).map(function (pc) {\n    return pc.id;\n  });\n});\nexport var selectAllActiveChannelIdsByType = createSelector(selectAllChannels, function (_, type) {\n  return type;\n}, function (channels, type) {\n  return channels.filter(function (pc) {\n    return pc.type === type && (pc.state === channel_states.OPEN || pc.state === channel_states.BACKGROUND);\n  }).map(function (pc) {\n    return pc.id;\n  });\n});\nexport default channelSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/channelSlice.ts"],"names":["channel_types","channel_states","channelsAdapter","createEntityAdapter","initialState","displayChannelType","myChannelIds","channelSlice","createSlice","name","reducers","addChannel","state","updateChannel","closeChannel","channelId","background","action","id","changes","removeChannel","setMyChannel","channelType","setDisplayChannelType","selectChannelById","selectAllChannels","selectAllChannelIds","selectAllActiveChannelIds","createSelector","channels","pc","selectAllActiveChannelIdsByType"],"mappings":"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","sourcesContent":["import {\n  createSelector,\n  createSlice,\n  createEntityAdapter,\n  PayloadAction,\n  Update,\n} from '@reduxjs/toolkit';\n\nimport { Draft } from 'immer';\n/*\n\n  What is a channel:\n  - 'aesKey': encryption key for data transported through channel\n  - 'api': instance of ChannelAPI for this channel\n  - 'id': unique identifier\n  - 'initiatorProfileId': profileId of channel initiator\n  - 'myProfileId': my profileId in this channel\n  - 'pollTimerId: IntervalId of timer polling for incoming connection requests from this channel\n  - 'state': state of channel - see channel_states below\n  - 'timestamp': timestamp of channel creation time\n  - 'ttl': time to live of channel (seconds)\n  - 'type': group or 1:1 connection - see channel_types below\n  - 'timeoutId: Id of timer to expire channel once ttl is reached\n  - 'url': url of channel\n\n  The app could hold multiple channels at the same time. E.g. if i scan multiple QRCodes\n  in a larger group session.\n\n */\n\nexport enum channel_types {\n  GROUP = 'GROUP',\n  SINGLE = 'SINGLE',\n  STAR = 'STAR',\n}\n\nexport enum channel_states {\n  OPEN = 'OPEN',\n  CLOSED = 'CLOSED',\n  BACKGROUND = 'BACKGROUND',\n}\n\nexport const channelsAdapter = createEntityAdapter<Channel>();\n\nconst initialState = channelsAdapter.getInitialState<DisplayChannel>({\n  displayChannelType: channel_types.SINGLE,\n  myChannelIds: {\n    [channel_types.SINGLE]: '',\n    [channel_types.GROUP]: '',\n    [channel_types.STAR]: '',\n  },\n});\n\nconst channelSlice = createSlice({\n  name: 'channels',\n  initialState,\n  reducers: {\n    addChannel(state: Draft<ChannelsState>, action: PayloadAction<Channel>) {\n      state = channelsAdapter.addOne<ChannelsState>(\n        state as ChannelsState,\n        action,\n      );\n    },\n    // addChannel: channelsAdapter.addOne,\n    updateChannel(\n      state: Draft<ChannelsState>,\n      action: PayloadAction<Update<Channel>>,\n    ) {\n      state = channelsAdapter.updateOne<ChannelsState>(\n        state as ChannelsState,\n        action,\n      );\n    },\n    closeChannel(\n      state: Draft<ChannelsState>,\n      action: PayloadAction<{ channelId: string; background: boolean }>,\n    ) {\n      const { channelId, background } = action.payload;\n      state = channelsAdapter.updateOne<ChannelsState>(state as ChannelsState, {\n        id: channelId,\n        changes: {\n          state: background ? channel_states.BACKGROUND : channel_states.CLOSED,\n        },\n      });\n      if (state.myChannelIds[channel_types.SINGLE] === channelId)\n        state.myChannelIds[channel_types.SINGLE] = '';\n\n      if (state.myChannelIds[channel_types.GROUP] === channelId)\n        state.myChannelIds[channel_types.GROUP] = '';\n\n      if (state.myChannelIds[channel_types.STAR] === channelId)\n        state.myChannelIds[channel_types.STAR] = '';\n    },\n    removeChannel(state: Draft<ChannelsState>, action: PayloadAction<string>) {\n      const channelId = action.payload;\n      state = channelsAdapter.removeOne<ChannelsState>(\n        state as ChannelsState,\n        channelId,\n      );\n      // In case my channel got removed also clear myChannelId\n      if (state.myChannelIds[channel_types.SINGLE] === channelId)\n        state.myChannelIds[channel_types.SINGLE] === '';\n\n      if (state.myChannelIds[channel_types.GROUP] === channelId)\n        state.myChannelIds[channel_types.GROUP] === '';\n\n      if (state.myChannelIds[channel_types.STAR] === channelId)\n        state.myChannelIds[channel_types.STAR] = '';\n    },\n    setMyChannel(\n      state: Draft<ChannelsState>,\n      action: PayloadAction<{ channelType: ChannelType; channelId: string }>,\n    ) {\n      const { channelType, channelId } = action.payload;\n      state.myChannelIds[channelType] = channelId;\n    },\n    setDisplayChannelType(\n      state: Draft<ChannelsState>,\n      action: PayloadAction<ChannelType>,\n    ) {\n      const channelType = action.payload;\n      state.displayChannelType = channelType;\n    },\n  },\n});\n\n// Export channel actions\nexport const {\n  addChannel,\n  updateChannel,\n  removeChannel,\n  setMyChannel,\n  closeChannel,\n  setDisplayChannelType,\n} = channelSlice.actions;\n\n// Export channel selectors\nexport const {\n  selectById: selectChannelById,\n  selectAll: selectAllChannels,\n  selectIds: selectAllChannelIds,\n} = channelsAdapter.getSelectors((state: State) => state.channels);\n\n// additional selectors\nexport const selectAllActiveChannelIds = createSelector(\n  selectAllChannels,\n  // check to see if this is state or channel state\n  (_: State, type: ChannelType) => type,\n  (channels, type) =>\n    channels.filter((pc) => pc.type === type).map((pc) => pc.id),\n);\n\nexport const selectAllActiveChannelIdsByType = createSelector(\n  selectAllChannels,\n  (_: State, type: ChannelType) => type,\n  (channels, type) =>\n    channels\n      .filter(\n        (pc) =>\n          pc.type === type &&\n          (pc.state === channel_states.OPEN ||\n            pc.state === channel_states.BACKGROUND),\n      )\n      .map((pc) => pc.id),\n);\n\n// Export reducer\nexport default channelSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}