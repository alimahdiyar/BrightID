{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\n\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedSet);\n\n  function AnimatedSet(what, value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedSet);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.set first argument should be of type AnimatedNode but got \".concat(what));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'set',\n      what: what,\n      value: value\n    }, [value]);\n\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_value\", void 0);\n\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n\n  _createClass(AnimatedSet, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedSet, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n\n      this._what.setValue(newValue);\n\n      return newValue;\n    }\n  }]);\n\n  return AnimatedSet;\n}(AnimatedNode);\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"sources":["AnimatedSet.js"],"names":["AnimatedSet","AnimatedNode","constructor","invariant","what","value","type","toString","__onEvaluate","newValue","val","adapt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAA,YAAA;AACA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,GAAA;AACA,SAAA,KAAA;;AAEMA,IAAAA,W;;;;;EAIJE,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAyB;IAAA,IAAA,KAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;IACvBC,SAAS,CACPC,IAAI,YADG,YAAA,EAAA,kFAAA,MAAA,CAATD,IAAS,CAAA,CAATA;IAIAA,SAAS,CACPE,KAAK,YADE,YAAA,EAAA,qGAAA,MAAA,CAATF,KAAS,CAAA,CAATA;IAIA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MAAEG,IAAI,EAAN,KAAA;MAAeF,IAAf,EAAA,IAAA;MAAqBC,KAAAA,EAA3B;IAAM,CAAN,EAAoC,CAApC,KAAoC,CAApC,CAAA;;IATuB,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;IAUvBF,SAAS,CAAC,CAACC,IAAI,CAAN,SAAA,EAATD,oCAAS,CAATA;IACA,KAAA,CAAA,KAAA,GAAA,IAAA;IACA,KAAA,CAAA,MAAA,GAAA,KAAA;IAZuB,OAAA,KAAA;;;;;WAezBI,SAAAA,QAAAA,GAAW;MACT,OAAA,oBAAA,MAAA,CAA2B,KAA3B,QAAA,CAAA;;;;WAGFC,SAAAA,YAAAA,GAAe;MACb,IAAMC,QAAQ,GAAGC,GAAG,CAAC,KAArB,MAAoB,CAApB;;MACA,KAAA,KAAA,CAAA,QAAA,CAAA,QAAA;;MACA,OAAA,QAAA;;;;;EA1BsBT,Y,CAApBD;;AA8BN,OAAO,SAAA,iBAAA,CAAA,IAAA,EAAA,KAAA,EAAwC;EAC7C,OAAO,IAAA,WAAA,CAAA,IAAA,EAAsBW,KAAK,CAAlC,KAAkC,CAA3B,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}