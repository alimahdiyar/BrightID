{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"minPointers\", \"maxPointers\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport GestureHandler from \"./GestureHandler\";\n\nvar IndiscreteGestureHandler = function (_GestureHandler) {\n  _inherits(IndiscreteGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(IndiscreteGestureHandler);\n\n  function IndiscreteGestureHandler() {\n    _classCallCheck(this, IndiscreteGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IndiscreteGestureHandler, [{\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 2 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 2 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      return _get(_getPrototypeOf(IndiscreteGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref2, _recognizer, _ref3) {\n      var minPointers = _ref2.minPointers,\n          maxPointers = _ref2.maxPointers;\n      var pointerLength = _ref3.maxPointers;\n\n      if (pointerLength > maxPointers) {\n        return {\n          failed: true\n        };\n      }\n\n      var validPointerCount = pointerLength >= minPointers;\n      return {\n        success: validPointerCount\n      };\n    }\n  }]);\n\n  return IndiscreteGestureHandler;\n}(GestureHandler);\n\nexport default IndiscreteGestureHandler;","map":{"version":3,"sources":["IndiscreteGestureHandler.ts"],"names":["IndiscreteGestureHandler","GestureHandler","updateGestureConfig","minPointers","maxPointers","props","isGestureEnabledForEvent","pointerLength","failed","validPointerCount","success"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAA,cAAA;;AAKeA,IAAAA,wB;;;;;;;;;;;;;SACiB,SAAA,GAAA,GAAG;MAC/B,OAAA,KAAA;;;;WAGFE,SAAAA,mBAAAA,CAAAA,IAAAA,EAAoE;MAAA,IAAA,gBAAA,GAAA,IAAA,CAA9CC,WAA8C;MAAA,IAA9CA,WAA8C,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAhC,CAAgC,GAAA,gBAAA;MAAA,IAAA,gBAAA,GAAA,IAAA,CAA7BC,WAA6B;MAAA,IAA7BA,WAA6B,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAf,CAAe,GAAA,gBAAA;MAAA,IAATC,KAAS,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;MAClE,OAAA,IAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,SAAA,CAAA,EAAA,qBAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,aAAA,CAAA;QACEF,WAD+B,EAAjC,WAAA;QAEEC,WAF+B,EAAjC;MAAA,CAAA,EAAA,KAAA,CAAA,CAAA;;;;WAOFE,SAAAA,wBAAAA,CAAAA,KAAAA,EAAAA,WAAAA,EAAAA,KAAAA,EAIE;MAHEH,IAAAA,WAGF,GAAA,KAAA,CAHEA,WAAAA;MAAAA,IAAaC,WAGf,GAAA,KAAA,CAHeA,WAAbD;MAEaI,IAAAA,aACf,GAAA,KAAA,CADEH,WAAaG;;MAEf,IAAIA,aAAa,GAAjB,WAAA,EAAiC;QAC/B,OAAO;UAAEC,MAAM,EAAf;QAAO,CAAP;MAEF;;MAAA,IAAMC,iBAAiB,GAAGF,aAAa,IAAvC,WAAA;MACA,OAAO;QACLG,OAAO,EADT;MAAO,CAAP;;;;;EAtB4CT,c,CAAjCD;;AA2Bf,eAAA,wBAAA","sourcesContent":["import GestureHandler from './GestureHandler';\n\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */\nabstract class IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n    return super.updateGestureConfig({\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    if (pointerLength > maxPointers) {\n      return { failed: true };\n    }\n    const validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount,\n    };\n  }\n}\nexport default IndiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}