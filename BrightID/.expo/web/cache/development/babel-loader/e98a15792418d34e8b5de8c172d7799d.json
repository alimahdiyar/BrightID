{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport RNFetchBlob from 'rn-fetch-blob';\nimport { parseDataUri, mimeFromUri } from \"./images\";\nexport var photoDirectory = function photoDirectory() {\n  return RNFetchBlob.fs.dirs.DocumentDir + \"/photos\";\n};\nexport var createImageDirectory = function _callee() {\n  var exists;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(RNFetchBlob.fs.exists(photoDirectory()));\n\n        case 2:\n          exists = _context.sent;\n          return _context.abrupt(\"return\", exists ? new Promise(function (resolve) {\n            return resolve();\n          }) : RNFetchBlob.fs.mkdir(photoDirectory()));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveImage = function _callee2(_ref) {\n  var base64Image, imageName, _parseDataUri, filetype, image, path;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          base64Image = _ref.base64Image, imageName = _ref.imageName;\n          _context2.prev = 1;\n          _parseDataUri = parseDataUri(base64Image), filetype = _parseDataUri.filetype, image = _parseDataUri.image;\n          path = photoDirectory() + \"/\" + imageName + \".\" + filetype;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(RNFetchBlob.fs.writeFile(path, image, 'base64'));\n\n        case 6:\n          return _context2.abrupt(\"return\", imageName + \".\" + filetype);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var retrieveImage = function _callee3(filename) {\n  var mime, base64Image;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          mime = mimeFromUri(filename);\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(RNFetchBlob.fs.readFile(photoDirectory() + \"/\" + filename, 'base64'));\n\n        case 4:\n          base64Image = _context3.sent;\n          return _context3.abrupt(\"return\", \"data:\" + mime + \";base64,\" + base64Image);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/filesystem.ts"],"names":["photoDirectory","RNFetchBlob","createImageDirectory","exists","resolve","saveImage","base64Image","imageName","filetype","image","parseDataUri","path","console","retrieveImage","mime","mimeFromUri"],"mappings":"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","sourcesContent":["import RNFetchBlob from 'rn-fetch-blob';\nimport { parseDataUri, mimeFromUri } from './images';\n\nexport const photoDirectory = () => `${RNFetchBlob.fs.dirs.DocumentDir}/photos`;\n\nexport const createImageDirectory = async () => {\n  const exists = await RNFetchBlob.fs.exists(photoDirectory());\n  return exists\n    ? new Promise<void>((resolve) => resolve())\n    : RNFetchBlob.fs.mkdir(photoDirectory());\n};\n\nexport const saveImage = async ({\n  base64Image,\n  imageName,\n}: {\n  base64Image: string;\n  imageName: string;\n}) => {\n  try {\n    const { filetype, image } = parseDataUri(base64Image);\n    const path = `${photoDirectory()}/${imageName}.${filetype}`;\n    await RNFetchBlob.fs.writeFile(path, image, 'base64');\n    return `${imageName}.${filetype}`;\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n\nexport const retrieveImage = async (filename: string) => {\n  try {\n    const mime = mimeFromUri(filename);\n    const base64Image = await RNFetchBlob.fs.readFile(\n      `${photoDirectory()}/${filename}`,\n      'base64',\n    );\n    return `data:${mime};base64,${base64Image}`;\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}