{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { useDispatch, useSelector } from \"../store\";\nimport { addNodeUrl, removeCurrentNodeUrl, selectAllNodeUrls, selectBaseUrl, setBaseUrl } from \"../reducer/settingsSlice\";\nimport { NodeApi } from \"../api/brightId\";\nimport { pollOperations } from \"../utils/operations\";\nimport chooseNode from \"../utils/nodeChooser\";\nimport { NodeApiGateScreen } from \"./NodeApiGateScreen\";\nimport { leaveAllChannels } from \"./PendingConnections/actions/channelThunks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NodeApiContext = React.createContext(null);\nexport var ApiGateState = {\n  INITIAL: 'INITIAL',\n  SEARCH_REQUESTED: 'SEARCH_REQUESTED',\n  SEARCHING_NODE: 'SEARCHING',\n  NODE_AVAILABLE: 'NODE_AVAILABLE',\n  ERROR_NO_NODE: 'ERROR_NO_NODE'\n};\n\nvar NodeApiGate = function NodeApiGate(props) {\n  var id = useSelector(function (state) {\n    return state.user.id;\n  });\n  var secretKey = useSelector(function (state) {\n    return state.keypair.secretKey;\n  });\n  var url = useSelector(selectBaseUrl);\n  var candidates = useSelector(selectAllNodeUrls);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      nodeError = _useState2[0],\n      setNodeError = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      api = _useState4[0],\n      setApi = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      startTimestamp = _useState6[0],\n      setStartTimestamp = _useState6[1];\n\n  var _useState7 = useState(ApiGateState.INITIAL),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gateState = _useState8[0],\n      setGateState = _useState8[1];\n\n  var dispatch = useDispatch();\n\n  var retryHandler = function retryHandler() {\n    if (gateState === ApiGateState.ERROR_NO_NODE) {\n      console.log(\"User clicked retry -> triggering search.\");\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  };\n\n  useEffect(function () {\n    if (!url) {\n      console.log(\"URL is null -> triggering search.\");\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  }, [url]);\n  useEffect(function () {\n    var runEffect = function _callee() {\n      var fastestUrl;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(candidates.length === 0)) {\n                _context.next = 5;\n                break;\n              }\n\n              console.log(\"No node candidates available\");\n              setGateState(ApiGateState.ERROR_NO_NODE);\n              _context.next = 21;\n              break;\n\n            case 5:\n              console.log(\"Running nodechooser to select backend\");\n              setStartTimestamp(Date.now());\n              setGateState(ApiGateState.SEARCHING_NODE);\n              _context.prev = 8;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(chooseNode(candidates));\n\n            case 11:\n              fastestUrl = _context.sent;\n              dispatch(setBaseUrl(fastestUrl));\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](8);\n              setGateState(ApiGateState.ERROR_NO_NODE);\n\n            case 18:\n              _context.prev = 18;\n              setStartTimestamp(0);\n              return _context.finish(18);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[8, 15, 18, 21]], Promise);\n    };\n\n    if (gateState === ApiGateState.SEARCH_REQUESTED) {\n      runEffect();\n    }\n  }, [candidates, dispatch, gateState]);\n  useEffect(function () {\n    if (nodeError) {\n      Alert.alert('Node error!', 'Current node seems not to be functional', [{\n        text: 'Switch to different node',\n        onPress: function onPress() {\n          dispatch(leaveAllChannels());\n          dispatch(removeCurrentNodeUrl());\n          setNodeError(false);\n        }\n      }, {\n        text: 'Ignore',\n        style: 'cancel',\n        onPress: function onPress() {\n          setNodeError(false);\n        }\n      }], {\n        cancelable: true\n      });\n    }\n  }, [dispatch, nodeError]);\n  useEffect(function () {\n    var responseCounter = 0;\n\n    var apiMonitor = function apiMonitor(response) {\n      responseCounter++;\n\n      if (!response.ok) {\n        switch (response.problem) {\n          case 'SERVER_ERROR':\n          case 'CONNECTION_ERROR':\n          case 'NETWORK_ERROR':\n          case 'TIMEOUT_ERROR':\n            console.log(\"Node monitor: Detected problem: \" + response.status + \" - \" + response.problem + \".\");\n            setNodeError(true);\n            break;\n\n          default:\n            console.log(\"Node monitor: Ignoring problem \" + response.problem);\n        }\n      }\n    };\n\n    if (url) {\n      var apiInstance;\n\n      if (id && id.length > 0 && secretKey && secretKey.length > 0) {\n        console.log(\"Creating API with credentials using \" + url);\n        apiInstance = new NodeApi({\n          url: url,\n          id: id,\n          secretKey: secretKey,\n          monitor: apiMonitor\n        });\n      } else {\n        console.log(\"Creating anonymous API using \" + url);\n        apiInstance = new NodeApi({\n          url: url,\n          id: undefined,\n          secretKey: undefined,\n          monitor: apiMonitor\n        });\n      }\n\n      setGateState(ApiGateState.NODE_AVAILABLE);\n      setApi(apiInstance);\n    } else {\n      setApi(null);\n    }\n  }, [url, id, secretKey]);\n  useEffect(function () {\n    if (api) {\n      var timerId = setInterval(function () {\n        InteractionManager.runAfterInteractions(function () {\n          pollOperations(api);\n        });\n      }, 5000);\n      console.log(\"Started pollOperationsTimer \" + timerId);\n      return function () {\n        console.log(\"Stop pollOperationsTimer \" + timerId);\n        clearInterval(timerId);\n      };\n    }\n  }, [api]);\n\n  var setNode = function _callee2(nodeUrl) {\n    var _url;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch(leaveAllChannels());\n            setGateState(ApiGateState.SEARCHING_NODE);\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(chooseNode([nodeUrl]));\n\n          case 5:\n            _url = _context2.sent;\n            dispatch(addNodeUrl(_url));\n            dispatch(setBaseUrl(_url));\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            setGateState(ApiGateState.ERROR_NO_NODE);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  if (url && api && gateState === ApiGateState.NODE_AVAILABLE) {\n    return _jsx(NodeApiContext.Provider, {\n      value: api,\n      children: props.children\n    });\n  } else {\n    return _jsx(NodeApiGateScreen, {\n      gateState: gateState,\n      retryHandler: retryHandler,\n      startTimestamp: startTimestamp\n    });\n  }\n};\n\nexport default NodeApiGate;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/NodeApiGate.tsx"],"names":["NodeApiContext","React","ApiGateState","INITIAL","SEARCH_REQUESTED","SEARCHING_NODE","NODE_AVAILABLE","ERROR_NO_NODE","NodeApiGate","id","useSelector","state","secretKey","url","candidates","nodeError","setNodeError","useState","api","setApi","startTimestamp","setStartTimestamp","gateState","setGateState","dispatch","useDispatch","retryHandler","console","useEffect","runEffect","Date","fastestUrl","chooseNode","setBaseUrl","Alert","text","onPress","leaveAllChannels","removeCurrentNodeUrl","style","cancelable","responseCounter","apiMonitor","response","apiInstance","monitor","timerId","setInterval","InteractionManager","pollOperations","clearInterval","setNode","addNodeUrl","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Alert, InteractionManager } from 'react-native';\nimport { ApiResponse } from 'apisauce';\nimport { RootState, useDispatch, useSelector } from '@/store';\nimport {\n  addNodeUrl,\n  removeCurrentNodeUrl,\n  selectAllNodeUrls,\n  selectBaseUrl,\n  setBaseUrl,\n} from '@/reducer/settingsSlice';\nimport { NodeApi } from '@/api/brightId';\nimport { pollOperations } from '@/utils/operations';\nimport chooseNode from '@/utils/nodeChooser';\nimport { NodeApiGateScreen } from '@/components/NodeApiGateScreen';\nimport { leaveAllChannels } from './PendingConnections/actions/channelThunks';\n\ntype ApiContext = NodeApi | null;\n\nexport const NodeApiContext = React.createContext<ApiContext>(null);\n\nexport const ApiGateState = {\n  INITIAL: 'INITIAL',\n  SEARCH_REQUESTED: 'SEARCH_REQUESTED', // should start looking for node\n  SEARCHING_NODE: 'SEARCHING', // currently looking for working node\n  NODE_AVAILABLE: 'NODE_AVAILABLE', // All good, valid node is set\n  ERROR_NO_NODE: 'ERROR_NO_NODE', // Failed to find a working node\n} as const;\nexport type ApiGateState = typeof ApiGateState[keyof typeof ApiGateState];\n\nconst NodeApiGate = (props: React.PropsWithChildren<unknown>) => {\n  const id = useSelector<string>((state: RootState) => state.user.id);\n  const secretKey = useSelector<Uint8Array>(\n    (state: RootState) => state.keypair.secretKey,\n  );\n  const url = useSelector<string>(selectBaseUrl);\n  const candidates = useSelector(selectAllNodeUrls);\n  const [nodeError, setNodeError] = useState(false);\n  const [api, setApi] = useState<NodeApi | null>(null);\n  const [startTimestamp, setStartTimestamp] = useState(0);\n  const [gateState, setGateState] = useState<ApiGateState>(\n    ApiGateState.INITIAL,\n  );\n  const dispatch = useDispatch();\n\n  // Trigger nodechooser when user clicks retry\n  const retryHandler = () => {\n    // Only allow retry if I'm in error state\n    if (gateState === ApiGateState.ERROR_NO_NODE) {\n      console.log(`User clicked retry -> triggering search.`);\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  };\n\n  // Trigger nodechooser when no url is set\n  useEffect(() => {\n    if (!url) {\n      console.log(`URL is null -> triggering search.`);\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  }, [url]);\n\n  // Run nodechooser if requested\n  useEffect(() => {\n    const runEffect = async () => {\n      if (candidates.length === 0) {\n        console.log(`No node candidates available`);\n        setGateState(ApiGateState.ERROR_NO_NODE);\n      } else {\n        console.log(`Running nodechooser to select backend`);\n        setStartTimestamp(Date.now());\n        setGateState(ApiGateState.SEARCHING_NODE);\n        try {\n          const fastestUrl = await chooseNode(candidates);\n          dispatch(setBaseUrl(fastestUrl));\n        } catch (e) {\n          // No usable node found :-(\n          setGateState(ApiGateState.ERROR_NO_NODE);\n        } finally {\n          setStartTimestamp(0);\n        }\n      }\n    };\n    if (gateState === ApiGateState.SEARCH_REQUESTED) {\n      runEffect();\n    }\n  }, [candidates, dispatch, gateState]);\n\n  // show node error modal\n  useEffect(() => {\n    if (nodeError) {\n      Alert.alert(\n        'Node error!',\n        'Current node seems not to be functional',\n        [\n          {\n            text: 'Switch to different node',\n            onPress: () => {\n              dispatch(leaveAllChannels());\n              dispatch(removeCurrentNodeUrl());\n              setNodeError(false);\n            },\n          },\n          {\n            text: 'Ignore',\n            style: 'cancel',\n            onPress: () => {\n              setNodeError(false);\n            },\n          },\n        ],\n        {\n          cancelable: true,\n        },\n      );\n    }\n  }, [dispatch, nodeError]);\n\n  // Manage NodeAPI instance\n  useEffect(() => {\n    let responseCounter = 0;\n    const apiMonitor = (response: ApiResponse<NodeApiRes, ErrRes>) => {\n      responseCounter++;\n      if (!response.ok) {\n        switch (response.problem) {\n          case 'SERVER_ERROR':\n          case 'CONNECTION_ERROR':\n          case 'NETWORK_ERROR':\n          case 'TIMEOUT_ERROR':\n            console.log(\n              `Node monitor: Detected problem: ${response.status} - ${response.problem}.`,\n            );\n            setNodeError(true);\n            break;\n          default:\n            console.log(`Node monitor: Ignoring problem ${response.problem}`);\n        }\n      }\n      /*\n      if (responseCounter % 5 === 0) {\n        console.log(`Pretending server error`);\n        setNodeError(true);\n      }\n       */\n    };\n\n    if (url) {\n      let apiInstance: NodeApi;\n      if (id && id.length > 0 && secretKey && secretKey.length > 0) {\n        console.log(`Creating API with credentials using ${url}`);\n        apiInstance = new NodeApi({ url, id, secretKey, monitor: apiMonitor });\n      } else {\n        console.log(`Creating anonymous API using ${url}`);\n        apiInstance = new NodeApi({\n          url,\n          id: undefined,\n          secretKey: undefined,\n          monitor: apiMonitor,\n        });\n      }\n      setGateState(ApiGateState.NODE_AVAILABLE);\n      setApi(apiInstance);\n    } else {\n      setApi(null);\n    }\n  }, [url, id, secretKey]);\n\n  // Manage polling for operations\n  useEffect(() => {\n    if (api) {\n      // subscribe to operations\n      const timerId = setInterval(() => {\n        InteractionManager.runAfterInteractions(() => {\n          pollOperations(api);\n        });\n      }, 5000);\n      console.log(`Started pollOperationsTimer ${timerId}`);\n\n      return () => {\n        console.log(`Stop pollOperationsTimer ${timerId}`);\n        clearInterval(timerId);\n      };\n    }\n  }, [api]);\n\n  /* Manually set node url */\n  const setNode = async (nodeUrl: string) => {\n    try {\n      dispatch(leaveAllChannels());\n      // Check if node is working\n      setGateState(ApiGateState.SEARCHING_NODE);\n      const url = await chooseNode([nodeUrl]);\n      // Add it to node list and set as current node\n      dispatch(addNodeUrl(url));\n      dispatch(setBaseUrl(url));\n    } catch (e) {\n      // Node does not work :-(\n      setGateState(ApiGateState.ERROR_NO_NODE);\n    }\n  };\n\n  if (url && api && gateState === ApiGateState.NODE_AVAILABLE) {\n    return (\n      <NodeApiContext.Provider value={api}>\n        {props.children}\n      </NodeApiContext.Provider>\n    );\n  } else {\n    return (\n      <NodeApiGateScreen\n        gateState={gateState}\n        retryHandler={retryHandler}\n        startTimestamp={startTimestamp}\n      />\n    );\n  }\n};\n\nexport default NodeApiGate;\n"]},"metadata":{},"sourceType":"module"}