{"ast":null,"code":"import isUnitlessNumber from \"../unitlessNumbers\";\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\n    return value + 'px';\n  }\n\n  return ('' + value).trim();\n}\n\nexport default dangerousStyleValue;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/setValueForStyles/dangerousStyleValue.js"],"names":["isEmpty","value","isUnitlessNumber"],"mappings":"AAYA,OAAA,gBAAA;;AAWA,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAAA,gBAAA,EAA4D;EAW1D,IAAIA,OAAO,GAAGC,KAAK,IAALA,IAAAA,IAAiB,OAAA,KAAA,KAAjBA,SAAAA,IAA+CA,KAAK,KAAlE,EAAA;;EACA,IAAA,OAAA,EAAa;IACX,OAAA,EAAA;EAGF;;EAAA,IACE,CAAA,gBAAA,IACA,OAAA,KAAA,KADA,QAAA,IAEAA,KAAK,KAFL,CAAA,IAGA,EAAEC,gBAAgB,CAAhBA,cAAAA,CAAAA,IAAAA,KAAyCA,gBAAgB,CAJ7D,IAI6D,CAA3D,CAJF,EAKE;IACA,OAAOD,KAAK,GAAZ,IAAA;EAGF;;EAAA,OAAO,CAAC,KAAD,KAAA,EAAP,IAAO,EAAP;AAGF;;AAAA,eAAA,mBAAA","sourcesContent":["/* eslint-disable */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * @noflow\n */\n\nimport isUnitlessNumber from '../unitlessNumbers';\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  if (\n    !isCustomProperty &&\n    typeof value === 'number' &&\n    value !== 0 &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  ) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nexport default dangerousStyleValue;\n"]},"metadata":{},"sourceType":"module"}