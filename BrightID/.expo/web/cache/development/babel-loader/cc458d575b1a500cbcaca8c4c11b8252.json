{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"layout\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default React.forwardRef(function CardSheet(_ref, ref) {\n  var enabled = _ref.enabled,\n      layout = _ref.layout,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fill = _React$useState2[0],\n      setFill = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (typeof document === 'undefined' || !document.body) {\n      return;\n    }\n\n    var width = document.body.clientWidth;\n    var height = document.body.clientHeight;\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n  return React.createElement(View, _extends({}, rest, {\n    ref: ref,\n    style: [enabled && fill ? styles.page : styles.card, style]\n  }));\n});\nvar styles = StyleSheet.create({\n  page: {\n    minHeight: '100%'\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["CardSheet.tsx"],"names":["React","enabled","layout","style","rest","fill","setFill","document","width","height","ref","styles","StyleSheet","page","minHeight","card","flex","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAaA,eAAeA,KAAK,CAALA,UAAAA,CAA8B,SAAA,SAAA,CAAA,IAAA,EAAA,GAAA,EAG3C;EAFEC,IAAAA,OAEF,GAAA,IAAA,CAFEA,OAAAA;EAAAA,IAASC,MAEX,GAAA,IAAA,CAFWA,MAATD;EAAAA,IAAiBE,KAEnB,GAAA,IAAA,CAFmBA,KAAjBF;EAAAA,IAA2BG,IAE7B,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAFEH;;EAGF,IAAA,eAAA,GAAwBD,KAAK,CAALA,QAAAA,CAAxB,KAAwBA,CAAxB;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOK,IAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAaC,OAAb,GAAA,gBAAA,CAAA,CAAA,CAAA;;EAEAN,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAI,OAAA,QAAA,KAAA,WAAA,IAAmC,CAACO,QAAQ,CAAhD,IAAA,EAAuD;MAErD;IAGF;;IAAA,IAAMC,KAAK,GAAGD,QAAQ,CAARA,IAAAA,CAAd,WAAA;IACA,IAAME,MAAM,GAAGF,QAAQ,CAARA,IAAAA,CAAf,YAAA;IAEAD,OAAO,CAACE,KAAK,KAAKN,MAAM,CAAhBM,KAAAA,IAA0BC,MAAM,KAAKP,MAAM,CATrDF,MASS,CAAPM;EATFN,CAAAA,EAUG,CAACE,MAAM,CAAP,MAAA,EAAgBA,MAAM,CAVzBF,KAUG,CAVHA;EAYA,OACEA,KAAAA,CAAAA,aAAAA,CAAAA,IAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;IAEEU,GAAG,EAFLV,GAAAA;IAGEG,KAAK,EAAE,CAACF,OAAO,IAAPA,IAAAA,GAAkBU,MAAM,CAAxBV,IAAAA,GAAgCU,MAAM,CAAvC,IAAA,EAtBEX,KAsBF;EAHTA,CAAAA,CAAAA,CADF;AAlBF,CAAeA,CAAf;AA2BA,IAAMW,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,IAAI,EAAE;IACJC,SAAS,EAFoB;EACzB,CADyB;EAI/BC,IAAI,EAAE;IACJC,IAAI,EADA,CAAA;IAEJC,QAAQ,EANZ;EAIQ;AAJyB,CAAlBL,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, ViewProps, StyleSheet } from 'react-native';\n\ntype Props = ViewProps & {\n  enabled: boolean;\n  layout: { width: number; height: number };\n  children: React.ReactNode;\n};\n\n// This component will render a page which overflows the screen\n// if the container fills the body by comparing the size\n// This lets the document.body handle scrolling of the content\n// It's necessary for mobile browsers to be able to hide address bar on scroll\nexport default React.forwardRef<View, Props>(function CardSheet(\n  { enabled, layout, style, ...rest },\n  ref\n) {\n  const [fill, setFill] = React.useState(false);\n\n  React.useEffect(() => {\n    if (typeof document === 'undefined' || !document.body) {\n      // Only run when DOM is available\n      return;\n    }\n\n    const width = document.body.clientWidth;\n    const height = document.body.clientHeight;\n\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n\n  return (\n    <View\n      {...rest}\n      ref={ref}\n      style={[enabled && fill ? styles.page : styles.card, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    minHeight: '100%',\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}