{"ast":null,"code":"import React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport { setUserId, setPrimaryDevice } from \"../../../actions\";\nimport { useSelector, useDispatch } from \"../../../store\";\nimport { BLACK, ORANGE } from \"../../../theme/colors\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { setRecoveryKeys } from \"../RecoveryFlow/thunks/recoveryThunks\";\nimport { resetRecoveryData, uploadCompletedByOtherSide } from \"../RecoveryFlow/recoveryDataSlice\";\nimport { clearImportChannel } from \"./thunks/channelThunks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ImportScreen = function ImportScreen() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var recoveryData = useSelector(function (state) {\n    return state.recoveryData;\n  });\n  var importCompleted = useSelector(uploadCompletedByOtherSide);\n  useEffect(function () {\n    if (importCompleted) {\n      clearImportChannel();\n      dispatch(setPrimaryDevice(false));\n      dispatch(setRecoveryKeys());\n      dispatch(resetRecoveryData());\n      dispatch(setUserId(recoveryData.id));\n    }\n  }, [recoveryData, dispatch, importCompleted]);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.waitingContainer,\n      children: [_jsx(Text, {\n        style: styles.infoText,\n        children: t('import.text.waitImporting')\n      }), _jsx(Spinner, {\n        isVisible: true,\n        size: DEVICE_LARGE ? 64 : 44,\n        type: \"Wave\",\n        color: ORANGE\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1\n  },\n  waitingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    color: BLACK,\n    fontSize: fontSize[16],\n    maxWidth: '90%'\n  }\n});\nexport default ImportScreen;","map":{"version":3,"names":["React","useEffect","Spinner","useTranslation","setUserId","setPrimaryDevice","useSelector","useDispatch","BLACK","ORANGE","fontSize","DEVICE_LARGE","setRecoveryKeys","resetRecoveryData","uploadCompletedByOtherSide","clearImportChannel","ImportScreen","t","dispatch","recoveryData","state","importCompleted","id","styles","container","waitingContainer","infoText","StyleSheet","create","justifyContent","alignItems","width","flex","fontFamily","textAlign","color","maxWidth"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/ImportScreen.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport { setUserId, setPrimaryDevice } from '@/actions';\nimport { useSelector, useDispatch } from '@/store';\nimport { BLACK, ORANGE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { setRecoveryKeys } from '../RecoveryFlow/thunks/recoveryThunks';\nimport {\n  resetRecoveryData,\n  uploadCompletedByOtherSide,\n} from '../RecoveryFlow/recoveryDataSlice';\nimport { clearImportChannel } from './thunks/channelThunks';\n\n/* Component to track import restore */\nconst ImportScreen = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const recoveryData = useSelector((state: State) => state.recoveryData);\n  const importCompleted = useSelector(uploadCompletedByOtherSide);\n\n  useEffect(() => {\n    if (importCompleted) {\n      clearImportChannel();\n      dispatch(setPrimaryDevice(false));\n      dispatch(setRecoveryKeys());\n      dispatch(resetRecoveryData());\n      dispatch(setUserId(recoveryData.id));\n    }\n  }, [recoveryData, dispatch, importCompleted]);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.waitingContainer}>\n        <Text style={styles.infoText}>{t('import.text.waitImporting')}</Text>\n        <Spinner\n          isVisible={true}\n          size={DEVICE_LARGE ? 64 : 44}\n          type=\"Wave\"\n          color={ORANGE}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1,\n  },\n  waitingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    color: BLACK,\n    fontSize: fontSize[16],\n    maxWidth: '90%',\n  },\n});\n\nexport default ImportScreen;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,EAAoBC,gBAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB;AACA,SAASC,KAAT,EAAgBC,MAAhB;AACA,SAASC,QAAT;AACA,SAASC,YAAT;AACA,SAASC,eAAT;AACA,SACEC,iBADF,EAEEC,0BAFF;AAIA,SAASC,kBAAT;;;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;EACzB,sBAAcb,cAAc,EAA5B;EAAA,IAAQc,CAAR,mBAAQA,CAAR;;EACA,IAAMC,QAAQ,GAAGX,WAAW,EAA5B;EACA,IAAMY,YAAY,GAAGb,WAAW,CAAC,UAACc,KAAD;IAAA,OAAkBA,KAAK,CAACD,YAAxB;EAAA,CAAD,CAAhC;EACA,IAAME,eAAe,GAAGf,WAAW,CAACQ,0BAAD,CAAnC;EAEAb,SAAS,CAAC,YAAM;IACd,IAAIoB,eAAJ,EAAqB;MACnBN,kBAAkB;MAClBG,QAAQ,CAACb,gBAAgB,CAAC,KAAD,CAAjB,CAAR;MACAa,QAAQ,CAACN,eAAe,EAAhB,CAAR;MACAM,QAAQ,CAACL,iBAAiB,EAAlB,CAAR;MACAK,QAAQ,CAACd,SAAS,CAACe,YAAY,CAACG,EAAd,CAAV,CAAR;IACD;EACF,CARQ,EAQN,CAACH,YAAD,EAAeD,QAAf,EAAyBG,eAAzB,CARM,CAAT;EAUA,OACE,KAAC,IAAD;IAAM,KAAK,EAAEE,MAAM,CAACC,SAApB;IAAA,UACE,MAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,gBAApB;MAAA,WACE,KAAC,IAAD;QAAM,KAAK,EAAEF,MAAM,CAACG,QAApB;QAAA,UAA+BT,CAAC,CAAC,2BAAD;MAAhC,EADF,EAEE,KAAC,OAAD;QACE,SAAS,EAAE,IADb;QAEE,IAAI,EAAEN,YAAY,GAAG,EAAH,GAAQ,EAF5B;QAGE,IAAI,EAAC,MAHP;QAIE,KAAK,EAAEF;MAJT,EAFF;IAAA;EADF,EADF;AAaD,CA7BD;;AA+BA,IAAMc,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,cAAc,EAAE,QADP;IAETC,UAAU,EAAE,QAFH;IAGTC,KAAK,EAAE,MAHE;IAITC,IAAI,EAAE;EAJG,CADoB;EAO/BP,gBAAgB,EAAE;IAChBO,IAAI,EAAE,CADU;IAEhBH,cAAc,EAAE,QAFA;IAGhBC,UAAU,EAAE;EAHI,CAPa;EAY/BJ,QAAQ,EAAE;IACRO,UAAU,EAAE,gBADJ;IAERC,SAAS,EAAE,QAFH;IAGRC,KAAK,EAAE3B,KAHC;IAIRE,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAJV;IAKR0B,QAAQ,EAAE;EALF;AAZqB,CAAlB,CAAf;AAqBA,eAAepB,YAAf"},"metadata":{},"sourceType":"module"}