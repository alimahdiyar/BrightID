{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Spinner from 'react-native-spinkit';\nimport { useSelector } from \"../../../store\";\nimport { useTranslation } from 'react-i18next';\nimport EmptyList from \"../../Helpers/EmptyList\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { connectionsSelector } from \"../../../utils/connectionsSelector\";\nimport { ORANGE, WHITE } from \"../../../theme/colors\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport RecoveringConnectionCard from \"./RecoveringConnectionCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar ITEM_HEIGHT = DEVICE_LARGE ? 102 : 92;\n\nvar getItemLayout = function getItemLayout(data, index) {\n  return {\n    length: ITEM_HEIGHT,\n    offset: ITEM_HEIGHT * index,\n    index: index\n  };\n};\n\nvar RecoveringConnectionScreen = function RecoveringConnectionScreen() {\n  var connections = useSelector(function (state) {\n    return connectionsSelector(state, undefined);\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      uploadingData = _useState2[0],\n      setUploadingData = _useState2[1];\n\n  var renderConnection = function renderConnection(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    item.index = index;\n    return _jsx(RecoveringConnectionCard, _objectSpread(_objectSpread({}, item), {}, {\n      setUploadingData: setUploadingData\n    }));\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: styles.orangeTop\n    }), _jsx(View, {\n      style: styles.container,\n      children: !uploadingData ? _jsxs(View, {\n        style: styles.mainContainer,\n        children: [_jsx(View, {\n          style: styles.titleContainer,\n          children: _jsx(Text, {\n            style: styles.infoText,\n            children: t('restore.text.chooseConnectionToHelp')\n          })\n        }), _jsx(View, {\n          style: styles.mainContainer,\n          children: _jsx(FlatList, {\n            style: styles.connectionsContainer,\n            contentContainerStyle: {\n              paddingBottom: 50,\n              flexGrow: 1\n            },\n            data: connections,\n            keyExtractor: function keyExtractor(_ref2, index) {\n              var id = _ref2.id;\n              return id + index;\n            },\n            renderItem: renderConnection,\n            showsHorizontalScrollIndicator: false,\n            showsVerticalScrollIndicator: false,\n            ListEmptyComponent: _jsx(EmptyList, {\n              title: t('restore.emptyList.text.nobodyHasChosen')\n            }),\n            getItemLayout: getItemLayout\n          })\n        })]\n      }) : _jsxs(View, {\n        style: styles.mainContainer,\n        children: [_jsx(View, {\n          style: styles.titleContainer,\n          children: _jsx(Text, {\n            style: styles.infoText,\n            children: \"Uploading Shared Data\"\n          })\n        }), _jsx(Spinner, {\n          size: DEVICE_LARGE ? 48 : 42,\n          type: \"Wave\",\n          color: ORANGE\n        })]\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  mainContainer: {\n    marginTop: 8,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  connectionsContainer: {\n    flex: 1,\n    width: '100%'\n  },\n  moreIcon: {\n    marginRight: 16\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 6,\n    backgroundColor: WHITE,\n    width: '100%',\n    marginBottom: 11\n  },\n  infoText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    width: '80%'\n  }\n});\nexport default RecoveringConnectionScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RecoveringConnectionScreen.tsx"],"names":["ITEM_HEIGHT","DEVICE_LARGE","getItemLayout","length","offset","index","RecoveringConnectionScreen","connections","useSelector","connectionsSelector","t","useTranslation","uploadingData","setUploadingData","useState","renderConnection","item","styles","paddingBottom","flexGrow","id","StyleSheet","orangeTop","backgroundColor","height","width","zIndex","container","flex","borderTopLeftRadius","marginTop","overflow","mainContainer","justifyContent","alignItems","connectionsContainer","moreIcon","marginRight","titleContainer","marginBottom","infoText","fontFamily","fontSize","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, View, FlatList } from 'react-native';\nimport Spinner from 'react-native-spinkit';\nimport { useSelector } from '@/store';\nimport { useTranslation } from 'react-i18next';\nimport EmptyList from '@/components/Helpers/EmptyList';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { connectionsSelector } from '@/utils/connectionsSelector';\nimport { ORANGE, WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport RecoveringConnectionCard from './RecoveringConnectionCard';\n\nconst ITEM_HEIGHT = DEVICE_LARGE ? 102 : 92;\n\nconst getItemLayout = (data, index) => ({\n  length: ITEM_HEIGHT,\n  offset: ITEM_HEIGHT * index,\n  index,\n});\n\nconst RecoveringConnectionScreen = () => {\n  const connections = useSelector((state) =>\n    connectionsSelector(state, undefined),\n  );\n  const { t } = useTranslation();\n  const [uploadingData, setUploadingData] = useState(false);\n\n  const renderConnection = ({ item, index }) => {\n    item.index = index;\n    return (\n      <RecoveringConnectionCard {...item} setUploadingData={setUploadingData} />\n    );\n  };\n\n  return (\n    <>\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        {!uploadingData ? (\n          <View style={styles.mainContainer}>\n            <View style={styles.titleContainer}>\n              <Text style={styles.infoText}>\n                {t('restore.text.chooseConnectionToHelp')}\n              </Text>\n            </View>\n            <View style={styles.mainContainer}>\n              <FlatList\n                style={styles.connectionsContainer}\n                contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n                data={connections}\n                keyExtractor={({ id }, index) => id + index}\n                renderItem={renderConnection}\n                showsHorizontalScrollIndicator={false}\n                showsVerticalScrollIndicator={false}\n                ListEmptyComponent={\n                  <EmptyList\n                    title={t('restore.emptyList.text.nobodyHasChosen')}\n                  />\n                }\n                getItemLayout={getItemLayout}\n              />\n            </View>\n          </View>\n        ) : (\n          <View style={styles.mainContainer}>\n            <View style={styles.titleContainer}>\n              <Text style={styles.infoText}>Uploading Shared Data</Text>\n            </View>\n            <Spinner size={DEVICE_LARGE ? 48 : 42} type=\"Wave\" color={ORANGE} />\n          </View>\n        )}\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  mainContainer: {\n    marginTop: 8,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  connectionsContainer: {\n    flex: 1,\n    width: '100%',\n  },\n  moreIcon: {\n    marginRight: 16,\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 6,\n    backgroundColor: WHITE,\n    width: '100%',\n    marginBottom: 11,\n  },\n  infoText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    width: '80%',\n  },\n});\n\nexport default RecoveringConnectionScreen;\n"]},"metadata":{},"sourceType":"module"}