{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport i18next from 'i18next';\nimport store from \"../store\";\nimport { updateLinkedContext, addConnection, updateMemberships, updateOperation, selectPendingOperations } from \"../actions\";\nimport { checkTasks } from \"../components/Tasks/TasksSlice\";\nimport { operation_states, OPERATION_TRACE_TIME } from \"./constants\";\nimport { NodeApi } from \"../api/brightId\";\n\nvar handleOpUpdate = function handleOpUpdate(store, op, state, result, api) {\n  var showDefaultError = false;\n\n  switch (op.name) {\n    case 'Link ContextId':\n      store.dispatch(updateLinkedContext({\n        context: op.context,\n        contextId: op.contextId,\n        state: state\n      }));\n\n      if (state === operation_states.APPLIED) {\n        Alert.alert(i18next.t('apps.alert.title.linkSuccess'), i18next.t('apps.alert.text.linkSuccess', {\n          context: \"\" + op.context\n        }));\n      } else {\n        Alert.alert(i18next.t('apps.alert.title.linkFailure'), i18next.t('apps.alert.text.linkFailure', {\n          context: \"\" + op.context,\n          result: \"\" + result.message\n        }));\n      }\n\n      break;\n\n    case 'Connect':\n      if (op.id1 !== store.getState().user.id) {\n        break;\n      }\n\n      if (state === operation_states.APPLIED) {\n        store.dispatch(addConnection({\n          id: op.id2,\n          status: 'verified'\n        }));\n      } else {\n        api.getProfile(op.id2).then(function (profile) {\n          var _profile$reports$find;\n\n          var conn = {\n            id: profile.id,\n            level: profile.level,\n            timestamp: profile.connectedAt,\n            reportReason: (_profile$reports$find = profile.reports.find(function (r) {\n              return r.id === op.id1;\n            })) == null ? void 0 : _profile$reports$find.reason\n          };\n          store.dispatch(addConnection(conn));\n        });\n        showDefaultError = true;\n      }\n\n      break;\n\n    case 'Add Group':\n    case 'Add Membership':\n    case 'Remove Membership':\n      if (state === operation_states.FAILED) {\n        if (op.id && op.id !== store.getState().user.id) {\n          showDefaultError = false;\n        } else {\n          showDefaultError = true;\n          api.getMemberships(op.id).then(function (memberships) {\n            store.dispatch(updateMemberships(memberships));\n          });\n        }\n      }\n\n      break;\n\n    default:\n      if (state === operation_states.FAILED) {\n        showDefaultError = true;\n      }\n\n  }\n\n  if (showDefaultError) {\n    Alert.alert(i18next.t('common.alert.error'), i18next.t('common.alert.text.failedOp', {\n      name: op.name,\n      message: result.message\n    }));\n  }\n};\n\nexport var pollOperations = function _callee(api) {\n  var operations, shouldUpdateTasks, _iterator, _step, op, queryApi, id, secretKey, _await$queryApi$getOp, state, result;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          operations = selectPendingOperations(store.getState());\n          shouldUpdateTasks = false;\n          _context.prev = 2;\n          _iterator = _createForOfIteratorHelperLoose(operations);\n\n        case 4:\n          if ((_step = _iterator()).done) {\n            _context.next = 30;\n            break;\n          }\n\n          op = _step.value;\n          queryApi = api;\n\n          if (op.apiUrl) {\n            id = store.getState().user.id;\n            secretKey = store.getState().keypair.secretKey;\n            queryApi = new NodeApi({\n              url: op.apiUrl,\n              id: id,\n              secretKey: secretKey\n            });\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(queryApi.getOperationState(op.hash));\n\n        case 10:\n          _await$queryApi$getOp = _context.sent;\n          state = _await$queryApi$getOp.state;\n          result = _await$queryApi$getOp.result;\n\n          if (!(op.state !== state)) {\n            _context.next = 27;\n            break;\n          }\n\n          _context.t0 = state;\n          _context.next = _context.t0 === operation_states.UNKNOWN ? 17 : _context.t0 === operation_states.INIT ? 19 : _context.t0 === operation_states.SENT ? 19 : _context.t0 === operation_states.APPLIED ? 20 : _context.t0 === operation_states.FAILED ? 20 : 22;\n          break;\n\n        case 17:\n          console.log(\"operation \" + op.name + \" (\" + op.hash + \") unknown on server\");\n          return _context.abrupt(\"break\", 23);\n\n        case 19:\n          return _context.abrupt(\"break\", 23);\n\n        case 20:\n          handleOpUpdate(store, op, state, result, api);\n          return _context.abrupt(\"break\", 23);\n\n        case 22:\n          console.log(\"Op \" + op.name + \" (\" + op.hash + \") has invalid state '\" + state + \"'!\");\n\n        case 23:\n          store.dispatch(updateOperation({\n            id: op.hash,\n            changes: {\n              state: state\n            }\n          }));\n\n          if (state === operation_states.APPLIED) {\n            shouldUpdateTasks = true;\n          }\n\n          _context.next = 28;\n          break;\n\n        case 27:\n          if ((op.postTimestamp || op.timestamp) + OPERATION_TRACE_TIME < Date.now()) {\n            store.dispatch(updateOperation({\n              id: op.hash,\n              changes: {\n                state: operation_states.EXPIRED\n              }\n            }));\n          }\n\n        case 28:\n          _context.next = 4;\n          break;\n\n        case 30:\n          _context.next = 35;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t1 = _context[\"catch\"](2);\n\n          if (_context.t1 instanceof Error) {\n            console.warn(_context.t1.message);\n          } else {\n            console.warn(_context.t1);\n          }\n\n        case 35:\n          _context.prev = 35;\n\n          if (shouldUpdateTasks) {\n            store.dispatch(checkTasks());\n          }\n\n          return _context.finish(35);\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 32, 35, 38]], Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/operations.ts"],"names":["handleOpUpdate","showDefaultError","op","store","updateLinkedContext","context","contextId","state","operation_states","Alert","i18next","result","addConnection","id","status","api","conn","profile","level","timestamp","reportReason","r","updateMemberships","name","message","pollOperations","operations","selectPendingOperations","shouldUpdateTasks","queryApi","secretKey","url","console","updateOperation","changes","Date","checkTasks"],"mappings":"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","sourcesContent":["import { Alert } from 'react-native';\nimport i18next from 'i18next';\nimport store from '@/store';\nimport {\n  updateLinkedContext,\n  addConnection,\n  updateMemberships,\n  updateOperation,\n  selectPendingOperations,\n} from '@/actions';\nimport { checkTasks } from '@/components/Tasks/TasksSlice';\nimport { operation_states, OPERATION_TRACE_TIME } from '@/utils/constants';\nimport { NodeApi } from '@/api/brightId';\n\nconst handleOpUpdate = (store, op, state, result, api) => {\n  let showDefaultError = false;\n  switch (op.name) {\n    case 'Link ContextId':\n      store.dispatch(\n        updateLinkedContext({\n          context: op.context,\n          contextId: op.contextId,\n          state,\n        }),\n      );\n      if (state === operation_states.APPLIED) {\n        Alert.alert(\n          i18next.t('apps.alert.title.linkSuccess'),\n          i18next.t('apps.alert.text.linkSuccess', {\n            context: `${op.context}`,\n          }),\n        );\n      } else {\n        Alert.alert(\n          i18next.t('apps.alert.title.linkFailure'),\n          i18next.t('apps.alert.text.linkFailure', {\n            context: `${op.context}`,\n            result: `${result.message}`,\n          }),\n        );\n      }\n      break;\n\n    case 'Connect':\n      if (op.id1 !== store.getState().user.id) {\n        // ignore other side of dummy test connections\n        break;\n      }\n      if (state === operation_states.APPLIED) {\n        store.dispatch(addConnection({ id: op.id2, status: 'verified' }));\n      } else {\n        api.getProfile(op.id2).then((profile) => {\n          const conn = {\n            id: profile.id,\n            level: profile.level,\n            timestamp: profile.connectedAt,\n            reportReason: profile.reports.find((r) => r.id === op.id1)?.reason,\n          };\n          store.dispatch(addConnection(conn));\n        });\n        showDefaultError = true;\n      }\n      break;\n\n    case 'Add Group':\n    case 'Add Membership':\n    case 'Remove Membership':\n      if (state === operation_states.FAILED) {\n        if (op.id && op.id !== store.getState().user.id) {\n          // the operation was triggered by e2e-tests, using a fake userID. Ignore error.\n          showDefaultError = false;\n        } else {\n          showDefaultError = true;\n          api.getMemberships(op.id).then((memberships) => {\n            store.dispatch(updateMemberships(memberships));\n          });\n        }\n      }\n      break;\n    default:\n      if (state === operation_states.FAILED) {\n        showDefaultError = true;\n      }\n  }\n\n  if (showDefaultError) {\n    Alert.alert(\n      i18next.t('common.alert.error'),\n      i18next.t('common.alert.text.failedOp', {\n        name: op.name,\n        message: result.message,\n      }),\n    );\n  }\n};\n\nexport const pollOperations = async (api) => {\n  const operations = selectPendingOperations(store.getState());\n  let shouldUpdateTasks = false;\n  try {\n    for (const op of operations) {\n      let queryApi = api;\n      if (op.apiUrl) {\n        // If the op has an apiUrl attached, use that instead of the default one.\n        // Background: Some operations like \"link context\" require to query a specific\n        // api endpoint as the op is only known on that node\n        const { id } = store.getState().user;\n        const { secretKey } = store.getState().keypair;\n        queryApi = new NodeApi({ url: op.apiUrl, id, secretKey });\n      }\n      const { state, result } = await queryApi.getOperationState(op.hash);\n\n      if (op.state !== state) {\n        switch (state) {\n          case operation_states.UNKNOWN:\n            // Op not found on server. It might appear in a future poll cycle, so do nothing.\n            console.log(`operation ${op.name} (${op.hash}) unknown on server`);\n            break;\n          case operation_states.INIT:\n          case operation_states.SENT:\n            // Op still waiting to be processed. Do nothing.\n            break;\n          case operation_states.APPLIED:\n          case operation_states.FAILED:\n            handleOpUpdate(store, op, state, result, api);\n            break;\n          default:\n            console.log(\n              `Op ${op.name} (${op.hash}) has invalid state '${state}'!`,\n            );\n        }\n        store.dispatch(updateOperation({ id: op.hash, changes: { state } }));\n        if (state === operation_states.APPLIED) {\n          // if an op was applied we should check achievements\n          shouldUpdateTasks = true;\n        }\n      } else {\n        // stop polling for op if trace time is expired\n        if (\n          (op.postTimestamp || op.timestamp) + OPERATION_TRACE_TIME <\n          Date.now()\n        ) {\n          store.dispatch(\n            updateOperation({\n              id: op.hash,\n              changes: { state: operation_states.EXPIRED },\n            }),\n          );\n        }\n      }\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      console.warn(err.message);\n    } else {\n      console.warn(err);\n    }\n  } finally {\n    if (shouldUpdateTasks) {\n      store.dispatch(checkTasks());\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}