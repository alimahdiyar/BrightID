{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bootstrap = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _dev = require(\"./utils/dev\");\n\nvar _store = require(\"./store\");\n\nvar _TasksSlice = require(\"./components/Tasks/TasksSlice\");\n\nvar _operationsSlice = require(\"./reducer/operationsSlice\");\n\nvar bootstrap = function _callee() {\n  var _store$getState, id;\n\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _store$getState = _store.store.getState(), id = _store$getState.user.id;\n\n          _store.store.dispatch((0, _TasksSlice.syncStoreTasks)());\n\n          _store.store.dispatch((0, _TasksSlice.checkTasks)());\n\n          _store.store.dispatch((0, _operationsSlice.scrubOps)());\n\n          _context.prev = 4;\n\n          if (!(id === 'empty')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return _regenerator.default.awrap((0, _dev.dangerouslyDeleteStorage)());\n\n        case 8:\n          _reactNative.Alert.alert(_i18next.default.t('common.alert.title.lostKeys'), _i18next.default.t('common.alert.text.lostKeys'));\n\n          throw new Error('id is empty');\n\n        case 10:\n          _context.next = 15;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](4);\n          console.error(_context.t0);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 12]], Promise);\n};\n\nexports.bootstrap = bootstrap;","map":{"version":3,"names":["bootstrap","store","getState","id","user","dispatch","syncStoreTasks","checkTasks","scrubOps","dangerouslyDeleteStorage","Alert","alert","i18next","t","Error","console","error"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/bootstrap.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport i18next from 'i18next';\nimport { dangerouslyDeleteStorage } from '@/utils/dev';\nimport { store } from './store';\nimport { checkTasks, syncStoreTasks } from './components/Tasks/TasksSlice';\nimport { scrubOps } from '@/reducer/operationsSlice';\n\n// happens inside of the loading screen\n\nexport const bootstrap = async () => {\n  const {\n    user: { id },\n  } = store.getState();\n\n  // update available usertasks\n  store.dispatch(syncStoreTasks());\n  // Initial check for completed tasks\n  store.dispatch(checkTasks());\n  // scrub outdated operations from state\n  store.dispatch(scrubOps());\n\n  try {\n    // delete all storage if brightid is empty\n    if (id === 'empty') {\n      await dangerouslyDeleteStorage();\n      Alert.alert(\n        i18next.t('common.alert.title.lostKeys'),\n        i18next.t('common.alert.text.lostKeys'),\n      );\n      throw new Error('id is empty');\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIO,IAAMA,SAAS,GAAG;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,kBAGnBC,YAAA,CAAMC,QAAN,EAHmB,EAEbC,EAFa,mBAErBC,IAFqB,CAEbD,EAFa;;UAMvBF,YAAA,CAAMI,QAAN,CAAe,IAAAC,0BAAA,GAAf;;UAEAL,YAAA,CAAMI,QAAN,CAAe,IAAAE,sBAAA,GAAf;;UAEAN,YAAA,CAAMI,QAAN,CAAe,IAAAG,yBAAA,GAAf;;UAVuB;;UAAA,MAcjBL,EAAE,KAAK,OAdU;YAAA;YAAA;UAAA;;UAAA;UAAA,kCAeb,IAAAM,6BAAA,GAfa;;QAAA;UAgBnBC,kBAAA,CAAMC,KAAN,CACEC,gBAAA,CAAQC,CAAR,CAAU,6BAAV,CADF,EAEED,gBAAA,CAAQC,CAAR,CAAU,4BAAV,CAFF;;UAhBmB,MAoBb,IAAIC,KAAJ,CAAU,aAAV,CApBa;;QAAA;UAAA;UAAA;;QAAA;UAAA;UAAA;UAuBrBC,OAAO,CAACC,KAAR;;QAvBqB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAlB"},"metadata":{},"sourceType":"script"}