{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport RNFetchBlob from 'rn-fetch-blob';\nimport { parseDataUri, mimeFromUri } from \"./images\";\nexport var photoDirectory = function photoDirectory() {\n  return RNFetchBlob.fs.dirs.DocumentDir + \"/photos\";\n};\nexport var createImageDirectory = function _callee() {\n  var exists;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(RNFetchBlob.fs.exists(photoDirectory()));\n\n        case 2:\n          exists = _context.sent;\n          return _context.abrupt(\"return\", exists ? new Promise(function (resolve) {\n            return resolve();\n          }) : RNFetchBlob.fs.mkdir(photoDirectory()));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveImage = function _callee2(_ref) {\n  var base64Image, imageName, _parseDataUri, filetype, image, path;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          base64Image = _ref.base64Image, imageName = _ref.imageName;\n          _context2.prev = 1;\n          _parseDataUri = parseDataUri(base64Image), filetype = _parseDataUri.filetype, image = _parseDataUri.image;\n          path = photoDirectory() + \"/\" + imageName + \".\" + filetype;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(RNFetchBlob.fs.writeFile(path, image, 'base64'));\n\n        case 6:\n          return _context2.abrupt(\"return\", imageName + \".\" + filetype);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0.message);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var retrieveImage = function _callee3(filename) {\n  var mime, base64Image;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          mime = mimeFromUri(filename);\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(RNFetchBlob.fs.readFile(photoDirectory() + \"/\" + filename, 'base64'));\n\n        case 4:\n          base64Image = _context3.sent;\n          return _context3.abrupt(\"return\", \"data:\" + mime + \";base64,\" + base64Image);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};","map":{"version":3,"names":["RNFetchBlob","parseDataUri","mimeFromUri","photoDirectory","fs","dirs","DocumentDir","createImageDirectory","exists","Promise","resolve","mkdir","saveImage","base64Image","imageName","filetype","image","path","writeFile","console","log","message","retrieveImage","filename","mime","readFile"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/filesystem.ts"],"sourcesContent":["import RNFetchBlob from 'rn-fetch-blob';\nimport { parseDataUri, mimeFromUri } from './images';\n\nexport const photoDirectory = () => `${RNFetchBlob.fs.dirs.DocumentDir}/photos`;\n\nexport const createImageDirectory = async () => {\n  const exists = await RNFetchBlob.fs.exists(photoDirectory());\n  return exists\n    ? new Promise<void>((resolve) => resolve())\n    : RNFetchBlob.fs.mkdir(photoDirectory());\n};\n\nexport const saveImage = async ({\n  base64Image,\n  imageName,\n}: {\n  base64Image: string;\n  imageName: string;\n}) => {\n  try {\n    const { filetype, image } = parseDataUri(base64Image);\n    const path = `${photoDirectory()}/${imageName}.${filetype}`;\n    await RNFetchBlob.fs.writeFile(path, image, 'base64');\n    return `${imageName}.${filetype}`;\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n\nexport const retrieveImage = async (filename: string) => {\n  try {\n    const mime = mimeFromUri(filename);\n    const base64Image = await RNFetchBlob.fs.readFile(\n      `${photoDirectory()}/${filename}`,\n      'base64',\n    );\n    return `data:${mime};base64,${base64Image}`;\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,YAAT,EAAuBC,WAAvB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;EAAA,OAASH,WAAW,CAACI,EAAZ,CAAeC,IAAf,CAAoBC,WAA7B;AAAA,CAAvB;AAEP,OAAO,IAAMC,oBAAoB,GAAG;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCACbP,WAAW,CAACI,EAAZ,CAAeI,MAAf,CAAsBL,cAAc,EAApC,CADa;;QAAA;UAC5BK,MAD4B;UAAA,iCAE3BA,MAAM,GACT,IAAIC,OAAJ,CAAkB,UAACC,OAAD;YAAA,OAAaA,OAAO,EAApB;UAAA,CAAlB,CADS,GAETV,WAAW,CAACI,EAAZ,CAAeO,KAAf,CAAqBR,cAAc,EAAnC,CAJ8B;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAA7B;AAOP,OAAO,IAAMS,SAAS,GAAG;EAAA;;EAAA;IAAA;MAAA;QAAA;UACvBC,WADuB,QACvBA,WADuB,EAEvBC,SAFuB,QAEvBA,SAFuB;UAAA;UAAA,gBAQOb,YAAY,CAACY,WAAD,CARnB,EAQbE,QARa,iBAQbA,QARa,EAQHC,KARG,iBAQHA,KARG;UASfC,IATe,GASLd,cAAc,EATT,SASeW,SATf,SAS4BC,QAT5B;UAAA;UAAA,iCAUff,WAAW,CAACI,EAAZ,CAAec,SAAf,CAAyBD,IAAzB,EAA+BD,KAA/B,EAAsC,QAAtC,CAVe;;QAAA;UAAA,kCAWXF,SAXW,SAWEC,QAXF;;QAAA;UAAA;UAAA;UAarBI,OAAO,CAACC,GAAR,CAAY,aAAIC,OAAhB;;QAbqB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAlB;AAiBP,OAAO,IAAMC,aAAa,GAAG,kBAAOC,QAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAEnBC,IAFmB,GAEZtB,WAAW,CAACqB,QAAD,CAFC;UAAA;UAAA,iCAGCvB,WAAW,CAACI,EAAZ,CAAeqB,QAAf,CACrBtB,cAAc,EADO,SACDoB,QADC,EAExB,QAFwB,CAHD;;QAAA;UAGnBV,WAHmB;UAAA,4CAOVW,IAPU,gBAOKX,WAPL;;QAAA;UAAA;UAAA;UASzBM,OAAO,CAACC,GAAR,CAAY,aAAIC,OAAhB;;QATyB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAtB"},"metadata":{},"sourceType":"module"}