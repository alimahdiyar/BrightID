{"ast":null,"code":"import * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NavigationHelpersContext } from '@react-navigation/core';\nimport useLinkTo from \"./useLinkTo\";\nexport default function useLinkProps(_ref) {\n  var to = _ref.to,\n      action = _ref.action;\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linkTo = useLinkTo();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\"To 'to' option is invalid (found '\".concat(String(to), \"'. It must be a valid string for navigation.\"));\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["to","action","navigation","React","linkTo","useLinkTo","onPress","shouldHandle","Platform","e","String","href","accessibilityRole"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,SAAA,wBAAA,QAAA,wBAAA;AAIA,OAAA,SAAA;AAaA,eAAe,SAAA,YAAA,CAAA,IAAA,EAA6C;EAArBA,IAAAA,EAAqB,GAAA,IAAA,CAArBA,EAAAA;EAAAA,IAAIC,MAAiB,GAAA,IAAA,CAAjBA,MAAJD;EACrC,IAAME,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,wBAAmBA,CAAnB;EACA,IAAMC,MAAM,GAAGC,SAAf,EAAA;;EAEA,IAAMC,OAAO,GAAPA,SAAAA,OAAAA,CAAU,CAAVA,EAED;IAAA,IAAA,gBAAA;;IACH,IAAIC,YAAY,GAAhB,KAAA;;IAEA,IAAIC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAyB,CAA7B,CAAA,EAAiC;MAC/BD,YAAY,GAAGE,CAAC,GAAG,CAACA,CAAC,CAAL,gBAAA,GADlB,IACEF;IADF,CAAA,MAEO,IACL,CAACE,CAAC,CAAF,gBAAA,IAEA,EAAEA,CAAC,CAADA,OAAAA,IAAaA,CAAC,CAAdA,MAAAA,IAAyBA,CAAC,CAA1BA,OAAAA,IAAsCA,CAAC,CAFzC,QAEA,CAFA,KAICA,CAAC,CAADA,MAAAA,IAAAA,IAAAA,IAAoBA,CAAC,CAADA,MAAAA,KAJrB,CAAA,KAMA,CAAA,SAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,CAAA,CAAA,gBAAA,GAAuCA,CAAC,CAAxC,aAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAuCA,gBAAAA,CAPlC,MAOL,CAPK,EAQL;MACAA,CAAC,CAADA,cAAAA;MACAF,YAAY,GAAZA,IAAAA;IAGF;;IAAA,IAAA,YAAA,EAAkB;MAChB,IAAA,MAAA,EAAY;QACV,IAAA,UAAA,EAAgB;UACdL,UAAU,CAAVA,QAAAA,CADF,MACEA;QADF,CAAA,MAEO;UACL,MAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;QAJJ;MAAA,CAAA,MAMO;QACL,IAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;UAC1B,MAAM,IAAA,KAAA,CAAA,qCAAA,MAAA,CACiCQ,MAAM,CADvC,EACuC,CADvC,EAAN,8CAAM,CAAA,CAAN;QAOFN;;QAAAA,MAAM,CAANA,EAAM,CAANA;MAEH;IAtCH;EAAA,CAAA;;EAyCA,OAAO;IACLO,IAAI,EADC,EAAA;IAELC,iBAAiB,EAFZ,MAAA;IAGLN,OAAAA,EAHF;EAAO,CAAP;AAKD","sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}