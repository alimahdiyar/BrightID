{"ast":null,"code":"module.exports = deprecate;\n\nfunction deprecate(fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      warned = true;\n    }\n\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\nfunction config(name) {\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/util-deprecate/browser.js"],"names":["module","config","warned","console","fn","global","val","String"],"mappings":"AAKAA,MAAM,CAANA,OAAAA,GAAAA,SAAAA;;AAoBA,SAAA,SAAA,CAAA,EAAA,EAAA,GAAA,EAA6B;EAC3B,IAAIC,MAAM,CAAV,eAAU,CAAV,EAA6B;IAC3B,OAAA,EAAA;EAGF;;EAAA,IAAIC,MAAM,GAAV,KAAA;;EACA,SAAA,UAAA,GAAsB;IACpB,IAAI,CAAJ,MAAA,EAAa;MACX,IAAID,MAAM,CAAV,kBAAU,CAAV,EAAgC;QAC9B,MAAM,IAAA,KAAA,CAAN,GAAM,CAAN;MADF,CAAA,MAEO,IAAIA,MAAM,CAAV,kBAAU,CAAV,EAAgC;QACrCE,OAAO,CAAPA,KAAAA,CAAAA,GAAAA;MADK,CAAA,MAEA;QACLA,OAAO,CAAPA,IAAAA,CAAAA,GAAAA;MAEFD;;MAAAA,MAAM,GAANA,IAAAA;IAEF;;IAAA,OAAOE,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;EAGF;;EAAA,OAAA,UAAA;AAWF;;AAAA,SAAA,MAAA,CAAA,IAAA,EAAuB;EAErB,IAAI;IACF,IAAI,CAACC,MAAM,CAAX,YAAA,EAA0B,OAAA,KAAA;EAC1B,CAFF,CAEE,OAAA,CAAA,EAAU;IACV,OAAA,KAAA;EAEF;;EAAA,IAAIC,GAAG,GAAGD,MAAM,CAANA,YAAAA,CAAV,IAAUA,CAAV;EACA,IAAI,QAAJ,GAAA,EAAiB,OAAA,KAAA;EACjB,OAAOE,MAAM,CAANA,GAAM,CAANA,CAAAA,WAAAA,OAAP,MAAA;AACD","sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n"]},"metadata":{},"sourceType":"script"}