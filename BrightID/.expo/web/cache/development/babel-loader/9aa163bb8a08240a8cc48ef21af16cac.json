{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { useTranslation } from 'react-i18next';\nimport BlurWidget from \"../BlurWidget/BlurWidget.web\";\nimport { useNavigation } from '@react-navigation/native';\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from \"../../utils/constants\";\nimport { BLACK, WHITE, GREEN } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { addOperation, firstRecoveryTimeSelector, setConnectionLevel, setFirstRecoveryTime } from \"../../actions\";\nimport { selectConnectionById } from \"../../reducer/connectionsSlice\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport TrustlevelSlider from \"./TrustlevelSlider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TrustlevelModal = function TrustlevelModal(_ref) {\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var connectionId = route.params.connectionId;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      myId = _useSelector.id;\n\n  var firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  var connection = useSelector(function (state) {\n    return selectConnectionById(state, connectionId);\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(connection ? connection.level : connection_levels.JUST_MET),\n      _useState2 = _slicedToArray(_useState, 2),\n      level = _useState2[0],\n      setLevel = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n\n  var goBack = function goBack() {\n    navigation.goBack();\n  };\n\n  var saveLevelHandler = function _callee() {\n    var op, _op;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(connection.level !== level)) {\n              _context.next = 14;\n              break;\n            }\n\n            console.log(\"Setting connection level '\" + level + \"' for \" + connection.name);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(api.addConnection(myId, connection.id, level, Date.now()));\n\n          case 4:\n            op = _context.sent;\n            dispatch(addOperation(op));\n            dispatch(setConnectionLevel({\n              id: connection.id,\n              level: level\n            }));\n\n            if (!__DEV__) {\n              _context.next = 13;\n              break;\n            }\n\n            if (!connection.secretKey) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(api.addConnection(connection.id, myId, level, Date.now(), null, null, {\n              id: connection.id,\n              secretKey: connection.secretKey\n            }));\n\n          case 11:\n            _op = _context.sent;\n            dispatch(addOperation(_op));\n\n          case 13:\n            if (!firstRecoveryTime && level === connection_levels.RECOVERY) {\n              dispatch(setFirstRecoveryTime(Date.now()));\n            }\n\n          case 14:\n            goBack();\n\n            if ((level === connection_levels.RECOVERY || connection.level === connection_levels.RECOVERY) && firstRecoveryTime && Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION) {\n              navigation.navigate('RecoveryCooldownInfo');\n            }\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!connection) {\n    console.log(\"ConnectionID \" + connectionId + \" not found!\");\n    goBack();\n    return null;\n  }\n\n  var changeLevelHandler = function changeLevelHandler(newLevel) {\n    setLevel(newLevel);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BlurWidget, {\n      style: styles.blurView,\n      blurType: \"dark\",\n      blurAmount: 5,\n      reducedTransparencyFallbackColor: BLACK\n    }), _jsx(TouchableWithoutFeedback, {\n      onPress: goBack,\n      children: _jsx(View, {\n        style: styles.blurView\n      })\n    }), _jsxs(View, {\n      style: styles.modalContainer,\n      children: [_jsx(View, {\n        style: styles.header,\n        children: _jsx(Text, {\n          style: styles.headerText,\n          children: t('connectionDetails.text.level', {\n            name: connection.name\n          })\n        })\n      }), _jsx(TrustlevelSlider, {\n        incomingLevel: connection.incomingLevel,\n        currentLevel: level,\n        changeLevelHandler: changeLevelHandler,\n        verbose: true\n      }), _jsx(TouchableOpacity, {\n        testID: \"SaveLevelBtn\",\n        style: styles.confirmButton,\n        onPress: saveLevelHandler,\n        children: _jsx(Text, {\n          style: styles.confirmButtonText,\n          children: t('connectionDetails.button.levelSave')\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  blurView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  },\n  modalContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: WHITE,\n    width: '90%',\n    borderRadius: 25,\n    padding: DEVICE_LARGE ? 30 : 25\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: DEVICE_LARGE ? 22 : 20\n  },\n  headerText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[19],\n    textAlign: 'center'\n  },\n  confirmButton: {\n    width: '90%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: GREEN,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20\n  },\n  confirmButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[17]\n  }\n});\nexport default TrustlevelModal;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustlevelModal.tsx"],"names":["TrustlevelModal","route","navigation","useNavigation","connectionId","myId","useSelector","state","firstRecoveryTime","connection","selectConnectionById","dispatch","useDispatch","level","setLevel","useState","connection_levels","t","useTranslation","api","useContext","goBack","saveLevelHandler","console","op","Date","addOperation","setConnectionLevel","id","secretKey","setFirstRecoveryTime","changeLevelHandler","styles","name","StyleSheet","container","flex","flexDirection","alignItems","justifyContent","blurView","position","left","right","top","bottom","modalContainer","backgroundColor","width","borderRadius","padding","DEVICE_LARGE","header","marginTop","marginBottom","headerText","fontFamily","fontSize","textAlign","confirmButton","paddingTop","paddingBottom","confirmButtonText"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport BlurWidget from '@/components/BlurWidget/BlurWidget.web';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { BLACK, WHITE, GREEN } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  addOperation,\n  firstRecoveryTimeSelector,\n  setConnectionLevel,\n  setFirstRecoveryTime,\n} from '@/actions';\nimport { selectConnectionById } from '@/reducer/connectionsSlice';\nimport { NodeApiContext } from '@/components/NodeApiGate';\n\nimport TrustlevelSlider from './TrustlevelSlider';\n\ntype props = StackScreenProps<ModalStackParamList, 'SetTrustlevel'>;\n\nconst TrustlevelModal = ({ route }: props) => {\n  const navigation = useNavigation();\n  const { connectionId } = route.params;\n  const { id: myId } = useSelector((state: State) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  const connection: Connection = useSelector((state: State) =>\n    selectConnectionById(state, connectionId),\n  );\n  const dispatch = useDispatch();\n  const [level, setLevel] = useState(\n    connection ? connection.level : connection_levels.JUST_MET,\n  );\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const goBack = () => {\n    navigation.goBack();\n    // navigation.navigate('Connection', { connectionId });\n  };\n\n  const saveLevelHandler = async () => {\n    if (connection.level !== level) {\n      console.log(`Setting connection level '${level}' for ${connection.name}`);\n      const op = await api.addConnection(\n        myId,\n        connection.id,\n        level,\n        Date.now(),\n      );\n      dispatch(addOperation(op));\n      dispatch(setConnectionLevel({ id: connection.id, level }));\n\n      if (__DEV__) {\n        // if peer is a fake connection also submit opposite addConnection operation\n        if (connection.secretKey) {\n          const op = await api.addConnection(\n            connection.id,\n            myId,\n            level,\n            Date.now(),\n            null,\n            null,\n            {\n              id: connection.id,\n              secretKey: connection.secretKey,\n            },\n          );\n          dispatch(addOperation(op));\n        }\n      }\n\n      if (!firstRecoveryTime && level === connection_levels.RECOVERY) {\n        // First ever recovery connection. Set firstRecoveryTime accordingly.\n        dispatch(setFirstRecoveryTime(Date.now()));\n      }\n    }\n    // close modal\n    goBack();\n    if (\n      (level === connection_levels.RECOVERY ||\n        connection.level === connection_levels.RECOVERY) &&\n      firstRecoveryTime &&\n      Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n    ) {\n      // show info about cooldown period\n      navigation.navigate('RecoveryCooldownInfo');\n    }\n  };\n\n  // go back silently if connection does not exist. Should never happen.\n  if (!connection) {\n    console.log(`ConnectionID ${connectionId} not found!`);\n    goBack();\n    return null;\n  }\n\n  const changeLevelHandler = (newLevel: ConnectionLevel) => {\n    setLevel(newLevel);\n  };\n\n  return (\n    <View style={styles.container}>\n      <BlurWidget\n        style={styles.blurView}\n        blurType=\"dark\"\n        blurAmount={5}\n        reducedTransparencyFallbackColor={BLACK}\n      />\n      <TouchableWithoutFeedback onPress={goBack}>\n        <View style={styles.blurView} />\n      </TouchableWithoutFeedback>\n      <View style={styles.modalContainer}>\n        <View style={styles.header}>\n          <Text style={styles.headerText}>\n            {t('connectionDetails.text.level', { name: connection.name })}\n          </Text>\n        </View>\n        <TrustlevelSlider\n          incomingLevel={connection.incomingLevel}\n          currentLevel={level}\n          changeLevelHandler={changeLevelHandler}\n          verbose={true}\n        />\n        <TouchableOpacity\n          testID=\"SaveLevelBtn\"\n          style={styles.confirmButton}\n          onPress={saveLevelHandler}\n        >\n          <Text style={styles.confirmButtonText}>\n            {t('connectionDetails.button.levelSave')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  blurView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  modalContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: WHITE,\n    width: '90%',\n    borderRadius: 25,\n    padding: DEVICE_LARGE ? 30 : 25,\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: DEVICE_LARGE ? 22 : 20,\n  },\n  headerText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[19],\n    textAlign: 'center',\n  },\n  confirmButton: {\n    width: '90%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: GREEN,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n  },\n  confirmButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[17],\n  },\n});\n\nexport default TrustlevelModal;\n"]},"metadata":{},"sourceType":"module"}