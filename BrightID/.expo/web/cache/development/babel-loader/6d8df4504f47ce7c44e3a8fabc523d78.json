{"ast":null,"code":"var CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nvar getUnit = function getUnit(str) {\n  return str.match(CSS_UNIT_RE)[1];\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar multiplyStyleLengthValue = function multiplyStyleLengthValue(value, multiple) {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/multiplyStyleLengthValue/index.js"],"names":["CSS_UNIT_RE","getUnit","str","isNumeric","isNaN","parseFloat","isFinite","multiplyStyleLengthValue","number","unit","value"],"mappings":"AASA,IAAMA,WAAW,GAAjB,6CAAA;;AAEA,IAAMC,OAAO,GAAPA,SAAAA,OAAAA,CAAU,GAAVA,EAAU;EAAA,OAASC,GAAG,CAAHA,KAAAA,CAAAA,WAAAA,EAAT,CAASA,CAAT;AAAhB,CAAA;;AAEA,IAAMC,SAAS,GAATA,SAAAA,SAAAA,CAAY,CAAZA,EAAmB;EACvB,OAAO,CAACC,KAAK,CAACC,UAAU,CAAjB,CAAiB,CAAX,CAAN,IAAyBC,QAAQ,CAAxC,CAAwC,CAAxC;AADF,CAAA;;AAIA,IAAMC,wBAAwB,GAAxBA,SAAAA,wBAAAA,CAA2B,KAA3BA,EAA2B,QAA3BA,EAAiE;EACrE,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;IAC7B,IAAMC,MAAM,GAAGH,UAAU,CAAVA,KAAU,CAAVA,GAAf,QAAA;IACA,IAAMI,IAAI,GAAGR,OAAO,CAApB,KAAoB,CAApB;IACA,OAAA,KAAA,MAAA,GAAA,IAAA;EAHF,CAAA,MAIO,IAAIE,SAAS,CAAb,KAAa,CAAb,EAAsB;IAC3B,OAAOO,KAAK,GAAZ,QAAA;EAEH;AARD,CAAA;;AAUA,eAAA,wBAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nconst CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nconst getUnit = (str) => str.match(CSS_UNIT_RE)[1];\n\nconst isNumeric = (n) => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nconst multiplyStyleLengthValue = (value: string | number, multiple) => {\n  if (typeof value === 'string') {\n    const number = parseFloat(value) * multiple;\n    const unit = getUnit(value);\n    return `${number}${unit}`;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;\n"]},"metadata":{},"sourceType":"module"}