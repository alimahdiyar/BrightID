{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { PureComponent } from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconSourceCache from \"./create-icon-source-cache\";\nimport createIconButtonComponent from \"./icon-button\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n\n  var Icon = function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.root = null;\n\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = _objectWithoutProperties(_this$props, _excluded);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return _jsxs(Text, _objectSpread(_objectSpread({\n          selectable: false\n        }, props), {}, {\n          children: [glyph, children]\n        }));\n      }\n    }]);\n\n    return Icon;\n  }(PureComponent);\n\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return glyph;\n  }\n\n  function getImageSourceSync(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = resolveGlyph(name);\n    var processedColor = processColor(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  function getImageSource(name) {\n    var size,\n        color,\n        glyph,\n        processedColor,\n        cacheKey,\n        imagePath,\n        value,\n        _args = arguments;\n    return _regeneratorRuntime.async(function getImageSource$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_ICON_SIZE;\n            color = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_ICON_COLOR;\n            ensureNativeModuleAvailable();\n            glyph = resolveGlyph(name);\n            processedColor = processColor(color);\n            cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n            if (!imageSourceCache.has(cacheKey)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", imageSourceCache.get(cacheKey));\n\n          case 8:\n            _context.prev = 8;\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor));\n\n          case 11:\n            imagePath = _context.sent;\n            value = {\n              uri: imagePath,\n              scale: PixelRatio.get()\n            };\n            imageSourceCache.setValue(cacheKey, value);\n            return _context.abrupt(\"return\", value);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](8);\n            imageSourceCache.setError(cacheKey, _context.t0);\n            throw _context.t0;\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[8, 17]], Promise);\n  }\n\n  function loadFont() {\n    var file,\n        _args2 = arguments;\n    return _regeneratorRuntime.async(function loadFont$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            file = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : fontFile;\n\n            if (!(Platform.OS === 'ios')) {\n              _context2.next = 7;\n              break;\n            }\n\n            ensureNativeModuleAvailable();\n\n            if (file) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new Error('Unable to load font, because no file was specified. ');\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.'))));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","fontBasename","fontFile","fontReference","Platform","windows","android","web","default","Icon","size","allowFontScaling","name","color","style","children","props","glyph","glyphMap","String","styleDefaults","fontSize","styleOverrides","fontFamily","fontWeight","fontStyle","imageSourceCache","createIconSourceCache","ensureNativeModuleAvailable","resolveGlyph","processedColor","processColor","cacheKey","imagePath","value","uri","scale","PixelRatio","file","Object","createIconButtonComponent"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}