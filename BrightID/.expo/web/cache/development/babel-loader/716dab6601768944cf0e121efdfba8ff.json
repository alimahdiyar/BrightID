{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { setInternetCredentials, getGenericPassword, setGenericPassword } from 'react-native-keychain';\nimport { compose } from 'ramda';\nimport { objToUint8, uInt8ArrayToB64, b64ToUint8Array } from \"../../utils/encoding\";\nimport { BACKUP_URL } from \"../../utils/constants\";\nimport { DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { asyncCreateMigrate } from \"./asyncCreateMigrate\";\nvar keyToString = compose(uInt8ArrayToB64, objToUint8);\nvar rootMigrations = {\n  9: function _(state) {\n    var _await$getGenericPass, password;\n\n    return _regeneratorRuntime.async(function _$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!state.user.secretKey || typeof state.user.secretKey !== 'string')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getGenericPassword());\n\n          case 3:\n            _await$getGenericPass = _context.sent;\n            password = _await$getGenericPass.password;\n            state.user.secretKey = password;\n\n          case 6:\n            state.keypair = {\n              publicKey: state.user.publicKey,\n              secretKey: b64ToUint8Array(state.user.secretKey)\n            };\n            delete state.user.publicKey;\n            delete state.user.secretKey;\n\n            if (state.notifications) {\n              delete state.notifications.miscAlreadyNotified;\n            }\n\n            state.user.migrated = true;\n            state.tasks = undefined;\n            return _context.abrupt(\"return\", state);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  8: function _(state) {\n    var linkedContexts, genericPassword, password;\n    return _regeneratorRuntime.async(function _$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            delete state.user.notifications;\n            delete state.connectQrData;\n            delete state.connectUserData;\n            linkedContexts = [];\n\n            if (state.apps.apps) {\n              linkedContexts = state.apps.apps.map(function (app) {\n                return {\n                  dateAdded: app.dateAdded || Date.now(),\n                  contextId: app.contextId,\n                  context: app.name,\n                  state: app.state\n                };\n              });\n            }\n\n            state.apps = {\n              apps: [],\n              linkedContexts: linkedContexts\n            };\n            _context2.prev = 6;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(getGenericPassword());\n\n          case 9:\n            genericPassword = _context2.sent;\n            password = genericPassword.password;\n\n            if (password) {\n              state.user.secretKey = password;\n            }\n\n            _context2.next = 18;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](6);\n            console.log(_context2.t0.message);\n\n            if (state.user.secretKey) {\n              state.user.secretKey = keyToString(state.user.secretKey);\n            }\n\n          case 18:\n            return _context2.abrupt(\"return\", state);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[6, 14]], Promise);\n  },\n  7: function _(state) {\n    return _regeneratorRuntime.async(function _$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            delete state.channels;\n            delete state.pendingConnections;\n            delete state.notifications;\n            state.user.notifications = [];\n            state.connectQrData = {\n              myQrData: undefined,\n              peerQrData: {\n                aesKey: '',\n                ipAddress: '',\n                uuid: '',\n                qrString: '',\n                channel: '',\n                type: ''\n              }\n            };\n            state.connectUserData = {\n              id: '',\n              photo: '',\n              name: '',\n              timestamp: 0,\n              signedMessage: ''\n            };\n            return _context3.abrupt(\"return\", state);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  6: function _(state) {\n    return _regeneratorRuntime.async(function _$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (state.user) {\n              delete state.user.notifications;\n            }\n\n            delete state.connectQrData;\n            delete state.connectUserData;\n            return _context4.abrupt(\"return\", state);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  5: function _(state) {\n    var _state$user, _state$user2, secretKey, opts;\n\n    return _regeneratorRuntime.async(function _$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            secretKey = (_state$user = state.user) == null ? void 0 : _state$user.secretKey;\n\n            if (!(secretKey && Object.keys(secretKey).length && (_state$user2 = state.user) != null && _state$user2.id)) {\n              _context5.next = 13;\n              break;\n            }\n\n            if (!DEVICE_ANDROID) {\n              _context5.next = 9;\n              break;\n            }\n\n            opts = {\n              rules: 'none'\n            };\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(setGenericPassword(state.user.id, keyToString(secretKey), opts));\n\n          case 7:\n            _context5.next = 11;\n            break;\n\n          case 9:\n            _context5.next = 11;\n            return _regeneratorRuntime.awrap(setGenericPassword(state.user.id, keyToString(secretKey)));\n\n          case 11:\n            _context5.next = 13;\n            return _regeneratorRuntime.awrap(setInternetCredentials(BACKUP_URL, state.user.id, state.user.password));\n\n          case 13:\n            _context5.next = 19;\n            break;\n\n          case 15:\n            _context5.prev = 15;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(_context5.t0.message);\n            alert('Unable to access device keychain, please let BrightID core team know about this issue..');\n\n          case 19:\n            state.user.secretKey = keyToString(state.user.secretKey);\n            return _context5.abrupt(\"return\", state);\n\n          case 21:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  }\n};\nexport var rootMigrate = asyncCreateMigrate(rootMigrations, {\n  debug: __DEV__\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/migrations/root.js"],"names":["keyToString","compose","rootMigrations","state","password","getGenericPassword","publicKey","secretKey","b64ToUint8Array","linkedContexts","dateAdded","app","Date","contextId","context","apps","genericPassword","console","myQrData","peerQrData","aesKey","ipAddress","uuid","qrString","channel","type","id","photo","name","timestamp","signedMessage","Object","opts","rules","setGenericPassword","setInternetCredentials","alert","rootMigrate","asyncCreateMigrate","debug"],"mappings":"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","sourcesContent":["import {\n  setInternetCredentials,\n  getGenericPassword,\n  setGenericPassword,\n} from 'react-native-keychain';\nimport { compose } from 'ramda';\nimport { objToUint8, uInt8ArrayToB64, b64ToUint8Array } from '@/utils/encoding';\nimport { BACKUP_URL } from '@/utils/constants';\nimport { DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { asyncCreateMigrate } from './asyncCreateMigrate';\n\nconst keyToString = compose(uInt8ArrayToB64, objToUint8);\n\n/** Async migration creators require every version to return a promiseß */\n\nconst rootMigrations = {\n  9: async (state) => {\n    // extract secretKey if not present\n    if (!state.user.secretKey || typeof state.user.secretKey !== 'string') {\n      let { password } = await getGenericPassword();\n      state.user.secretKey = password;\n    }\n\n    state.keypair = {\n      publicKey: state.user.publicKey,\n      secretKey: b64ToUint8Array(state.user.secretKey),\n    };\n\n    delete state.user.publicKey;\n    delete state.user.secretKey;\n    if (state.notifications) {\n      delete state.notifications.miscAlreadyNotified;\n    }\n\n    // add migration key for deleting AsyncStorage(persist:root)\n    state.user.migrated = true;\n    state.tasks = undefined;\n    return state;\n  },\n  8: async (state) => {\n    delete state.user.notifications;\n    delete state.connectQrData;\n    delete state.connectUserData;\n    // transfer linked contexts\n    let linkedContexts = [];\n    if (state.apps.apps) {\n      linkedContexts = state.apps.apps.map((app) => ({\n        dateAdded: app.dateAdded || Date.now(),\n        contextId: app.contextId,\n        context: app.name,\n        state: app.state,\n      }));\n    }\n\n    state.apps = {\n      apps: [],\n      linkedContexts,\n    };\n\n    // transfer secret key as backup\n    try {\n      let genericPassword = await getGenericPassword();\n      let { password } = genericPassword;\n      if (password) {\n        state.user.secretKey = password;\n      }\n    } catch (err) {\n      console.log(err.message);\n      if (state.user.secretKey) {\n        state.user.secretKey = keyToString(state.user.secretKey);\n      }\n    }\n\n    return state;\n  },\n  7: async (state) => {\n    delete state.channels;\n    delete state.pendingConnections;\n    delete state.notifications;\n    state.user.notifications = [];\n    state.connectQrData = {\n      myQrData: undefined,\n      peerQrData: {\n        aesKey: '',\n        ipAddress: '',\n        uuid: '',\n        qrString: '',\n        channel: '',\n        type: '',\n      },\n    };\n    state.connectUserData = {\n      id: '',\n      photo: '',\n      name: '',\n      timestamp: 0,\n      signedMessage: '',\n    };\n    return state;\n  },\n  6: async (state) => {\n    if (state.user) {\n      delete state.user.notifications;\n    }\n\n    delete state.connectQrData;\n    delete state.connectUserData;\n    return state;\n  },\n  5: async (state) => {\n    try {\n      // secret key defaults to empty object\n      let secretKey = state.user?.secretKey;\n      if (secretKey && Object.keys(secretKey).length && state.user?.id) {\n        // save secret key in keychain storage\n\n        if (DEVICE_ANDROID) {\n          let opts = { rules: 'none' };\n          await setGenericPassword(state.user.id, keyToString(secretKey), opts);\n        } else {\n          await setGenericPassword(state.user.id, keyToString(secretKey));\n        }\n\n        // save backup password\n        await setInternetCredentials(\n          BACKUP_URL,\n          state.user.id,\n          state.user.password,\n        );\n      }\n    } catch (err) {\n      console.log(err.message);\n      alert(\n        'Unable to access device keychain, please let BrightID core team know about this issue..',\n      );\n    }\n    state.user.secretKey = keyToString(state.user.secretKey);\n    return state;\n  },\n};\n\nexport const rootMigrate = asyncCreateMigrate(rootMigrations, {\n  debug: __DEV__,\n});\n"]},"metadata":{},"sourceType":"module"}