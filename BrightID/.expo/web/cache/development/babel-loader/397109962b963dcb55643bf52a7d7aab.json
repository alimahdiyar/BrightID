{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"children\", \"screenOptions\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from \"../views/Stack/StackView\";\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'\n  };\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: typeof screenOptions === 'function' ? function () {\n      return _objectSpread(_objectSpread({}, defaultOptions), screenOptions.apply(void 0, arguments));\n    } : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","animationEnabled","state","descriptors","navigation","useNavigationBuilder","React","e","isFocused","requestAnimationFrame","StackActions","target","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,SAAA,oBAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,YAAA,QAAA,0BAAA;AAYA,OAAA,SAAA;;AAWA,SAAA,cAAA,CAAA,IAAA,EAKU;EAJRA,IAAAA,gBAIQ,GAAA,IAAA,CAJRA,gBAAAA;EAAAA,IACAC,QAGQ,GAAA,IAAA,CAHRA,QADAD;EAAAA,IAEAE,aAEQ,GAAA,IAAA,CAFRA,aAFAF;EAAAA,IAGGG,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAJRH;;EAKA,IAAMI,cAAc,GAAG;IACrBC,cAAc,EAAEC,QAAQ,CAARA,EAAAA,KADK,KAAA;IAErBC,gBAAgB,EACdD,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IACAA,QAAQ,CAARA,EAAAA,KADAA,SAAAA,IAEAA,QAAQ,CAARA,EAAAA,KALJ;EAAuB,CAAvB;;EAQA,IAAA,qBAAA,GAA2CK,oBAAoB,CAAA,WAAA,EAMhD;IACbX,gBADa,EAAA,gBAAA;IAEbC,QAFa,EAAA,QAAA;IAGbC,aAAa,EACX,OAAA,aAAA,KAAA,UAAA,GACI,YAAA;MAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAEKA,aAAa,CAAbA,KAAAA,CAAAA,KAAAA,CAAAA,EAFL,SAEKA,CAFL,CAAA;IADJ,CAAA,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAVJ,aAUI;EAJW,CANgD,CAA/D;EAAA,IAAQM,KAAR,GAAA,qBAAA,CAAA,KAAA;EAAA,IAAeC,WAAf,GAAA,qBAAA,CAAA,WAAA;EAAA,IAA4BC,UAA5B,GAAA,qBAAA,CAAA,UAAA;;EAqBAE,KAAK,CAALA,SAAAA,CACE,YAAA;IAAA,IAAA,qBAAA;;IAAA,OAAA,CAAA,qBAAA,GACEF,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAsCG,UAAD,CAACA,EAAM;MAC1C,IAAMC,SAAS,GAAGJ,UAAU,CAA5B,SAAkBA,EAAlB;MAIAK,qBAAqB,CAAC,YAAM;QAC1B,IACEP,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEK,CAAD,CAHH,gBAAA,EAIE;UAGAH,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKM,YAAY,CADjBN,QACKM,EADLN,CAAAA,EAAAA,EAAAA,EAAAA;YAEEO,MAAM,EAAET,KAAK,CAFfE;UAAAA,CAAAA,CAAAA;QARiB;MALb,CAKa,CAArBK;IAPNH,CAEIF,CADF;EADFE,CAAAA,EAsBE,CAAA,UAAA,EAAaJ,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCI,GAsBE,CAtBFA;EAyBA,OACEA,KAAAA,CAAAA,aAAAA,CAAAA,SAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;IAEEJ,KAAK,EAFPI,KAAAA;IAGEH,WAAW,EAHbG,WAAAA;IAIEF,UAAU,EALd;EACEE,CAAAA,CAAAA,CADF;AAUF;;AAAA,eAAeM,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}