{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableItem from \"./TouchableItem\";\nimport Animated from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nvar TabBarItem = function (_React$Component) {\n  _inherits(TabBarItem, _React$Component);\n\n  var _super = _createSuper(TabBarItem);\n\n  function TabBarItem() {\n    var _this;\n\n    _classCallCheck(this, TabBarItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"getActiveOpacity\", memoize(function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return AnimatedInterpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 1 : 0;\n          })\n        });\n      } else {\n        return 1;\n      }\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getInactiveOpacity\", memoize(function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return AnimatedInterpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 0 : 1;\n          })\n        });\n      } else {\n        return 0;\n      }\n    }));\n\n    return _this;\n  }\n\n  _createClass(TabBarItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          route = _this$props.route,\n          position = _this$props.position,\n          navigationState = _this$props.navigationState,\n          renderLabelPassed = _this$props.renderLabel,\n          renderIcon = _this$props.renderIcon,\n          renderBadge = _this$props.renderBadge,\n          getLabelText = _this$props.getLabelText,\n          getTestID = _this$props.getTestID,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessible = _this$props.getAccessible,\n          _this$props$activeCol = _this$props.activeColor,\n          activeColor = _this$props$activeCol === void 0 ? DEFAULT_ACTIVE_COLOR : _this$props$activeCol,\n          _this$props$inactiveC = _this$props.inactiveColor,\n          inactiveColor = _this$props$inactiveC === void 0 ? DEFAULT_INACTIVE_COLOR : _this$props$inactiveC,\n          pressColor = _this$props.pressColor,\n          pressOpacity = _this$props.pressOpacity,\n          labelStyle = _this$props.labelStyle,\n          style = _this$props.style,\n          onLayout = _this$props.onLayout,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress;\n      var tabIndex = navigationState.routes.indexOf(route);\n      var isFocused = navigationState.index === tabIndex;\n      var activeOpacity = this.getActiveOpacity(position, navigationState.routes, tabIndex);\n      var inactiveOpacity = this.getInactiveOpacity(position, navigationState.routes, tabIndex);\n      var icon = null;\n      var label = null;\n\n      if (renderIcon) {\n        var activeIcon = renderIcon({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveIcon = renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n\n        if (inactiveIcon != null && activeIcon != null) {\n          icon = React.createElement(View, {\n            style: styles.icon\n          }, React.createElement(Animated.View, {\n            style: {\n              opacity: inactiveOpacity\n            }\n          }, inactiveIcon), React.createElement(Animated.View, {\n            style: [StyleSheet.absoluteFill, {\n              opacity: activeOpacity\n            }]\n          }, activeIcon));\n        }\n      }\n\n      var renderLabel = renderLabelPassed !== undefined ? renderLabelPassed : function (_ref) {\n        var route = _ref.route,\n            color = _ref.color;\n        var labelText = getLabelText({\n          route: route\n        });\n\n        if (typeof labelText === 'string') {\n          return React.createElement(Animated.Text, {\n            style: [styles.label, icon ? {\n              marginTop: 0\n            } : null, {\n              color: color\n            }, labelStyle]\n          }, labelText);\n        }\n\n        return labelText;\n      };\n\n      if (renderLabel) {\n        var activeLabel = renderLabel({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveLabel = renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n        label = React.createElement(View, null, React.createElement(Animated.View, {\n          style: {\n            opacity: inactiveOpacity\n          }\n        }, inactiveLabel), React.createElement(Animated.View, {\n          style: [StyleSheet.absoluteFill, {\n            opacity: activeOpacity\n          }]\n        }, activeLabel));\n      }\n\n      var tabStyle = StyleSheet.flatten(style);\n      var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n      var tabContainerStyle = isWidthSet ? null : {\n        flex: 1\n      };\n      var scene = {\n        route: route\n      };\n      var accessibilityLabel = getAccessibilityLabel(scene);\n      accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n      var badge = renderBadge ? renderBadge(scene) : null;\n      return React.createElement(TouchableItem, {\n        borderless: true,\n        testID: getTestID(scene),\n        accessible: getAccessible(scene),\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: isFocused ? ['button', 'selected'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"tab\",\n        accessibilityState: {\n          selected: isFocused\n        },\n        accessibilityStates: isFocused ? ['selected'] : [],\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        delayPressIn: 0,\n        onLayout: onLayout,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        style: tabContainerStyle\n      }, React.createElement(View, {\n        pointerEvents: \"none\",\n        style: [styles.item, tabStyle]\n      }, icon, label, badge != null ? React.createElement(View, {\n        style: styles.badge\n      }, badge) : null));\n    }\n  }]);\n\n  return TabBarItem;\n}(React.Component);\n\nexport { TabBarItem as default };\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["TabBarItem.tsx"],"names":["AnimatedInterpolate","Animated","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","React","Component","memoize","routes","inputRange","outputRange","i","render","route","position","navigationState","renderLabelPassed","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColor","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","tabIndex","isFocused","activeOpacity","inactiveOpacity","icon","label","activeIcon","focused","color","inactiveIcon","styles","opacity","StyleSheet","renderLabel","labelText","marginTop","activeLabel","inactiveLabel","tabStyle","isWidthSet","tabContainerStyle","flex","scene","accessibilityLabel","badge","borderless","testID","accessible","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","accessibilityStates","delayPressIn","pointerEvents","margin","backgroundColor","item","alignItems","justifyContent","padding","minHeight","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\nimport memoize from './memoize';\n\n// @ts-ignore\nconst AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport type Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = memoize(\n    (position: Animated.Node<number>, routes: Route[], tabIndex: number) => {\n      if (routes.length > 1) {\n        const inputRange = routes.map((_, i) => i);\n\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n        });\n      } else {\n        return 1;\n      }\n    }\n  );\n\n  private getInactiveOpacity = memoize((position, routes, tabIndex) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return AnimatedInterpolate(position, {\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  });\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    { color },\n                    labelStyle,\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        // @ts-ignore: this is to support older React Native versions\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}