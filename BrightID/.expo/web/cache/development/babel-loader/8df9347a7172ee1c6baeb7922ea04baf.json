{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Clipboard = void 0;\n\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\n\nexports.Clipboard = {\n  getString: function getString() {\n    return NativeClipboard_1.default.getString();\n  },\n  setString: function setString(content) {\n    NativeClipboard_1.default.setString(content);\n  },\n  hasString: function hasString() {\n    return NativeClipboard_1.default.hasString();\n  },\n  hasURL: function hasURL() {\n    return NativeClipboard_1.default.hasURL();\n  }\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/@react-native-community/clipboard/dist/Clipboard.js"],"names":["__importDefault","mod","Object","value","exports","NativeClipboard_1","require","getString","setString","hasString","hasURL"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAT,eAAC,IAAiC,UAAA,GAAA,EAAe;EACnE,OAAQC,GAAG,IAAIA,GAAG,CAAX,UAACA,GAAD,GAACA,GAA+B;IAAE,WAAzC;EAAuC,CAAvC;AADJ,CAAA;;AAGAC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;EAAEC,KAAK,EAApDD;AAA6C,CAA7CA;AACAE,OAAO,CAAPA,SAAAA,GAAoB,KAApBA,CAAAA;;AACA,IAAIC,iBAAiB,GAAGL,eAAe,CAACM,OAAxC,qBAAuC,CAAvC;;AAIAF,OAAO,CAAPA,SAAAA,GAAoB;EAShBG,SAAS,EAAE,SAAA,SAAA,GAAY;IACnB,OAAOF,iBAAiB,CAAjBA,OAAAA,CAAP,SAAOA,EAAP;EAVY,CAAA;EAqBhBG,SAAS,EAAE,SAAA,SAAA,CAAA,OAAA,EAAmB;IAC1BH,iBAAiB,CAAjBA,OAAAA,CAAAA,SAAAA,CAAAA,OAAAA;EAtBY,CAAA;EAiChBI,SAAS,EAAE,SAAA,SAAA,GAAY;IACnB,OAAOJ,iBAAiB,CAAjBA,OAAAA,CAAP,SAAOA,EAAP;EAlCY,CAAA;EA8ChBK,MAAM,EAAE,SAAA,MAAA,GAAY;IAChB,OAAOL,iBAAiB,CAAjBA,OAAAA,CAAP,MAAOA,EAAP;EA/CRD;AAAoB,CAApBA","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Clipboard = void 0;\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\n/**\n * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android\n */\nexports.Clipboard = {\n    /**\n     * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _getContent() {\n     *   var content = await Clipboard.getString();\n     * }\n     * ```\n     */\n    getString: function () {\n        return NativeClipboard_1.default.getString();\n    },\n    /**\n     * Set content of string type. You can use following code to set clipboard content\n     * ```javascript\n     * _setContent() {\n     *   Clipboard.setString('hello world');\n     * }\n     * ```\n     * @param the content to be stored in the clipboard.\n     */\n    setString: function (content) {\n        NativeClipboard_1.default.setString(content);\n    },\n    /**\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasString: function () {\n        return NativeClipboard_1.default.hasString();\n    },\n    /**\n     * (IOS Only)\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasURL: function () {\n        return NativeClipboard_1.default.hasURL();\n    },\n};\n"]},"metadata":{},"sourceType":"script"}