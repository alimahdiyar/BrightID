{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nvar UNINTIALIZED_STATE = {};\nexport default function useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  var _React$useState = React.useState(stateRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      trackingState = _React$useState2[0],\n      setTrackingState = _React$useState2[1];\n\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    setTrackingState(stateRef.current);\n  }, []);\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["UNINTIALIZED_STATE","stateRef","React","isSchedulingRef","isMountedRef","initialState","trackingState","setTrackingState","getState","setState","state","scheduleUpdate","callback","flushUpdates"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,IAAMA,kBAAkB,GAAxB,EAAA;AAKA,eAAe,SAAA,YAAA,CAAA,YAAA,EAAuD;EACpE,IAAMC,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CAAjB,kBAAiBA,CAAjB;EACA,IAAMC,eAAe,GAAGD,KAAK,CAALA,MAAAA,CAAxB,KAAwBA,CAAxB;EACA,IAAME,YAAY,GAAGF,KAAK,CAALA,MAAAA,CAArB,IAAqBA,CAArB;EAEAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBE,YAAY,CAAZA,OAAAA,GAAAA,IAAAA;IAEA,OAAO,YAAM;MACXA,YAAY,CAAZA,OAAAA,GADF,KACEA;IAJJF,CAGE;EAHFA,CAAAA,EAAAA,EAAAA;;EAQA,IAAID,QAAQ,CAARA,OAAAA,KAAJ,kBAAA,EAA6C;IAC3CA,QAAQ,CAARA,OAAAA,GAEE,OAAA,YAAA,KAAA,UAAA,GAAqCI,YAArC,EAAA,GAFFJ,YAAAA;EAKF;;EAAA,IAAA,eAAA,GAA0CC,KAAK,CAALA,QAAAA,CAAeD,QAAQ,CAAjE,OAA0CC,CAA1C;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOI,aAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAsBC,gBAAtB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EAEA,IAAMC,QAAQ,GAAGN,KAAK,CAALA,WAAAA,CAAkB,YAAA;IAAA,OAAMD,QAAQ,CAAd,OAAA;EAAlBC,CAAAA,EAAjB,EAAiBA,CAAjB;EAEA,IAAMO,QAAQ,GAAGP,KAAK,CAALA,WAAAA,CAAmBQ,UAAD,KAACA,EAAa;IAC/C,IAAIA,KAAK,KAAKT,QAAQ,CAAlBS,OAAAA,IAA8B,CAACN,YAAY,CAA/C,OAAA,EAAyD;MACvD;IAGFH;;IAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;;IAEA,IAAI,CAACE,eAAe,CAApB,OAAA,EAA8B;MAC5BI,gBAAgB,CAAhBA,KAAgB,CAAhBA;IARaL;EAAAA,CAAAA,EAAjB,EAAiBA,CAAjB;EAYA,IAAMS,cAAc,GAAGT,KAAK,CAALA,WAAAA,CAAmBU,UAAD,QAACA,EAAyB;IACjET,eAAe,CAAfA,OAAAA,GAAAA,IAAAA;;IAEA,IAAI;MACFS,QADF;IAAA,CAAA,SAEU;MACRT,eAAe,CAAfA,OAAAA,GAAAA,KAAAA;IANmBD;EAAAA,CAAAA,EAAvB,EAAuBA,CAAvB;EAUA,IAAMW,YAAY,GAAGX,KAAK,CAALA,WAAAA,CAAkB,YAAM;IAC3C,IAAI,CAACE,YAAY,CAAjB,OAAA,EAA2B;MADgB;IAO3CG;;IAAAA,gBAAgB,CAACN,QAAQ,CAPNC,OAOH,CAAhBK;EAPmBL,CAAAA,EAArB,EAAqBA,CAArB;;EAYA,IAAII,aAAa,KAAKL,QAAQ,CAA9B,OAAA,EAAwC;IACtCM,gBAAgB,CAACN,QAAQ,CAAzBM,OAAgB,CAAhBA;EAGF;;EAAA,IAAMG,KAAK,GAAGT,QAAQ,CAAtB,OAAA;EAEAC,KAAK,CAALA,aAAAA,CAAAA,KAAAA;EAEA,OAAO,CAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,cAAA,EAAP,YAAO,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]},"metadata":{},"sourceType":"module"}