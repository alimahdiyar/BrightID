{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_shouldFireEndEvent\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_timer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_multiTapTimer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuccessfulTap\", function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    });\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default TapGestureHandler;","map":{"version":3,"sources":["TapGestureHandler.ts"],"names":["TapGestureHandler","DiscreteGestureHandler","Hammer","isnan","simulateCancelEvent","onGestureActivated","ev","eventType","isFinal","onRawEvent","gesture","clearTimeout","setTimeout","getHammerConfig","event","taps","interval","time","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","numberOfTaps","minDurationMs","maxDelayMs","maxDurationMs","maxDist","minPointers","maxPointers","props","onGestureEnded","onWaitingEnded"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}