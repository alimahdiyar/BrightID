{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport _ from 'lodash';\nimport CryptoJS from 'crypto-js';\nimport nacl from 'tweetnacl';\nimport stringify from 'fast-json-stable-stringify';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { store } from \"../store\";\nimport { setApps, upsertSig, removeSig, updateSig, selectAllSigs, selectExpireableBlindSigApps } from \"../reducer/appsSlice\";\nimport { hash, strToUint8Array, uInt8ArrayToB64 } from \"../utils/encoding\";\nimport { NodeApi } from \"../api/brightId\";\nimport { isVerified } from \"../utils/verifications\";\nimport backupApi from \"../api/backupService\";\nimport { CACHED_PARAMS_NOT_FOUND } from \"../api/brightidError\";\nimport { BrightIdNetwork } from \"../components/Apps/types.d\";\n\nvar WISchnorrClient = require(\"../utils/WISchnorrClient\");\n\nexport var updateBlindSig = function updateBlindSig(app) {\n  return function _callee2(dispatch, getState) {\n    var _getState, _getState$user, verifications, id, secretKey, sigs, verificationsByName, vel, roundedTimestamp, _loop, _iterator, _step, verification, _ret;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getState = getState(), _getState$user = _getState.user, verifications = _getState$user.verifications, id = _getState$user.id, secretKey = _getState.keypair.secretKey;\n            sigs = selectAllSigs(getState());\n            verificationsByName = _.keyBy(verifications, function (v) {\n              return v.name;\n            });\n            vel = app.verificationExpirationLength;\n            roundedTimestamp = vel ? Math.floor(Date.now() / vel) * vel : 0;\n\n            _loop = function _callee(verification) {\n              var sigInfo, network, url, api, info, _await$api$getState, wISchnorrPublic, client, pub, uid, challenge, s, sig, response, blindSig, backupData, backupKey;\n\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      sigInfo = sigs.find(function (sig) {\n                        return sig.app === app.id && sig.verification === verification && sig.roundedTimestamp === roundedTimestamp;\n                      });\n\n                      if (!(sigInfo && sigInfo.sig)) {\n                        _context.next = 4;\n                        break;\n                      }\n\n                      console.log(\"sig exists for \" + app.name + \" (\" + verification + \")\");\n                      return _context.abrupt(\"return\", \"continue\");\n\n                    case 4:\n                      if (isVerified(verificationsByName, verification)) {\n                        _context.next = 7;\n                        break;\n                      }\n\n                      console.log(\"user is not verified for \" + app.name + \" (\" + verification + \")\");\n                      return _context.abrupt(\"return\", \"continue\");\n\n                    case 7:\n                      _context.prev = 7;\n                      network = __DEV__ ? BrightIdNetwork.TEST : BrightIdNetwork.NODE;\n                      url = app.nodeUrl || \"http://\" + network + \".brightid.org\";\n                      api = new NodeApi({\n                        url: url,\n                        id: id,\n                        secretKey: secretKey\n                      });\n                      info = stringify({\n                        app: app.id,\n                        roundedTimestamp: roundedTimestamp,\n                        verification: verification\n                      });\n                      console.log(info, 'info');\n                      _context.next = 15;\n                      return _regeneratorRuntime.awrap(api.getState());\n\n                    case 15:\n                      _await$api$getState = _context.sent;\n                      wISchnorrPublic = _await$api$getState.wISchnorrPublic;\n\n                      if (wISchnorrPublic) {\n                        _context.next = 20;\n                        break;\n                      }\n\n                      console.log('wISchnorrPublic is not set');\n                      return _context.abrupt(\"return\", \"continue\");\n\n                    case 20:\n                      client = new WISchnorrClient(wISchnorrPublic);\n\n                      if (sigInfo) {\n                        _context.next = 33;\n                        break;\n                      }\n\n                      _context.next = 24;\n                      return _regeneratorRuntime.awrap(api.getPublic(app.id, roundedTimestamp, verification));\n\n                    case 24:\n                      pub = _context.sent;\n                      uid = CryptoJS.enc.Base64.stringify(CryptoJS.lib.WordArray.random(16));\n                      console.log(\"using \" + uid + \" for \" + app.name + \" (\" + verification + \") as uid\");\n                      challenge = client.GenerateWISchnorrClientChallenge(pub, info, uid);\n                      console.log(challenge, 'challenge');\n                      sigInfo = {\n                        uid: uid,\n                        app: app.id,\n                        roundedTimestamp: roundedTimestamp,\n                        verification: verification,\n                        pub: pub,\n                        challenge: challenge,\n                        linked: false,\n                        linkedTimestamp: 0,\n                        signedTimestamp: Date.now()\n                      };\n                      dispatch(upsertSig(sigInfo));\n                      _context.next = 34;\n                      break;\n\n                    case 33:\n                      if (sigInfo && !sigInfo.sig) {\n                        pub = sigInfo.pub;\n                        uid = sigInfo.uid;\n                        challenge = sigInfo.challenge;\n                      }\n\n                    case 34:\n                      s = stringify({\n                        id: id,\n                        public: pub\n                      });\n                      sig = uInt8ArrayToB64(nacl.sign.detached(strToUint8Array(s), secretKey));\n                      _context.next = 38;\n                      return _regeneratorRuntime.awrap(api.getBlindedSig(stringify(pub), sig, challenge.e));\n\n                    case 38:\n                      response = _context.sent;\n                      console.log(response, 'response');\n                      blindSig = client.GenerateWISchnorrBlindSignature(challenge.t, response);\n                      console.log('final sig', blindSig);\n\n                      if (client.VerifyWISchnorrBlindSignature(blindSig, info, uid)) {\n                        _context.next = 45;\n                        break;\n                      }\n\n                      console.log(\"wrong signature for \" + app.name + \" (\" + verification + \")!\");\n                      return _context.abrupt(\"return\", \"continue\");\n\n                    case 45:\n                      backupData = stringify(_objectSpread(_objectSpread({}, sigInfo), {}, {\n                        sig: blindSig\n                      }));\n                      backupKey = hash(app.id + \" \" + verification + \" \" + roundedTimestamp);\n                      _context.next = 49;\n                      return _regeneratorRuntime.awrap(encryptAndBackup(backupKey, backupData));\n\n                    case 49:\n                      dispatch(updateSig({\n                        id: uid,\n                        changes: {\n                          sig: blindSig\n                        }\n                      }));\n                      _context.next = 60;\n                      break;\n\n                    case 52:\n                      _context.prev = 52;\n                      _context.t0 = _context[\"catch\"](7);\n                      console.log(\"error in getting sig for \" + app.name + \" (\" + verification + \")\", _context.t0);\n\n                      if (!(_context.t0.errorNum === CACHED_PARAMS_NOT_FOUND && sigInfo && sigInfo.uid)) {\n                        _context.next = 60;\n                        break;\n                      }\n\n                      console.log('removing sig and retrying');\n                      dispatch(removeSig(sigInfo.uid));\n                      _context.next = 60;\n                      return _regeneratorRuntime.awrap(dispatch(updateBlindSig(app)));\n\n                    case 60:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, [[7, 52]], Promise);\n            };\n\n            _iterator = _createForOfIteratorHelperLoose(app.verifications);\n\n          case 7:\n            if ((_step = _iterator()).done) {\n              _context2.next = 16;\n              break;\n            }\n\n            verification = _step.value;\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(_loop(verification));\n\n          case 11:\n            _ret = _context2.sent;\n\n            if (!(_ret === \"continue\")) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 14);\n\n          case 14:\n            _context2.next = 7;\n            break;\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateBlindSigs = function updateBlindSigs() {\n  return function _callee4(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", new Promise(function () {\n              InteractionManager.runAfterInteractions(function _callee3() {\n                var expireableBlindSigApps, _iterator2, _step2, app;\n\n                return _regeneratorRuntime.async(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        expireableBlindSigApps = selectExpireableBlindSigApps(getState());\n                        _iterator2 = _createForOfIteratorHelperLoose(expireableBlindSigApps);\n\n                      case 2:\n                        if ((_step2 = _iterator2()).done) {\n                          _context3.next = 8;\n                          break;\n                        }\n\n                        app = _step2.value;\n                        _context3.next = 6;\n                        return _regeneratorRuntime.awrap(dispatch(updateBlindSig(app)));\n\n                      case 6:\n                        _context3.next = 2;\n                        break;\n\n                      case 8:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar encryptAndBackup = function _callee5(key, data) {\n  var _store$getState, _store$getState$user, id, password, hashedId, encrypted;\n\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _store$getState = store.getState(), _store$getState$user = _store$getState.user, id = _store$getState$user.id, password = _store$getState$user.password;\n          hashedId = hash(id + password);\n          _context5.prev = 2;\n          encrypted = CryptoJS.AES.encrypt(data, password).toString();\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(backupApi.putRecovery(hashedId, key, encrypted));\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](2);\n          _context5.t0 instanceof Error ? console.warn(_context5.t0.message) : console.warn(_context5.t0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n};\n\nexport var fetchApps = function fetchApps(api) {\n  return function _callee6(dispatch, _) {\n    var apps;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(api.getApps());\n\n          case 3:\n            apps = _context6.sent;\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(dispatch(setApps(apps)));\n\n          case 6:\n            _context6.next = 11;\n            break;\n\n          case 8:\n            _context6.prev = 8;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(_context6.t0);\n\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/apps.ts"],"names":["WISchnorrClient","require","updateBlindSig","verifications","id","secretKey","getState","sigs","selectAllSigs","verificationsByName","_","v","vel","app","roundedTimestamp","Math","Date","verification","sigInfo","sig","console","isVerified","network","__DEV__","BrightIdNetwork","url","api","info","stringify","wISchnorrPublic","client","pub","uid","CryptoJS","challenge","linked","linkedTimestamp","signedTimestamp","dispatch","upsertSig","s","public","uInt8ArrayToB64","nacl","strToUint8Array","response","blindSig","backupData","backupKey","hash","encryptAndBackup","updateSig","changes","removeSig","updateBlindSigs","InteractionManager","expireableBlindSigApps","selectExpireableBlindSigApps","password","store","hashedId","encrypted","backupApi","fetchApps","apps","setApps"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport CryptoJS from 'crypto-js';\nimport nacl from 'tweetnacl';\nimport stringify from 'fast-json-stable-stringify';\nimport { InteractionManager } from 'react-native';\nimport { store } from '@/store';\nimport {\n  setApps,\n  upsertSig,\n  removeSig,\n  updateSig,\n  selectAllSigs,\n  selectExpireableBlindSigApps,\n} from '@/reducer/appsSlice';\nimport { hash, strToUint8Array, uInt8ArrayToB64 } from '@/utils/encoding';\nimport { NodeApi } from '@/api/brightId';\nimport { isVerified } from '@/utils/verifications';\nimport backupApi from '@/api/backupService';\nimport { CACHED_PARAMS_NOT_FOUND } from '@/api/brightidError';\nimport { BrightIdNetwork } from '@/components/Apps/types.d';\n\nconst WISchnorrClient = require('@/utils/WISchnorrClient');\n\nexport const updateBlindSig =\n  (app) => async (dispatch: dispatch, getState: GetState) => {\n    const {\n      user: { verifications, id },\n      keypair: { secretKey },\n    } = getState();\n    const sigs = selectAllSigs(getState());\n    const verificationsByName = _.keyBy(verifications, (v) => v.name);\n    const vel = app.verificationExpirationLength;\n    const roundedTimestamp = vel ? Math.floor(Date.now() / vel) * vel : 0;\n    for (const verification of app.verifications) {\n      let sigInfo = sigs.find(\n        (sig) =>\n          sig.app === app.id &&\n          sig.verification === verification &&\n          sig.roundedTimestamp === roundedTimestamp,\n      );\n      if (sigInfo && sigInfo.sig) {\n        console.log(`sig exists for ${app.name} (${verification})`);\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (!isVerified(verificationsByName, verification)) {\n        console.log(`user is not verified for ${app.name} (${verification})`);\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      try {\n        const network = __DEV__ ? BrightIdNetwork.TEST : BrightIdNetwork.NODE;\n        // TODO: Don't fallback to node.brightid.org. 'app.nodeUrl' should be mandatory.\n        // noinspection HttpUrlsUsage\n        const url = app.nodeUrl || `http://${network}.brightid.org`;\n        const api = new NodeApi({ url, id, secretKey });\n        const info = stringify({\n          app: app.id,\n          roundedTimestamp,\n          verification,\n        });\n        console.log(info, 'info');\n        const { wISchnorrPublic } = await api.getState();\n        if (!wISchnorrPublic) {\n          console.log('wISchnorrPublic is not set');\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        const client = new WISchnorrClient(wISchnorrPublic);\n        let pub, uid: string;\n        let challenge: WISchnorrChallenge;\n        if (!sigInfo) {\n          pub = await api.getPublic(app.id, roundedTimestamp, verification);\n          uid = CryptoJS.enc.Base64.stringify(\n            CryptoJS.lib.WordArray.random(16),\n          );\n          console.log(`using ${uid} for ${app.name} (${verification}) as uid`);\n          challenge = client.GenerateWISchnorrClientChallenge(pub, info, uid);\n          console.log(challenge, 'challenge');\n          // store sig info before getting sig to be able to receive sig from server again\n          // if app stopped just after querying the one time sig from the server\n          sigInfo = {\n            uid,\n            app: app.id,\n            roundedTimestamp,\n            verification,\n            pub,\n            challenge,\n            linked: false,\n            linkedTimestamp: 0,\n            signedTimestamp: Date.now(),\n          };\n          dispatch(upsertSig(sigInfo));\n        } else if (sigInfo && !sigInfo.sig) {\n          pub = sigInfo.pub;\n          uid = sigInfo.uid;\n          challenge = sigInfo.challenge;\n        }\n\n        const s = stringify({ id, public: pub });\n        const sig = uInt8ArrayToB64(\n          nacl.sign.detached(strToUint8Array(s), secretKey),\n        );\n\n        const response = await api.getBlindedSig(\n          stringify(pub),\n          sig,\n          challenge.e,\n        );\n        console.log(response, 'response');\n        const blindSig = client.GenerateWISchnorrBlindSignature(\n          challenge.t,\n          response,\n        );\n        console.log('final sig', blindSig);\n        if (!client.VerifyWISchnorrBlindSignature(blindSig, info, uid)) {\n          console.log(`wrong signature for ${app.name} (${verification})!`);\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        const backupData = stringify({ ...sigInfo, sig: blindSig });\n        const backupKey = hash(`${app.id} ${verification} ${roundedTimestamp}`);\n        await encryptAndBackup(backupKey, backupData);\n\n        dispatch(\n          updateSig({\n            id: uid,\n            changes: { sig: blindSig },\n          }),\n        );\n      } catch (err) {\n        console.log(\n          `error in getting sig for ${app.name} (${verification})`,\n          err,\n        );\n        if (\n          err.errorNum === CACHED_PARAMS_NOT_FOUND &&\n          sigInfo &&\n          sigInfo.uid\n        ) {\n          console.log('removing sig and retrying');\n          dispatch(removeSig(sigInfo.uid));\n          await dispatch(updateBlindSig(app));\n        }\n      }\n    }\n  };\n\nexport const updateBlindSigs =\n  () => async (dispatch: dispatch, getState: GetState) => {\n    return new Promise(() => {\n      InteractionManager.runAfterInteractions(async () => {\n        const expireableBlindSigApps = selectExpireableBlindSigApps(getState());\n        for (const app of expireableBlindSigApps) {\n          await dispatch(updateBlindSig(app));\n        }\n      });\n    });\n  };\n\nconst encryptAndBackup = async (key: string, data: string) => {\n  const {\n    user: { id, password },\n  } = store.getState();\n  const hashedId = hash(id + password);\n  try {\n    const encrypted = CryptoJS.AES.encrypt(data, password).toString();\n    await backupApi.putRecovery(hashedId, key, encrypted);\n  } catch (err) {\n    err instanceof Error ? console.warn(err.message) : console.warn(err);\n  }\n};\n\nexport const fetchApps = (api) => async (dispatch: dispatch, _) => {\n  try {\n    const apps = await api.getApps();\n    await dispatch(setApps(apps));\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}