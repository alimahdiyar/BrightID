{"ast":null,"code":"'use strict';\n\nvar punycode = require('punycode');\n\nvar util = require(\"./util\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    autoEscape = ['\\''].concat(unwise),\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    unsafeProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    hostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    slashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n},\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var queryIndex = url.indexOf('?'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n  var rest = url;\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    }\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      atSign = rest.lastIndexOf('@');\n    } else {\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    }\n\n    if (hostEnd === -1) hostEnd = rest.length;\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n    this.parseHost();\n    this.hostname = this.hostname || '';\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  if (!unsafeProtocol[lowerProto]) {\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) continue;\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    this.search = '';\n    this.query = {};\n  }\n\n  if (rest) this.pathname = rest;\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  this.href = this.format();\n  return this;\n};\n\nfunction urlFormat(obj) {\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || query && '?' + query || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  result.hash = relative.hash;\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.slashes && !relative.protocol) {\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') result[rkey] = relative[rkey];\n    }\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift())) {\n        ;\n      }\n\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n  } else if (relPath.length) {\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';\n\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) this.hostname = host;\n};","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/url/url.js"],"names":["punycode","require","util","exports","protocolPattern","portPattern","simplePathPattern","delims","unwise","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","hostlessProtocol","slashedProtocol","querystring","url","u","Url","queryIndex","splitter","uSplit","slashRegex","rest","simplePath","proto","lowerProto","slashesDenoteHost","slashes","hostEnd","i","hec","atSign","auth","decodeURIComponent","ipv6Hostname","hostparts","l","part","newpart","j","k","validParts","notHost","bit","p","h","ae","esc","encodeURIComponent","escape","hash","qm","s","obj","urlParse","protocol","pathname","host","query","Object","search","rel","relative","result","tkeys","tk","tkey","rkeys","rk","rkey","keys","v","relPath","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","authInHost","last","hasTrailingSlash","up","isAbsolute","port"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n"]},"metadata":{},"sourceType":"script"}