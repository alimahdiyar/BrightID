{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport nacl from 'tweetnacl';\nimport { setKeypair, setPhoto, setUserId } from \"../../../actions\";\nimport { createImageDirectory, saveImage } from \"../../../utils/filesystem\";\nimport { b64ToUrlSafeB64, uInt8ArrayToB64 } from \"../../../utils/encoding\";\nexport var createKeypair = function createKeypair() {\n  return function _callee(dispatch, getState) {\n    var filename, _await$nacl$sign$keyP, publicKey, secretKey, b64PubKey;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filename = getState().user.photo.filename;\n\n            if (filename) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(nacl.sign.keyPair());\n\n          case 4:\n            _await$nacl$sign$keyP = _context.sent;\n            publicKey = _await$nacl$sign$keyP.publicKey;\n            secretKey = _await$nacl$sign$keyP.secretKey;\n            b64PubKey = uInt8ArrayToB64(publicKey);\n            dispatch(setKeypair({\n              publicKey: b64PubKey,\n              secretKey: secretKey\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var savePhoto = function savePhoto(base64Image) {\n  return function _callee2(dispatch, getState) {\n    var publicKey, id, filename;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(createImageDirectory());\n\n          case 2:\n            publicKey = getState().keypair.publicKey;\n            id = b64ToUrlSafeB64(publicKey);\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: id,\n              base64Image: base64Image\n            }));\n\n          case 6:\n            filename = _context2.sent;\n            dispatch(setPhoto({\n              filename: filename\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var saveId = function saveId() {\n  return function (dispatch, getState) {\n    var publicKey = getState().keypair.publicKey;\n    var id = b64ToUrlSafeB64(publicKey);\n    dispatch(setUserId(id));\n  };\n};","map":{"version":3,"names":["nacl","setKeypair","setPhoto","setUserId","createImageDirectory","saveImage","b64ToUrlSafeB64","uInt8ArrayToB64","createKeypair","dispatch","getState","filename","user","photo","sign","keyPair","publicKey","secretKey","b64PubKey","savePhoto","base64Image","keypair","id","imageName","saveId"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/SignUpFlow/thunks.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport { setKeypair, setPhoto, setUserId } from '@/actions';\nimport { createImageDirectory, saveImage } from '@/utils/filesystem';\nimport { b64ToUrlSafeB64, uInt8ArrayToB64 } from '@/utils/encoding';\n\nexport const createKeypair = () => async (\n  dispatch: dispatch,\n  getState: getState,\n) => {\n  // do not create new keypair if photo already exists (photo is saved using id)\n  const { filename } = getState().user.photo;\n\n  if (!filename) {\n    // create public / private key pair\n    const { publicKey, secretKey } = await nacl.sign.keyPair();\n    const b64PubKey = uInt8ArrayToB64(publicKey);\n\n    dispatch(setKeypair({ publicKey: b64PubKey, secretKey }));\n  }\n};\n\nexport const savePhoto = (base64Image: string) => async (\n  dispatch: dispatch,\n  getState: getState,\n) => {\n  // creates Image Directory\n  await createImageDirectory();\n\n  const { publicKey } = getState().keypair;\n  const id = b64ToUrlSafeB64(publicKey);\n\n  const filename = await saveImage({ imageName: id, base64Image });\n  dispatch(setPhoto({ filename }));\n};\n\nexport const saveId = () => (dispatch: dispatch, getState: getState) => {\n  const { publicKey } = getState().keypair;\n  const id = b64ToUrlSafeB64(publicKey);\n\n  dispatch(setUserId(id));\n};\n"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B;AACA,SAASC,oBAAT,EAA+BC,SAA/B;AACA,SAASC,eAAT,EAA0BC,eAA1B;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;EAAA,OAAM,iBACjCC,QADiC,EAEjCC,QAFiC;IAAA;;IAAA;MAAA;QAAA;UAAA;YAKzBC,QALyB,GAKZD,QAAQ,GAAGE,IAAX,CAAgBC,KALJ,CAKzBF,QALyB;;YAAA,IAO5BA,QAP4B;cAAA;cAAA;YAAA;;YAAA;YAAA,iCASQX,IAAI,CAACc,IAAL,CAAUC,OAAV,EATR;;UAAA;YAAA;YASvBC,SATuB,yBASvBA,SATuB;YASZC,SATY,yBASZA,SATY;YAUzBC,SAVyB,GAUbX,eAAe,CAACS,SAAD,CAVF;YAY/BP,QAAQ,CAACR,UAAU,CAAC;cAAEe,SAAS,EAAEE,SAAb;cAAwBD,SAAS,EAATA;YAAxB,CAAD,CAAX,CAAR;;UAZ+B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAN;AAAA,CAAtB;AAgBP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,WAAD;EAAA,OAAyB,kBAChDX,QADgD,EAEhDC,QAFgD;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCAK1CN,oBAAoB,EALsB;;UAAA;YAOxCY,SAPwC,GAO1BN,QAAQ,GAAGW,OAPe,CAOxCL,SAPwC;YAQ1CM,EAR0C,GAQrChB,eAAe,CAACU,SAAD,CARsB;YAAA;YAAA,iCAUzBX,SAAS,CAAC;cAAEkB,SAAS,EAAED,EAAb;cAAiBF,WAAW,EAAXA;YAAjB,CAAD,CAVgB;;UAAA;YAU1CT,QAV0C;YAWhDF,QAAQ,CAACP,QAAQ,CAAC;cAAES,QAAQ,EAARA;YAAF,CAAD,CAAT,CAAR;;UAXgD;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAzB;AAAA,CAAlB;AAcP,OAAO,IAAMa,MAAM,GAAG,SAATA,MAAS;EAAA,OAAM,UAACf,QAAD,EAAqBC,QAArB,EAA4C;IACtE,IAAQM,SAAR,GAAsBN,QAAQ,GAAGW,OAAjC,CAAQL,SAAR;IACA,IAAMM,EAAE,GAAGhB,eAAe,CAACU,SAAD,CAA1B;IAEAP,QAAQ,CAACN,SAAS,CAACmB,EAAD,CAAV,CAAR;EACD,CALqB;AAAA,CAAf"},"metadata":{},"sourceType":"module"}