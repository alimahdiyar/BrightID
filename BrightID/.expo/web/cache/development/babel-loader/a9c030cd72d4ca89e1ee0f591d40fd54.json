{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addOperation, reportAndHideConnection } from \"../../../actions\";\nimport { backupUser } from \"../../Onboarding/RecoveryFlow/thunks/backupThunks\";\nimport { connection_levels } from \"../../../utils/constants\";\nexport var reportConnection = function reportConnection(_ref) {\n  var id = _ref.id,\n      reason = _ref.reason,\n      api = _ref.api;\n  return function _callee(dispatch, getState) {\n    var _getState, _getState$user, brightId, backupCompleted, op;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState = getState(), _getState$user = _getState.user, brightId = _getState$user.id, backupCompleted = _getState$user.backupCompleted;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(api.addConnection(brightId, id, connection_levels.REPORTED, Date.now(), reason));\n\n          case 4:\n            op = _context.sent;\n            dispatch(addOperation(op));\n            dispatch(reportAndHideConnection({\n              id: id,\n              reason: reason\n            }));\n\n            if (!backupCompleted) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(dispatch(backupUser()));\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            _context.t0 instanceof Error ? console.warn(_context.t0.message) : console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/models/reportConnection.ts"],"names":["reportConnection","id","reason","api","brightId","backupCompleted","getState","op","connection_levels","Date","dispatch","addOperation","reportAndHideConnection","backupUser","console"],"mappings":";AAAA,SAAA,YAAA,EAAA,uBAAA;AACA,SAAA,UAAA;AACA,SAAA,iBAAA;AAGA,OAAO,IAAMA,gBAAgB,GAAhBA,SAAAA,gBAAAA,CACX,IADWA,EACX;EAAA,IAAGC,EAAH,GAAA,IAAA,CAAA,EAAA;EAAA,IAAOC,MAAP,GAAA,IAAA,CAAA,MAAA;EAAA,IAAeC,GAAf,GAAA,IAAA,CAAA,GAAA;EAAA,OACA,SAAA,OAAA,CAAA,QAAA,EAAA,QAAA,EAAA;IAAA,IAAA,SAAA,EAAA,cAAA,EAAA,QAAA,EAAA,eAAA,EAAA,EAAA;;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,SAAA,GAIQG,QAJR,EAAA,EAAA,cAAA,GAAA,SAAA,CAAA,IAAA,EAGkBF,QAHlB,GAAA,cAAA,CAAA,EAAA,EAG4BC,eAH5B,GAAA,cAAA,CAAA,eAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAOqBF,GAAG,CAAHA,aAAAA,CAAAA,QAAAA,EAAAA,EAAAA,EAGfK,iBAAiB,CAHFL,QAAAA,EAIfM,IAAI,CAJWN,GAIfM,EAJeN,EAPrB,MAOqBA,CAPrB,CAAA;;UAAA,KAAA,CAAA;YAOUI,EAPV,GAAA,QAAA,CAAA,IAOUA;YAONG,QAAQ,CAACC,YAAY,CAArBD,EAAqB,CAAb,CAARA;YAEAA,QAAQ,CAACE,uBAAuB,CAAC;cAAEX,EAAE,EAAJ,EAAA;cAAMC,MAAM,EAA7CQ;YAAiC,CAAD,CAAxB,CAARA;;YAhBJ,IAAA,CAAA,eAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAkBYA,QAAQ,CAACG,UAlBrB,EAkBoB,CAlBpB,CAAA;;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAqBI,QAAA,CAAA,EAAA,YAAA,KAAA,GAAuBC,OAAO,CAAPA,IAAAA,CAAa,QAAA,CAAA,EAAA,CAApC,OAAuBA,CAAvB,GAAmDA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,CAAnD,EAAmDA,CAAnD;;UArBJ,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;EADA,CAAA;AADK,CAAA","sourcesContent":["import { addOperation, reportAndHideConnection } from '@/actions';\nimport { backupUser } from '@/components/Onboarding/RecoveryFlow/thunks/backupThunks';\nimport { connection_levels } from '@/utils/constants';\nimport { NodeApi } from '@/api/brightId';\n\nexport const reportConnection =\n  ({ id, reason, api }: { id: string; reason: ReportReason; api: NodeApi }) =>\n  async (dispatch: Dispatch, getState: GetState) => {\n    try {\n      const {\n        user: { id: brightId, backupCompleted },\n      } = getState();\n\n      // Change connection to REPORTED level\n      const op = await api.addConnection(\n        brightId,\n        id,\n        connection_levels.REPORTED,\n        Date.now(),\n        reason,\n      );\n      dispatch(addOperation(op));\n      // remove connection from local storage\n      dispatch(reportAndHideConnection({ id, reason }));\n      if (backupCompleted) {\n        await dispatch(backupUser());\n      }\n    } catch (err) {\n      err instanceof Error ? console.warn(err.message) : console.log(err);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}