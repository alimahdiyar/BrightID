{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport i18next from 'i18next';\nimport { useContext, useState } from 'react';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport store, { useSelector } from \"../../../store\";\nimport { BLUE, LIGHT_GREY, ORANGE, WHITE } from \"../../../theme/colors\";\nimport { DEVICE_LARGE, DEVICE_TYPE } from \"../../../utils/deviceConstants\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { NodeApiContext } from \"../../NodeApiGate\";\nimport { createNewGroup } from \"../actions\";\nimport { NewGroupCard } from \"./NewGroupCard\";\nimport { connectionsSelector } from \"../../../utils/connectionsSelector\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar ITEM_HEIGHT = DEVICE_LARGE ? 94 : 80;\nvar ITEM_MARGIN = DEVICE_LARGE ? 11.8 : 6;\n\nvar getItemLayout = function getItemLayout(data, index) {\n  return {\n    length: ITEM_HEIGHT + ITEM_MARGIN,\n    offset: (ITEM_HEIGHT + ITEM_MARGIN) * index,\n    index: index\n  };\n};\n\nvar creationStateStrings = {\n  uploadingGroupPhoto: i18next.t('groups.state.uploadingGroupPhoto', 'uploading group photo…'),\n  creatingGroup: i18next.t('groups.state.creatingGroup', 'creating the group…')\n};\nexport var NewGroupScreen = function NewGroupScreen() {\n  var api = useContext(NodeApiContext);\n  var navigation = useNavigation();\n  var route = useRoute();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      creating = _useState2[0],\n      setCreating = _useState2[1];\n\n  var _useState3 = useState('uploadingGroupPhoto'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      creationState = _useState4[0],\n      setCreationState = _useState4[1];\n\n  var connections = useSelector(function (state) {\n    return connectionsSelector(state, []);\n  });\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newGroupInvitees = _useState6[0],\n      setNewGroupInvitees = _useState6[1];\n\n  var createGroup = function _callee() {\n    var _route$params, photo, name, res;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setCreating(true);\n            _route$params = route.params, photo = _route$params.photo, name = _route$params.name;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(store.dispatch(createNewGroup(photo, name, api, newGroupInvitees, setCreationState)));\n\n          case 5:\n            res = _context.sent;\n\n            if (res) {\n              navigation.navigate('Groups');\n            } else {\n              setCreating(false);\n            }\n\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            setCreating(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var cardIsSelected = function cardIsSelected(connection) {\n    return newGroupInvitees.includes(connection.id);\n  };\n\n  var toggleNewGroupInvitee = function toggleNewGroupInvitee(id) {\n    var invitees = _toConsumableArray(newGroupInvitees);\n\n    var index = invitees.indexOf(id);\n\n    if (index >= 0) {\n      invitees.splice(index, 1);\n    } else {\n      invitees.push(id);\n    }\n\n    setNewGroupInvitees(invitees);\n  };\n\n  var renderConnection = function renderConnection(_ref) {\n    var item = _ref.item;\n    return _jsx(NewGroupCard, {\n      id: item.id,\n      connectionDate: item.connectionDate,\n      name: item.name,\n      photo: item.photo,\n      selected: cardIsSelected(item),\n      toggleInvitee: toggleNewGroupInvitee\n    });\n  };\n\n  var renderButtonOrSpinner = function renderButtonOrSpinner() {\n    var skip = newGroupInvitees.length < 1;\n    return !creating ? _jsx(View, {\n      style: styles.createGroupButtonContainer,\n      children: _jsx(TouchableOpacity, {\n        testID: \"createNewGroupBtn\",\n        onPress: createGroup,\n        style: skip ? _objectSpread(_objectSpread({}, styles.createGroupButton), styles.skipButton) : styles.createGroupButton,\n        children: _jsx(Text, {\n          style: styles.buttonInnerText,\n          children: skip ? t('createGroup.button.skip') : t('createGroup.button.createGroup')\n        })\n      })\n    }) : _jsxs(View, {\n      style: styles.loader,\n      children: [_jsx(Text, {\n        style: styles.textInfo,\n        children: creationStateStrings[creationState]\n      }), _jsx(Spinner, {\n        isVisible: true,\n        size: 97,\n        type: \"Wave\",\n        color: BLUE\n      })]\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        testID: \"newGroupScreen\",\n        style: styles.mainContainer,\n        children: [_jsxs(View, {\n          style: styles.titleContainer,\n          children: [_jsx(Text, {\n            style: styles.titleText,\n            children: t('createGroup.label.invitees')\n          }), _jsx(Text, {\n            style: styles.infoText,\n            children: t('createGroup.text.invitees')\n          })]\n        }), _jsx(View, {\n          style: styles.mainContainer,\n          children: connections.length > 0 ? _jsx(FlatList, {\n            extraData: newGroupInvitees,\n            style: styles.connectionsContainer,\n            contentContainerStyle: {\n              paddingBottom: 50,\n              flexGrow: 1\n            },\n            data: connections,\n            keyExtractor: function keyExtractor(_ref2, index) {\n              var id = _ref2.id;\n              return id + index;\n            },\n            renderItem: renderConnection,\n            showsHorizontalScrollIndicator: false,\n            showsVerticalScrollIndicator: false,\n            getItemLayout: getItemLayout\n          }) : _jsx(View, {\n            children: _jsx(Text, {\n              style: styles.emptyText,\n              children: t('createGroup.text.noConnections')\n            })\n          })\n        })]\n      }), renderButtonOrSpinner()]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  mainContainer: {\n    marginTop: 8,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  connectionsContainer: {\n    flex: 1,\n    width: '96.7%',\n    borderTopWidth: 1,\n    borderTopColor: LIGHT_GREY\n  },\n  emptyText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[20]\n  },\n  moreIcon: {\n    marginRight: 16\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 6,\n    backgroundColor: WHITE,\n    width: '96.7%',\n    marginBottom: DEVICE_TYPE === 'large' ? 11 : 0\n  },\n  titleText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[18],\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    letterSpacing: 0,\n    textAlign: 'left',\n    textShadowColor: 'rgba(0, 0, 0, 0.09)',\n    textShadowOffset: {\n      width: 0,\n      height: 2\n    },\n    textShadowRadius: 4,\n    marginBottom: 6\n  },\n  infoText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[14],\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    letterSpacing: 0,\n    textAlign: 'center'\n  },\n  createGroupButtonContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  createGroupButton: {\n    backgroundColor: BLUE,\n    width: 300,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: 13,\n    paddingBottom: 12,\n    marginBottom: DEVICE_TYPE === 'large' ? 30 : 25\n  },\n  skipButton: {\n    backgroundColor: BLUE\n  },\n  buttonInnerText: {\n    fontFamily: 'ApexNew-Medium',\n    color: WHITE,\n    fontWeight: '600',\n    fontSize: fontSize[18]\n  },\n  textInfo: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[18],\n    margin: 18\n  },\n  loader: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  }\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Groups/NewGroups/NewGroupScreen.tsx"],"names":["ITEM_HEIGHT","DEVICE_LARGE","ITEM_MARGIN","getItemLayout","length","offset","index","creationStateStrings","uploadingGroupPhoto","i18next","creatingGroup","NewGroupScreen","api","useContext","navigation","useNavigation","route","useRoute","t","useTranslation","creating","setCreating","useState","creationState","setCreationState","connections","useSelector","connectionsSelector","newGroupInvitees","setNewGroupInvitees","createGroup","photo","name","res","store","createNewGroup","cardIsSelected","connection","toggleNewGroupInvitee","invitees","renderConnection","item","renderButtonOrSpinner","skip","styles","paddingBottom","flexGrow","id","StyleSheet","orangeTop","backgroundColor","height","width","zIndex","container","flex","borderTopLeftRadius","marginTop","overflow","mainContainer","justifyContent","alignItems","connectionsContainer","borderTopWidth","borderTopColor","emptyText","fontFamily","fontSize","moreIcon","marginRight","titleContainer","marginBottom","DEVICE_TYPE","titleText","fontWeight","fontStyle","letterSpacing","textAlign","textShadowColor","textShadowOffset","textShadowRadius","infoText","createGroupButtonContainer","createGroupButton","paddingTop","skipButton","buttonInnerText","color","textInfo","margin","loader"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  FlatList,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport i18next from 'i18next';\nimport { useContext, useState } from 'react';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport store, { useSelector } from '@/store';\nimport { BLUE, LIGHT_GREY, ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE, DEVICE_TYPE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { createNewGroup } from '../actions';\nimport { NewGroupCard } from './NewGroupCard';\nimport { connectionsSelector } from '@/utils/connectionsSelector';\n\nconst ITEM_HEIGHT = DEVICE_LARGE ? 94 : 80;\nconst ITEM_MARGIN = DEVICE_LARGE ? 11.8 : 6;\n\nconst getItemLayout = (data, index) => ({\n  length: ITEM_HEIGHT + ITEM_MARGIN,\n  offset: (ITEM_HEIGHT + ITEM_MARGIN) * index,\n  index,\n});\n\nconst creationStateStrings = {\n  uploadingGroupPhoto: i18next.t(\n    'groups.state.uploadingGroupPhoto',\n    'uploading group photo…',\n  ),\n  creatingGroup: i18next.t('groups.state.creatingGroup', 'creating the group…'),\n};\n\nexport const NewGroupScreen = () => {\n  const api = useContext(NodeApiContext);\n  const navigation = useNavigation();\n  const route = useRoute() as {\n    params?: { photo: string; name: string };\n  };\n  const { t } = useTranslation();\n  const [creating, setCreating] = useState(false);\n  const [creationState, setCreationState] = useState('uploadingGroupPhoto');\n  const connections = useSelector((state) => connectionsSelector(state, []));\n  const [newGroupInvitees, setNewGroupInvitees] = useState<Array<string>>([]);\n\n  const createGroup = async () => {\n    try {\n      setCreating(true);\n      const { photo, name } = route.params;\n      const res = await store.dispatch(\n        createNewGroup(photo, name, api, newGroupInvitees, setCreationState),\n      );\n      if (res) {\n        navigation.navigate('Groups');\n      } else {\n        setCreating(false);\n      }\n    } catch (err) {\n      setCreating(false);\n    }\n  };\n\n  const cardIsSelected = (connection: Connection) => {\n    return newGroupInvitees.includes(connection.id);\n  };\n\n  const toggleNewGroupInvitee = (id: string) => {\n    const invitees = [...newGroupInvitees];\n    const index = invitees.indexOf(id);\n    if (index >= 0) {\n      invitees.splice(index, 1);\n    } else {\n      invitees.push(id);\n    }\n    setNewGroupInvitees(invitees);\n  };\n\n  const renderConnection = ({ item }: { item: Connection }) => (\n    <NewGroupCard\n      id={item.id}\n      connectionDate={item.connectionDate}\n      name={item.name}\n      photo={item.photo}\n      selected={cardIsSelected(item)}\n      toggleInvitee={toggleNewGroupInvitee}\n    />\n  );\n\n  const renderButtonOrSpinner = () => {\n    const skip = newGroupInvitees.length < 1;\n    return !creating ? (\n      <View style={styles.createGroupButtonContainer}>\n        <TouchableOpacity\n          testID=\"createNewGroupBtn\"\n          onPress={createGroup}\n          style={\n            skip\n              ? { ...styles.createGroupButton, ...styles.skipButton }\n              : styles.createGroupButton\n          }\n        >\n          <Text style={styles.buttonInnerText}>\n            {skip\n              ? t('createGroup.button.skip')\n              : t('createGroup.button.createGroup')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    ) : (\n      <View style={styles.loader}>\n        <Text style={styles.textInfo}>\n          {creationStateStrings[creationState]}\n        </Text>\n        <Spinner isVisible={true} size={97} type=\"Wave\" color={BLUE} />\n      </View>\n    );\n  };\n\n  return (\n    <>\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        <View testID=\"newGroupScreen\" style={styles.mainContainer}>\n          <View style={styles.titleContainer}>\n            <Text style={styles.titleText}>\n              {t('createGroup.label.invitees')}\n            </Text>\n            <Text style={styles.infoText}>\n              {t('createGroup.text.invitees')}\n            </Text>\n          </View>\n          <View style={styles.mainContainer}>\n            {connections.length > 0 ? (\n              <FlatList\n                extraData={newGroupInvitees}\n                style={styles.connectionsContainer}\n                contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n                data={connections}\n                keyExtractor={({ id }, index) => id + index}\n                renderItem={renderConnection}\n                showsHorizontalScrollIndicator={false}\n                showsVerticalScrollIndicator={false}\n                getItemLayout={getItemLayout}\n              />\n            ) : (\n              <View>\n                <Text style={styles.emptyText}>\n                  {t('createGroup.text.noConnections')}\n                </Text>\n              </View>\n            )}\n          </View>\n        </View>\n        {renderButtonOrSpinner()}\n      </View>\n    </>\n  );\n};\n\n/*\nexport class NewGroupScreen_ extends React.Component {\n  // make api available through this.context\n  static contextType = NodeApiContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      creationState: 'uploadingGroupPhoto',\n    };\n  }\n\n  componentDidMount() {\n    const { navigation, dispatch } = this.props;\n    navigation.addListener('focus', () => {\n      emitter.on('creatingGroupChannel', this.updateCreationState);\n    });\n    navigation.addListener('blur', () => {\n      dispatch(clearNewGroupInvitees());\n      emitter.off('creatingGroupChannel', this.updateCreationState);\n    });\n  }\n\n  updateCreationState = (creationState) => {\n    this.setState({ creationState });\n  };\n\n  cardIsSelected = (card) => {\n    const { newGroupInvitees } = this.props;\n    return newGroupInvitees.includes(card.id);\n  };\n\n  createGroup = async () => {\n    try {\n      this.setState({ creating: true });\n      const api = this.context;\n      const { route, navigation } = this.props;\n      const { photo, name } = route.params;\n      const res = await store.dispatch(createNewGroup(photo, name, api));\n      if (res) {\n        navigation.navigate('Groups');\n      } else {\n        this.setState({ creating: false });\n      }\n    } catch (err) {\n      this.setState({ creating: false });\n    }\n  };\n\n  renderButtonOrSpinner = () => {\n    const { t } = this.props;\n    const skip = this.props.newGroupInvitees.length < 1;\n    return !this.state.creating ? (\n      <View style={styles.createGroupButtonContainer}>\n        <TouchableOpacity\n          testID=\"createNewGroupBtn\"\n          onPress={this.createGroup}\n          style={\n            skip\n              ? { ...styles.createGroupButton, ...styles.skipButton }\n              : styles.createGroupButton\n          }\n        >\n          <Text style={styles.buttonInnerText}>\n            {skip\n              ? t('createGroup.button.skip')\n              : t('createGroup.button.createGroup')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    ) : (\n      <View style={styles.loader}>\n        <Text style={styles.textInfo}>\n          {creationStateStrings[this.state.creationState]}\n        </Text>\n        <Spinner isVisible={true} size={97} type=\"Wave\" color={BLUE} />\n      </View>\n    );\n  };\n\n  renderConnection = ({ item }) => (\n    <NewGroupCard\n      {...item}\n      selected={this.cardIsSelected(item)}\n      groups={true}\n      style={styles.connectionCard}\n    />\n  );\n\n  render() {\n    const { t, connections } = this.props;\n\n    return (\n      <>\n        <View style={styles.orangeTop} />\n        <View style={styles.container}>\n          <View testID=\"newGroupScreen\" style={styles.mainContainer}>\n            <View style={styles.titleContainer}>\n              <Text style={styles.titleText}>\n                {t('createGroup.label.invitees')}\n              </Text>\n              <Text style={styles.infoText}>\n                {t('createGroup.text.invitees')}\n              </Text>\n            </View>\n            <View style={styles.mainContainer}>\n              {connections.length > 0 ? (\n                <FlatList\n                  style={styles.connectionsContainer}\n                  contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n                  data={connections}\n                  keyExtractor={({ id }, index) => id + index}\n                  renderItem={this.renderConnection}\n                  showsHorizontalScrollIndicator={false}\n                  showsVerticalScrollIndicator={false}\n                  getItemLayout={getItemLayout}\n                />\n              ) : (\n                <View>\n                  <Text style={styles.emptyText}>\n                    {t('createGroup.text.noConnections')}\n                  </Text>\n                </View>\n              )}\n            </View>\n          </View>\n          {this.renderButtonOrSpinner()}\n        </View>\n      </>\n    );\n  }\n}\n\n */\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  mainContainer: {\n    marginTop: 8,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  connectionsContainer: {\n    flex: 1,\n    width: '96.7%',\n    borderTopWidth: 1,\n    borderTopColor: LIGHT_GREY,\n  },\n  emptyText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[20],\n  },\n  moreIcon: {\n    marginRight: 16,\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 6,\n    backgroundColor: WHITE,\n    width: '96.7%',\n\n    marginBottom: DEVICE_TYPE === 'large' ? 11 : 0,\n  },\n  titleText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[18],\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    letterSpacing: 0,\n    textAlign: 'left',\n    textShadowColor: 'rgba(0, 0, 0, 0.09)',\n    textShadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    textShadowRadius: 4,\n    marginBottom: 6,\n  },\n  infoText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[14],\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    letterSpacing: 0,\n    textAlign: 'center',\n  },\n  createGroupButtonContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  createGroupButton: {\n    backgroundColor: BLUE,\n    width: 300,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: 13,\n    paddingBottom: 12,\n    marginBottom: DEVICE_TYPE === 'large' ? 30 : 25,\n  },\n  skipButton: {\n    backgroundColor: BLUE,\n  },\n  buttonInnerText: {\n    fontFamily: 'ApexNew-Medium',\n    color: WHITE,\n    fontWeight: '600',\n    fontSize: fontSize[18],\n  },\n  textInfo: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[18],\n    margin: 18,\n  },\n  loader: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}