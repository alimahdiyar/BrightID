{"ast":null,"code":"'use strict';\n\nvar pna = require('process-nextick-args');\n\nmodule.exports = Writable;\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\nvar Duplex;\nWritable.WritableState = WritableState;\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n\nvar Stream = require(\"./internal/streams/stream\");\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require(\"./internal/streams/destroy\");\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require(\"./_stream_duplex\");\n  options = options || {};\n  var isDuplex = stream instanceof Duplex;\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n  this.highWaterMark = Math.floor(this.highWaterMark);\n  this.finalCalled = false;\n  this.needDrain = false;\n  this.ending = false;\n  this.ended = false;\n  this.finished = false;\n  this.destroyed = false;\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n  this.length = 0;\n  this.writing = false;\n  this.corked = 0;\n  this.sync = true;\n  this.bufferProcessing = false;\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  this.writecb = null;\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n  this.pendingcb = 0;\n  this.prefinished = false;\n  this.errorEmitted = false;\n  this.bufferedRequestCount = 0;\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require(\"./_stream_duplex\");\n\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    pna.nextTick(cb, er);\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      asyncWrite(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      stream.emit('error', err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    if (!this._writableState) {\n      return;\n    }\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/readable-stream/lib/_stream_writable.js"],"names":["pna","require","module","_this","onCorkedFinish","asyncWrite","process","Writable","util","Object","internalUtil","deprecate","Stream","Buffer","OurUint8Array","global","obj","destroyImpl","Duplex","options","isDuplex","stream","hwm","writableHwm","defaultHwm","Math","noDecode","onwrite","WritableState","current","out","get","Symbol","Function","realHasInstance","value","object","er","valid","chunk","state","ret","isBuf","_isUint8Array","_uint8ArrayToBuffer","cb","encoding","writeAfterEnd","validChunk","writeOrBuffer","clearBuffer","enumerable","newChunk","decodeChunk","len","last","callback","next","doWrite","finishMaybe","sync","onwriteStateUpdate","onwriteError","finished","needFinish","afterWrite","onwriteDrain","entry","l","buffer","holder","count","allBuffers","endWritable","need","prefinish","corkReq","set"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};"]},"metadata":{},"sourceType":"script"}