{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n      _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n      legacy = _checkLegacyPathConfi2[0],\n      compatOptions = _checkLegacyPathConfi2[1];\n\n  var initialRoutes = [];\n\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: []\n    });\n  }\n\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n\n      return {\n        name: name\n      };\n    });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n\n    return bWildcardIndex - aWildcardIndex;\n  });\n\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n\n    return _extends(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var result;\n  var current;\n\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n        _routes = _matchAgainstConfigs.routes,\n        remainingPath = _matchAgainstConfigs.remainingPath;\n\n    if (_routes !== undefined) {\n      current = createNestedStateObject(_routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n          _routes2 = _matchAgainstConfigs2.routes,\n          _remainingPath = _matchAgainstConfigs2.remainingPath;\n\n      remaining = _remainingPath;\n\n      if (_routes2 === undefined) {\n        var segments = remaining.split('/');\n        _routes2 = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      var state = createNestedStateObject(_routes2, initialRoutes);\n\n      if (current) {\n        var _current2;\n\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n\n  return result;\n}\n\nvar joinPaths = function joinPaths() {\n  var _ref2;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n\n    var match = remainingPath.match(config.regex);\n\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return _extends(acc, _defineProperty({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n\n          if (value) {\n            var _config$parse;\n\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n\n    var _config$pattern;\n\n    var _ret = _loop(config);\n\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentScreens = arguments.length > 5 ? arguments[5] : undefined;\n  var parentPattern = arguments.length > 6 ? arguments[6] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\");\n    }\n\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\n\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\n\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    var nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n\n  var current = state;\n\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3;\n\n    current = current.routes[current.index || 0].state;\n  }\n\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\n\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["legacy","compatOptions","checkLegacyPathConfig","initialRoutes","initialRouteName","parentScreens","screens","remaining","path","routes","name","decodeURIComponent","i","self","params","parseQueryParams","createNestedStateObject","configs","Object","key","createNormalizedConfigs","a","b","aParts","bParts","aWildcardIndex","bWildcardIndex","acc","config","intersects","match","c","remainingPath","matchAgainstConfigs","regex","current","result","segments","state","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","value","routeNames","initials","parentPattern","routeConfig","pattern","createConfigItem","nestedConfig","it","escape","screen","parse","routeName","findInitialRoute","sameParents","createStateObject","index","initialRoute","nestedState","nestedStateIndex","query","queryString","parseConfig"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}