{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      defaultScreenOptions = _ref.defaultScreenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n\n    var routeOptions = _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    })), options[route.key]);\n\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: routeOptions\n    }) : defaultScreenOptions), routeOptions);\n\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n              _ = o[_route$key],\n              rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n\n          return rest;\n        }\n\n        return o;\n      });\n    };\n\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","React","onDispatchAction","onOptionsChange","context","navigations","useNavigationCache","routes","useRouteCache","screen","route","routeOptions","mergedOptions","clearOptions","o","_","rest","acc","render","NavigationBuilderContext","key","value","NavigationContext","NavigationRouteContext","routeState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAOA,OAAA,SAAA;AACA,OAAA,wBAAA;AAKA,OAAA,kBAAA;AACA,OAAA,aAAA;AACA,OAAA,iBAAA;AACA,OAAA,sBAAA;AAmDA,eAAe,SAAA,cAAA,CAAA,IAAA,EAkB6B;EAb1CA,IAAAA,KAa0C,GAAA,IAAA,CAb1CA,KAAAA;EAAAA,IACAC,OAY0C,GAAA,IAAA,CAZ1CA,OADAD;EAAAA,IAEAE,UAW0C,GAAA,IAAA,CAX1CA,UAFAF;EAAAA,IAGAG,aAU0C,GAAA,IAAA,CAV1CA,aAHAH;EAAAA,IAIAI,oBAS0C,GAAA,IAAA,CAT1CA,oBAJAJ;EAAAA,IAKAK,QAQ0C,GAAA,IAAA,CAR1CA,QALAL;EAAAA,IAMAM,QAO0C,GAAA,IAAA,CAP1CA,QANAN;EAAAA,IAOAO,QAM0C,GAAA,IAAA,CAN1CA,QAPAP;EAAAA,IAQAQ,WAK0C,GAAA,IAAA,CAL1CA,WARAR;EAAAA,IASAS,gBAI0C,GAAA,IAAA,CAJ1CA,gBATAT;EAAAA,IAUAU,YAG0C,GAAA,IAAA,CAH1CA,YAVAV;EAAAA,IAWAW,MAE0C,GAAA,IAAA,CAF1CA,MAXAX;EAAAA,IAYAY,OAC0C,GAAA,IAAA,CAD1CA,OAZAZ;;EAcA,IAAA,eAAA,GAA8Be,KAAK,CAALA,QAAAA,CAA9B,EAA8BA,CAA9B;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,OAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAgBC,UAAhB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EACA,IAAA,iBAAA,GAA8CC,KAAK,CAALA,UAAAA,CAA9C,wBAA8CA,CAA9C;EAAA,IAAQC,gBAAR,GAAA,iBAAA,CAAA,gBAAA;EAAA,IAA0BC,eAA1B,GAAA,iBAAA,CAAA,eAAA;;EAIA,IAAMC,OAAO,GAAGH,KAAK,CAALA,OAAAA,CACd,YAAA;IAAA,OAAO;MACLb,UADK,EAAA,UAAA;MAELG,QAFK,EAAA,QAAA;MAGLG,WAHK,EAAA,WAAA;MAILC,gBAJK,EAAA,gBAAA;MAKLC,YALK,EAAA,YAAA;MAMLM,gBANK,EAAA,gBAAA;MAOLC,eAAAA,EAPF;IAAO,CAAP;EADcF,CAAAA,EAUd,CAAA,UAAA,EAAA,QAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,gBAAA,EAVF,eAUE,CAVcA,CAAhB;EAqBA,IAAMI,WAAW,GAAGC,kBAAkB,CAAuB;IAC3DpB,KAD2D,EAAA,KAAA;IAE3DM,QAF2D,EAAA,QAAA;IAG3DJ,UAH2D,EAAA,UAAA;IAI3DY,UAJ2D,EAAA,UAAA;IAK3DH,MAL2D,EAAA,MAAA;IAM3DC,OAAAA,EANF;EAA6D,CAAvB,CAAtC;EASA,IAAMS,MAAM,GAAGC,aAAa,CAACtB,KAAK,CAAlC,MAA4B,CAA5B;EAEA,OAAOqB,MAAM,CAANA,MAAAA,CAEL,UAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAmB;IACnB,IAAME,MAAM,GAAGtB,OAAO,CAACuB,KAAK,CAA5B,IAAsB,CAAtB;IACA,IAAMtB,UAAU,GAAGiB,WAAW,CAACK,KAAK,CAApC,GAA8B,CAA9B;;IAEA,IAAMC,YAAY,GAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAEZ,OAAA,aAAA,KAAA,QAAA,IAAqCtB,aAAa,IAAlD,IAAA,GAAA,aAAA,GAGAA,aAAa,CAAC;MACZqB,KADY,EAAA,KAAA;MAEZtB,UAAAA,EAPU;IAKE,CAAD,CALD,CAAA,EAUZ,OAAOqB,MAAM,CAAb,OAAA,KAAA,QAAA,IAAsCA,MAAM,CAANA,OAAAA,IAAtC,IAAA,GACAA,MAAM,CADN,OAAA,GAGAA,MAAM,CAANA,OAAAA,CAAe;MACbC,KADa,EAAA,KAAA;MAEbtB,UAAAA,EAfU;IAaG,CAAfqB,CAbY,CAAA,EAkBbV,OAAO,CAACW,KAAK,CAlBlB,GAkBY,CAlBM,CAAlB;;IAqBA,IAAME,aAAa,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACb,OAAA,oBAAA,KAAA,UAAA,GAEAtB,oBAAoB,CAAC;MACnBoB,KADmB,EAAA,KAAA;MAEnBtB,UAFmB,EAAA,UAAA;MAGnBW,OAAO,EALT;IAEqB,CAAD,CAFpB,GADa,oBAAA,CAAA,EAAnB,YAAmB,CAAnB;;IAYA,IAAMc,YAAY,GAAZA,SAAAA,YAAAA,GAAe;MAAA,OACnBb,UAAU,CAAEc,UAAD,CAACA,EAAM;QAChB,IAAIJ,KAAK,CAALA,GAAAA,IAAJ,CAAA,EAAoB;UAElB,IAAA,UAAA,GAASA,KAAK,CAAd,GAAA;UAAA,IAAqBK,CAArB,GAAoCD,CAApC,CAAA,UAAA,CAAA;UAAA,IAA2BE,IAA3B,GAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,UAAA,EAAA,GAAA,CAAA,cAAA,CAAA,CAAA;;UACA,OAAA,IAAA;QAGF;;QAAA,OAPQ,CAOR;MARiB,CACT,CADS;IAArB,CAAA;;IAWAC,GAAG,CAACP,KAAK,CAATO,GAAG,CAAHA,GAAiB;MACf7B,UADe,EAAA,UAAA;MAEf8B,MAFe,EAAA,SAAA,MAAA,GAEN;QACP,OACEjB,KAAAA,CAAAA,aAAAA,CAACkB,wBAADlB,CAAAA,QAAAA,EAAAA;UAAmCmB,GAAG,EAAEV,KAAK,CAA7CT,GAAAA;UAAmDoB,KAAK,EAAxDpB;QAAAA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAACqB,iBAADrB,CAAAA,QAAAA,EAAAA;UAA4BoB,KAAK,EAAjCpB;QAAAA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAACsB,sBAADtB,CAAAA,QAAAA,EAAAA;UAAiCoB,KAAK,EAAtCpB;QAAAA,CAAAA,EACEA,KAAAA,CAAAA,aAAAA,CAAAA,SAAAA,EAAAA;UACEb,UAAU,EADZa,UAAAA;UAEES,KAAK,EAFPT,KAAAA;UAGEQ,MAAM,EAHRR,MAAAA;UAIEuB,UAAU,EAAEtC,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAJde,KAAAA;UAKET,QAAQ,EALVS,QAAAA;UAMER,QAAQ,EANVQ,QAAAA;UAOEF,OAAO,EAPTE,aAAAA;UAQEY,YAAY,EAfT;QAOLZ,CAAAA,CADFA,CADFA,CADFA,CADF;MAHa,CAAA;MAsBfF,OAAO,EAtBTkB;IAAiB,CAAjBA;IAyBA,OA3EKV,GA2EL;EA3EKA,CAAAA,EAAP,EAAOA,CAAP;AA6ED","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}