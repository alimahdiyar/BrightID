{"ast":null,"code":"'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from 'normalize-css-color';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar linear = function linear(t) {\n  return t;\n};\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  }\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  result = easing(result);\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedInterpolation, _AnimatedWithChildren);\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  var _proto = AnimatedInterpolation.prototype;\n\n  _proto.__makeNative = function __makeNative() {\n    this._parent.__makeNative();\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  };\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  };\n\n  _proto.__attach = function __attach() {\n    this._parent.__addChild(this);\n  };\n\n  _proto.__detach = function __detach() {\n    this._parent.__removeChild(this);\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__transformDataType = function __transformDataType(range) {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  };\n\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedInterpolation.js"],"names":["subClass","Object","superClass","_setPrototypeOf","o","keys","symbols","i","arguments","source","ownKeys","_defineProperty","key","value","enumerable","configurable","writable","obj","__DEV__","process","linear","config","createInterpolationFromStringOutputRange","outputRange","checkInfiniteRange","inputRange","checkValidInputRange","invariant","easing","extrapolateLeft","extrapolateRight","range","findRange","interpolate","result","outputMin","inputMin","input","inputMax","outputMax","normalizedColor","normalizeColor","r","g","b","a","stringShapeRegex","checkPattern","outputRanges","interpolations","createInterpolation","_objectSpread","shouldRound","isRgbOrRgba","val","Math","String","pattern","arr","name","AnimatedInterpolation","_inheritsLoose","_this","_AnimatedWithChildren","_proto","parentValue","NativeAnimatedHelper","type"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from 'normalize-css-color';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar linear = function linear(t) {\n  return t;\n};\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need\n   * to guard against this possibility. */\n  .map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation = /*#__PURE__*/function (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedInterpolation, _AnimatedWithChildren);\n\n  // Export for testing.\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  var _proto = AnimatedInterpolation.prototype;\n\n  _proto.__makeNative = function __makeNative() {\n    this._parent.__makeNative();\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  };\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  };\n\n  _proto.__attach = function __attach() {\n    this._parent.__addChild(this);\n  };\n\n  _proto.__detach = function __detach() {\n    this._parent.__removeChild(this);\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__transformDataType = function __transformDataType(range) {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n\n      /* $FlowFixMe(>=0.38.0) - Flow error detected during the deployment of\n       * v0.38.0. To see the error, remove this comment and run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  };\n\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;"]},"metadata":{},"sourceType":"module"}