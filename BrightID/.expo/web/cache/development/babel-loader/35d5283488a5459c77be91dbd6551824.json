{"ast":null,"code":"import PushNotificationIOS from '@react-native-community/push-notification-ios';\nimport * as PushNotification from 'react-native-push-notification';\nimport { setDeviceToken, setNotificationToken } from \"./actions\";\nimport { store } from \"./store\";\nimport notificationService from \"./api/notificationService\";\nexport function notificationSubscription() {\n  PushNotification.configure({\n    onRegister: function onRegister(_ref) {\n      var token = _ref.token;\n\n      var _store$getState = store.getState(),\n          notifications = _store$getState.notifications;\n\n      if (token) {\n        console.log('RECIEVED_NOTIFICATION_TOKEN', token);\n        var oldDeviceToken = notifications.deviceToken && notifications.deviceToken !== token ? notifications.deviceToken : null;\n        notificationService.getToken({\n          deviceToken: token,\n          notificationToken: notifications.notificationToken,\n          oldDeviceToken: oldDeviceToken\n        }).then(function (_ref2) {\n          var notificationToken = _ref2.notificationToken;\n          if (notificationToken && notificationToken !== notifications.notificationToken) store.dispatch(setNotificationToken(notificationToken));\n        }).catch(function (err) {\n          console.log(err.message);\n        });\n        store.dispatch(setDeviceToken(token));\n      }\n    },\n    onNotification: function onNotification(notification) {\n      console.log('NOTIFICATION:', notification);\n      notification.finish(PushNotificationIOS.FetchResult.NoData);\n    },\n    onAction: function onAction(notification) {\n      console.log('ACTION:', notification.action);\n      console.log('NOTIFICATION:', notification);\n    },\n    onRegistrationError: function onRegistrationError(err) {\n      console.log(err.message, err);\n    },\n    permissions: {\n      alert: true,\n      badge: true,\n      sound: true\n    },\n    popInitialNotification: true,\n    requestPermissions: true\n  });\n  PushNotification.createChannel({\n    channelId: 'brightid-main',\n    channelName: 'Brightid Main',\n    channelDescription: 'A channel to recieve BrightID notifications',\n    soundName: 'default',\n    importance: 4,\n    vibrate: true\n  }, function (created) {\n    return console.log(\"createChannel returned '\" + created + \"'\");\n  });\n}","map":{"version":3,"names":["PushNotificationIOS","PushNotification","setDeviceToken","setNotificationToken","store","notificationService","notificationSubscription","configure","onRegister","token","getState","notifications","console","log","oldDeviceToken","deviceToken","getToken","notificationToken","then","dispatch","catch","err","message","onNotification","notification","finish","FetchResult","NoData","onAction","action","onRegistrationError","permissions","alert","badge","sound","popInitialNotification","requestPermissions","createChannel","channelId","channelName","channelDescription","soundName","importance","vibrate","created"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/NotificationService.ts"],"sourcesContent":["import PushNotificationIOS from '@react-native-community/push-notification-ios';\nimport * as PushNotification from 'react-native-push-notification';\nimport { setDeviceToken, setNotificationToken } from '@/actions';\nimport { store } from '@/store';\nimport notificationService from '@/api/notificationService';\n\nexport function notificationSubscription() {\n  // Must be outside of any component LifeCycle (such as `componentDidMount`).\n  PushNotification.configure({\n    // (optional) Called when Token is generated (iOS and Android)\n    onRegister({ token }) {\n      const { notifications } = store.getState();\n\n      if (token) {\n        console.log('RECIEVED_NOTIFICATION_TOKEN', token);\n        // always update the server with our device token.\n        // if notificationToken exists, then our connections already have it\n        // so we need to make sure that the notification server is also synced\n\n        const oldDeviceToken =\n          notifications.deviceToken && notifications.deviceToken !== token\n            ? notifications.deviceToken\n            : null;\n\n        notificationService\n          .getToken({\n            deviceToken: token,\n            notificationToken: notifications.notificationToken,\n            oldDeviceToken,\n          })\n          .then(({ notificationToken }) => {\n            if (\n              notificationToken &&\n              notificationToken !== notifications.notificationToken\n            )\n              store.dispatch(setNotificationToken(notificationToken));\n          })\n          .catch((err) => {\n            console.log(err.message);\n          });\n        store.dispatch(setDeviceToken(token));\n      }\n    },\n\n    // (required) Called when a remote is received or opened, or local notification is opened\n    onNotification(notification) {\n      console.log('NOTIFICATION:', notification);\n\n      // process the notification\n\n      // (required) Called when a remote is received or opened, or local notification is opened\n      notification.finish(PushNotificationIOS.FetchResult.NoData);\n    },\n\n    // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)\n    onAction(notification) {\n      console.log('ACTION:', notification.action);\n      console.log('NOTIFICATION:', notification);\n\n      // process the action\n    },\n\n    // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)\n    onRegistrationError(err) {\n      console.log(err.message, err);\n    },\n\n    // IOS ONLY (optional): default: all - Permissions to register.\n    permissions: {\n      alert: true,\n      badge: true,\n      sound: true,\n    },\n\n    // Should the initial notification be popped automatically\n    // default: true\n    popInitialNotification: true,\n\n    /**\n     * (optional) default: true\n     * - Specified if permissions (ios) and token (android and ios) will requested or not,\n     * - if not, you must call PushNotificationsHandler.requestPermissions() later\n     * - if you are not using remote notification or do not have Firebase installed, use this:\n     *     requestPermissions: Platform.OS === 'ios'\n     */\n    requestPermissions: true,\n  });\n\n  PushNotification.createChannel(\n    {\n      channelId: 'brightid-main', // (required)\n      channelName: 'Brightid Main', // (required)\n      channelDescription: 'A channel to recieve BrightID notifications', // (optional) default: undefined.\n      soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function\n      importance: 4, // (optional) default: 4. Int value of the Android notification importance\n      vibrate: true, // (optional) default: true. Creates the default vibration patten if true.\n    },\n    (created) => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.\n  );\n}\n"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,+CAAhC;AACA,OAAO,KAAKC,gBAAZ,MAAkC,gCAAlC;AACA,SAASC,cAAT,EAAyBC,oBAAzB;AACA,SAASC,KAAT;AACA,OAAOC,mBAAP;AAEA,OAAO,SAASC,wBAAT,GAAoC;EAEzCL,gBAAgB,CAACM,SAAjB,CAA2B;IAEzBC,UAFyB,4BAEH;MAAA,IAATC,KAAS,QAATA,KAAS;;MACpB,sBAA0BL,KAAK,CAACM,QAAN,EAA1B;MAAA,IAAQC,aAAR,mBAAQA,aAAR;;MAEA,IAAIF,KAAJ,EAAW;QACTG,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CJ,KAA3C;QAKA,IAAMK,cAAc,GAClBH,aAAa,CAACI,WAAd,IAA6BJ,aAAa,CAACI,WAAd,KAA8BN,KAA3D,GACIE,aAAa,CAACI,WADlB,GAEI,IAHN;QAKAV,mBAAmB,CAChBW,QADH,CACY;UACRD,WAAW,EAAEN,KADL;UAERQ,iBAAiB,EAAEN,aAAa,CAACM,iBAFzB;UAGRH,cAAc,EAAdA;QAHQ,CADZ,EAMGI,IANH,CAMQ,iBAA2B;UAAA,IAAxBD,iBAAwB,SAAxBA,iBAAwB;UAC/B,IACEA,iBAAiB,IACjBA,iBAAiB,KAAKN,aAAa,CAACM,iBAFtC,EAIEb,KAAK,CAACe,QAAN,CAAehB,oBAAoB,CAACc,iBAAD,CAAnC;QACH,CAZH,EAaGG,KAbH,CAaS,UAACC,GAAD,EAAS;UACdT,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACC,OAAhB;QACD,CAfH;QAgBAlB,KAAK,CAACe,QAAN,CAAejB,cAAc,CAACO,KAAD,CAA7B;MACD;IACF,CAlCwB;IAqCzBc,cArCyB,0BAqCVC,YArCU,EAqCI;MAC3BZ,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,YAA7B;MAKAA,YAAY,CAACC,MAAb,CAAoBzB,mBAAmB,CAAC0B,WAApB,CAAgCC,MAApD;IACD,CA5CwB;IA+CzBC,QA/CyB,oBA+ChBJ,YA/CgB,EA+CF;MACrBZ,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,YAAY,CAACK,MAApC;MACAjB,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,YAA7B;IAGD,CApDwB;IAuDzBM,mBAvDyB,+BAuDLT,GAvDK,EAuDA;MACvBT,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACC,OAAhB,EAAyBD,GAAzB;IACD,CAzDwB;IA4DzBU,WAAW,EAAE;MACXC,KAAK,EAAE,IADI;MAEXC,KAAK,EAAE,IAFI;MAGXC,KAAK,EAAE;IAHI,CA5DY;IAoEzBC,sBAAsB,EAAE,IApEC;IA6EzBC,kBAAkB,EAAE;EA7EK,CAA3B;EAgFAnC,gBAAgB,CAACoC,aAAjB,CACE;IACEC,SAAS,EAAE,eADb;IAEEC,WAAW,EAAE,eAFf;IAGEC,kBAAkB,EAAE,6CAHtB;IAIEC,SAAS,EAAE,SAJb;IAKEC,UAAU,EAAE,CALd;IAMEC,OAAO,EAAE;EANX,CADF,EASE,UAACC,OAAD;IAAA,OAAahC,OAAO,CAACC,GAAR,8BAAuC+B,OAAvC,OAAb;EAAA,CATF;AAWD"},"metadata":{},"sourceType":"module"}