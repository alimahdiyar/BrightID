{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport i18next from 'i18next';\nimport { b64ToUrlSafeB64, hash, urlSafeRandomKey } from \"./encoding\";\nimport { CHANNEL_TTL, CHANNEL_INFO_NAME, MIN_CHANNEL_INFO_VERSION, CHANNEL_INFO_VERSION_1, CHANNEL_INFO_VERSION_2, MAX_CHANNEL_INFO_VERSION } from \"./constants\";\nimport { channel_states, channel_types } from \"../components/PendingConnections/channelSlice\";\nimport ChannelAPI from \"../api/channelService\";\nimport { encryptData } from \"./cryptoHelper\";\nimport { retrieveImage } from \"./filesystem\";\nexport var generateChannelData = function _callee(channelType, url) {\n  var aesKey, id, timestamp, ttl, myProfileId, initiatorProfileId, type, state, channelApi;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(16));\n\n        case 2:\n          aesKey = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n        case 5:\n          id = _context.sent;\n          timestamp = Date.now();\n          ttl = CHANNEL_TTL;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n        case 10:\n          myProfileId = _context.sent;\n          initiatorProfileId = myProfileId;\n          type = channelType;\n          state = channel_states.OPEN;\n          channelApi = new ChannelAPI(url.href);\n          return _context.abrupt(\"return\", {\n            aesKey: aesKey,\n            api: channelApi,\n            id: id,\n            initiatorProfileId: initiatorProfileId,\n            myProfileId: myProfileId,\n            state: state,\n            timestamp: timestamp,\n            ttl: ttl,\n            type: type,\n            url: url\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createChannelInfo = function createChannelInfo(channel) {\n  var version;\n\n  switch (channel.type) {\n    case channel_types.SINGLE:\n    case channel_types.GROUP:\n      version = CHANNEL_INFO_VERSION_1;\n      break;\n\n    case channel_types.STAR:\n      version = CHANNEL_INFO_VERSION_2;\n      break;\n\n    default:\n      throw new Error(\"Unhandled channel type \" + channel.type);\n  }\n\n  var obj = {\n    version: version,\n    type: channel.type,\n    timestamp: channel.timestamp,\n    ttl: channel.ttl,\n    initiatorProfileId: channel.initiatorProfileId\n  };\n  return obj;\n};\nexport var buildChannelQrUrl = function buildChannelQrUrl(_ref) {\n  var aesKey = _ref.aesKey,\n      id = _ref.id,\n      url = _ref.url;\n  var qrUrl = new URL(url.href);\n  qrUrl.searchParams.append('aes', aesKey);\n  qrUrl.searchParams.append('id', id);\n  return qrUrl;\n};\nexport var parseChannelQrURL = function _callee2(url) {\n  var aesKey, id, channelApi, channelInfo, msg, _msg, myProfileId, channel;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          aesKey = url.searchParams.get('aes');\n          url.searchParams.delete('aes');\n          id = url.searchParams.get('id');\n          url.searchParams.delete('id');\n          channelApi = new ChannelAPI(url.href);\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(channelApi.download({\n            channelId: id,\n            dataId: CHANNEL_INFO_NAME\n          }));\n\n        case 7:\n          channelInfo = _context2.sent;\n          console.log(\"Got ChannelInfo:\");\n          console.log(channelInfo);\n\n          if (!(channelInfo.version > MAX_CHANNEL_INFO_VERSION)) {\n            _context2.next = 15;\n            break;\n          }\n\n          msg = i18next.t('channel.alert.text.localOutdated', 'client version outdated - please update your client and retry');\n          throw new Error(msg);\n\n        case 15:\n          if (!(channelInfo.version < MIN_CHANNEL_INFO_VERSION)) {\n            _context2.next = 18;\n            break;\n          }\n\n          _msg = i18next.t('channel.alert.text.otherOutdated', 'other client version outdated - QRCode creator needs to update client and retry');\n          throw new Error(_msg);\n\n        case 18:\n          _context2.next = 20;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n        case 20:\n          myProfileId = _context2.sent;\n          channel = {\n            aesKey: aesKey,\n            api: channelApi,\n            id: id,\n            initiatorProfileId: channelInfo.initiatorProfileId,\n            myProfileId: myProfileId,\n            state: channel_states.OPEN,\n            timestamp: channelInfo.timestamp,\n            ttl: channelInfo.ttl,\n            type: channelInfo.type,\n            url: url\n          };\n          return _context2.abrupt(\"return\", channel);\n\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var uploadConnection = function _callee3(_ref2) {\n  var conn, channelApi, aesKey, signingKey, id, name, photo, timestamp, socialMedia, photoString, dataObj, encrypted;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          conn = _ref2.conn, channelApi = _ref2.channelApi, aesKey = _ref2.aesKey, signingKey = _ref2.signingKey;\n          _context3.prev = 1;\n          id = conn.id, name = conn.name, photo = conn.photo, timestamp = conn.timestamp, socialMedia = conn.socialMedia;\n          photoString = '';\n\n          if (name) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 6:\n          if (!(photo != null && photo.filename)) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(retrieveImage(photo.filename));\n\n        case 9:\n          photoString = _context3.sent;\n\n        case 10:\n          dataObj = {\n            id: id,\n            photo: photoString,\n            name: name,\n            timestamp: timestamp,\n            socialMedia: socialMedia\n          };\n          encrypted = encryptData(dataObj, aesKey);\n          console.log(\"Posting profile data of \" + id + \" ...\");\n          _context3.next = 15;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: \"connection_\" + id + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 15:\n          _context3.next = 20;\n          break;\n\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.error(\"uploadConnection: \" + _context3.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 17]], Promise);\n};\nexport var uploadGroup = function _callee4(_ref3) {\n  var group, channelApi, aesKey, signingKey, id, name, photo, groupKey, members, admins, photoString, dataObj, encrypted;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          group = _ref3.group, channelApi = _ref3.channelApi, aesKey = _ref3.aesKey, signingKey = _ref3.signingKey;\n          _context4.prev = 1;\n          id = group.id, name = group.name, photo = group.photo, groupKey = group.aesKey, members = group.members, admins = group.admins;\n          photoString = '';\n\n          if (groupKey) {\n            _context4.next = 6;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 6:\n          if (!(photo != null && photo.filename)) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(retrieveImage(photo.filename));\n\n        case 9:\n          photoString = _context4.sent;\n\n        case 10:\n          dataObj = {\n            id: id,\n            photo: photoString,\n            name: name,\n            aesKey: groupKey,\n            members: members,\n            admins: admins\n          };\n          encrypted = encryptData(dataObj, aesKey);\n          console.log(\"Posting group data of \" + id + \" ...\");\n          _context4.next = 15;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: \"group_\" + id + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 15:\n          _context4.next = 20;\n          break;\n\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.error(\"uploadGroup: \" + _context4.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 17]], Promise);\n};\nexport var uploadBlindSig = function _callee5(_ref4) {\n  var sig, channelApi, aesKey, signingKey, prefix, encrypted;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          sig = _ref4.sig, channelApi = _ref4.channelApi, aesKey = _ref4.aesKey, signingKey = _ref4.signingKey, prefix = _ref4.prefix;\n          _context5.prev = 1;\n          encrypted = encryptData(sig, aesKey);\n          console.log(\"Posting blind sig for app: \" + sig.app + \" verification: \" + sig.verification + \" ...\");\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: prefix + \"blindsig_\" + hash(sig.uid) + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.error(\"uploadBlindSig: \" + _context5.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\nexport var uploadContextInfo = function _callee6(_ref5) {\n  var contextInfo, channelApi, aesKey, signingKey, prefix, encrypted;\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          contextInfo = _ref5.contextInfo, channelApi = _ref5.channelApi, aesKey = _ref5.aesKey, signingKey = _ref5.signingKey, prefix = _ref5.prefix;\n          _context6.prev = 1;\n          encrypted = encryptData(contextInfo, aesKey);\n          console.log(\"Posting ContextInfo: \" + contextInfo.context + \" - \" + contextInfo.contextId + \"...\");\n          _context6.next = 6;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: prefix + \"contextInfo_\" + hash(contextInfo.context) + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 6:\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.error(\"uploadContextInfo: \" + _context6.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};","map":{"version":3,"names":["i18next","b64ToUrlSafeB64","hash","urlSafeRandomKey","CHANNEL_TTL","CHANNEL_INFO_NAME","MIN_CHANNEL_INFO_VERSION","CHANNEL_INFO_VERSION_1","CHANNEL_INFO_VERSION_2","MAX_CHANNEL_INFO_VERSION","channel_states","channel_types","ChannelAPI","encryptData","retrieveImage","generateChannelData","channelType","url","aesKey","id","timestamp","Date","now","ttl","myProfileId","initiatorProfileId","type","state","OPEN","channelApi","href","api","createChannelInfo","channel","version","SINGLE","GROUP","STAR","Error","obj","buildChannelQrUrl","qrUrl","URL","searchParams","append","parseChannelQrURL","get","delete","download","channelId","dataId","channelInfo","console","log","msg","t","uploadConnection","conn","signingKey","name","photo","socialMedia","photoString","filename","dataObj","encrypted","upload","data","error","message","uploadGroup","group","groupKey","members","admins","uploadBlindSig","sig","prefix","app","verification","uid","uploadContextInfo","contextInfo","context","contextId"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/channels.ts"],"sourcesContent":["import i18next from 'i18next';\nimport { b64ToUrlSafeB64, hash, urlSafeRandomKey } from '@/utils/encoding';\nimport {\n  CHANNEL_TTL,\n  CHANNEL_INFO_NAME,\n  MIN_CHANNEL_INFO_VERSION,\n  CHANNEL_INFO_VERSION_1,\n  CHANNEL_INFO_VERSION_2,\n  MAX_CHANNEL_INFO_VERSION,\n} from '@/utils/constants';\nimport {\n  channel_states,\n  channel_types,\n} from '@/components/PendingConnections/channelSlice';\nimport ChannelAPI from '@/api/channelService';\nimport { encryptData } from '@/utils/cryptoHelper';\nimport { retrieveImage } from '@/utils/filesystem';\n\nexport const generateChannelData = async (\n  channelType: ChannelType,\n  url: URL,\n): Promise<Channel> => {\n  const aesKey = await urlSafeRandomKey(16);\n  const id = await urlSafeRandomKey(9);\n  const timestamp = Date.now();\n  const ttl = CHANNEL_TTL;\n  const myProfileId = await urlSafeRandomKey(9);\n  const initiatorProfileId = myProfileId;\n  const type = channelType;\n  const state = channel_states.OPEN;\n  const channelApi = new ChannelAPI(url.href);\n\n  return {\n    aesKey,\n    api: channelApi,\n    id,\n    initiatorProfileId,\n    myProfileId,\n    state,\n    timestamp,\n    ttl,\n    type,\n    url,\n  };\n};\n\nexport const createChannelInfo = (channel: Channel) => {\n  /*\n    Channel types \"SINGLE\" and \"GROUP\" are compatible with CHANNEL_INFO_VERSION 1.\n    Channel type \"STAR\" requires CHANNEL_INFO_VERSION 2\n   */\n  let version;\n  switch (channel.type) {\n    case channel_types.SINGLE:\n    case channel_types.GROUP:\n      version = CHANNEL_INFO_VERSION_1;\n      break;\n    case channel_types.STAR:\n      version = CHANNEL_INFO_VERSION_2;\n      break;\n    default:\n      throw new Error(`Unhandled channel type ${channel.type}`);\n  }\n  const obj: ChannelInfo = {\n    version,\n    type: channel.type,\n    timestamp: channel.timestamp,\n    ttl: channel.ttl,\n    initiatorProfileId: channel.initiatorProfileId,\n  };\n  return obj;\n};\n\nexport const buildChannelQrUrl = ({ aesKey, id, url }: Channel) => {\n  const qrUrl = new URL(url.href);\n  qrUrl.searchParams.append('aes', aesKey);\n  qrUrl.searchParams.append('id', id);\n  return qrUrl;\n};\n\nexport const parseChannelQrURL = async (url: URL) => {\n  // parse and remove aesKey from URL\n  const aesKey = url.searchParams.get('aes');\n  url.searchParams.delete('aes');\n  // parse and remove channelID from URL\n  const id = url.searchParams.get('id');\n  url.searchParams.delete('id');\n\n  // create channelAPI\n  const channelApi = new ChannelAPI(url.href);\n  // download channelInfo\n  const channelInfo = await channelApi.download({\n    channelId: id,\n    dataId: CHANNEL_INFO_NAME,\n  });\n  console.log(`Got ChannelInfo:`);\n  console.log(channelInfo);\n\n  if (channelInfo.version > MAX_CHANNEL_INFO_VERSION) {\n    const msg = i18next.t(\n      'channel.alert.text.localOutdated',\n      'client version outdated - please update your client and retry',\n    );\n    throw new Error(msg);\n  } else if (channelInfo.version < MIN_CHANNEL_INFO_VERSION) {\n    const msg = i18next.t(\n      'channel.alert.text.otherOutdated',\n      'other client version outdated - QRCode creator needs to update client and retry',\n    );\n    throw new Error(msg);\n  }\n\n  const myProfileId = await urlSafeRandomKey(9);\n\n  const channel: Channel = {\n    aesKey,\n    api: channelApi,\n    id,\n    initiatorProfileId: channelInfo.initiatorProfileId,\n    myProfileId,\n    state: channel_states.OPEN,\n    timestamp: channelInfo.timestamp,\n    ttl: channelInfo.ttl,\n    type: channelInfo.type,\n    url,\n  };\n  return channel;\n};\n\nexport const uploadConnection = async ({\n  conn,\n  channelApi,\n  aesKey,\n  signingKey,\n}: {\n  conn: Connection;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n}) => {\n  try {\n    const { id, name, photo, timestamp, socialMedia } = conn;\n    let photoString = '';\n\n    if (!name) {\n      return;\n    }\n\n    // retrieve photo\n    if (photo?.filename) {\n      photoString = await retrieveImage(photo.filename);\n    }\n\n    const dataObj: SyncConnection = {\n      id,\n      photo: photoString,\n      name,\n      timestamp,\n      socialMedia,\n    };\n\n    const encrypted = encryptData(dataObj, aesKey);\n    console.log(`Posting profile data of ${id} ...`);\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      dataId: `connection_${id}:${b64ToUrlSafeB64(signingKey)}`,\n    });\n  } catch (err) {\n    console.error(`uploadConnection: ${err.message}`);\n  }\n};\n\nexport const uploadGroup = async ({\n  group,\n  channelApi,\n  aesKey,\n  signingKey,\n}: {\n  group: {\n    id: string;\n    name?: string;\n    photo?: Photo;\n    aesKey?: string;\n    members: Array<string>;\n    admins: Array<string>;\n  };\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n}) => {\n  try {\n    const { id, name, photo, aesKey: groupKey, members, admins } = group;\n    let photoString = '';\n    if (!groupKey) {\n      // not worth uploading group data is missing\n      return;\n    }\n    // retrieve photo\n    if (photo?.filename) {\n      photoString = await retrieveImage(photo.filename);\n    }\n\n    const dataObj = {\n      id,\n      photo: photoString,\n      name,\n      aesKey: groupKey,\n      members,\n      admins,\n    };\n\n    const encrypted = encryptData(dataObj, aesKey);\n    console.log(`Posting group data of ${id} ...`);\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      dataId: `group_${id}:${b64ToUrlSafeB64(signingKey)}`,\n    });\n  } catch (err) {\n    console.error(`uploadGroup: ${err.message}`);\n  }\n};\n\nexport const uploadBlindSig = async ({\n  sig,\n  channelApi,\n  aesKey,\n  signingKey,\n  prefix,\n}: {\n  sig: SigInfo;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n  prefix: string;\n}) => {\n  try {\n    const encrypted = encryptData(sig, aesKey);\n    console.log(\n      `Posting blind sig for app: ${sig.app} verification: ${sig.verification} ...`,\n    );\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      // use hash of sig.uid to avoid revealing it\n      dataId: `${prefix}blindsig_${hash(sig.uid)}:${b64ToUrlSafeB64(\n        signingKey,\n      )}`,\n    });\n  } catch (err) {\n    console.error(`uploadBlindSig: ${err.message}`);\n  }\n};\n\nexport const uploadContextInfo = async ({\n  contextInfo,\n  channelApi,\n  aesKey,\n  signingKey,\n  prefix,\n}: {\n  contextInfo: ContextInfo;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n  prefix: string;\n}) => {\n  try {\n    const encrypted = encryptData(contextInfo, aesKey);\n    console.log(\n      `Posting ContextInfo: ${contextInfo.context} - ${contextInfo.contextId}...`,\n    );\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      dataId: `${prefix}contextInfo_${hash(\n        contextInfo.context,\n      )}:${b64ToUrlSafeB64(signingKey)}`,\n    });\n  } catch (err) {\n    console.error(`uploadContextInfo: ${err.message}`);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}