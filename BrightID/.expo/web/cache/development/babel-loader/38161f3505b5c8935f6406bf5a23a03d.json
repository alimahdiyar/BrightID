{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.search = exports.loadDataAsync = exports.getLetters = exports.getImageFlagAsync = exports.getEmojiFlagAsync = exports.getCountryNameAsync = exports.getCountryInfoAsync = exports.getCountryCurrencyAsync = exports.getCountryCallingCodeAsync = exports.getCountriesAsync = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _types = require(\"./types\");\n\nvar _fuse = _interopRequireDefault(require(\"fuse.js\"));\n\nvar imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nvar localData = {\n  emojiCountries: undefined,\n  imageCountries: undefined\n};\n\nvar loadDataAsync = function (data) {\n  return function () {\n    var dataType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _types.FlagType.EMOJI;\n    return new Promise(function (resolve, reject) {\n      switch (dataType) {\n        case _types.FlagType.FLAT:\n          if (!data.imageCountries) {\n            fetch(imageJsonUrl).then(function (response) {\n              return response.json();\n            }).then(function (remoteData) {\n              data.imageCountries = remoteData;\n              resolve(data.imageCountries);\n            }).catch(reject);\n          } else {\n            resolve(data.imageCountries);\n          }\n\n          break;\n\n        default:\n          if (!data.emojiCountries) {\n            data.emojiCountries = require(\"./assets/data/countries-emoji.json\");\n            resolve(data.emojiCountries);\n          } else {\n            resolve(data.emojiCountries);\n          }\n\n          break;\n      }\n    });\n  };\n}(localData);\n\nexports.loadDataAsync = loadDataAsync;\n\nvar getEmojiFlagAsync = function _callee() {\n  var countryCode,\n      countries,\n      _args = arguments;\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          countryCode = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'FR';\n          _context.next = 3;\n          return _regenerator.default.awrap(loadDataAsync());\n\n        case 3:\n          countries = _context.sent;\n\n          if (countries) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('Unable to find emoji because emojiCountries is undefined');\n\n        case 6:\n          return _context.abrupt(\"return\", countries[countryCode].flag);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getEmojiFlagAsync = getEmojiFlagAsync;\n\nvar getImageFlagAsync = function _callee2() {\n  var countryCode,\n      countries,\n      _args2 = arguments;\n  return _regenerator.default.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          countryCode = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 'FR';\n          _context2.next = 3;\n          return _regenerator.default.awrap(loadDataAsync(_types.FlagType.FLAT));\n\n        case 3:\n          countries = _context2.sent;\n\n          if (countries) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 6:\n          return _context2.abrupt(\"return\", countries[countryCode].flag);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getImageFlagAsync = getImageFlagAsync;\n\nvar getCountryNameAsync = function _callee3() {\n  var countryCode,\n      translation,\n      countries,\n      _args3 = arguments;\n  return _regenerator.default.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          countryCode = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 'FR';\n          translation = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 'common';\n          _context3.next = 4;\n          return _regenerator.default.awrap(loadDataAsync());\n\n        case 4:\n          countries = _context3.sent;\n\n          if (countries) {\n            _context3.next = 7;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 7:\n          return _context3.abrupt(\"return\", countries[countryCode].name ? countries[countryCode].name[translation] : countries[countryCode].name['common']);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getCountryNameAsync = getCountryNameAsync;\n\nvar getCountryCallingCodeAsync = function _callee4(countryCode) {\n  var countries;\n  return _regenerator.default.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regenerator.default.awrap(loadDataAsync());\n\n        case 2:\n          countries = _context4.sent;\n\n          if (countries) {\n            _context4.next = 5;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 5:\n          return _context4.abrupt(\"return\", countries[countryCode].callingCode[0]);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getCountryCallingCodeAsync = getCountryCallingCodeAsync;\n\nvar getCountryCurrencyAsync = function _callee5(countryCode) {\n  var countries;\n  return _regenerator.default.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regenerator.default.awrap(loadDataAsync());\n\n        case 2:\n          countries = _context5.sent;\n\n          if (countries) {\n            _context5.next = 5;\n            break;\n          }\n\n          throw new Error('Unable to find image because imageCountries is undefined');\n\n        case 5:\n          return _context5.abrupt(\"return\", countries[countryCode].currency[0]);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getCountryCurrencyAsync = getCountryCurrencyAsync;\n\nvar isCountryPresent = function isCountryPresent(countries) {\n  return function (countryCode) {\n    return !!countries[countryCode];\n  };\n};\n\nvar isRegion = function isRegion(region) {\n  return function (country) {\n    return region ? country.region === region : true;\n  };\n};\n\nvar isSubregion = function isSubregion(subregion) {\n  return function (country) {\n    return subregion ? country.subregion === subregion : true;\n  };\n};\n\nvar isIncluded = function isIncluded(countryCodes) {\n  return function (country) {\n    return countryCodes && countryCodes.length > 0 ? countryCodes.includes(country.cca2) : true;\n  };\n};\n\nvar isExcluded = function isExcluded(excludeCountries) {\n  return function (country) {\n    return excludeCountries && excludeCountries.length > 0 ? !excludeCountries.includes(country.cca2) : true;\n  };\n};\n\nvar getCountriesAsync = function _callee6(flagType) {\n  var translation,\n      region,\n      subregion,\n      countryCodes,\n      excludeCountries,\n      preferredCountries,\n      withAlphaFilter,\n      countriesRaw,\n      newCountryCodeList,\n      countries,\n      _countries,\n      _args6 = arguments;\n\n  return _regenerator.default.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          translation = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'common';\n          region = _args6.length > 2 ? _args6[2] : undefined;\n          subregion = _args6.length > 3 ? _args6[3] : undefined;\n          countryCodes = _args6.length > 4 ? _args6[4] : undefined;\n          excludeCountries = _args6.length > 5 ? _args6[5] : undefined;\n          preferredCountries = _args6.length > 6 ? _args6[6] : undefined;\n          withAlphaFilter = _args6.length > 7 ? _args6[7] : undefined;\n          _context6.next = 9;\n          return _regenerator.default.awrap(loadDataAsync(flagType));\n\n        case 9:\n          countriesRaw = _context6.sent;\n\n          if (countriesRaw) {\n            _context6.next = 12;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", []);\n\n        case 12:\n          if (!(preferredCountries && !withAlphaFilter)) {\n            _context6.next = 18;\n            break;\n          }\n\n          newCountryCodeList = [].concat((0, _toConsumableArray2.default)(preferredCountries), (0, _toConsumableArray2.default)(_types.CountryCodeList.filter(function (code) {\n            return !preferredCountries.includes(code);\n          })));\n          countries = newCountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n            return (0, _extends2.default)({\n              cca2: cca2\n            }, (0, _extends2.default)({}, countriesRaw[cca2], {\n              name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n            }));\n          }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries));\n          return _context6.abrupt(\"return\", countries);\n\n        case 18:\n          _countries = _types.CountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n            return (0, _extends2.default)({\n              cca2: cca2\n            }, (0, _extends2.default)({}, countriesRaw[cca2], {\n              name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n            }));\n          }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries)).sort(function (country1, country2) {\n            return country1.name.localeCompare(country2.name);\n          });\n          return _context6.abrupt(\"return\", _countries);\n\n        case 20:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getCountriesAsync = getCountriesAsync;\nvar DEFAULT_FUSE_OPTION = {\n  shouldSort: true,\n  threshold: 0.3,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name', 'cca2', 'callingCode']\n};\nvar fuse;\n\nvar search = function search() {\n  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FUSE_OPTION;\n\n  if (data.length === 0) {\n    return [];\n  }\n\n  if (!fuse) {\n    fuse = new _fuse.default(data, options);\n  }\n\n  if (filter && filter !== '') {\n    var result = fuse.search(filter);\n    return result;\n  } else {\n    return data;\n  }\n};\n\nexports.search = search;\n\nvar uniq = function uniq(arr) {\n  return Array.from(new Set(arr));\n};\n\nvar getLetters = function getLetters(countries) {\n  return uniq(countries.map(function (country) {\n    return country.name.substr(0, 1).toLocaleUpperCase();\n  }).sort(function (l1, l2) {\n    return l1.localeCompare(l2);\n  }));\n};\n\nexports.getLetters = getLetters;\n\nvar getCountryInfoAsync = function _callee7(_ref) {\n  var countryCode, translation, countryName, currency, callingCode;\n  return _regenerator.default.async(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          countryCode = _ref.countryCode, translation = _ref.translation;\n          _context7.next = 3;\n          return _regenerator.default.awrap(getCountryNameAsync(countryCode, translation || 'common'));\n\n        case 3:\n          countryName = _context7.sent;\n          _context7.next = 6;\n          return _regenerator.default.awrap(getCountryCurrencyAsync(countryCode));\n\n        case 6:\n          currency = _context7.sent;\n          _context7.next = 9;\n          return _regenerator.default.awrap(getCountryCallingCodeAsync(countryCode));\n\n        case 9:\n          callingCode = _context7.sent;\n          return _context7.abrupt(\"return\", {\n            countryName: countryName,\n            currency: currency,\n            callingCode: callingCode\n          });\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getCountryInfoAsync = getCountryInfoAsync;","map":{"version":3,"sources":["../src/CountryService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FlagType, CountryCodeList, } from './types';\nimport Fuse from 'fuse.js';\nconst imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nconst localData = {\n    emojiCountries: undefined,\n    imageCountries: undefined,\n};\nexport const loadDataAsync = ((data) => (dataType = FlagType.EMOJI) => {\n    return new Promise((resolve, reject) => {\n        switch (dataType) {\n            case FlagType.FLAT:\n                if (!data.imageCountries) {\n                    fetch(imageJsonUrl)\n                        .then((response) => response.json())\n                        .then((remoteData) => {\n                        data.imageCountries = remoteData;\n                        resolve(data.imageCountries);\n                    })\n                        .catch(reject);\n                }\n                else {\n                    resolve(data.imageCountries);\n                }\n                break;\n            default:\n                if (!data.emojiCountries) {\n                    data.emojiCountries = require('./assets/data/countries-emoji.json');\n                    resolve(data.emojiCountries);\n                }\n                else {\n                    resolve(data.emojiCountries);\n                }\n                break;\n        }\n    });\n})(localData);\nexport const getEmojiFlagAsync = async (countryCode = 'FR') => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find emoji because emojiCountries is undefined');\n    }\n    return countries[countryCode].flag;\n};\nexport const getImageFlagAsync = async (countryCode = 'FR') => {\n    const countries = await loadDataAsync(FlagType.FLAT);\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].flag;\n};\nexport const getCountryNameAsync = async (countryCode = 'FR', translation = 'common') => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].name\n        ? countries[countryCode].name[translation]\n        : countries[countryCode].name['common'];\n};\nexport const getCountryCallingCodeAsync = async (countryCode) => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].callingCode[0];\n};\nexport const getCountryCurrencyAsync = async (countryCode) => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].currency[0];\n};\nconst isCountryPresent = (countries) => (countryCode) => !!countries[countryCode];\nconst isRegion = (region) => (country) => region ? country.region === region : true;\nconst isSubregion = (subregion) => (country) => subregion ? country.subregion === subregion : true;\nconst isIncluded = (countryCodes) => (country) => countryCodes && countryCodes.length > 0\n    ? countryCodes.includes(country.cca2)\n    : true;\nconst isExcluded = (excludeCountries) => (country) => excludeCountries && excludeCountries.length > 0\n    ? !excludeCountries.includes(country.cca2)\n    : true;\nexport const getCountriesAsync = async (flagType, translation = 'common', region, subregion, countryCodes, excludeCountries, preferredCountries, withAlphaFilter) => {\n    const countriesRaw = await loadDataAsync(flagType);\n    if (!countriesRaw) {\n        return [];\n    }\n    if (preferredCountries && !withAlphaFilter) {\n        const newCountryCodeList = [...preferredCountries, ...CountryCodeList.filter(code => !preferredCountries.includes(code))];\n        const countries = newCountryCodeList.filter(isCountryPresent(countriesRaw))\n            .map((cca2) => ({\n            cca2,\n            ...{\n                ...countriesRaw[cca2],\n                name: countriesRaw[cca2].name[translation] ||\n                    countriesRaw[cca2].name['common'],\n            },\n        }))\n            .filter(isRegion(region))\n            .filter(isSubregion(subregion))\n            .filter(isIncluded(countryCodes))\n            .filter(isExcluded(excludeCountries));\n        return countries;\n    }\n    else {\n        const countries = CountryCodeList.filter(isCountryPresent(countriesRaw))\n            .map((cca2) => ({\n            cca2,\n            ...{\n                ...countriesRaw[cca2],\n                name: countriesRaw[cca2].name[translation] ||\n                    countriesRaw[cca2].name['common'],\n            },\n        }))\n            .filter(isRegion(region))\n            .filter(isSubregion(subregion))\n            .filter(isIncluded(countryCodes))\n            .filter(isExcluded(excludeCountries))\n            .sort((country1, country2) => country1.name.localeCompare(country2.name));\n        return countries;\n    }\n};\nconst DEFAULT_FUSE_OPTION = {\n    shouldSort: true,\n    threshold: 0.3,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['name', 'cca2', 'callingCode'],\n};\nlet fuse;\nexport const search = (filter = '', data = [], options = DEFAULT_FUSE_OPTION) => {\n    if (data.length === 0) {\n        return [];\n    }\n    if (!fuse) {\n        fuse = new Fuse(data, options);\n    }\n    if (filter && filter !== '') {\n        const result = fuse.search(filter);\n        return result;\n    }\n    else {\n        return data;\n    }\n};\nconst uniq = (arr) => Array.from(new Set(arr));\nexport const getLetters = (countries) => {\n    return uniq(countries\n        .map((country) => country.name.substr(0, 1).toLocaleUpperCase())\n        .sort((l1, l2) => l1.localeCompare(l2)));\n};\nexport const getCountryInfoAsync = async ({ countryCode, translation, }) => {\n    const countryName = await getCountryNameAsync(countryCode, translation || 'common');\n    const currency = await getCountryCurrencyAsync(countryCode);\n    const callingCode = await getCountryCallingCodeAsync(countryCode);\n    return { countryName, currency, callingCode };\n};\n//# sourceMappingURL=CountryService.js.map"]},"metadata":{},"sourceType":"script"}