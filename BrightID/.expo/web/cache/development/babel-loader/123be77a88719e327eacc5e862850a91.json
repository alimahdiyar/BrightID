{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from \"../../modules/requestIdleCallback\";\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"names":["InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","promise","handle","requestIdleCallback","resolve","task","then","done","cancel","cancelIdleCallback","createInteractionHandle","clearInteractionHandle","invariant","addListener"],"mappings":"AASA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,mBAAA,IAAA,kBAAA;AACA,IAAIA,kBAAkB,GAAG;EACvBC,MAAM,EAAE;IACNC,gBAAgB,EADV,kBAAA;IAENC,mBAAmB,EAHE;EACf,CADe;EASvBC,oBAAoB,EAAE,SAAA,oBAAA,CAAA,IAAA,EAAoC;IACxD,IAAA,MAAA;IACA,IAAIC,OAAO,GAAG,IAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;MAC3CC,MAAM,GAAGC,mBAAmB,CAAC,YAAY;QACvC,IAAA,IAAA,EAAU;UACRC,OAAO,CAACC,IAARD,EAAO,CAAPA;QADF,CAAA,MAEO;UACLA,OAAO;QAEV;MANDF,CAA4B,CAA5BA;IADF,CAAc,CAAd;IASA,OAAO;MACLI,IAAI,EAAEL,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,CADD,OACCA,CADD;MAELM,IAAI,EAAEN,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,CAFD,OAECA,CAFD;MAGLO,MAAM,EAAE,SAAA,MAAA,GAAkB;QACxBC,kBAAkB,CAAlBA,MAAkB,CAAlBA;MAJJ;IAAO,CAAP;EApBqB,CAAA;EAgCvBC,uBAAuB,EAAE,SAAA,uBAAA,GAAmC;IAC1D,OAAA,CAAA;EAjCqB,CAAA;EAuCvBC,sBAAsB,EAAE,SAAA,sBAAA,CAAA,MAAA,EAAwC;IAC9DC,SAAS,CAAC,CAAC,CAAF,MAAA,EAATA,iCAAS,CAATA;EAxCqB,CAAA;EA0CvBC,WAAW,EAAE,SAAA,WAAA,GAAuB,CA1CtC;AAAyB,CAAzB;AA4CA,eAAA,kBAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;"]},"metadata":{},"sourceType":"module"}