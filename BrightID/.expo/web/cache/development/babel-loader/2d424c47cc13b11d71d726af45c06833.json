{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { uInt8ArrayToB64 } from \"../../../utils/encoding\";\nimport { RecoveryErrorType } from \"./RecoveryError\";\nimport { RECOVERY_CHANNEL_TTL } from \"../../../utils/constants\";\nimport { RESET_STORE } from \"../../../actions\";\nexport var initialState = {\n  publicKey: '',\n  secretKey: new Uint8Array(),\n  aesKey: '',\n  errorMessage: '',\n  errorType: RecoveryErrorType.NONE,\n  id: '',\n  name: '',\n  photo: {\n    filename: ''\n  },\n  timestamp: 0,\n  sigs: {},\n  uploadCompletedBy: {},\n  qrcode: '',\n  recoveredConnections: 0,\n  recoveredGroups: 0,\n  recoveredBlindSigs: 0,\n  channel: {\n    channelId: '',\n    url: null,\n    expires: 0\n  }\n};\nvar recoveryData = createSlice({\n  name: 'recoveryData',\n  initialState: initialState,\n  reducers: {\n    init: function init(state, action) {\n      var _action$payload = action.payload,\n          publicKey = _action$payload.publicKey,\n          secretKey = _action$payload.secretKey,\n          aesKey = _action$payload.aesKey;\n      state.publicKey = uInt8ArrayToB64(publicKey != null ? publicKey : new Uint8Array());\n      state.secretKey = secretKey;\n      state.aesKey = aesKey;\n      state.timestamp = Date.now();\n      state.errorMessage = '';\n      state.errorType = RecoveryErrorType.NONE;\n      state.id = '';\n      state.name = '';\n      state.photo = {\n        filename: ''\n      };\n      state.recoveredConnections = 0;\n      state.recoveredGroups = 0;\n      state.recoveredBlindSigs = 0;\n      state.sigs = {};\n      state.uploadCompletedBy = {};\n    },\n    setRecoveryAesKey: function setRecoveryAesKey(state, action) {\n      state.aesKey = action.payload;\n    },\n    setRecoveryChannel: function setRecoveryChannel(state, action) {\n      var _action$payload2 = action.payload,\n          channelId = _action$payload2.channelId,\n          url = _action$payload2.url;\n      state.channel.channelId = channelId;\n      state.channel.url = url;\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    resetChannelExpiration: function resetChannelExpiration(state) {\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    setSig: function setSig(state, action) {\n      var _action$payload3 = action.payload,\n          signer = _action$payload3.signer,\n          sig = _action$payload3.sig;\n\n      var _original = original(state),\n          id = _original.id;\n\n      if (sig.id !== id) {\n        state.sigs = _defineProperty({}, signer, sig);\n        state.id = sig.id;\n        state.name = '';\n        state.photo = {\n          filename: ''\n        };\n      } else {\n        state.sigs[signer] = sig;\n      }\n    },\n    updateNamePhoto: function updateNamePhoto(state, action) {\n      var _action$payload4 = action.payload,\n          name = _action$payload4.name,\n          photo = _action$payload4.photo;\n      state.name = name;\n      state.photo = photo;\n    },\n    resetRecoverySigs: function resetRecoverySigs(state) {\n      state.sigs = {};\n    },\n    resetRecoveryData: function resetRecoveryData() {\n      return initialState;\n    },\n    setRecoveryError: function setRecoveryError(state, _ref) {\n      var payload = _ref.payload;\n      state.errorType = payload.errorType;\n      state.errorMessage = payload.errorMessage;\n    },\n    increaseRecoveredConnections: function increaseRecoveredConnections(state, action) {\n      state.recoveredConnections += action.payload;\n    },\n    increaseRecoveredGroups: function increaseRecoveredGroups(state, action) {\n      state.recoveredGroups += action.payload;\n    },\n    increaseRecoveredBlindSigs: function increaseRecoveredBlindSigs(state, action) {\n      state.recoveredBlindSigs += action.payload;\n    },\n    setUploadCompletedBy: function setUploadCompletedBy(state, action) {\n      state.uploadCompletedBy[action.payload] = true;\n    },\n    setRecoveryId: function setRecoveryId(state, action) {\n      state.id = action.payload;\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return initialState;\n  })\n});\nexport var uploadCompletedByOtherSide = function uploadCompletedByOtherSide(state) {\n  return Object.keys(state.recoveryData.uploadCompletedBy).length > 0;\n};\nvar _recoveryData$actions = recoveryData.actions,\n    init = _recoveryData$actions.init,\n    increaseRecoveredConnections = _recoveryData$actions.increaseRecoveredConnections,\n    increaseRecoveredGroups = _recoveryData$actions.increaseRecoveredGroups,\n    increaseRecoveredBlindSigs = _recoveryData$actions.increaseRecoveredBlindSigs,\n    setRecoveryAesKey = _recoveryData$actions.setRecoveryAesKey,\n    setRecoveryChannel = _recoveryData$actions.setRecoveryChannel,\n    setSig = _recoveryData$actions.setSig,\n    updateNamePhoto = _recoveryData$actions.updateNamePhoto,\n    resetChannelExpiration = _recoveryData$actions.resetChannelExpiration,\n    resetRecoverySigs = _recoveryData$actions.resetRecoverySigs,\n    resetRecoveryData = _recoveryData$actions.resetRecoveryData,\n    setRecoveryError = _recoveryData$actions.setRecoveryError,\n    setUploadCompletedBy = _recoveryData$actions.setUploadCompletedBy,\n    setRecoveryId = _recoveryData$actions.setRecoveryId;\nexport { init, increaseRecoveredConnections, increaseRecoveredGroups, increaseRecoveredBlindSigs, setRecoveryAesKey, setRecoveryChannel, setSig, updateNamePhoto, resetChannelExpiration, resetRecoverySigs, resetRecoveryData, setRecoveryError, setUploadCompletedBy, setRecoveryId };\nexport default recoveryData.reducer;","map":{"version":3,"names":["createSlice","original","uInt8ArrayToB64","RecoveryErrorType","RECOVERY_CHANNEL_TTL","RESET_STORE","initialState","publicKey","secretKey","Uint8Array","aesKey","errorMessage","errorType","NONE","id","name","photo","filename","timestamp","sigs","uploadCompletedBy","qrcode","recoveredConnections","recoveredGroups","recoveredBlindSigs","channel","channelId","url","expires","recoveryData","reducers","init","state","action","payload","Date","now","setRecoveryAesKey","setRecoveryChannel","resetChannelExpiration","setSig","signer","sig","updateNamePhoto","resetRecoverySigs","resetRecoveryData","setRecoveryError","increaseRecoveredConnections","increaseRecoveredGroups","increaseRecoveredBlindSigs","setUploadCompletedBy","setRecoveryId","extraReducers","uploadCompletedByOtherSide","Object","keys","length","actions","reducer"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/recoveryDataSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { uInt8ArrayToB64 } from '@/utils/encoding';\nimport { RecoveryErrorType } from '@/components/Onboarding/RecoveryFlow/RecoveryError';\nimport { RECOVERY_CHANNEL_TTL } from '@/utils/constants';\nimport { RESET_STORE } from '@/actions';\n\nexport const initialState: RecoveryData = {\n  publicKey: '',\n  secretKey: new Uint8Array(),\n  aesKey: '',\n  errorMessage: '',\n  errorType: RecoveryErrorType.NONE,\n  id: '',\n  name: '',\n  photo: {\n    filename: '',\n  },\n  timestamp: 0,\n  sigs: {},\n  uploadCompletedBy: {},\n  qrcode: '',\n  recoveredConnections: 0,\n  recoveredGroups: 0,\n  recoveredBlindSigs: 0,\n  channel: {\n    channelId: '',\n    url: null,\n    expires: 0,\n  },\n};\n\nconst recoveryData = createSlice({\n  name: 'recoveryData',\n  initialState,\n  reducers: {\n    init(\n      state,\n      action: PayloadAction<{\n        publicKey?: Uint8Array;\n        secretKey?: Uint8Array;\n        aesKey: string;\n      }>,\n    ) {\n      const { publicKey, secretKey, aesKey } = action.payload;\n      state.publicKey = uInt8ArrayToB64(publicKey ?? new Uint8Array());\n      state.secretKey = secretKey;\n      state.aesKey = aesKey;\n      state.timestamp = Date.now();\n      state.errorMessage = '';\n      state.errorType = RecoveryErrorType.NONE;\n      state.id = '';\n      state.name = '';\n      state.photo = {\n        filename: '',\n      };\n      state.recoveredConnections = 0;\n      state.recoveredGroups = 0;\n      state.recoveredBlindSigs = 0;\n      state.sigs = {};\n      state.uploadCompletedBy = {};\n    },\n    setRecoveryAesKey(state, action: PayloadAction<string>) {\n      state.aesKey = action.payload;\n    },\n    setRecoveryChannel(\n      state,\n      action: PayloadAction<{ channelId: string; url: URL }>,\n    ) {\n      const { channelId, url } = action.payload;\n      state.channel.channelId = channelId;\n      state.channel.url = url;\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    resetChannelExpiration(state) {\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    setSig(state, action: PayloadAction<{ sig: Signature; signer: string }>) {\n      const { signer, sig } = action.payload;\n      // access previous values from the reducer\n      const { id } = original(state);\n\n      if (sig.id !== id) {\n        state.sigs = { [signer]: sig };\n        state.id = sig.id;\n        // clear name and photo in case id changes\n        state.name = '';\n        state.photo = {\n          filename: '',\n        };\n      } else {\n        state.sigs[signer] = sig;\n      }\n    },\n    updateNamePhoto(\n      state,\n      action: PayloadAction<{ name: string; photo: Photo }>,\n    ) {\n      const { name, photo } = action.payload;\n      state.name = name;\n      state.photo = photo;\n    },\n    resetRecoverySigs(state) {\n      state.sigs = {};\n    },\n    resetRecoveryData() {\n      return initialState;\n    },\n    setRecoveryError(\n      state,\n      {\n        payload,\n      }: PayloadAction<{\n        errorType: RecoveryErrorType;\n        errorMessage?: string;\n      }>,\n    ) {\n      state.errorType = payload.errorType;\n      state.errorMessage = payload.errorMessage;\n    },\n    increaseRecoveredConnections(state, action: PayloadAction<number>) {\n      state.recoveredConnections += action.payload;\n    },\n    increaseRecoveredGroups(state, action: PayloadAction<number>) {\n      state.recoveredGroups += action.payload;\n    },\n    increaseRecoveredBlindSigs(state, action: PayloadAction<number>) {\n      state.recoveredBlindSigs += action.payload;\n    },\n    // used for import/sync\n    setUploadCompletedBy(state, action: PayloadAction<string>) {\n      state.uploadCompletedBy[action.payload] = true;\n    },\n    // used for import\n    setRecoveryId(state, action: PayloadAction<string>) {\n      state.id = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\nexport const uploadCompletedByOtherSide = (state) => {\n  return Object.keys(state.recoveryData.uploadCompletedBy).length > 0;\n};\n\n// Export channel actions\nexport const {\n  init,\n  increaseRecoveredConnections,\n  increaseRecoveredGroups,\n  increaseRecoveredBlindSigs,\n  setRecoveryAesKey,\n  setRecoveryChannel,\n  setSig,\n  updateNamePhoto,\n  resetChannelExpiration,\n  resetRecoverySigs,\n  resetRecoveryData,\n  setRecoveryError,\n  setUploadCompletedBy,\n  setRecoveryId,\n} = recoveryData.actions;\n\n// Export reducer\nexport default recoveryData.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}