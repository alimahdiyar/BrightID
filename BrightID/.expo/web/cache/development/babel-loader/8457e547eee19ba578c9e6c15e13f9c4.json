{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { selectPendingOperations } from \"../../reducer/operationsSlice\";\nimport { selectAllConnections } from \"../../reducer/connectionsSlice\";\nimport { useSelector } from \"../../store\";\nimport { DEVICE_LARGE, DEVICE_IOS, DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { ORANGE, WHITE, BLUE, GREY } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport RecoveryConnectionCard from \"./RecoverConnectionsCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EmptyList = function EmptyList() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      height: '100%',\n      width: '100%',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingHorizontal: '10%'\n    },\n    children: [_jsx(MaterialCommunityIcons, {\n      size: DEVICE_LARGE ? 48 : 38,\n      name: \"alert-outline\",\n      color: GREY\n    }), _jsx(Text, {\n      style: styles.emptyText,\n      children: t('recoveryConnections.text.emptyList')\n    })]\n  });\n};\n\nexport var RecoveryConnectionsScreen = function RecoveryConnectionsScreen(props) {\n  var navigation = props.navigation;\n  var headerHeight = useHeaderHeight();\n\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  var _useTranslation2 = useTranslation(),\n      t = _useTranslation2.t;\n\n  var me = useSelector(function (state) {\n    return state.user;\n  });\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      recoveryConnections = _useState4[0],\n      setRecoveryConnections = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      connectionProfile = _useState6[0],\n      setConnectionProfile = _useState6[1];\n\n  var myConnections = useSelector(selectAllConnections);\n  var pendingOpsCount = useSelector(selectPendingOperations).length;\n  var api = useContext(NodeApiContext);\n  useFocusEffect(useCallback(function () {\n    var fetchData = function _callee() {\n      var profile, recoveryConnections;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n\n              if (!(pendingOpsCount > 0)) {\n                _context.next = 4;\n                break;\n              }\n\n              console.log('waiting for pending operations to apply');\n              return _context.abrupt(\"return\");\n\n            case 4:\n              console.log(\"fetching own recovery connections\");\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(api.getProfile(me.id));\n\n            case 7:\n              profile = _context.sent;\n              setConnectionProfile(profile);\n              recoveryConnections = profile.recoveryConnections.map(function (rc) {\n                var conn = myConnections.find(function (c) {\n                  return rc.id === c.id;\n                });\n                return conn || {\n                  id: rc.id\n                };\n              });\n              setRecoveryConnections(recoveryConnections);\n              setLoading(false);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, [api, me.id, myConnections, pendingOpsCount]));\n\n  var getActiveTime = function getActiveTime(item) {\n    if (!connectionProfile) {\n      return {\n        activeBefore: 0,\n        activeAfter: 0\n      };\n    }\n\n    var rc = connectionProfile.recoveryConnections.find(function (rc) {\n      return rc.id === item.id;\n    });\n    return {\n      activeBefore: rc.activeBefore,\n      activeAfter: rc.activeAfter\n    };\n  };\n\n  var Loading = function Loading() {\n    return _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(Spinner, {\n        size: DEVICE_LARGE ? 48 : 42,\n        type: \"Wave\",\n        color: BLUE\n      })\n    });\n  };\n\n  var RecoveryConnectionList = function RecoveryConnectionList() {\n    return _jsx(FlatList, {\n      data: recoveryConnections,\n      style: styles.recoveryConnectionContainer,\n      contentContainerStyle: {\n        paddingBottom: '35%',\n        paddingTop: 20,\n        flexGrow: 1\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _jsx(RecoveryConnectionCard, _objectSpread(_objectSpread(_objectSpread({}, item), getActiveTime(item)), {}, {\n          index: index,\n          isModify: true\n        }));\n      },\n      ListEmptyComponent: _jsx(EmptyList, {})\n    });\n  };\n\n  return _jsxs(View, {\n    style: [styles.container, styles.shadow, {\n      marginTop: headerHeight\n    }],\n    testID: \"RecoveryConnectionsScreen\",\n    children: [recoveryConnections.length > 0 && _jsx(View, {\n      style: styles.titleContainer,\n      children: _jsx(Text, {\n        style: styles.title,\n        children: t('recoveryConnections.text.currentRecoveryConnections')\n      })\n    }), loading ? _jsx(Loading, {}) : _jsx(RecoveryConnectionList, {}), _jsx(View, {\n      style: styles.buttonContainer,\n      children: recoveryConnections.length === 0 ? _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('RecoveryConnectionsList');\n        },\n        style: styles.orangeButton,\n        children: _jsx(Text, {\n          style: styles.orangeButtonLabel,\n          children: t('recoveryConnections.text.addRecoveryConnections')\n        })\n      }) : _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('RecoveryConnectionsList');\n        },\n        style: styles.transparentBtn,\n        children: _jsx(Text, {\n          style: styles.transparentBtnText,\n          children: t('recoveryConnections.text.addMoreRecovery')\n        })\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: WHITE,\n    flex: 1,\n    width: '100%',\n    borderTopLeftRadius: DEVICE_LARGE ? 50 : 40\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '20%',\n    marginBottom: '5%'\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16]\n  },\n  recoveryConnectionContainer: {\n    flex: 1,\n    width: '100%'\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'center',\n    paddingTop: '8%',\n    paddingBottom: DEVICE_ANDROID ? '9%' : '11%',\n    backgroundColor: WHITE\n  },\n  transparentBtn: {\n    backgroundColor: WHITE,\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    width: '100%',\n    paddingLeft: '10%'\n  },\n  transparentBtnText: {\n    fontFamily: 'Poppins-Medium',\n    color: BLUE,\n    fontSize: fontSize[16]\n  },\n  orangeButton: {\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n    backgroundColor: ORANGE,\n    width: '85%'\n  },\n  orangeButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    color: WHITE,\n    fontSize: fontSize[15]\n  },\n  hollowButton: {\n    flex: 1,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n    borderWidth: 2,\n    borderColor: GREY,\n    backgroundColor: WHITE\n  },\n  hollowButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: GREY\n  },\n  emptyText: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: fontSize[18],\n    color: GREY,\n    marginVertical: 15\n  },\n  loadingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    paddingBottom: 20\n  }\n});\nexport default RecoveryConnectionsScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/RecoveryConnections/RecoveryConnectionsScreen.tsx"],"names":["EmptyList","t","useTranslation","flex","height","width","alignItems","justifyContent","paddingHorizontal","DEVICE_LARGE","styles","RecoveryConnectionsScreen","navigation","props","headerHeight","useHeaderHeight","DEVICE_IOS","me","useSelector","state","loading","setLoading","useState","recoveryConnections","setRecoveryConnections","connectionProfile","setConnectionProfile","myConnections","pendingOpsCount","api","useContext","useFocusEffect","useCallback","fetchData","console","profile","conn","rc","c","id","getActiveTime","activeBefore","activeAfter","item","Loading","RecoveryConnectionList","paddingBottom","paddingTop","flexGrow","index","marginTop","StyleSheet","container","backgroundColor","borderTopLeftRadius","shadow","shadowColor","shadowOpacity","shadowRadius","elevation","shadowOffset","titleContainer","marginBottom","title","fontFamily","fontSize","recoveryConnectionContainer","buttonContainer","position","zIndex","bottom","left","right","flexDirection","DEVICE_ANDROID","transparentBtn","paddingLeft","transparentBtnText","color","orangeButton","borderRadius","orangeButtonLabel","hollowButton","borderWidth","borderColor","hollowButtonLabel","emptyText","textAlign","fontWeight","marginVertical","loadingContainer"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n} from 'react-native';\n// Redux\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { selectPendingOperations } from '@/reducer/operationsSlice';\nimport { selectAllConnections } from '@/reducer/connectionsSlice';\nimport { useSelector } from '@/store';\nimport {\n  DEVICE_LARGE,\n  DEVICE_IOS,\n  DEVICE_ANDROID,\n} from '@/utils/deviceConstants';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { ORANGE, WHITE, BLUE, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\n\n// Import Components Local\nimport RecoveryConnectionCard from './RecoverConnectionsCard';\n\n// Create Custom Local Components\nconst EmptyList = () => {\n  const { t } = useTranslation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        height: '100%',\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingHorizontal: '10%',\n      }}\n    >\n      <MaterialCommunityIcons\n        size={DEVICE_LARGE ? 48 : 38}\n        name=\"alert-outline\"\n        color={GREY}\n      />\n      <Text style={styles.emptyText}>\n        {t('recoveryConnections.text.emptyList')}\n      </Text>\n    </View>\n  );\n};\n\nexport const RecoveryConnectionsScreen = (props) => {\n  const { navigation } = props;\n  let headerHeight = useHeaderHeight();\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n  const { t } = useTranslation();\n  const me = useSelector((state: State) => state.user);\n  const [loading, setLoading] = useState(true);\n  const [recoveryConnections, setRecoveryConnections] = useState<\n    Array<Connection>\n  >([]);\n  const [connectionProfile, setConnectionProfile] = useState<\n    ProfileInfo | undefined\n  >(undefined);\n  const myConnections = useSelector(selectAllConnections);\n  const pendingOpsCount = useSelector(selectPendingOperations).length;\n  const api = useContext(NodeApiContext);\n\n  useFocusEffect(\n    useCallback(() => {\n      const fetchData = async () => {\n        setLoading(true);\n        if (pendingOpsCount > 0) {\n          console.log('waiting for pending operations to apply');\n          return;\n        }\n        console.log(`fetching own recovery connections`);\n        const profile: ProfileInfo = await api.getProfile(me.id);\n        setConnectionProfile(profile);\n        const recoveryConnections = profile.recoveryConnections.map((rc) => {\n          const conn = myConnections.find((c) => rc.id === c.id);\n          return conn || { id: rc.id };\n        });\n        setRecoveryConnections(recoveryConnections);\n        setLoading(false);\n      };\n      fetchData();\n    }, [api, me.id, myConnections, pendingOpsCount]),\n  );\n\n  const getActiveTime = (item) => {\n    if (!connectionProfile) {\n      return { activeBefore: 0, activeAfter: 0 };\n    }\n    const rc = connectionProfile.recoveryConnections.find(\n      (rc) => rc.id === item.id,\n    );\n    return { activeBefore: rc.activeBefore, activeAfter: rc.activeAfter };\n  };\n\n  const Loading = () => (\n    <View style={styles.loadingContainer}>\n      <Spinner size={DEVICE_LARGE ? 48 : 42} type=\"Wave\" color={BLUE} />\n    </View>\n  );\n\n  const RecoveryConnectionList = () => (\n    <FlatList\n      data={recoveryConnections}\n      style={styles.recoveryConnectionContainer}\n      contentContainerStyle={{\n        paddingBottom: '35%',\n        paddingTop: 20,\n        flexGrow: 1,\n      }}\n      showsHorizontalScrollIndicator={false}\n      showsVerticalScrollIndicator={false}\n      renderItem={({ item, index }) => (\n        <RecoveryConnectionCard\n          {...item}\n          {...getActiveTime(item)}\n          index={index}\n          isModify={true}\n        />\n      )}\n      ListEmptyComponent={<EmptyList />}\n    />\n  );\n\n  return (\n    <View\n      style={[styles.container, styles.shadow, { marginTop: headerHeight }]}\n      testID=\"RecoveryConnectionsScreen\"\n    >\n      {recoveryConnections.length > 0 && (\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>\n            {t('recoveryConnections.text.currentRecoveryConnections')}\n          </Text>\n        </View>\n      )}\n      {loading ? <Loading /> : <RecoveryConnectionList />}\n\n      <View style={styles.buttonContainer}>\n        {recoveryConnections.length === 0 ? (\n          <TouchableOpacity\n            onPress={() => navigation.navigate('RecoveryConnectionsList')}\n            style={styles.orangeButton}\n          >\n            <Text style={styles.orangeButtonLabel}>\n              {t('recoveryConnections.text.addRecoveryConnections')}\n            </Text>\n          </TouchableOpacity>\n        ) : (\n          <TouchableOpacity\n            onPress={() => navigation.navigate('RecoveryConnectionsList')}\n            style={styles.transparentBtn}\n          >\n            <Text style={styles.transparentBtnText}>\n              {t('recoveryConnections.text.addMoreRecovery')}\n            </Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: WHITE,\n    flex: 1,\n    width: '100%',\n    borderTopLeftRadius: DEVICE_LARGE ? 50 : 40,\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    // flex: 1,\n    marginTop: '20%',\n    marginBottom: '5%',\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n  },\n  recoveryConnectionContainer: {\n    flex: 1,\n    // flexGrow: 1,\n    width: '100%',\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'center',\n    paddingTop: '8%',\n    paddingBottom: DEVICE_ANDROID ? '9%' : '11%',\n    backgroundColor: WHITE,\n  },\n  transparentBtn: {\n    backgroundColor: WHITE,\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    width: '100%',\n    paddingLeft: '10%',\n  },\n  transparentBtnText: {\n    fontFamily: 'Poppins-Medium',\n    color: BLUE,\n    fontSize: fontSize[16],\n  },\n  orangeButton: {\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n    backgroundColor: ORANGE,\n    width: '85%',\n  },\n  orangeButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    color: WHITE,\n    fontSize: fontSize[15],\n  },\n  hollowButton: {\n    flex: 1,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n    borderWidth: 2,\n    borderColor: GREY,\n    backgroundColor: WHITE,\n  },\n  hollowButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: GREY,\n  },\n  emptyText: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: fontSize[18],\n    color: GREY,\n    marginVertical: 15,\n  },\n  loadingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    paddingBottom: 20,\n  },\n});\n\nexport default RecoveryConnectionsScreen;\n"]},"metadata":{},"sourceType":"module"}