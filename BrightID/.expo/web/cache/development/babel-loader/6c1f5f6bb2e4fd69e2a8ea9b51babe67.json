{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedCond = createAnimatedCond;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _AnimatedBlock = require(\"../core/AnimatedBlock\");\n\nvar _val = require(\"../val\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AnimatedCond = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedCond, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCond);\n\n  function AnimatedCond(condition, ifBlock, elseBlock) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedCond);\n    (0, _invariant.default)(condition instanceof _AnimatedNode2.default, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \".concat(condition));\n    (0, _invariant.default)(ifBlock instanceof _AnimatedNode2.default, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \".concat(ifBlock));\n    (0, _invariant.default)(elseBlock instanceof _AnimatedNode2.default || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \".concat(elseBlock));\n    _this = _super.call(this, {\n      type: 'cond',\n      cond: condition,\n      ifBlock: ifBlock,\n      elseBlock: elseBlock\n    }, [condition, ifBlock, elseBlock]);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_condition\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_ifBlock\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_elseBlock\", void 0);\n\n    _this._condition = condition;\n    _this._ifBlock = ifBlock;\n    _this._elseBlock = elseBlock;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedCond, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCond, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if ((0, _val.val)(this._condition)) {\n        return (0, _val.val)(this._ifBlock);\n      } else {\n        return this._elseBlock !== undefined ? (0, _val.val)(this._elseBlock) : undefined;\n      }\n    }\n  }]);\n  return AnimatedCond;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond((0, _AnimatedBlock.adapt)(cond), (0, _AnimatedBlock.adapt)(ifBlock), elseBlock === undefined ? undefined : (0, _AnimatedBlock.adapt)(elseBlock));\n}","map":{"version":3,"sources":["AnimatedCond.js"],"names":["constructor","invariant","condition","ifBlock","elseBlock","type","cond","toString","__onEvaluate","val","adapt"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;IAEA,Y;;;;;EAKEA,sBAAW,SAAXA,EAAW,OAAXA,EAAW,SAAXA,EAA2C;IAAA;;IAAA;IACzCC,IAAAA,kBAAAA,EACEC,SAAS,YADF,sBAATD,EAAS,wFAAA,MAAA,CAATA,SAAS,CAATA;IAIAA,IAAAA,kBAAAA,EACEE,OAAO,YADA,sBAATF,EAAS,yFAAA,MAAA,CAATA,OAAS,CAATA;IAIAA,IAAAA,kBAAAA,EACEG,SAAS,YAATA,sBAAAA,IAAqCA,SAAS,KADvC,SAATH,EAAS,+GAAA,MAAA,CAATA,SAAS,CAATA;IAIA,0BACE;MACEI,IAAI,EADN,MAAA;MAEEC,IAAI,EAFN,SAAA;MAGEH,OAHF,EAGEA,OAHF;MAIEC,SAAAA,EAAAA;IAJF,CADF,EAOE,CAAA,SAAA,EAAA,OAAA,EAPF,SAOE,CAPF;;IAbyC,eAAA,8CAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,8CAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,8CAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;IAsBzC,MAAA,UAAA,GAAA,SAAA;IACA,MAAA,QAAA,GAAA,OAAA;IACA,MAAA,UAAA,GAAA,SAAA;IAxByC;EAyB1C;;;;WAEDG,oBAAW;MACT,OAAA,qBAAA,MAAA,CAA4B,KAA5B,QAAA,CAAA;IACD;;;WAEDC,wBAAe;MACb,IAAIC,IAAAA,QAAAA,EAAI,KAAR,UAAIA,CAAJ,EAA0B;QACxB,OAAOA,IAAAA,QAAAA,EAAI,KAAX,QAAOA,CAAP;MADF,CAAA,MAEO;QACL,OAAO,KAAA,UAAA,KAAA,SAAA,GAAgCA,IAAAA,QAAAA,EAAI,KAApC,UAAgCA,CAAhC,GAAP,SAAA;MACD;IACF;;;EA1CH,sB;;AA6CO,SAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAsD;EAC3D,OAAO,IAAA,YAAA,CACLC,IAAAA,oBAAAA,EADK,IACLA,CADK,EAELA,IAAAA,oBAAAA,EAFK,OAELA,CAFK,EAGLN,SAAS,KAATA,SAAAA,GAAAA,SAAAA,GAAsCM,IAAAA,oBAAAA,EAHxC,SAGwCA,CAHjC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"script"}