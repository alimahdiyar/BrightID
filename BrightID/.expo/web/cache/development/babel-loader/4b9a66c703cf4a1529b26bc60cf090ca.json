{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\nimport { RESET_STORE } from \"../actions/resetStore\";\nimport { LOCAL_OPERATION_KEEP_THRESHOLD, operation_states } from \"../utils/constants\";\nvar operationsAdapter = createEntityAdapter({\n  selectId: function selectId(op) {\n    return op.hash;\n  }\n});\nvar operationsSlice = createSlice({\n  name: 'operations',\n  initialState: operationsAdapter.getInitialState(),\n  reducers: {\n    addOperation: {\n      reducer: operationsAdapter.addOne,\n      prepare: function prepare(operation) {\n        return {\n          payload: _objectSpread(_objectSpread({}, operation), {}, {\n            state: operation_states.UNKNOWN\n          })\n        };\n      }\n    },\n    removeOperation: operationsAdapter.removeOne,\n    resetOperations: operationsAdapter.removeAll,\n    updateOperation: operationsAdapter.updateOne,\n    removeManyOperations: operationsAdapter.removeMany\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, operationsAdapter.removeAll)\n});\nvar _operationsSlice$acti = operationsSlice.actions,\n    addOperation = _operationsSlice$acti.addOperation,\n    updateOperation = _operationsSlice$acti.updateOperation,\n    removeManyOperations = _operationsSlice$acti.removeManyOperations;\nexport { addOperation, updateOperation, removeManyOperations };\n\nvar _operationsAdapter$ge = operationsAdapter.getSelectors(function (state) {\n  return state.operations;\n}),\n    selectOperationByHash = _operationsAdapter$ge.selectById,\n    selectAllOperations = _operationsAdapter$ge.selectAll,\n    selectOperationsTotal = _operationsAdapter$ge.selectTotal;\n\nexport { selectOperationByHash, selectAllOperations, selectOperationsTotal };\nvar pendingStates = [operation_states.UNKNOWN, operation_states.INIT, operation_states.SENT];\nexport var selectPendingOperations = createSelector(selectAllOperations, function (operations) {\n  return operations.filter(function (op) {\n    return pendingStates.includes(op.state);\n  });\n});\nvar outdatedStates = [operation_states.APPLIED, operation_states.FAILED, operation_states.EXPIRED];\nexport var selectOutdatedOperations = createSelector(selectAllOperations, function (operations) {\n  var now = Date.now();\n  return operations.filter(function (op) {\n    var timestamp = op.postTimestamp || op.timestamp;\n    return outdatedStates.includes(op.state) && now - timestamp > LOCAL_OPERATION_KEEP_THRESHOLD;\n  }).map(function (op) {\n    return op.hash;\n  });\n});\nexport var scrubOps = function scrubOps() {\n  return function (dispatch, getState) {\n    var removeOpIds = selectOutdatedOperations(getState());\n    console.log(\"Scrubbing \" + removeOpIds.length + \" outdated operations: \" + removeOpIds);\n    dispatch(removeManyOperations(removeOpIds));\n  };\n};\nexport default operationsSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/operationsSlice.ts"],"names":["operationsAdapter","createEntityAdapter","selectId","op","operationsSlice","createSlice","name","initialState","reducers","addOperation","reducer","prepare","payload","state","operation_states","removeOperation","resetOperations","updateOperation","removeManyOperations","extraReducers","selectOperationByHash","selectAllOperations","selectOperationsTotal","pendingStates","selectPendingOperations","createSelector","operations","outdatedStates","selectOutdatedOperations","now","Date","timestamp","scrubOps","removeOpIds","getState","console","dispatch"],"mappings":"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","sourcesContent":["import {\n  createSlice,\n  createEntityAdapter,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\nimport {\n  LOCAL_OPERATION_KEEP_THRESHOLD,\n  operation_states,\n} from '@/utils/constants';\n\nexport type Operation = SubmittedOp & {\n  state: typeof operation_states[keyof typeof operation_states];\n};\n\nconst operationsAdapter = createEntityAdapter<Operation>({\n  selectId: (op) => op.hash,\n});\n\nconst operationsSlice = createSlice({\n  name: 'operations',\n  initialState: operationsAdapter.getInitialState(),\n  reducers: {\n    addOperation: {\n      reducer: operationsAdapter.addOne,\n      prepare: (operation: SubmittedOp) => {\n        return {\n          payload: {\n            ...operation,\n            state: operation_states.UNKNOWN,\n          },\n        };\n      },\n    },\n    removeOperation: operationsAdapter.removeOne,\n    resetOperations: operationsAdapter.removeAll,\n    updateOperation: operationsAdapter.updateOne,\n    removeManyOperations: operationsAdapter.removeMany,\n  },\n  extraReducers: {\n    [RESET_STORE]: operationsAdapter.removeAll,\n  },\n});\n\n// Export actions\nexport const {\n  addOperation,\n  updateOperation,\n  // removeOperation,\n  // resetOperations,\n  removeManyOperations,\n} = operationsSlice.actions;\n\n// export selectors\nexport const {\n  selectById: selectOperationByHash,\n  selectAll: selectAllOperations,\n  selectTotal: selectOperationsTotal,\n} = operationsAdapter.getSelectors((state: State) => state.operations);\n\nconst pendingStates = [\n  operation_states.UNKNOWN,\n  operation_states.INIT,\n  operation_states.SENT,\n];\n\nexport const selectPendingOperations = createSelector(\n  selectAllOperations,\n  (operations) => operations.filter((op) => pendingStates.includes(op.state)),\n);\n\nconst outdatedStates = [\n  operation_states.APPLIED,\n  operation_states.FAILED,\n  operation_states.EXPIRED,\n];\n\n/* Return IDs of operation entries that are outdated and can be removed from state */\nexport const selectOutdatedOperations = createSelector(\n  selectAllOperations,\n  (operations) => {\n    const now = Date.now();\n    return operations\n      .filter((op) => {\n        // prefer postTimestamp for calculation but use timestamp as fallback solution\n        const timestamp = op.postTimestamp || op.timestamp;\n        return (\n          outdatedStates.includes(op.state) &&\n          now - timestamp > LOCAL_OPERATION_KEEP_THRESHOLD\n        );\n      })\n      .map((op) => op.hash);\n  },\n);\n\nexport const scrubOps = () => (dispatch: dispatch, getState: getState) => {\n  const removeOpIds = selectOutdatedOperations(getState());\n  console.log(\n    `Scrubbing ${removeOpIds.length} outdated operations: ${removeOpIds}`,\n  );\n  dispatch(removeManyOperations(removeOpIds));\n};\n\n// Export reducer\nexport default operationsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}