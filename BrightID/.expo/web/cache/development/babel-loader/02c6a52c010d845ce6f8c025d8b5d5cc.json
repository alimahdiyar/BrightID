{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useState, useEffect, useContext } from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useFocusEffect, useRoute, useNavigation } from '@react-navigation/native';\nimport { Trans, useTranslation } from 'react-i18next';\nimport BarcodeMask from 'react-native-barcode-mask';\nimport Spinner from 'react-native-spinkit';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport i18next from 'i18next';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { ORANGE, WHITE, LIGHT_BLACK, GREY } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { channel_types, closeChannel } from \"./channelSlice\";\nimport { selectAllUnconfirmedConnectionsByChannelIds } from \"./pendingConnectionSlice\";\nimport { parseChannelQrURL } from \"../../utils/channels\";\nimport { joinChannel } from \"./actions/channelThunks\";\nimport { setActiveNotification } from \"../../actions\";\nimport { hash } from \"../../utils/encoding\";\nimport { qrCodeURL_types } from \"../../utils/constants\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { RNCamera } from \"./RNCameraProvider\";\nimport { setRecoveryAesKey, setRecoveryChannel } from \"../Onboarding/RecoveryFlow/recoveryDataSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction validQrString(qrString) {\n  return qrString.length >= 42;\n}\n\nvar NotAuthorizedView = function NotAuthorizedView() {\n  return _jsx(View, {\n    style: styles.cameraPreview,\n    children: _jsx(Text, {\n      style: {\n        fontFamily: 'Poppins-Medium',\n        color: GREY\n      },\n      children: \"Camera not Authorized\"\n    })\n  });\n};\n\nexport var ScanCodeScreen = function ScanCodeScreen() {\n  var route = useRoute();\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      channel = _useState2[0],\n      setChannel = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrData = _useState4[0],\n      setQrData = _useState4[1];\n\n  var name = useSelector(function (state) {\n    return state.user.name;\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n  var pendingConnectionSizeForChannel = useSelector(function (state) {\n    if (channel) {\n      return selectAllUnconfirmedConnectionsByChannelIds(state, [channel.id]).length;\n    } else {\n      return 0;\n    }\n  });\n  useFocusEffect(useCallback(function () {\n    setQrData(undefined);\n    setChannel(null);\n    dispatch(setActiveNotification(null));\n  }, [dispatch]));\n  useEffect(function () {\n    if (channel && pendingConnectionSizeForChannel > 0 && navigation.isFocused()) {\n      switch (channel.type) {\n        case channel_types.SINGLE:\n        case channel_types.STAR:\n          navigation.navigate('PendingConnections');\n          dispatch(closeChannel({\n            channelId: channel.id,\n            background: true\n          }));\n          break;\n\n        case channel_types.GROUP:\n          navigation.navigate('GroupConnection', {\n            channel: channel\n          });\n          break;\n      }\n    }\n  }, [channel, pendingConnectionSizeForChannel, navigation, dispatch]);\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.qrcode) {\n      console.log(\"Got qrcode \" + route.params.qrcode + \" from Deeplink\");\n      setQrData(decodeURIComponent(route.params.qrcode));\n    }\n  }, [route.params, setQrData]);\n  useEffect(function () {\n    var handleQrData = function _callee(qrData) {\n      var channelURL, urlType, aesKey, channelId, _channel;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!qrData.startsWith('brightid://')) {\n                _context.next = 7;\n                break;\n              }\n\n              console.log(\"handleQrData: calling Linking.openURL() with \" + qrData);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Linking.openURL(qrData));\n\n            case 5:\n              _context.next = 33;\n              break;\n\n            case 7:\n              if (!validQrString(qrData)) {\n                _context.next = 32;\n                break;\n              }\n\n              channelURL = new URL(qrData);\n              urlType = channelURL.searchParams.get('t');\n              if (urlType) channelURL.searchParams.delete('t');\n              _context.t0 = urlType;\n              _context.next = _context.t0 === qrCodeURL_types.RECOVERY ? 14 : _context.t0 === qrCodeURL_types.SYNC ? 14 : _context.t0 === qrCodeURL_types.IMPORT ? 14 : _context.t0 === qrCodeURL_types.CONNECTION ? 22 : 22;\n              break;\n\n            case 14:\n              aesKey = channelURL.searchParams.get('aes');\n              channelURL.searchParams.delete('aes');\n              channelId = hash(aesKey);\n              console.log(\"handleQrData: Got type \" + urlType + \" recovery channel \" + channelId + \" at \" + channelURL.href);\n              dispatch(setRecoveryAesKey(aesKey));\n              dispatch(setRecoveryChannel({\n                channelId: channelId,\n                url: channelURL\n              }));\n\n              if (urlType === qrCodeURL_types.RECOVERY) {\n                navigation.navigate('RecoveringConnection');\n              } else if (urlType === qrCodeURL_types.SYNC) {\n                navigation.navigate('Devices', {\n                  syncing: true,\n                  asScanner: true\n                });\n              } else if (urlType === qrCodeURL_types.IMPORT) {\n                navigation.navigate('Add Device');\n              }\n\n              return _context.abrupt(\"break\", 30);\n\n            case 22:\n              console.log(\"handleQrData: Got connection channel at \" + channelURL.href);\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(parseChannelQrURL(channelURL));\n\n            case 25:\n              _channel = _context.sent;\n              setChannel(_channel);\n              _context.next = 29;\n              return _regeneratorRuntime.awrap(dispatch(joinChannel(_channel, api)));\n\n            case 29:\n              return _context.abrupt(\"break\", 30);\n\n            case 30:\n              _context.next = 33;\n              break;\n\n            case 32:\n              throw Error(\"Can not parse QRData \" + qrData);\n\n            case 33:\n              _context.next = 40;\n              break;\n\n            case 35:\n              _context.prev = 35;\n              _context.t1 = _context[\"catch\"](0);\n              console.log(_context.t1.message);\n              Alert.alert(i18next.t('common.alert.error'), i18next.t('pendingConnection.alert.text.errorJoinChannel', {\n                message: \"\" + _context.t1.message\n              }));\n              setQrData(undefined);\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 35]], Promise);\n    };\n\n    if (qrData) {\n      handleQrData(qrData);\n    }\n  }, [api, dispatch, navigation, qrData]);\n\n  var handleBarCodeRead = function handleBarCodeRead(_ref) {\n    var data = _ref.data;\n    console.log(\"Scanned QRCode: \" + data);\n    setQrData(data);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [!qrData ? _jsxs(_Fragment, {\n        children: [_jsx(View, {\n          style: styles.infoTopContainer,\n          children: _jsx(Trans, {\n            i18nKey: \"qrcode.text.scanCode\",\n            components: {\n              text: _jsx(Text, {\n                style: styles.infoTopText\n              })\n            },\n            values: {\n              name: name\n            }\n          })\n        }), _jsx(View, {\n          style: styles.cameraContainer,\n          testID: \"CameraContainer\",\n          children: _jsx(RNCamera, {\n            style: styles.cameraPreview,\n            captureAudio: false,\n            onBarCodeRead: handleBarCodeRead,\n            barCodeTypes: [RNCamera.Constants.BarCodeType.qr],\n            type: RNCamera.Constants.Type.back,\n            flashMode: RNCamera.Constants.FlashMode.off,\n            androidCameraPermissionOptions: {\n              title: t('common.camera.title'),\n              message: t('common.camera.message'),\n              buttonPositive: t('common.camera.ok'),\n              buttonNegative: t('common.camera.cancel')\n            },\n            notAuthorizedView: _jsx(NotAuthorizedView, {}),\n            children: _jsx(BarcodeMask, {\n              edgeColor: ORANGE,\n              animatedLineColor: ORANGE,\n              width: DEVICE_LARGE ? 230 : 190,\n              height: DEVICE_LARGE ? 230 : 190,\n              edgeRadius: 5,\n              edgeBorderWidth: DEVICE_LARGE ? 3 : 2,\n              edgeHeight: DEVICE_LARGE ? 30 : 25,\n              edgeWidth: DEVICE_LARGE ? 30 : 25\n            })\n          })\n        })]\n      }) : _jsx(View, {\n        style: styles.cameraContainer,\n        testID: \"CameraContainer\",\n        children: _jsxs(View, {\n          style: styles.downloadingDataContainer,\n          children: [_jsx(Text, {\n            style: styles.waitingText,\n            children: t('qrcode.text.downloadingConnectionData')\n          }), _jsx(Spinner, {\n            isVisible: true,\n            size: DEVICE_LARGE ? 65 : 52,\n            type: \"ThreeBounce\",\n            color: ORANGE\n          })]\n        })\n      }), _jsx(View, {\n        style: styles.bottomContainer,\n        children: pendingConnectionSizeForChannel < 1 ? _jsxs(_Fragment, {\n          children: [_jsx(Text, {\n            style: styles.infoBottomText,\n            children: t('qrcode.text.canAlso')\n          }), _jsxs(TouchableOpacity, {\n            testID: \"ScanCodeToMyCodeBtn\",\n            style: styles.showQrButton,\n            onPress: function onPress() {\n              navigation.navigate('MyCode');\n            },\n            children: [_jsx(Material, {\n              name: \"qrcode\",\n              size: DEVICE_LARGE ? 22 : 20,\n              color: WHITE\n            }), _jsx(Text, {\n              style: styles.showQrText,\n              children: t('qrcode.button.showCode')\n            })]\n          })]\n        }) : _jsxs(_Fragment, {\n          children: [_jsx(Text, {\n            style: styles.infoBottomText,\n            children: t('qrcode.text.pendingConnections', {\n              count: pendingConnectionSizeForChannel\n            })\n          }), _jsxs(TouchableOpacity, {\n            testID: \"ScanCodeToPendingConnectionsBtn\",\n            style: styles.verifyConnectionsButton,\n            onPress: function onPress() {\n              navigation.navigate('PendingConnections');\n            },\n            children: [_jsx(Material, {\n              name: \"account-multiple-plus-outline\",\n              size: DEVICE_LARGE ? 32 : 26,\n              color: ORANGE\n            }), _jsx(Text, {\n              style: styles.verifyConnectionsText,\n              children: t('qrcode.text.confirmConnections')\n            })]\n          })]\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    zIndex: 10,\n    marginTop: -58\n  },\n  infoTopContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    flexGrow: 0.6,\n    paddingTop: DEVICE_LARGE ? 40 : 25\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK\n  },\n  cameraContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%'\n  },\n  cameraPreview: {\n    flex: 0,\n    overflow: 'hidden',\n    width: DEVICE_LARGE ? 280 : 230,\n    height: DEVICE_LARGE ? 280 : 230,\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10\n  },\n  showQrButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10\n  },\n  showQrText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10\n  },\n  cameraIcon: {\n    marginTop: 2,\n    marginRight: 4\n  },\n  verifyConnectionsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: WHITE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 36,\n    borderWidth: 2,\n    borderColor: ORANGE\n  },\n  verifyConnectionsText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n    marginLeft: 10\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100\n  },\n  waitingText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK\n  },\n  downloadingDataContainer: {\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default ScanCodeScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/ScanCodeScreen.tsx"],"names":["qrString","NotAuthorizedView","styles","fontFamily","color","ScanCodeScreen","route","useRoute","navigation","useNavigation","dispatch","useDispatch","channel","setChannel","useState","qrData","setQrData","name","useSelector","state","t","useTranslation","api","useContext","pendingConnectionSizeForChannel","selectAllUnconfirmedConnectionsByChannelIds","useFocusEffect","useCallback","setActiveNotification","useEffect","channel_types","closeChannel","channelId","background","console","decodeURIComponent","handleQrData","Linking","validQrString","channelURL","urlType","qrCodeURL_types","aesKey","hash","setRecoveryAesKey","setRecoveryChannel","url","syncing","asScanner","parseChannelQrURL","joinChannel","Error","Alert","i18next","message","handleBarCodeRead","data","text","RNCamera","title","buttonPositive","buttonNegative","DEVICE_LARGE","count","StyleSheet","orangeTop","backgroundColor","height","width","zIndex","container","flex","alignItems","justifyContent","flexDirection","borderTopLeftRadius","borderTopRightRadius","marginTop","infoTopContainer","flexGrow","paddingTop","infoTopText","fontSize","textAlign","cameraContainer","cameraPreview","overflow","aspectRatio","infoBottomText","marginBottom","showQrButton","borderRadius","showQrText","marginLeft","cameraIcon","marginRight","verifyConnectionsButton","borderWidth","borderColor","verifyConnectionsText","bottomContainer","minHeight","waitingText","downloadingDataContainer"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useContext } from 'react';\nimport {\n  Linking,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  StatusBar,\n  Alert,\n} from 'react-native';\nimport {\n  useFocusEffect,\n  useRoute,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Trans, useTranslation } from 'react-i18next';\nimport BarcodeMask from 'react-native-barcode-mask';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport i18next from 'i18next';\nimport { BarCodeReadEvent } from 'react-native-camera';\nimport { useDispatch, useSelector } from '@/store';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { ORANGE, WHITE, LIGHT_BLACK, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  channel_types,\n  closeChannel,\n} from '@/components/PendingConnections/channelSlice';\nimport { selectAllUnconfirmedConnectionsByChannelIds } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { parseChannelQrURL } from '@/utils/channels';\nimport { joinChannel } from '@/components/PendingConnections/actions/channelThunks';\nimport { setActiveNotification } from '@/actions';\nimport { hash } from '@/utils/encoding';\nimport { qrCodeURL_types } from '@/utils/constants';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { RNCamera } from './RNCameraProvider';\nimport {\n  setRecoveryAesKey,\n  setRecoveryChannel,\n} from '@/components/Onboarding/RecoveryFlow/recoveryDataSlice';\n\n/**\n * Returns whether the string is a valid QR identifier\n * @param {*} qrString\n */\nfunction validQrString(qrString: string) {\n  return qrString.length >= 42;\n}\n\n/**\n * Scan code screen of BrightID\n * ==================================================================\n * displays a react-native-camera view\n * after scanning qrcode - the rtc id is set\n *\n */\nconst NotAuthorizedView = () => (\n  <View style={styles.cameraPreview}>\n    <Text style={{ fontFamily: 'Poppins-Medium', color: GREY }}>\n      Camera not Authorized\n    </Text>\n  </View>\n);\n\nexport const ScanCodeScreen = () => {\n  const route: { params?: { qrcode: string } } = useRoute() as {\n    params?: { qrcode: string };\n  };\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const [channel, setChannel] = useState(null);\n  const [qrData, setQrData] = useState(undefined);\n  const name = useSelector((state: State) => state.user.name);\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const pendingConnectionSizeForChannel = useSelector((state: State) => {\n    if (channel) {\n      return selectAllUnconfirmedConnectionsByChannelIds(state, [channel.id])\n        .length;\n    } else {\n      return 0;\n    }\n  });\n\n  // always show scanner when navigating to this page\n  useFocusEffect(\n    useCallback(() => {\n      setQrData(undefined);\n      setChannel(null);\n      dispatch(setActiveNotification(null));\n    }, [dispatch]),\n  );\n\n  // navigate to next page if channel has pending connections\n  useEffect(() => {\n    if (\n      channel &&\n      pendingConnectionSizeForChannel > 0 &&\n      navigation.isFocused()\n    ) {\n      switch (channel.type) {\n        case channel_types.SINGLE:\n        case channel_types.STAR:\n          // only one peer connection expected\n          navigation.navigate('PendingConnections');\n          // close single channels to prevent navigation loop\n          dispatch(closeChannel({ channelId: channel.id, background: true }));\n          break;\n        case channel_types.GROUP:\n          // Expect multiple peers, so show group connection screen\n          navigation.navigate('GroupConnection', { channel });\n          break;\n      }\n    }\n  }, [channel, pendingConnectionSizeForChannel, navigation, dispatch]);\n\n  // handle deep links\n  useEffect(() => {\n    if (route.params?.qrcode) {\n      console.log(`Got qrcode ${route.params.qrcode} from Deeplink`);\n      setQrData(decodeURIComponent(route.params.qrcode));\n    }\n  }, [route.params, setQrData]);\n\n  // handle qrcode data\n  useEffect(() => {\n    const handleQrData = async (qrData) => {\n      try {\n        if (qrData.startsWith('brightid://')) {\n          console.log(`handleQrData: calling Linking.openURL() with ${qrData}`);\n          await Linking.openURL(qrData);\n        } else if (validQrString(qrData)) {\n          const channelURL = new URL(qrData);\n          // Pop 'type' parameter from url if it is included\n          const urlType = channelURL.searchParams.get('t');\n          if (urlType) channelURL.searchParams.delete('t');\n\n          switch (urlType) {\n            case qrCodeURL_types.RECOVERY:\n            case qrCodeURL_types.SYNC:\n            case qrCodeURL_types.IMPORT: {\n              // Pop 'aes' parameter from url\n              const aesKey = channelURL.searchParams.get('aes');\n              channelURL.searchParams.delete('aes');\n\n              const channelId = hash(aesKey);\n              console.log(\n                `handleQrData: Got type ${urlType} recovery channel ${channelId} at ${channelURL.href}`,\n              );\n\n              dispatch(setRecoveryAesKey(aesKey));\n              dispatch(\n                setRecoveryChannel({\n                  channelId,\n                  url: channelURL,\n                }),\n              );\n              if (urlType === qrCodeURL_types.RECOVERY) {\n                navigation.navigate('RecoveringConnection');\n              } else if (urlType === qrCodeURL_types.SYNC) {\n                navigation.navigate('Devices', {\n                  syncing: true,\n                  asScanner: true,\n                });\n              } else if (urlType === qrCodeURL_types.IMPORT) {\n                navigation.navigate('Add Device');\n              }\n              break;\n            }\n            case qrCodeURL_types.CONNECTION:\n            default: {\n              // Currently assuming qrcodes without type parameter are connection channels created by previous app\n              // versions. Change this in one of the next releases:\n              // -> Add type parameter 't' to connection channel qrcode\n              // -> Throw an error if no/unknown type is found in qrcode\n              console.log(\n                `handleQrData: Got connection channel at ${channelURL.href}`,\n              );\n              const channel = await parseChannelQrURL(channelURL);\n              setChannel(channel);\n              await dispatch(joinChannel(channel, api));\n              break;\n            }\n          }\n        } else {\n          throw Error(`Can not parse QRData ${qrData}`);\n        }\n      } catch (err) {\n        console.log(err.message);\n        Alert.alert(\n          i18next.t('common.alert.error'),\n          i18next.t('pendingConnection.alert.text.errorJoinChannel', {\n            message: `${err.message}`,\n          }),\n        );\n        setQrData(undefined);\n      }\n    };\n    if (qrData) {\n      handleQrData(qrData);\n    }\n  }, [api, dispatch, navigation, qrData]);\n\n  const handleBarCodeRead = ({ data }: BarCodeReadEvent) => {\n    console.log(`Scanned QRCode: ${data}`);\n    setQrData(data);\n  };\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        {!qrData ? (\n          <>\n            <View style={styles.infoTopContainer}>\n              <Trans\n                i18nKey=\"qrcode.text.scanCode\"\n                components={{ text: <Text style={styles.infoTopText} /> }}\n                values={{ name }}\n              />\n            </View>\n            <View style={styles.cameraContainer} testID=\"CameraContainer\">\n              <RNCamera\n                style={styles.cameraPreview}\n                captureAudio={false}\n                onBarCodeRead={handleBarCodeRead}\n                barCodeTypes={[RNCamera.Constants.BarCodeType.qr]}\n                type={RNCamera.Constants.Type.back}\n                flashMode={RNCamera.Constants.FlashMode.off}\n                androidCameraPermissionOptions={{\n                  title: t('common.camera.title'),\n                  message: t('common.camera.message'),\n                  buttonPositive: t('common.camera.ok'),\n                  buttonNegative: t('common.camera.cancel'),\n                }}\n                notAuthorizedView={<NotAuthorizedView />}\n              >\n                <BarcodeMask\n                  edgeColor={ORANGE}\n                  animatedLineColor={ORANGE}\n                  width={DEVICE_LARGE ? 230 : 190}\n                  height={DEVICE_LARGE ? 230 : 190}\n                  edgeRadius={5}\n                  edgeBorderWidth={DEVICE_LARGE ? 3 : 2}\n                  edgeHeight={DEVICE_LARGE ? 30 : 25}\n                  edgeWidth={DEVICE_LARGE ? 30 : 25}\n                />\n              </RNCamera>\n            </View>\n          </>\n        ) : (\n          <View style={styles.cameraContainer} testID=\"CameraContainer\">\n            <View style={styles.downloadingDataContainer}>\n              <Text style={styles.waitingText}>\n                {t('qrcode.text.downloadingConnectionData')}\n              </Text>\n              <Spinner\n                isVisible={true}\n                size={DEVICE_LARGE ? 65 : 52}\n                type=\"ThreeBounce\"\n                color={ORANGE}\n              />\n            </View>\n          </View>\n        )}\n\n        <View style={styles.bottomContainer}>\n          {pendingConnectionSizeForChannel < 1 ? (\n            <>\n              <Text style={styles.infoBottomText}>\n                {t('qrcode.text.canAlso')}\n              </Text>\n              <TouchableOpacity\n                testID=\"ScanCodeToMyCodeBtn\"\n                style={styles.showQrButton}\n                onPress={() => {\n                  navigation.navigate('MyCode');\n                }}\n              >\n                <Material\n                  name=\"qrcode\"\n                  size={DEVICE_LARGE ? 22 : 20}\n                  color={WHITE}\n                />\n\n                <Text style={styles.showQrText}>\n                  {t('qrcode.button.showCode')}\n                </Text>\n              </TouchableOpacity>\n            </>\n          ) : (\n            <>\n              <Text style={styles.infoBottomText}>\n                {t('qrcode.text.pendingConnections', {\n                  count: pendingConnectionSizeForChannel,\n                })}\n              </Text>\n              <TouchableOpacity\n                testID=\"ScanCodeToPendingConnectionsBtn\"\n                style={styles.verifyConnectionsButton}\n                onPress={() => {\n                  navigation.navigate('PendingConnections');\n                }}\n              >\n                <Material\n                  name=\"account-multiple-plus-outline\"\n                  size={DEVICE_LARGE ? 32 : 26}\n                  color={ORANGE}\n                />\n                <Text style={styles.verifyConnectionsText}>\n                  {t('qrcode.text.confirmConnections')}\n                </Text>\n              </TouchableOpacity>\n            </>\n          )}\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    zIndex: 10,\n    marginTop: -58,\n  },\n  infoTopContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    flexGrow: 0.6,\n    paddingTop: DEVICE_LARGE ? 40 : 25,\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  cameraContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n  },\n  cameraPreview: {\n    flex: 0,\n    overflow: 'hidden',\n    width: DEVICE_LARGE ? 280 : 230,\n    height: DEVICE_LARGE ? 280 : 230,\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10,\n  },\n  showQrButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10,\n  },\n  showQrText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10,\n  },\n  cameraIcon: {\n    marginTop: 2,\n    marginRight: 4,\n  },\n  verifyConnectionsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: WHITE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 36,\n    borderWidth: 2,\n    borderColor: ORANGE,\n  },\n  verifyConnectionsText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n    marginLeft: 10,\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100,\n  },\n  waitingText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  downloadingDataContainer: {\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default ScanCodeScreen;\n"]},"metadata":{},"sourceType":"module"}