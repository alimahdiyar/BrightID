{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.PendingConnectionsScreen = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _lodash = require(\"lodash\");\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _reactNativeSpinkit = _interopRequireDefault(require(\"react-native-spinkit\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _viewpager = _interopRequireDefault(require(\"@react-native-community/viewpager\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _store = require(\"../../store\");\n\nvar _pendingConnectionSlice = require(\"./pendingConnectionSlice\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _actions = require(\"../../actions\");\n\nvar _PreviewConnectionController = require(\"./PreviewConnectionController\");\n\nvar _BackArrow = _interopRequireDefault(require(\"../Icons/BackArrow\"));\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PendingConnectionsScreen.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar REFRESH_VIEWPAGER_TIMEOUT = 1000;\n\nvar PendingConnectionsScreen = function PendingConnectionsScreen() {\n  var navigation = (0, _native.useNavigation)();\n  var dispatch = (0, _store.useDispatch)();\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var viewPagerRef = (0, _react.useRef)(null);\n  var pendingConnections = (0, _store.useSelector)(function (state) {\n    return (0, _pendingConnectionSlice.selectAllUnconfirmedConnections)(state);\n  });\n\n  var _useState = (0, _react.useState)([]),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      pendingConnectionsToDisplay = _useState2[0],\n      setPendingConnectionsDisplay = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(true),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      activeIndex = _useState6[0],\n      setActiveIndex = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(false),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      onLastIndex = _useState8[0],\n      setOnLastIndex = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(pendingConnections.length),\n      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(0),\n      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),\n      confirmed = _useState12[0],\n      setConfirmed = _useState12[1];\n\n  var refreshDisplayConnections = (0, _react.useCallback)(function () {\n    var connectionsToDisplay = pendingConnections;\n\n    if (_deviceConstants.DEVICE_ANDROID && pendingConnections.length > 17) {\n      connectionsToDisplay = pendingConnections.slice(0, 15);\n    }\n\n    if (!(0, _lodash.isEqual)(pendingConnectionsToDisplay, connectionsToDisplay)) {\n      setPendingConnectionsDisplay(connectionsToDisplay);\n    }\n  }, [pendingConnections, pendingConnectionsToDisplay]);\n  (0, _native.useFocusEffect)((0, _react.useCallback)(function () {\n    refreshDisplayConnections();\n    dispatch((0, _actions.setActiveNotification)(null));\n  }, []));\n  (0, _react.useEffect)(function () {\n    if (pendingConnections.length > total) {\n      setTotal(pendingConnections.length);\n    } else if (confirmed > total) {\n      setTotal(confirmed);\n    }\n  }, [pendingConnections, total, confirmed]);\n  (0, _react.useEffect)(function () {\n    if (activeIndex === pendingConnectionsToDisplay.length - 1) {\n      setOnLastIndex(true);\n    } else if (onLastIndex) {\n      refreshDisplayConnections();\n      setOnLastIndex(false);\n    }\n  }, [refreshDisplayConnections, pendingConnectionsToDisplay.length, activeIndex, onLastIndex]);\n  (0, _react.useEffect)(function () {\n    var goBack = function goBack() {\n      if (activeIndex > 0) {\n        var _viewPagerRef$current;\n\n        (_viewPagerRef$current = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current.setPage(activeIndex - 1);\n        return true;\n      }\n    };\n\n    _reactNative.BackHandler.addEventListener('hardwareBackPress', goBack);\n\n    return function () {\n      return _reactNative.BackHandler.removeEventListener('hardwareBackPress', goBack);\n    };\n  }, [viewPagerRef, activeIndex]);\n  (0, _react.useEffect)(function () {\n    var timeout;\n\n    if (pendingConnections.length === 0) {\n      setLoading(true);\n      timeout = setTimeout(function () {\n        navigation.navigate('Connections');\n      }, REFRESH_VIEWPAGER_TIMEOUT);\n    } else {\n      setLoading(false);\n    }\n\n    return function () {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [pendingConnections.length, navigation]);\n  var PendingConnectionList = (0, _react.useMemo)(function () {\n    var renderView = function renderView(item, index) {\n      var last = index === pendingConnectionsToDisplay.length - 1;\n\n      var moveToNext = function moveToNext() {\n        var _viewPagerRef$current2, _viewPagerRef$current3;\n\n        last ? (_viewPagerRef$current2 = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current2.setPage(0) : (_viewPagerRef$current3 = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current3.setPage(index + 1);\n        setConfirmed(function (c) {\n          return c + 1;\n        });\n      };\n\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        collapsable: false,\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_PreviewConnectionController.PreviewConnectionController, {\n        pendingConnectionId: item.profileId,\n        moveToNext: moveToNext,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }));\n    };\n\n    console.log('RE-RENDERING VIEWPAGER');\n    var Views = pendingConnectionsToDisplay.map(renderView);\n    return _react.default.createElement(_viewpager.default, {\n      ref: viewPagerRef,\n      style: {\n        flex: 1,\n        width: '100%'\n      },\n      initialPage: 0,\n      onPageSelected: function onPageSelected(e) {\n        setActiveIndex(e.nativeEvent.position);\n      },\n      orientation: \"horizontal\",\n      transitionStyle: \"scroll\",\n      showPageIndicator: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, Views);\n  }, [pendingConnectionsToDisplay]);\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.StatusBar, {\n    barStyle: \"dark-content\",\n    backgroundColor: _colors.WHITE,\n    animated: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, loading ? _react.default.createElement(_reactNative.View, {\n    style: styles.loadingContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_reactNativeSpinkit.default, {\n    isVisible: true,\n    size: _deviceConstants.DEVICE_LARGE ? 44 : 40,\n    type: \"FadingCircleAlt\",\n    color: _colors.GREY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  })) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {\n    style: styles.titleContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.TouchableOpacity, {\n    testID: \"pendingConnectionsGoBack\",\n    style: styles.cancelButton,\n    onPress: function onPress() {\n      if (total > 1) {\n        navigation.goBack();\n      } else {\n        navigation.navigate('Home');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(_BackArrow.default, {\n    height: _deviceConstants.DEVICE_LARGE ? 22 : 20,\n    color: _colors.DARK_GREY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  })), _react.default.createElement(_reactNative.Text, {\n    style: styles.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }, t('pendingConnections.title.confirmationTotal', {\n    confirmed: confirmed,\n    total: total\n  }))), PendingConnectionList)), _react.default.createElement(_reactNative.View, {\n    style: styles.orangeBottom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }));\n};\n\nexports.PendingConnectionsScreen = PendingConnectionsScreen;\n\nvar styles = _reactNative.StyleSheet.create({\n  orangeBottom: {\n    backgroundColor: _colors.ORANGE,\n    height: 90,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: _colors.WHITE,\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: -80,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  titleContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    paddingVertical: _deviceConstants.DEVICE_LARGE ? 18 : 12\n  },\n  loadingContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  titleText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[20],\n    textAlign: 'center',\n    color: _colors.BLACK\n  },\n  cancelButton: {\n    position: 'absolute',\n    left: 0,\n    width: _deviceConstants.DEVICE_LARGE ? 60 : 50,\n    alignItems: 'center'\n  }\n});\n\nvar _default = PendingConnectionsScreen;\nexports.default = _default;","map":{"version":3,"names":["REFRESH_VIEWPAGER_TIMEOUT","PendingConnectionsScreen","navigation","useNavigation","dispatch","useDispatch","useTranslation","t","viewPagerRef","useRef","pendingConnections","useSelector","state","selectAllUnconfirmedConnections","useState","pendingConnectionsToDisplay","setPendingConnectionsDisplay","loading","setLoading","activeIndex","setActiveIndex","onLastIndex","setOnLastIndex","length","total","setTotal","confirmed","setConfirmed","refreshDisplayConnections","useCallback","connectionsToDisplay","DEVICE_ANDROID","slice","isEqual","useFocusEffect","setActiveNotification","useEffect","goBack","current","setPage","BackHandler","addEventListener","removeEventListener","timeout","setTimeout","navigate","clearTimeout","PendingConnectionList","useMemo","renderView","item","index","last","moveToNext","c","flex","width","profileId","console","log","Views","map","e","nativeEvent","position","WHITE","styles","container","loadingContainer","DEVICE_LARGE","GREY","titleContainer","cancelButton","DARK_GREY","titleText","orangeBottom","StyleSheet","create","backgroundColor","ORANGE","height","zIndex","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","overflow","justifyContent","alignItems","paddingVertical","fontFamily","fontSize","textAlign","color","BLACK","left"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PendingConnectionsScreen.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport {\n  BackHandler,\n  StyleSheet,\n  StatusBar,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport ViewPager from '@react-native-community/viewpager';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from '@/store';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DEVICE_LARGE, DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { WHITE, GREY, DARK_GREY, BLACK, ORANGE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { setActiveNotification } from '@/actions';\nimport { PreviewConnectionController } from './PreviewConnectionController';\nimport BackArrow from '../Icons/BackArrow';\n\n/**\n * Confirm / Preview Connection  Screen of BrightID\n *\n==================================================================\n *\n */\nconst REFRESH_VIEWPAGER_TIMEOUT = 1000;\n\nexport const PendingConnectionsScreen = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const viewPagerRef = useRef<ViewPager>(null);\n\n  const pendingConnections = useSelector((state: State) => {\n    return selectAllUnconfirmedConnections(state);\n  });\n  // pending connections to display\n  const [pendingConnectionsToDisplay, setPendingConnectionsDisplay] = useState<\n    Array<PendingConnection>\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [onLastIndex, setOnLastIndex] = useState(false);\n  const [total, setTotal] = useState(pendingConnections.length);\n  const [confirmed, setConfirmed] = useState(0);\n\n  const refreshDisplayConnections = useCallback(() => {\n    /**\n     * this will cause the Viewpager to re render\n     * for performance on android, we will limit the list to ~ 15 connections\n     * */\n\n    let connectionsToDisplay = pendingConnections;\n\n    if (DEVICE_ANDROID && pendingConnections.length > 17) {\n      connectionsToDisplay = pendingConnections.slice(0, 15);\n    }\n    // test peformance, alternative would be to map ids\n    if (!isEqual(pendingConnectionsToDisplay, connectionsToDisplay)) {\n      setPendingConnectionsDisplay(connectionsToDisplay);\n    }\n  }, [pendingConnections, pendingConnectionsToDisplay]);\n\n  useFocusEffect(\n    useCallback(() => {\n      refreshDisplayConnections();\n      dispatch(setActiveNotification(null));\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n  );\n\n  useEffect(() => {\n    // update total\n    if (pendingConnections.length > total) {\n      setTotal(pendingConnections.length);\n    } else if (confirmed > total) {\n      setTotal(confirmed);\n    }\n  }, [pendingConnections, total, confirmed]);\n\n  // NAVIGATION\n\n  useEffect(() => {\n    /**\n     * we will always refresh the display list\n     * when navigating away from the last page\n     * */\n    if (activeIndex === pendingConnectionsToDisplay.length - 1) {\n      setOnLastIndex(true);\n    } else if (onLastIndex) {\n      refreshDisplayConnections();\n      setOnLastIndex(false);\n    }\n  }, [\n    refreshDisplayConnections,\n    pendingConnectionsToDisplay.length,\n    activeIndex,\n    onLastIndex,\n  ]);\n\n  // back handling for android\n  useEffect(() => {\n    const goBack = () => {\n      if (activeIndex > 0) {\n        viewPagerRef.current?.setPage(activeIndex - 1);\n        return true;\n      }\n    };\n    BackHandler.addEventListener('hardwareBackPress', goBack);\n    return () => BackHandler.removeEventListener('hardwareBackPress', goBack);\n  }, [viewPagerRef, activeIndex]);\n\n  // leave page if zero pending connections\n  useEffect(() => {\n    let timeout;\n    if (pendingConnections.length === 0) {\n      setLoading(true);\n      timeout = setTimeout(() => {\n        navigation.navigate('Connections');\n      }, REFRESH_VIEWPAGER_TIMEOUT);\n    } else {\n      setLoading(false);\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [pendingConnections.length, navigation]);\n\n  /**\n    the list should only re render sparingly for performance and continuity\n  */\n  const PendingConnectionList = useMemo(() => {\n    const renderView = (item: PendingConnection, index: number) => {\n      const last = index === pendingConnectionsToDisplay.length - 1;\n      const moveToNext = () => {\n        /**\n        setting viewpager active index zero will trigger the list to re - render\n        */\n        last\n          ? viewPagerRef.current?.setPage(0)\n          : viewPagerRef.current?.setPage(index + 1);\n        setConfirmed((c) => c + 1);\n      };\n\n      return (\n        <View\n          style={{ flex: 1, width: '100%' }}\n          collapsable={false}\n          key={index}\n        >\n          <PreviewConnectionController\n            pendingConnectionId={item.profileId}\n            moveToNext={moveToNext}\n          />\n        </View>\n      );\n    };\n    console.log('RE-RENDERING VIEWPAGER');\n\n    const Views = pendingConnectionsToDisplay.map(renderView);\n\n    return (\n      <ViewPager\n        ref={viewPagerRef}\n        style={{ flex: 1, width: '100%' }}\n        initialPage={0}\n        onPageSelected={(e) => {\n          setActiveIndex(e.nativeEvent.position);\n        }}\n        orientation=\"horizontal\"\n        transitionStyle=\"scroll\"\n        showPageIndicator={false}\n      >\n        {Views}\n      </ViewPager>\n    );\n  }, [pendingConnectionsToDisplay]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        backgroundColor={WHITE}\n        animated={true}\n      />\n      <SafeAreaView style={styles.container}>\n        {loading ? (\n          <View style={styles.loadingContainer}>\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 44 : 40}\n              type=\"FadingCircleAlt\"\n              color={GREY}\n            />\n          </View>\n        ) : (\n          <>\n            <View style={styles.titleContainer}>\n              <TouchableOpacity\n                testID=\"pendingConnectionsGoBack\"\n                style={styles.cancelButton}\n                onPress={() => {\n                  if (total > 1) {\n                    // group connections navigate to MyCodeScreen or GroupConnectionScreen\n                    navigation.goBack();\n                  } else {\n                    // single connections navigate home to avoid loop\n                    navigation.navigate('Home');\n                  }\n                }}\n              >\n                <BackArrow height={DEVICE_LARGE ? 22 : 20} color={DARK_GREY} />\n              </TouchableOpacity>\n              <Text style={styles.titleText}>\n                {t('pendingConnections.title.confirmationTotal', {\n                  confirmed,\n                  total,\n                })}\n              </Text>\n            </View>\n            {PendingConnectionList}\n          </>\n        )}\n      </SafeAreaView>\n      <View style={styles.orangeBottom} />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    height: 90,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: -80,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  titleContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    paddingVertical: DEVICE_LARGE ? 18 : 12,\n  },\n  loadingContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  titleText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[20],\n    textAlign: 'center',\n    color: BLACK,\n  },\n  cancelButton: {\n    position: 'absolute',\n    left: 0,\n    width: DEVICE_LARGE ? 60 : 50,\n    alignItems: 'center',\n  },\n});\n\nexport default PendingConnectionsScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}