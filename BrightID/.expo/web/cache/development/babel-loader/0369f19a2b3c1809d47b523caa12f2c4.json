{"ast":null,"code":"import { useCallback, useEffect, useLayoutEffect, useRef } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { WHITE, ORANGE } from \"../theme/colors\";\nimport { DEVICE_ANDROID } from \"./deviceConstants\";\nexport function useInterval(callback, delay) {\n  var savedCallback = useRef(callback);\n  useLayoutEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(function () {\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    var id = setInterval(function () {\n      return savedCallback.current();\n    }, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\nexport function useStatusBarHome() {\n  useFocusEffect(useCallback(function () {\n    if (DEVICE_ANDROID) StatusBar.setBackgroundColor(WHITE, true);\n    StatusBar.setBarStyle('dark-content', true);\n    return function () {\n      if (DEVICE_ANDROID) StatusBar.setBackgroundColor(ORANGE, true);\n      StatusBar.setBarStyle('light-content', true);\n    };\n  }, []));\n}","map":{"version":3,"names":["useCallback","useEffect","useLayoutEffect","useRef","useFocusEffect","WHITE","ORANGE","DEVICE_ANDROID","useInterval","callback","delay","savedCallback","current","id","setInterval","clearInterval","useStatusBarHome","StatusBar","setBackgroundColor","setBarStyle"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useLayoutEffect, useRef } from 'react';\nimport { StatusBar } from 'react-native';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { WHITE, ORANGE } from '@/theme/colors';\nimport { DEVICE_ANDROID } from './deviceConstants';\n\nexport function useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport function useStatusBarHome() {\n  useFocusEffect(\n    useCallback(() => {\n      if (DEVICE_ANDROID) StatusBar.setBackgroundColor(WHITE, true);\n\n      StatusBar.setBarStyle('dark-content', true);\n      return () => {\n        if (DEVICE_ANDROID) StatusBar.setBackgroundColor(ORANGE, true);\n        StatusBar.setBarStyle('light-content', true);\n      };\n    }, []),\n  );\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,eAAjC,EAAkDC,MAAlD,QAAgE,OAAhE;;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,KAAT,EAAgBC,MAAhB;AACA,SAASC,cAAT;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA2CC,KAA3C,EAAiE;EACtE,IAAMC,aAAa,GAAGR,MAAM,CAACM,QAAD,CAA5B;EAGAP,eAAe,CAAC,YAAM;IACpBS,aAAa,CAACC,OAAd,GAAwBH,QAAxB;EACD,CAFc,EAEZ,CAACA,QAAD,CAFY,CAAf;EAKAR,SAAS,CAAC,YAAM;IAGd,IAAI,CAACS,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;MACzB;IACD;;IAED,IAAMG,EAAE,GAAGC,WAAW,CAAC;MAAA,OAAMH,aAAa,CAACC,OAAd,EAAN;IAAA,CAAD,EAAgCF,KAAhC,CAAtB;IAEA,OAAO;MAAA,OAAMK,aAAa,CAACF,EAAD,CAAnB;IAAA,CAAP;EACD,CAVQ,EAUN,CAACH,KAAD,CAVM,CAAT;AAWD;AAED,OAAO,SAASM,gBAAT,GAA4B;EACjCZ,cAAc,CACZJ,WAAW,CAAC,YAAM;IAChB,IAAIO,cAAJ,EAAoBU,SAAS,CAACC,kBAAV,CAA6Bb,KAA7B,EAAoC,IAApC;IAEpBY,SAAS,CAACE,WAAV,CAAsB,cAAtB,EAAsC,IAAtC;IACA,OAAO,YAAM;MACX,IAAIZ,cAAJ,EAAoBU,SAAS,CAACC,kBAAV,CAA6BZ,MAA7B,EAAqC,IAArC;MACpBW,SAAS,CAACE,WAAV,CAAsB,eAAtB,EAAuC,IAAvC;IACD,CAHD;EAID,CARU,EAQR,EARQ,CADC,CAAd;AAWD"},"metadata":{},"sourceType":"module"}