{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { getStoredState } from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { rootMigrate } from \"./migrations\";\n\nvar getRootState = function _callee(config) {\n  var restoredState, migratedState, nextState;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getStoredState(_objectSpread(_objectSpread({}, config), {}, {\n            key: 'root',\n            storage: AsyncStorage,\n            serialize: undefined,\n            deserialize: undefined\n          })));\n\n        case 3:\n          restoredState = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(rootMigrate(restoredState, config.version));\n\n        case 6:\n          migratedState = _context.sent;\n          nextState = migratedState && migratedState[config.key];\n\n          if (nextState) {\n            _context.next = 10;\n            break;\n          }\n\n          throw new Error('migrated state does not exist');\n\n        case 10:\n          return _context.abrupt(\"return\", nextState);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (_context.t0.message !== 'migrated state does not exist') {\n            console.error(\"failed restoring state for \" + config.key, _context.t0.message);\n          }\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nexport default (function _callee2(config) {\n  var restoredState;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getStoredState(config));\n\n        case 3:\n          restoredState = _context2.sent;\n\n          if (!config.migrate) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(config.migrate(restoredState, config.version));\n\n        case 7:\n          restoredState = _context2.sent;\n\n        case 8:\n          return _context2.abrupt(\"return\", Promise.resolve(restoredState));\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(\"attempting to restore old state for \" + config.key, _context2.t0.message);\n          return _context2.abrupt(\"return\", Promise.resolve(getRootState(config)));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/getStoredState.js"],"names":["getRootState","restoredState","getStoredState","key","storage","serialize","deserialize","migratedState","rootMigrate","config","nextState","console","Promise"],"mappings":"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","sourcesContent":["import { getStoredState } from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { rootMigrate } from './migrations';\n\nconst getRootState = async (config) => {\n  try {\n    const restoredState = await getStoredState({\n      ...config,\n      key: 'root',\n      storage: AsyncStorage,\n      serialize: undefined,\n      deserialize: undefined,\n    });\n\n    let migratedState = await rootMigrate(restoredState, config.version);\n\n    let nextState = migratedState && migratedState[config.key];\n\n    if (!nextState) {\n      throw new Error('migrated state does not exist');\n    }\n\n    return nextState;\n  } catch (error) {\n    if (error.message !== 'migrated state does not exist') {\n      console.error(`failed restoring state for ${config.key}`, error.message);\n    }\n  }\n};\n\nexport default async (config) => {\n  try {\n    let restoredState = await getStoredState(config);\n    if (config.migrate) {\n      restoredState = await config.migrate(restoredState, config.version);\n    }\n    return Promise.resolve(restoredState);\n  } catch (err) {\n    console.log(\n      `attempting to restore old state for ${config.key}`,\n      err.message,\n    );\n    return Promise.resolve(getRootState(config));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}