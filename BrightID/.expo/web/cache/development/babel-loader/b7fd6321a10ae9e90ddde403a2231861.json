{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getGenericPassword, setGenericPassword, resetGenericPassword } from 'react-native-keychain';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { b64ToUint8Array, uInt8ArrayToB64 } from \"../../utils/encoding\";\n\nvar getItem = function _callee(key) {\n  var _await$getGenericPass, username, password, _JSON$parse, publicKey, version, secretKey, data, _JSON$parse2, _publicKey, _secretKey, _persist;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getGenericPassword());\n\n        case 3:\n          _await$getGenericPass = _context.sent;\n          username = _await$getGenericPass.username;\n          password = _await$getGenericPass.password;\n          _JSON$parse = JSON.parse(username), publicKey = _JSON$parse.publicKey, version = _JSON$parse.version;\n\n          if (!(!publicKey || !password)) {\n            _context.next = 9;\n            break;\n          }\n\n          throw new Error(\"keypair does not exist in keychain!\");\n\n        case 9:\n          secretKey = b64ToUint8Array(password);\n          return _context.abrupt(\"return\", {\n            publicKey: publicKey,\n            secretKey: secretKey,\n            _persist: {\n              version: version,\n              rehydrated: true\n            }\n          });\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 17:\n          data = _context.sent;\n\n          if (!data) {\n            _context.next = 25;\n            break;\n          }\n\n          console.error(\"react-native-keychain is not accessible\");\n          _JSON$parse2 = JSON.parse(data), _publicKey = _JSON$parse2.publicKey, _secretKey = _JSON$parse2.secretKey, _persist = _JSON$parse2._persist;\n          _secretKey = b64ToUint8Array(_secretKey);\n          return _context.abrupt(\"return\", {\n            publicKey: _publicKey,\n            secretKey: _secretKey,\n            _persist: _persist\n          });\n\n        case 25:\n          throw _context.t0;\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nvar setItem = function _callee2(key, keypair) {\n  var password, username, opts;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          password = uInt8ArrayToB64(keypair.secretKey);\n          _context2.prev = 1;\n          username = JSON.stringify({\n            version: keypair._persist.version,\n            publicKey: keypair.publicKey\n          });\n\n          if (!DEVICE_ANDROID) {\n            _context2.next = 9;\n            break;\n          }\n\n          opts = {\n            rules: 'none'\n          };\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(setGenericPassword(username, password, opts));\n\n        case 7:\n          _context2.next = 11;\n          break;\n\n        case 9:\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(setGenericPassword(username, password));\n\n        case 11:\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, JSON.stringify({\n            publicKey: keypair.publicKey,\n            secretKey: password,\n            _persist: keypair._persist\n          })));\n\n        case 13:\n          return _context2.abrupt(\"return\", true);\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.error(_context2.t0.message);\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, JSON.stringify({\n            publicKey: keypair.publicKey,\n            secretKey: password,\n            _persist: keypair._persist\n          })));\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 16]], Promise);\n};\n\nvar removeItem = function _callee3(key) {\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(resetGenericPassword());\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 5:\n          return _context3.abrupt(\"return\", true);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0.message);\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar KeychainStorage = {\n  getItem: getItem,\n  setItem: setItem,\n  removeItem: removeItem\n};\nexport default KeychainStorage;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/storage/keychainAdapter.js"],"names":["getItem","username","password","getGenericPassword","publicKey","version","JSON","secretKey","b64ToUint8Array","_persist","rehydrated","data","AsyncStorage","console","setItem","uInt8ArrayToB64","keypair","opts","rules","setGenericPassword","removeItem","resetGenericPassword","KeychainStorage"],"mappings":"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","sourcesContent":["import {\n  getGenericPassword,\n  setGenericPassword,\n  resetGenericPassword,\n} from 'react-native-keychain';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { b64ToUint8Array, uInt8ArrayToB64 } from '@/utils/encoding';\n\n/**\n *\n * @param {string} key\n * @returns\n */\nconst getItem = async (key) => {\n  try {\n    let { username, password } = await getGenericPassword();\n    let { publicKey, version } = JSON.parse(username);\n    if (!publicKey || !password) {\n      throw new Error(`keypair does not exist in keychain!`);\n    }\n    let secretKey = b64ToUint8Array(password);\n    return {\n      publicKey,\n      secretKey,\n      _persist: { version, rehydrated: true },\n    };\n  } catch (err) {\n    let data = await AsyncStorage.getItem(key);\n    if (data) {\n      console.error(`react-native-keychain is not accessible`);\n      let { publicKey, secretKey, _persist } = JSON.parse(data);\n      secretKey = b64ToUint8Array(secretKey);\n      return { publicKey, secretKey, _persist };\n    } else {\n      throw err;\n    }\n  }\n};\n\n/**\n *\n * @param {string} key\n * @param {{\n *   publicKey: string;\n *   secretKey: Uint8Array;\n *   _persist: { version: number };\n * }} keypair\n * @returns {Promise<boolean>}\n */\nconst setItem = async (key, keypair) => {\n  let password = uInt8ArrayToB64(keypair.secretKey);\n  try {\n    let username = JSON.stringify({\n      version: keypair._persist.version,\n      publicKey: keypair.publicKey,\n    });\n\n    if (DEVICE_ANDROID) {\n      let opts = { rules: 'none' };\n      await setGenericPassword(username, password, opts);\n    } else {\n      await setGenericPassword(username, password);\n    }\n    // we can remove this later once we have better metrics for react-native-keychain\n    await AsyncStorage.setItem(\n      key,\n      JSON.stringify({\n        publicKey: keypair.publicKey,\n        secretKey: password,\n        _persist: keypair._persist,\n      }),\n    );\n    return true;\n  } catch (err) {\n    console.error(err.message);\n    await AsyncStorage.setItem(\n      key,\n      JSON.stringify({\n        publicKey: keypair.publicKey,\n        secretKey: password,\n        _persist: keypair._persist,\n      }),\n    );\n  }\n};\n\nconst removeItem = async (key) => {\n  try {\n    await resetGenericPassword();\n    await AsyncStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    console.error(err.message);\n    await AsyncStorage.removeItem(key);\n  }\n};\n\nconst KeychainStorage = {\n  getItem,\n  setItem,\n  removeItem,\n};\n\nexport default KeychainStorage;\n"]},"metadata":{},"sourceType":"module"}