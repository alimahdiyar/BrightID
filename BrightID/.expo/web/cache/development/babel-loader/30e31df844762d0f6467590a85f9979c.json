{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createDrawerNavigator, DrawerContentScrollView } from '@react-navigation/drawer';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useTranslation } from 'react-i18next';\nimport codePush from 'react-native-code-push';\nimport { SvgXml } from 'react-native-svg';\nimport { useDispatch, useSelector } from \"../store\";\nimport { setEditProfileMenuLayout, setEditProfileTextLayout } from \"../reducer/walkthroughSlice\";\nimport HomeScreen from \"../components/HomeScreen\";\nimport { BLACK, ORANGE, WHITE, GREY } from \"../theme/colors\";\nimport { fontSize } from \"../theme/fonts\";\nimport { DEVICE_LARGE, DEVICE_IOS } from \"../utils/deviceConstants\";\nimport { retrieveImage, photoDirectory } from \"../utils/filesystem\";\nimport Home from \"../components/Icons/Home\";\nimport Pencil from \"../components/Icons/Pencil\";\nimport RecoveryAccount from \"../components/Icons/RecoveryAccount\";\nimport List from \"../components/Icons/List\";\nimport GraphQl from \"../components/Icons/GraphQl\";\nimport Faq from \"../components/Icons/Faq\";\nimport Mail from \"../components/Icons/Mail\";\nimport FindFriendsScreen from \"../components/FindFriends/FindFriendsScreen\";\nimport Devices from \"../components/Icons/Devices\";\nimport TasksScreen from \"../components/Tasks/TasksScreen\";\nimport BituVerificationScreen from \"../components/Tasks/BituVerificationScreen\";\nimport GraphExplorerScreen from \"../components/SideMenu/GraphExplorerScreen\";\nimport ContactUsScreen from \"../components/SideMenu/ContactUsScreen\";\nimport EditProfileScreen from \"../components/EditProfile/EditProfileScreen\";\nimport RecoveryConnectionsScreen from \"../components/RecoveryConnections/RecoveryConnectionsScreen\";\nimport GroupsDrawerIcon from \"../static/groups_drawer.svg\";\nimport FindFriendsIcon from \"../static/findfriends_drawer.svg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CustomItem = function CustomItem(_ref) {\n  var onPress = _ref.onPress,\n      label = _ref.label,\n      Icon = _ref.icon,\n      focused = _ref.focused,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeTintColor = _ref.activeTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      testId = _ref.testId;\n  var dispatch = useDispatch();\n  return _jsxs(TouchableOpacity, {\n    testID: testId,\n    activeOpacity: 0.3,\n    style: [styles.drawerItem, {\n      backgroundColor: focused ? activeBackgroundColor : inactiveBackgroundColor\n    }],\n    onPress: onPress,\n    onLayout: function onLayout(e) {\n      if (label === 'Edit Profile') {\n        var _e$nativeEvent;\n\n        dispatch(setEditProfileMenuLayout((_e$nativeEvent = e.nativeEvent) == null ? void 0 : _e$nativeEvent.layout));\n      }\n    },\n    children: [_jsx(Icon, {\n      focused: focused\n    }), _jsx(Text, {\n      style: [styles.labelStyle, {\n        color: focused ? activeTintColor : inactiveTintColor\n      }],\n      onLayout: function onLayout(e) {\n        if (label === 'Edit Profile') {\n          var _e$nativeEvent2;\n\n          dispatch(setEditProfileTextLayout((_e$nativeEvent2 = e.nativeEvent) == null ? void 0 : _e$nativeEvent2.layout));\n        }\n      },\n      children: label\n    })]\n  });\n};\n\nvar CustomDrawerContent = function CustomDrawerContent(props) {\n  var state = props.state,\n      navigation = props.navigation;\n  var photoFilename = useSelector(function (state) {\n    return state.user.photo.filename;\n  });\n  var name = useSelector(function (state) {\n    return state.user.name;\n  });\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      profilePhoto = _useState2[0],\n      setProfilePhoto = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  retrieveImage(photoFilename).then(setProfilePhoto);\n  var profileSource = profilePhoto ? {\n    uri: profilePhoto\n  } : {\n    uri: \"file://\" + photoDirectory() + \"/\" + photoFilename\n  };\n  return _jsxs(DrawerContentScrollView, _objectSpread(_objectSpread({}, props), {}, {\n    children: [_jsxs(View, {\n      style: styles.profileContainer,\n      children: [_jsx(Image, {\n        source: profileSource,\n        style: styles.drawerPhoto,\n        accessibilityLabel: \"user photo\"\n      }), _jsx(Text, {\n        style: styles.userName,\n        children: name\n      })]\n    }), _jsx(CustomItem, {\n      testId: \"drawerHomeBtn\",\n      focused: false,\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.home'),\n      icon: function icon(_ref2) {\n        var focused = _ref2.focused;\n        return _jsx(Home, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 0,\n          routes: [{\n            name: 'Home'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerEditProfileBtn\",\n      focused: state.routeNames[state.index] === 'Edit Profile',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.editProfile'),\n      icon: function icon(_ref3) {\n        var focused = _ref3.focused;\n        return _jsx(Pencil, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Edit Profile'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerRecoveryConnectionsBtn\",\n      focused: state.routeNames[state.index] === 'Recovery Connections',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: \"Recovery Connections\",\n      icon: function icon(_ref4) {\n        var focused = _ref4.focused;\n        return _jsx(RecoveryAccount, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Recovery Connections'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerAchievementsBtn\",\n      focused: state.routeNames[state.index] === 'Achievements',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.achievements'),\n      icon: function icon(_ref5) {\n        var focused = _ref5.focused;\n        return _jsx(List, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Achievements'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerExplorerCodeBtn\",\n      focused: state.routeNames[state.index] === 'Copy Explorer Code',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.copyExplorerCode'),\n      icon: function icon(_ref6) {\n        var focused = _ref6.focused;\n        return _jsx(GraphQl, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Copy Explorer Code'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      focused: false,\n      testId: \"groupsBtn\",\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.groups'),\n      icon: function icon() {\n        return _jsx(SvgXml, {\n          xml: GroupsDrawerIcon,\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Groups'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      focused: false,\n      testId: \"findFriendsBtn\",\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.findFriends'),\n      icon: function icon() {\n        return _jsx(SvgXml, {\n          xml: FindFriendsIcon,\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'FindFriendsScreen'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      focused: false,\n      testId: \"devicesBtn\",\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.devices'),\n      icon: function icon(_ref7) {\n        var focused = _ref7.focused;\n        return _jsx(Devices, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Devices'\n          }, {\n            name: 'Devices',\n            params: {\n              syncing: false,\n              asScanner: false\n            }\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerUpdateBtn\",\n      focused: false,\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.checkForUpdates'),\n      icon: function icon(_ref8) {\n        var focused = _ref8.focused;\n        return _jsx(Faq, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        codePush.sync({\n          updateDialog: {},\n          installMode: codePush.InstallMode.IMMEDIATE\n        }, function (status) {\n          if (status === codePush.SyncStatus.UP_TO_DATE) {\n            Alert.alert(t('drawer.alert.title.upToDate'), t('drawer.alert.text.upToDate'));\n          }\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerContactUsBtn\",\n      focused: state.routeNames[state.index] === 'ContactUs',\n      inactiveBackgroundColor: WHITE,\n      inactiveTintColor: BLACK,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.contactUs'),\n      icon: function icon(_ref9) {\n        var focused = _ref9.focused;\n        return _jsx(Mail, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'ContactUs'\n          }]\n        });\n      }\n    }), __DEV__ && _jsx(CustomItem, {\n      testId: \"drawerIconsBtn\",\n      focused: state.routeNames[state.index] === 'SampleIconPage',\n      inactiveBackgroundColor: WHITE,\n      inactiveTintColor: BLACK,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: \"Sample Icon Page\",\n      icon: function icon(_ref10) {\n        var focused = _ref10.focused;\n        return _jsx(List, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'SampleIconPage'\n          }]\n        });\n      }\n    })]\n  }));\n};\n\nvar Drawer = createDrawerNavigator();\nexport var HomeDrawer = function HomeDrawer() {\n  var headerHeight = useHeaderHeight();\n\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  return _jsxs(Drawer.Navigator, {\n    drawerType: \"front\",\n    sceneContainerStyle: [styles.sceneContainer],\n    drawerStyle: [styles.drawer, {\n      marginTop: headerHeight\n    }],\n    drawerContentOptions: {\n      activeTintColor: WHITE,\n      inactiveTintColor: BLACK,\n      activeBackgroundColor: ORANGE,\n      inactiveBackgroundColor: WHITE,\n      itemStyle: styles.drawerItem,\n      labelStyle: styles.labelStyle\n    },\n    overlayColor: \"transparent\",\n    drawerContent: function drawerContent(props) {\n      return _jsx(CustomDrawerContent, _objectSpread({}, props));\n    },\n    children: [_jsx(Drawer.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Achievements\",\n      component: TasksScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"FindFriendsScreen\",\n      component: FindFriendsScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"BituVerification\",\n      component: BituVerificationScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Edit Profile\",\n      component: EditProfileScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Recovery Connections\",\n      component: RecoveryConnectionsScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Copy Explorer Code\",\n      component: GraphExplorerScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"ContactUs\",\n      component: ContactUsScreen\n    }), __DEV__ && _jsx(Drawer.Screen, {\n      name: \"SampleIconPage\",\n      component: require(\"../components/Icons/SamplePage\").default\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  sceneContainer: {\n    backgroundColor: WHITE\n  },\n  drawer: {\n    width: '85%',\n    borderTopRightRadius: 40,\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  },\n  drawerPhoto: {\n    width: DEVICE_LARGE ? 48 : 42,\n    height: DEVICE_LARGE ? 48 : 42,\n    borderRadius: 71\n  },\n  profileContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'center',\n    paddingLeft: DEVICE_LARGE ? 45 : 35,\n    paddingTop: DEVICE_LARGE ? 20 : 18,\n    paddingBottom: DEVICE_LARGE ? 30 : 25\n  },\n  userName: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: DEVICE_LARGE ? 20 : 18\n  },\n  drawerItem: {\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'row',\n    marginVertical: 4,\n    marginHorizontal: 10,\n    overflow: 'hidden',\n    paddingLeft: DEVICE_LARGE ? 43 : 34,\n    paddingVertical: 10\n  },\n  labelStyle: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: 16\n  }\n});","map":{"version":3,"names":["React","useState","createDrawerNavigator","DrawerContentScrollView","useHeaderHeight","useTranslation","codePush","SvgXml","useDispatch","useSelector","setEditProfileMenuLayout","setEditProfileTextLayout","HomeScreen","BLACK","ORANGE","WHITE","GREY","fontSize","DEVICE_LARGE","DEVICE_IOS","retrieveImage","photoDirectory","Home","Pencil","RecoveryAccount","List","GraphQl","Faq","Mail","FindFriendsScreen","Devices","TasksScreen","BituVerificationScreen","GraphExplorerScreen","ContactUsScreen","EditProfileScreen","RecoveryConnectionsScreen","GroupsDrawerIcon","FindFriendsIcon","CustomItem","onPress","label","Icon","icon","focused","inactiveTintColor","activeTintColor","activeBackgroundColor","inactiveBackgroundColor","testId","dispatch","styles","drawerItem","backgroundColor","e","nativeEvent","layout","labelStyle","color","CustomDrawerContent","props","state","navigation","photoFilename","user","photo","filename","name","profilePhoto","setProfilePhoto","t","then","profileSource","uri","profileContainer","drawerPhoto","userName","reset","index","routes","routeNames","params","syncing","asScanner","sync","updateDialog","installMode","InstallMode","IMMEDIATE","status","SyncStatus","UP_TO_DATE","Alert","alert","__DEV__","Drawer","HomeDrawer","headerHeight","sceneContainer","drawer","marginTop","itemStyle","require","default","StyleSheet","create","width","borderTopRightRadius","shadowColor","shadowOpacity","shadowRadius","elevation","shadowOffset","height","borderRadius","flexDirection","alignItems","paddingLeft","paddingTop","paddingBottom","fontFamily","marginLeft","justifyContent","marginVertical","marginHorizontal","overflow","paddingVertical"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/routes/HomeDrawer.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Alert,\n  Image,\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n} from '@react-navigation/drawer';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useTranslation } from 'react-i18next';\nimport codePush from 'react-native-code-push';\nimport { SvgXml } from 'react-native-svg';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  setEditProfileMenuLayout,\n  setEditProfileTextLayout,\n} from '@/reducer/walkthroughSlice';\nimport HomeScreen from '@/components/HomeScreen';\nimport { BLACK, ORANGE, WHITE, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE, DEVICE_IOS } from '@/utils/deviceConstants';\nimport { retrieveImage, photoDirectory } from '@/utils/filesystem';\nimport Home from '@/components/Icons/Home';\nimport Pencil from '@/components/Icons/Pencil';\nimport RecoveryAccount from '@/components/Icons/RecoveryAccount';\nimport List from '@/components/Icons/List';\nimport GraphQl from '@/components/Icons/GraphQl';\nimport Faq from '@/components/Icons/Faq';\nimport Mail from '@/components/Icons/Mail';\nimport FindFriendsScreen from '@/components/FindFriends/FindFriendsScreen';\nimport Devices from '@/components/Icons/Devices';\nimport TasksScreen from '@/components/Tasks/TasksScreen';\nimport BituVerificationScreen from '@/components/Tasks/BituVerificationScreen';\nimport GraphExplorerScreen from '@/components/SideMenu/GraphExplorerScreen';\nimport ContactUsScreen from '@/components/SideMenu/ContactUsScreen';\nimport EditProfileScreen from '@/components/EditProfile/EditProfileScreen';\nimport RecoveryConnectionsScreen from '@/components/RecoveryConnections/RecoveryConnectionsScreen';\nimport GroupsDrawerIcon from '@/static/groups_drawer.svg';\nimport FindFriendsIcon from '@/static/findfriends_drawer.svg';\n\nconst CustomItem = ({\n  onPress,\n  label,\n  icon: Icon,\n  focused,\n  inactiveTintColor,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  testId,\n}) => {\n  const dispatch = useDispatch();\n  return (\n    <TouchableOpacity\n      testID={testId}\n      activeOpacity={0.3}\n      style={[\n        styles.drawerItem,\n        {\n          backgroundColor: focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor,\n        },\n      ]}\n      onPress={onPress}\n      onLayout={(e) => {\n        if (label === 'Edit Profile') {\n          //  X / Y / Height of the entire menu element for walkthough box\n          dispatch(setEditProfileMenuLayout(e.nativeEvent?.layout));\n        }\n      }}\n    >\n      <Icon focused={focused} />\n      <Text\n        style={[\n          styles.labelStyle,\n          {\n            color: focused ? activeTintColor : inactiveTintColor,\n          },\n        ]}\n        onLayout={(e) => {\n          if (label === 'Edit Profile') {\n            // use text to determine proper width of walkthrough box\n            dispatch(setEditProfileTextLayout(e.nativeEvent?.layout));\n          }\n        }}\n      >\n        {label}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nconst CustomDrawerContent = (props) => {\n  const { state, navigation } = props;\n  // selectors\n  const photoFilename = useSelector(\n    (state: State) => state.user.photo.filename,\n  );\n  const name = useSelector((state: State) => state.user.name);\n  // keep profile photo up to date\n  const [profilePhoto, setProfilePhoto] = useState('');\n  const { t } = useTranslation();\n\n  retrieveImage(photoFilename).then(setProfilePhoto);\n\n  // prevent console error and blank photo\n  const profileSource = profilePhoto\n    ? {\n        uri: profilePhoto,\n      }\n    : {\n        uri: `file://${photoDirectory()}/${photoFilename}`,\n      };\n\n  return (\n    <DrawerContentScrollView {...props}>\n      <View style={styles.profileContainer}>\n        <Image\n          source={profileSource}\n          style={styles.drawerPhoto}\n          accessibilityLabel=\"user photo\"\n        />\n        <Text style={styles.userName}>{name}</Text>\n      </View>\n      <CustomItem\n        testId=\"drawerHomeBtn\"\n        focused={false}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.home')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <Home\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 0,\n            routes: [{ name: 'Home' }],\n          });\n        }}\n      />\n      <CustomItem\n        testId=\"drawerEditProfileBtn\"\n        focused={state.routeNames[state.index] === 'Edit Profile'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.editProfile')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <Pencil\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Edit Profile' }],\n          });\n        }}\n      />\n      <CustomItem\n        testId=\"drawerRecoveryConnectionsBtn\"\n        focused={state.routeNames[state.index] === 'Recovery Connections'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label=\"Recovery Connections\"\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <RecoveryAccount\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Recovery Connections' }],\n          });\n        }}\n      />\n      <CustomItem\n        testId=\"drawerAchievementsBtn\"\n        focused={state.routeNames[state.index] === 'Achievements'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.achievements')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <List\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Achievements' }],\n          });\n        }}\n      />\n\n      <CustomItem\n        testId=\"drawerExplorerCodeBtn\"\n        focused={state.routeNames[state.index] === 'Copy Explorer Code'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.copyExplorerCode')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <GraphQl\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Copy Explorer Code' }],\n          });\n        }}\n      />\n      <CustomItem\n        focused={false}\n        testId=\"groupsBtn\"\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.groups')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={() => (\n          <SvgXml\n            xml={GroupsDrawerIcon}\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Groups' }],\n          });\n        }}\n      />\n      <CustomItem\n        focused={false}\n        testId=\"findFriendsBtn\"\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.findFriends')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={() => (\n          <SvgXml\n            xml={FindFriendsIcon}\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'FindFriendsScreen' }],\n          });\n        }}\n      />\n\n      <CustomItem\n        focused={false}\n        testId=\"devicesBtn\"\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.devices')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <Devices\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [\n              { name: 'Devices' },\n              { name: 'Devices', params: { syncing: false, asScanner: false } },\n            ],\n          });\n        }}\n      />\n\n      <CustomItem\n        testId=\"drawerUpdateBtn\"\n        focused={false}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.checkForUpdates')}\n        icon={({ focused }) => (\n          <Faq\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          codePush.sync(\n            {\n              updateDialog: {},\n              installMode: codePush.InstallMode.IMMEDIATE,\n            },\n            (status) => {\n              if (status === codePush.SyncStatus.UP_TO_DATE) {\n                Alert.alert(\n                  t('drawer.alert.title.upToDate'),\n                  t('drawer.alert.text.upToDate'),\n                );\n              }\n            },\n          );\n        }}\n      />\n      <CustomItem\n        testId=\"drawerContactUsBtn\"\n        focused={state.routeNames[state.index] === 'ContactUs'}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        inactiveBackgroundColor={WHITE}\n        inactiveTintColor={BLACK}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.contactUs')}\n        icon={({ focused }) => (\n          <Mail\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'ContactUs' }],\n          });\n        }}\n      />\n      {__DEV__ && (\n        <CustomItem\n          testId=\"drawerIconsBtn\"\n          focused={state.routeNames[state.index] === 'SampleIconPage'}\n          // style={styles.drawerItem}\n          // labelStyle={styles.labelStyle}\n          inactiveBackgroundColor={WHITE}\n          inactiveTintColor={BLACK}\n          activeTintColor={WHITE}\n          activeBackgroundColor={ORANGE}\n          label=\"Sample Icon Page\"\n          icon={({ focused }) => (\n            <List\n              width={DEVICE_LARGE ? 28 : 24}\n              height={DEVICE_LARGE ? 28 : 24}\n              color={focused ? GREY : BLACK}\n              highlight={focused ? WHITE : ORANGE}\n            />\n          )}\n          onPress={() => {\n            navigation.reset({\n              index: 1,\n              routes: [{ name: 'Home' }, { name: 'SampleIconPage' }],\n            });\n          }}\n        />\n      )}\n    </DrawerContentScrollView>\n  );\n};\n\nconst Drawer = createDrawerNavigator();\n\nexport const HomeDrawer = () => {\n  let headerHeight = useHeaderHeight();\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  return (\n    <Drawer.Navigator\n      drawerType=\"front\"\n      sceneContainerStyle={[styles.sceneContainer]}\n      drawerStyle={[styles.drawer, { marginTop: headerHeight }]}\n      drawerContentOptions={{\n        activeTintColor: WHITE,\n        inactiveTintColor: BLACK,\n        activeBackgroundColor: ORANGE,\n        inactiveBackgroundColor: WHITE,\n        itemStyle: styles.drawerItem,\n        labelStyle: styles.labelStyle,\n      }}\n      overlayColor=\"transparent\"\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Home\" component={HomeScreen} />\n      <Drawer.Screen name=\"Achievements\" component={TasksScreen} />\n      <Drawer.Screen name=\"FindFriendsScreen\" component={FindFriendsScreen} />\n      <Drawer.Screen\n        name=\"BituVerification\"\n        component={BituVerificationScreen}\n      />\n      <Drawer.Screen name=\"Edit Profile\" component={EditProfileScreen} />\n      <Drawer.Screen\n        name=\"Recovery Connections\"\n        component={RecoveryConnectionsScreen}\n      />\n      <Drawer.Screen\n        name=\"Copy Explorer Code\"\n        component={GraphExplorerScreen}\n      />\n      <Drawer.Screen name=\"ContactUs\" component={ContactUsScreen} />\n      {__DEV__ && (\n        <Drawer.Screen\n          name=\"SampleIconPage\"\n          component={require('@/components/Icons/SamplePage').default}\n        />\n      )}\n    </Drawer.Navigator>\n  );\n};\n\nconst styles = StyleSheet.create({\n  sceneContainer: {\n    backgroundColor: WHITE,\n  },\n  drawer: {\n    width: '85%',\n    borderTopRightRadius: 40,\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n  },\n  drawerPhoto: {\n    width: DEVICE_LARGE ? 48 : 42,\n    height: DEVICE_LARGE ? 48 : 42,\n    borderRadius: 71,\n  },\n  profileContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'center',\n    paddingLeft: DEVICE_LARGE ? 45 : 35,\n    paddingTop: DEVICE_LARGE ? 20 : 18,\n    paddingBottom: DEVICE_LARGE ? 30 : 25,\n  },\n  userName: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: DEVICE_LARGE ? 20 : 18,\n  },\n  drawerItem: {\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'row',\n    marginVertical: 4,\n    marginHorizontal: 10,\n    overflow: 'hidden',\n    paddingLeft: DEVICE_LARGE ? 43 : 34,\n    paddingVertical: 10,\n  },\n  labelStyle: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: 16,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}