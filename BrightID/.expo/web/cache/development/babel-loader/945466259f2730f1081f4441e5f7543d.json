{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pollOperations = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _store = _interopRequireDefault(require(\"../store\"));\n\nvar _actions = require(\"../actions\");\n\nvar _TasksSlice = require(\"../components/Tasks/TasksSlice\");\n\nvar _constants = require(\"./constants\");\n\nvar _brightId = require(\"../api/brightId\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar handleOpUpdate = function handleOpUpdate(store, op, state, result, api) {\n  var showDefaultError = false;\n\n  switch (op.name) {\n    case 'Link ContextId':\n      store.dispatch((0, _actions.updateLinkedContext)({\n        context: op.context,\n        contextId: op.contextId,\n        state: state\n      }));\n\n      if (state === _constants.operation_states.APPLIED) {\n        _reactNative.Alert.alert(_i18next.default.t('apps.alert.title.linkSuccess'), _i18next.default.t('apps.alert.text.linkSuccess', {\n          context: \"\" + op.context\n        }));\n      } else {\n        _reactNative.Alert.alert(_i18next.default.t('apps.alert.title.linkFailure'), _i18next.default.t('apps.alert.text.linkFailure', {\n          context: \"\" + op.context,\n          result: \"\" + result.message\n        }));\n      }\n\n      break;\n\n    case 'Connect':\n      if (op.id1 !== store.getState().user.id) {\n        break;\n      }\n\n      if (state === _constants.operation_states.APPLIED) {\n        store.dispatch((0, _actions.addConnection)({\n          id: op.id2,\n          status: 'verified'\n        }));\n      } else {\n        api.getProfile(op.id2).then(function (profile) {\n          var _profile$reports$find;\n\n          var conn = {\n            id: profile.id,\n            level: profile.level,\n            timestamp: profile.connectedAt,\n            reportReason: (_profile$reports$find = profile.reports.find(function (r) {\n              return r.id === op.id1;\n            })) == null ? void 0 : _profile$reports$find.reason\n          };\n          store.dispatch((0, _actions.addConnection)(conn));\n        });\n        showDefaultError = true;\n      }\n\n      break;\n\n    case 'Add Group':\n    case 'Add Membership':\n    case 'Remove Membership':\n      if (state === _constants.operation_states.FAILED) {\n        if (op.id && op.id !== store.getState().user.id) {\n          showDefaultError = false;\n        } else {\n          showDefaultError = true;\n          api.getMemberships(op.id).then(function (memberships) {\n            store.dispatch((0, _actions.updateMemberships)(memberships));\n          });\n        }\n      }\n\n      break;\n\n    default:\n      if (state === _constants.operation_states.FAILED) {\n        showDefaultError = true;\n      }\n\n  }\n\n  if (showDefaultError) {\n    _reactNative.Alert.alert(_i18next.default.t('common.alert.error'), _i18next.default.t('common.alert.text.failedOp', {\n      name: op.name,\n      message: result.message\n    }));\n  }\n};\n\nvar pollOperations = function _callee(api) {\n  var operations, shouldUpdateTasks, _iterator, _step, op, queryApi, id, secretKey, _await$queryApi$getOp, state, result;\n\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          operations = (0, _actions.selectPendingOperations)(_store.default.getState());\n          shouldUpdateTasks = false;\n          _context.prev = 2;\n          _iterator = _createForOfIteratorHelperLoose(operations);\n\n        case 4:\n          if ((_step = _iterator()).done) {\n            _context.next = 30;\n            break;\n          }\n\n          op = _step.value;\n          queryApi = api;\n\n          if (op.apiUrl) {\n            id = _store.default.getState().user.id;\n            secretKey = _store.default.getState().keypair.secretKey;\n            queryApi = new _brightId.NodeApi({\n              url: op.apiUrl,\n              id: id,\n              secretKey: secretKey\n            });\n          }\n\n          _context.next = 10;\n          return _regenerator.default.awrap(queryApi.getOperationState(op.hash));\n\n        case 10:\n          _await$queryApi$getOp = _context.sent;\n          state = _await$queryApi$getOp.state;\n          result = _await$queryApi$getOp.result;\n\n          if (!(op.state !== state)) {\n            _context.next = 27;\n            break;\n          }\n\n          _context.t0 = state;\n          _context.next = _context.t0 === _constants.operation_states.UNKNOWN ? 17 : _context.t0 === _constants.operation_states.INIT ? 19 : _context.t0 === _constants.operation_states.SENT ? 19 : _context.t0 === _constants.operation_states.APPLIED ? 20 : _context.t0 === _constants.operation_states.FAILED ? 20 : 22;\n          break;\n\n        case 17:\n          console.log(\"operation \" + op.name + \" (\" + op.hash + \") unknown on server\");\n          return _context.abrupt(\"break\", 23);\n\n        case 19:\n          return _context.abrupt(\"break\", 23);\n\n        case 20:\n          handleOpUpdate(_store.default, op, state, result, api);\n          return _context.abrupt(\"break\", 23);\n\n        case 22:\n          console.log(\"Op \" + op.name + \" (\" + op.hash + \") has invalid state '\" + state + \"'!\");\n\n        case 23:\n          _store.default.dispatch((0, _actions.updateOperation)({\n            id: op.hash,\n            changes: {\n              state: state\n            }\n          }));\n\n          if (state === _constants.operation_states.APPLIED) {\n            shouldUpdateTasks = true;\n          }\n\n          _context.next = 28;\n          break;\n\n        case 27:\n          if ((op.postTimestamp || op.timestamp) + _constants.OPERATION_TRACE_TIME < Date.now()) {\n            _store.default.dispatch((0, _actions.updateOperation)({\n              id: op.hash,\n              changes: {\n                state: _constants.operation_states.EXPIRED\n              }\n            }));\n          }\n\n        case 28:\n          _context.next = 4;\n          break;\n\n        case 30:\n          _context.next = 35;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t1 = _context[\"catch\"](2);\n\n          if (_context.t1 instanceof Error) {\n            console.warn(_context.t1.message);\n          } else {\n            console.warn(_context.t1);\n          }\n\n        case 35:\n          _context.prev = 35;\n\n          if (shouldUpdateTasks) {\n            _store.default.dispatch((0, _TasksSlice.checkTasks)());\n          }\n\n          return _context.finish(35);\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 32, 35, 38]], Promise);\n};\n\nexports.pollOperations = pollOperations;","map":{"version":3,"names":["handleOpUpdate","store","op","state","result","api","showDefaultError","name","dispatch","updateLinkedContext","context","contextId","operation_states","APPLIED","Alert","alert","i18next","t","message","id1","getState","user","id","addConnection","id2","status","getProfile","then","profile","conn","level","timestamp","connectedAt","reportReason","reports","find","r","reason","FAILED","getMemberships","memberships","updateMemberships","pollOperations","operations","selectPendingOperations","shouldUpdateTasks","queryApi","apiUrl","secretKey","keypair","NodeApi","url","getOperationState","hash","UNKNOWN","INIT","SENT","console","log","updateOperation","changes","postTimestamp","OPERATION_TRACE_TIME","Date","now","EXPIRED","Error","warn","checkTasks"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/operations.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport i18next from 'i18next';\nimport store from '@/store';\nimport {\n  updateLinkedContext,\n  addConnection,\n  updateMemberships,\n  updateOperation,\n  selectPendingOperations,\n} from '@/actions';\nimport { checkTasks } from '@/components/Tasks/TasksSlice';\nimport { operation_states, OPERATION_TRACE_TIME } from '@/utils/constants';\nimport { NodeApi } from '@/api/brightId';\n\nconst handleOpUpdate = (store, op, state, result, api) => {\n  let showDefaultError = false;\n  switch (op.name) {\n    case 'Link ContextId':\n      store.dispatch(\n        updateLinkedContext({\n          context: op.context,\n          contextId: op.contextId,\n          state,\n        }),\n      );\n      if (state === operation_states.APPLIED) {\n        Alert.alert(\n          i18next.t('apps.alert.title.linkSuccess'),\n          i18next.t('apps.alert.text.linkSuccess', {\n            context: `${op.context}`,\n          }),\n        );\n      } else {\n        Alert.alert(\n          i18next.t('apps.alert.title.linkFailure'),\n          i18next.t('apps.alert.text.linkFailure', {\n            context: `${op.context}`,\n            result: `${result.message}`,\n          }),\n        );\n      }\n      break;\n\n    case 'Connect':\n      if (op.id1 !== store.getState().user.id) {\n        // ignore other side of dummy test connections\n        break;\n      }\n      if (state === operation_states.APPLIED) {\n        store.dispatch(addConnection({ id: op.id2, status: 'verified' }));\n      } else {\n        api.getProfile(op.id2).then((profile) => {\n          const conn = {\n            id: profile.id,\n            level: profile.level,\n            timestamp: profile.connectedAt,\n            reportReason: profile.reports.find((r) => r.id === op.id1)?.reason,\n          };\n          store.dispatch(addConnection(conn));\n        });\n        showDefaultError = true;\n      }\n      break;\n\n    case 'Add Group':\n    case 'Add Membership':\n    case 'Remove Membership':\n      if (state === operation_states.FAILED) {\n        if (op.id && op.id !== store.getState().user.id) {\n          // the operation was triggered by e2e-tests, using a fake userID. Ignore error.\n          showDefaultError = false;\n        } else {\n          showDefaultError = true;\n          api.getMemberships(op.id).then((memberships) => {\n            store.dispatch(updateMemberships(memberships));\n          });\n        }\n      }\n      break;\n    default:\n      if (state === operation_states.FAILED) {\n        showDefaultError = true;\n      }\n  }\n\n  if (showDefaultError) {\n    Alert.alert(\n      i18next.t('common.alert.error'),\n      i18next.t('common.alert.text.failedOp', {\n        name: op.name,\n        message: result.message,\n      }),\n    );\n  }\n};\n\nexport const pollOperations = async (api) => {\n  const operations = selectPendingOperations(store.getState());\n  let shouldUpdateTasks = false;\n  try {\n    for (const op of operations) {\n      let queryApi = api;\n      if (op.apiUrl) {\n        // If the op has an apiUrl attached, use that instead of the default one.\n        // Background: Some operations like \"link context\" require to query a specific\n        // api endpoint as the op is only known on that node\n        const { id } = store.getState().user;\n        const { secretKey } = store.getState().keypair;\n        queryApi = new NodeApi({ url: op.apiUrl, id, secretKey });\n      }\n      const { state, result } = await queryApi.getOperationState(op.hash);\n\n      if (op.state !== state) {\n        switch (state) {\n          case operation_states.UNKNOWN:\n            // Op not found on server. It might appear in a future poll cycle, so do nothing.\n            console.log(`operation ${op.name} (${op.hash}) unknown on server`);\n            break;\n          case operation_states.INIT:\n          case operation_states.SENT:\n            // Op still waiting to be processed. Do nothing.\n            break;\n          case operation_states.APPLIED:\n          case operation_states.FAILED:\n            handleOpUpdate(store, op, state, result, api);\n            break;\n          default:\n            console.log(\n              `Op ${op.name} (${op.hash}) has invalid state '${state}'!`,\n            );\n        }\n        store.dispatch(updateOperation({ id: op.hash, changes: { state } }));\n        if (state === operation_states.APPLIED) {\n          // if an op was applied we should check achievements\n          shouldUpdateTasks = true;\n        }\n      } else {\n        // stop polling for op if trace time is expired\n        if (\n          (op.postTimestamp || op.timestamp) + OPERATION_TRACE_TIME <\n          Date.now()\n        ) {\n          store.dispatch(\n            updateOperation({\n              id: op.hash,\n              changes: { state: operation_states.EXPIRED },\n            }),\n          );\n        }\n      }\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      console.warn(err.message);\n    } else {\n      console.warn(err);\n    }\n  } finally {\n    if (shouldUpdateTasks) {\n      store.dispatch(checkTasks());\n    }\n  }\n};\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAOA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,GAA3B,EAAmC;EACxD,IAAIC,gBAAgB,GAAG,KAAvB;;EACA,QAAQJ,EAAE,CAACK,IAAX;IACE,KAAK,gBAAL;MACEN,KAAK,CAACO,QAAN,CACE,IAAAC,4BAAA,EAAoB;QAClBC,OAAO,EAAER,EAAE,CAACQ,OADM;QAElBC,SAAS,EAAET,EAAE,CAACS,SAFI;QAGlBR,KAAK,EAALA;MAHkB,CAApB,CADF;;MAOA,IAAIA,KAAK,KAAKS,2BAAA,CAAiBC,OAA/B,EAAwC;QACtCC,kBAAA,CAAMC,KAAN,CACEC,gBAAA,CAAQC,CAAR,CAAU,8BAAV,CADF,EAEED,gBAAA,CAAQC,CAAR,CAAU,6BAAV,EAAyC;UACvCP,OAAO,OAAKR,EAAE,CAACQ;QADwB,CAAzC,CAFF;MAMD,CAPD,MAOO;QACLI,kBAAA,CAAMC,KAAN,CACEC,gBAAA,CAAQC,CAAR,CAAU,8BAAV,CADF,EAEED,gBAAA,CAAQC,CAAR,CAAU,6BAAV,EAAyC;UACvCP,OAAO,OAAKR,EAAE,CAACQ,OADwB;UAEvCN,MAAM,OAAKA,MAAM,CAACc;QAFqB,CAAzC,CAFF;MAOD;;MACD;;IAEF,KAAK,SAAL;MACE,IAAIhB,EAAE,CAACiB,GAAH,KAAWlB,KAAK,CAACmB,QAAN,GAAiBC,IAAjB,CAAsBC,EAArC,EAAyC;QAEvC;MACD;;MACD,IAAInB,KAAK,KAAKS,2BAAA,CAAiBC,OAA/B,EAAwC;QACtCZ,KAAK,CAACO,QAAN,CAAe,IAAAe,sBAAA,EAAc;UAAED,EAAE,EAAEpB,EAAE,CAACsB,GAAT;UAAcC,MAAM,EAAE;QAAtB,CAAd,CAAf;MACD,CAFD,MAEO;QACLpB,GAAG,CAACqB,UAAJ,CAAexB,EAAE,CAACsB,GAAlB,EAAuBG,IAAvB,CAA4B,UAACC,OAAD,EAAa;UAAA;;UACvC,IAAMC,IAAI,GAAG;YACXP,EAAE,EAAEM,OAAO,CAACN,EADD;YAEXQ,KAAK,EAAEF,OAAO,CAACE,KAFJ;YAGXC,SAAS,EAAEH,OAAO,CAACI,WAHR;YAIXC,YAAY,2BAAEL,OAAO,CAACM,OAAR,CAAgBC,IAAhB,CAAqB,UAACC,CAAD;cAAA,OAAOA,CAAC,CAACd,EAAF,KAASpB,EAAE,CAACiB,GAAnB;YAAA,CAArB,CAAF,qBAAE,sBAA8CkB;UAJjD,CAAb;UAMApC,KAAK,CAACO,QAAN,CAAe,IAAAe,sBAAA,EAAcM,IAAd,CAAf;QACD,CARD;QASAvB,gBAAgB,GAAG,IAAnB;MACD;;MACD;;IAEF,KAAK,WAAL;IACA,KAAK,gBAAL;IACA,KAAK,mBAAL;MACE,IAAIH,KAAK,KAAKS,2BAAA,CAAiB0B,MAA/B,EAAuC;QACrC,IAAIpC,EAAE,CAACoB,EAAH,IAASpB,EAAE,CAACoB,EAAH,KAAUrB,KAAK,CAACmB,QAAN,GAAiBC,IAAjB,CAAsBC,EAA7C,EAAiD;UAE/ChB,gBAAgB,GAAG,KAAnB;QACD,CAHD,MAGO;UACLA,gBAAgB,GAAG,IAAnB;UACAD,GAAG,CAACkC,cAAJ,CAAmBrC,EAAE,CAACoB,EAAtB,EAA0BK,IAA1B,CAA+B,UAACa,WAAD,EAAiB;YAC9CvC,KAAK,CAACO,QAAN,CAAe,IAAAiC,0BAAA,EAAkBD,WAAlB,CAAf;UACD,CAFD;QAGD;MACF;;MACD;;IACF;MACE,IAAIrC,KAAK,KAAKS,2BAAA,CAAiB0B,MAA/B,EAAuC;QACrChC,gBAAgB,GAAG,IAAnB;MACD;;EAlEL;;EAqEA,IAAIA,gBAAJ,EAAsB;IACpBQ,kBAAA,CAAMC,KAAN,CACEC,gBAAA,CAAQC,CAAR,CAAU,oBAAV,CADF,EAEED,gBAAA,CAAQC,CAAR,CAAU,4BAAV,EAAwC;MACtCV,IAAI,EAAEL,EAAE,CAACK,IAD6B;MAEtCW,OAAO,EAAEd,MAAM,CAACc;IAFsB,CAAxC,CAFF;EAOD;AACF,CAhFD;;AAkFO,IAAMwB,cAAc,GAAG,iBAAOrC,GAAP;EAAA;;EAAA;IAAA;MAAA;QAAA;UACtBsC,UADsB,GACT,IAAAC,gCAAA,EAAwB3C,cAAA,CAAMmB,QAAN,EAAxB,CADS;UAExByB,iBAFwB,GAEJ,KAFI;UAAA;UAAA,4CAITF,UAJS;;QAAA;UAAA;YAAA;YAAA;UAAA;;UAIfzC,EAJe;UAKpB4C,QALoB,GAKTzC,GALS;;UAMxB,IAAIH,EAAE,CAAC6C,MAAP,EAAe;YAILzB,EAJK,GAIErB,cAAA,CAAMmB,QAAN,GAAiBC,IAJnB,CAILC,EAJK;YAKL0B,SALK,GAKS/C,cAAA,CAAMmB,QAAN,GAAiB6B,OAL1B,CAKLD,SALK;YAMbF,QAAQ,GAAG,IAAII,iBAAJ,CAAY;cAAEC,GAAG,EAAEjD,EAAE,CAAC6C,MAAV;cAAkBzB,EAAE,EAAFA,EAAlB;cAAsB0B,SAAS,EAATA;YAAtB,CAAZ,CAAX;UACD;;UAbuB;UAAA,kCAcQF,QAAQ,CAACM,iBAAT,CAA2BlD,EAAE,CAACmD,IAA9B,CAdR;;QAAA;UAAA;UAchBlD,KAdgB,yBAchBA,KAdgB;UAcTC,MAdS,yBAcTA,MAdS;;UAAA,MAgBpBF,EAAE,CAACC,KAAH,KAAaA,KAhBO;YAAA;YAAA;UAAA;;UAAA,cAiBdA,KAjBc;UAAA,gCAkBfS,2BAAA,CAAiB0C,OAlBF,wBAsBf1C,2BAAA,CAAiB2C,IAtBF,wBAuBf3C,2BAAA,CAAiB4C,IAvBF,wBA0Bf5C,2BAAA,CAAiBC,OA1BF,wBA2BfD,2BAAA,CAAiB0B,MA3BF;UAAA;;QAAA;UAoBlBmB,OAAO,CAACC,GAAR,gBAAyBxD,EAAE,CAACK,IAA5B,UAAqCL,EAAE,CAACmD,IAAxC;UApBkB;;QAAA;UAAA;;QAAA;UA4BlBrD,cAAc,CAACC,cAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,GAA3B,CAAd;UA5BkB;;QAAA;UA+BlBoD,OAAO,CAACC,GAAR,SACQxD,EAAE,CAACK,IADX,UACoBL,EAAE,CAACmD,IADvB,6BACmDlD,KADnD;;QA/BkB;UAmCtBF,cAAA,CAAMO,QAAN,CAAe,IAAAmD,wBAAA,EAAgB;YAAErC,EAAE,EAAEpB,EAAE,CAACmD,IAAT;YAAeO,OAAO,EAAE;cAAEzD,KAAK,EAALA;YAAF;UAAxB,CAAhB,CAAf;;UACA,IAAIA,KAAK,KAAKS,2BAAA,CAAiBC,OAA/B,EAAwC;YAEtCgC,iBAAiB,GAAG,IAApB;UACD;;UAvCqB;UAAA;;QAAA;UA0CtB,IACE,CAAC3C,EAAE,CAAC2D,aAAH,IAAoB3D,EAAE,CAAC6B,SAAxB,IAAqC+B,+BAArC,GACAC,IAAI,CAACC,GAAL,EAFF,EAGE;YACA/D,cAAA,CAAMO,QAAN,CACE,IAAAmD,wBAAA,EAAgB;cACdrC,EAAE,EAAEpB,EAAE,CAACmD,IADO;cAEdO,OAAO,EAAE;gBAAEzD,KAAK,EAAES,2BAAA,CAAiBqD;cAA1B;YAFK,CAAhB,CADF;UAMD;;QApDqB;UAAA;UAAA;;QAAA;UAAA;UAAA;;QAAA;UAAA;UAAA;;UAwD1B,IAAI,uBAAeC,KAAnB,EAA0B;YACxBT,OAAO,CAACU,IAAR,CAAa,YAAIjD,OAAjB;UACD,CAFD,MAEO;YACLuC,OAAO,CAACU,IAAR;UACD;;QA5DyB;UAAA;;UA8D1B,IAAItB,iBAAJ,EAAuB;YACrB5C,cAAA,CAAMO,QAAN,CAAe,IAAA4D,sBAAA,GAAf;UACD;;UAhEyB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAvB"},"metadata":{},"sourceType":"script"}