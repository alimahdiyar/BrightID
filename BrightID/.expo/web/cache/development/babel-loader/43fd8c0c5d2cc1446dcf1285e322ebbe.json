{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createDrawerNavigator, DrawerContentScrollView } from '@react-navigation/drawer';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useTranslation } from 'react-i18next';\nimport codePush from 'react-native-code-push';\nimport { SvgXml } from 'react-native-svg';\nimport { useDispatch, useSelector } from \"../store\";\nimport { setEditProfileMenuLayout, setEditProfileTextLayout } from \"../reducer/walkthroughSlice\";\nimport HomeScreen from \"../components/HomeScreen\";\nimport { BLACK, ORANGE, WHITE, GREY } from \"../theme/colors\";\nimport { fontSize } from \"../theme/fonts\";\nimport { DEVICE_LARGE, DEVICE_IOS } from \"../utils/deviceConstants\";\nimport { retrieveImage, photoDirectory } from \"../utils/filesystem\";\nimport Home from \"../components/Icons/Home\";\nimport Pencil from \"../components/Icons/Pencil\";\nimport RecoveryAccount from \"../components/Icons/RecoveryAccount\";\nimport List from \"../components/Icons/List\";\nimport GraphQl from \"../components/Icons/GraphQl\";\nimport Faq from \"../components/Icons/Faq\";\nimport Mail from \"../components/Icons/Mail\";\nimport FindFriendsScreen from \"../components/FindFriends/FindFriendsScreen\";\nimport Devices from \"../components/Icons/Devices\";\nimport TasksScreen from \"../components/Tasks/TasksScreen\";\nimport BituVerificationScreen from \"../components/Tasks/BituVerificationScreen\";\nimport GraphExplorerScreen from \"../components/SideMenu/GraphExplorerScreen\";\nimport ContactUsScreen from \"../components/SideMenu/ContactUsScreen\";\nimport EditProfileScreen from \"../components/EditProfile/EditProfileScreen\";\nimport RecoveryConnectionsScreen from \"../components/RecoveryConnections/RecoveryConnectionsScreen\";\nimport GroupsDrawerIcon from \"../static/groups_drawer.svg\";\nimport FindFriendsIcon from \"../static/findfriends_drawer.svg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CustomItem = function CustomItem(_ref) {\n  var onPress = _ref.onPress,\n      label = _ref.label,\n      Icon = _ref.icon,\n      focused = _ref.focused,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeTintColor = _ref.activeTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      testId = _ref.testId;\n  var dispatch = useDispatch();\n  return _jsxs(TouchableOpacity, {\n    testID: testId,\n    activeOpacity: 0.3,\n    style: [styles.drawerItem, {\n      backgroundColor: focused ? activeBackgroundColor : inactiveBackgroundColor\n    }],\n    onPress: onPress,\n    onLayout: function onLayout(e) {\n      if (label === 'Edit Profile') {\n        var _e$nativeEvent;\n\n        dispatch(setEditProfileMenuLayout((_e$nativeEvent = e.nativeEvent) == null ? void 0 : _e$nativeEvent.layout));\n      }\n    },\n    children: [_jsx(Icon, {\n      focused: focused\n    }), _jsx(Text, {\n      style: [styles.labelStyle, {\n        color: focused ? activeTintColor : inactiveTintColor\n      }],\n      onLayout: function onLayout(e) {\n        if (label === 'Edit Profile') {\n          var _e$nativeEvent2;\n\n          dispatch(setEditProfileTextLayout((_e$nativeEvent2 = e.nativeEvent) == null ? void 0 : _e$nativeEvent2.layout));\n        }\n      },\n      children: label\n    })]\n  });\n};\n\nvar CustomDrawerContent = function CustomDrawerContent(props) {\n  var state = props.state,\n      navigation = props.navigation;\n  var photoFilename = useSelector(function (state) {\n    return state.user.photo.filename;\n  });\n  var name = useSelector(function (state) {\n    return state.user.name;\n  });\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      profilePhoto = _useState2[0],\n      setProfilePhoto = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  retrieveImage(photoFilename).then(setProfilePhoto);\n  var profileSource = profilePhoto ? {\n    uri: profilePhoto\n  } : {\n    uri: \"file://\" + photoDirectory() + \"/\" + photoFilename\n  };\n  return _jsxs(DrawerContentScrollView, _objectSpread(_objectSpread({}, props), {}, {\n    children: [_jsxs(View, {\n      style: styles.profileContainer,\n      children: [_jsx(Image, {\n        source: profileSource,\n        style: styles.drawerPhoto,\n        accessibilityLabel: \"user photo\"\n      }), _jsx(Text, {\n        style: styles.userName,\n        children: name\n      })]\n    }), _jsx(CustomItem, {\n      testId: \"drawerHomeBtn\",\n      focused: false,\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.home'),\n      icon: function icon(_ref2) {\n        var focused = _ref2.focused;\n        return _jsx(Home, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 0,\n          routes: [{\n            name: 'Home'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerEditProfileBtn\",\n      focused: state.routeNames[state.index] === 'Edit Profile',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.editProfile'),\n      icon: function icon(_ref3) {\n        var focused = _ref3.focused;\n        return _jsx(Pencil, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Edit Profile'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerRecoveryConnectionsBtn\",\n      focused: state.routeNames[state.index] === 'Recovery Connections',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: \"Recovery Connections\",\n      icon: function icon(_ref4) {\n        var focused = _ref4.focused;\n        return _jsx(RecoveryAccount, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Recovery Connections'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerAchievementsBtn\",\n      focused: state.routeNames[state.index] === 'Achievements',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.achievements'),\n      icon: function icon(_ref5) {\n        var focused = _ref5.focused;\n        return _jsx(List, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Achievements'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerExplorerCodeBtn\",\n      focused: state.routeNames[state.index] === 'Copy Explorer Code',\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.copyExplorerCode'),\n      icon: function icon(_ref6) {\n        var focused = _ref6.focused;\n        return _jsx(GraphQl, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Copy Explorer Code'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      focused: false,\n      testId: \"groupsBtn\",\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.groups'),\n      icon: function icon() {\n        return _jsx(SvgXml, {\n          xml: GroupsDrawerIcon,\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'Groups'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      focused: false,\n      testId: \"findFriendsBtn\",\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.findFriends'),\n      icon: function icon() {\n        return _jsx(SvgXml, {\n          xml: FindFriendsIcon,\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'FindFriendsScreen'\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      focused: false,\n      testId: \"devicesBtn\",\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.devices'),\n      icon: function icon(_ref7) {\n        var focused = _ref7.focused;\n        return _jsx(Devices, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Devices'\n          }, {\n            name: 'Devices',\n            params: {\n              syncing: false,\n              asScanner: false\n            }\n          }]\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerUpdateBtn\",\n      focused: false,\n      inactiveTintColor: BLACK,\n      inactiveBackgroundColor: WHITE,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.checkForUpdates'),\n      icon: function icon(_ref8) {\n        var focused = _ref8.focused;\n        return _jsx(Faq, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        codePush.sync({\n          updateDialog: {},\n          installMode: codePush.InstallMode.IMMEDIATE\n        }, function (status) {\n          if (status === codePush.SyncStatus.UP_TO_DATE) {\n            Alert.alert(t('drawer.alert.title.upToDate'), t('drawer.alert.text.upToDate'));\n          }\n        });\n      }\n    }), _jsx(CustomItem, {\n      testId: \"drawerContactUsBtn\",\n      focused: state.routeNames[state.index] === 'ContactUs',\n      inactiveBackgroundColor: WHITE,\n      inactiveTintColor: BLACK,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: t('drawer.label.contactUs'),\n      icon: function icon(_ref9) {\n        var focused = _ref9.focused;\n        return _jsx(Mail, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'ContactUs'\n          }]\n        });\n      }\n    }), __DEV__ && _jsx(CustomItem, {\n      testId: \"drawerIconsBtn\",\n      focused: state.routeNames[state.index] === 'SampleIconPage',\n      inactiveBackgroundColor: WHITE,\n      inactiveTintColor: BLACK,\n      activeTintColor: WHITE,\n      activeBackgroundColor: ORANGE,\n      label: \"Sample Icon Page\",\n      icon: function icon(_ref10) {\n        var focused = _ref10.focused;\n        return _jsx(List, {\n          width: DEVICE_LARGE ? 28 : 24,\n          height: DEVICE_LARGE ? 28 : 24,\n          color: focused ? GREY : BLACK,\n          highlight: focused ? WHITE : ORANGE\n        });\n      },\n      onPress: function onPress() {\n        navigation.reset({\n          index: 1,\n          routes: [{\n            name: 'Home'\n          }, {\n            name: 'SampleIconPage'\n          }]\n        });\n      }\n    })]\n  }));\n};\n\nvar Drawer = createDrawerNavigator();\nexport var HomeDrawer = function HomeDrawer() {\n  var headerHeight = useHeaderHeight();\n\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  return _jsxs(Drawer.Navigator, {\n    drawerType: \"front\",\n    sceneContainerStyle: [styles.sceneContainer],\n    drawerStyle: [styles.drawer, {\n      marginTop: headerHeight\n    }],\n    drawerContentOptions: {\n      activeTintColor: WHITE,\n      inactiveTintColor: BLACK,\n      activeBackgroundColor: ORANGE,\n      inactiveBackgroundColor: WHITE,\n      itemStyle: styles.drawerItem,\n      labelStyle: styles.labelStyle\n    },\n    overlayColor: \"transparent\",\n    drawerContent: function drawerContent(props) {\n      return _jsx(CustomDrawerContent, _objectSpread({}, props));\n    },\n    children: [_jsx(Drawer.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Achievements\",\n      component: TasksScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"FindFriendsScreen\",\n      component: FindFriendsScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"BituVerification\",\n      component: BituVerificationScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Edit Profile\",\n      component: EditProfileScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Recovery Connections\",\n      component: RecoveryConnectionsScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"Copy Explorer Code\",\n      component: GraphExplorerScreen\n    }), _jsx(Drawer.Screen, {\n      name: \"ContactUs\",\n      component: ContactUsScreen\n    }), __DEV__ && _jsx(Drawer.Screen, {\n      name: \"SampleIconPage\",\n      component: require(\"../components/Icons/SamplePage\").default\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  sceneContainer: {\n    backgroundColor: WHITE\n  },\n  drawer: {\n    width: '85%',\n    borderTopRightRadius: 40,\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  },\n  drawerPhoto: {\n    width: DEVICE_LARGE ? 48 : 42,\n    height: DEVICE_LARGE ? 48 : 42,\n    borderRadius: 71\n  },\n  profileContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'center',\n    paddingLeft: DEVICE_LARGE ? 45 : 35,\n    paddingTop: DEVICE_LARGE ? 20 : 18,\n    paddingBottom: DEVICE_LARGE ? 30 : 25\n  },\n  userName: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: DEVICE_LARGE ? 20 : 18\n  },\n  drawerItem: {\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'row',\n    marginVertical: 4,\n    marginHorizontal: 10,\n    overflow: 'hidden',\n    paddingLeft: DEVICE_LARGE ? 43 : 34,\n    paddingVertical: 10\n  },\n  labelStyle: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: 16\n  }\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/routes/HomeDrawer.tsx"],"names":["CustomItem","onPress","label","icon","Icon","focused","inactiveTintColor","activeTintColor","activeBackgroundColor","inactiveBackgroundColor","testId","dispatch","useDispatch","styles","backgroundColor","setEditProfileMenuLayout","e","color","setEditProfileTextLayout","CustomDrawerContent","state","navigation","props","photoFilename","useSelector","name","profilePhoto","setProfilePhoto","useState","t","useTranslation","retrieveImage","profileSource","uri","photoDirectory","DEVICE_LARGE","index","routes","params","syncing","asScanner","codePush","updateDialog","installMode","status","Alert","__DEV__","Drawer","createDrawerNavigator","HomeDrawer","headerHeight","useHeaderHeight","DEVICE_IOS","marginTop","itemStyle","labelStyle","require","StyleSheet","sceneContainer","drawer","width","borderTopRightRadius","shadowColor","shadowOpacity","shadowRadius","elevation","shadowOffset","height","drawerPhoto","borderRadius","profileContainer","flexDirection","alignItems","paddingLeft","paddingTop","paddingBottom","userName","fontFamily","fontSize","marginLeft","drawerItem","justifyContent","marginVertical","marginHorizontal","overflow","paddingVertical"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Alert,\n  Image,\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n} from '@react-navigation/drawer';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useTranslation } from 'react-i18next';\nimport codePush from 'react-native-code-push';\nimport { SvgXml } from 'react-native-svg';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  setEditProfileMenuLayout,\n  setEditProfileTextLayout,\n} from '@/reducer/walkthroughSlice';\nimport HomeScreen from '@/components/HomeScreen';\nimport { BLACK, ORANGE, WHITE, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE, DEVICE_IOS } from '@/utils/deviceConstants';\nimport { retrieveImage, photoDirectory } from '@/utils/filesystem';\nimport Home from '@/components/Icons/Home';\nimport Pencil from '@/components/Icons/Pencil';\nimport RecoveryAccount from '@/components/Icons/RecoveryAccount';\nimport List from '@/components/Icons/List';\nimport GraphQl from '@/components/Icons/GraphQl';\nimport Faq from '@/components/Icons/Faq';\nimport Mail from '@/components/Icons/Mail';\nimport FindFriendsScreen from '@/components/FindFriends/FindFriendsScreen';\nimport Devices from '@/components/Icons/Devices';\nimport TasksScreen from '@/components/Tasks/TasksScreen';\nimport BituVerificationScreen from '@/components/Tasks/BituVerificationScreen';\nimport GraphExplorerScreen from '@/components/SideMenu/GraphExplorerScreen';\nimport ContactUsScreen from '@/components/SideMenu/ContactUsScreen';\nimport EditProfileScreen from '@/components/EditProfile/EditProfileScreen';\nimport RecoveryConnectionsScreen from '@/components/RecoveryConnections/RecoveryConnectionsScreen';\nimport GroupsDrawerIcon from '@/static/groups_drawer.svg';\nimport FindFriendsIcon from '@/static/findfriends_drawer.svg';\n\nconst CustomItem = ({\n  onPress,\n  label,\n  icon: Icon,\n  focused,\n  inactiveTintColor,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  testId,\n}) => {\n  const dispatch = useDispatch();\n  return (\n    <TouchableOpacity\n      testID={testId}\n      activeOpacity={0.3}\n      style={[\n        styles.drawerItem,\n        {\n          backgroundColor: focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor,\n        },\n      ]}\n      onPress={onPress}\n      onLayout={(e) => {\n        if (label === 'Edit Profile') {\n          //  X / Y / Height of the entire menu element for walkthough box\n          dispatch(setEditProfileMenuLayout(e.nativeEvent?.layout));\n        }\n      }}\n    >\n      <Icon focused={focused} />\n      <Text\n        style={[\n          styles.labelStyle,\n          {\n            color: focused ? activeTintColor : inactiveTintColor,\n          },\n        ]}\n        onLayout={(e) => {\n          if (label === 'Edit Profile') {\n            // use text to determine proper width of walkthrough box\n            dispatch(setEditProfileTextLayout(e.nativeEvent?.layout));\n          }\n        }}\n      >\n        {label}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nconst CustomDrawerContent = (props) => {\n  const { state, navigation } = props;\n  // selectors\n  const photoFilename = useSelector(\n    (state: State) => state.user.photo.filename,\n  );\n  const name = useSelector((state: State) => state.user.name);\n  // keep profile photo up to date\n  const [profilePhoto, setProfilePhoto] = useState('');\n  const { t } = useTranslation();\n\n  retrieveImage(photoFilename).then(setProfilePhoto);\n\n  // prevent console error and blank photo\n  const profileSource = profilePhoto\n    ? {\n        uri: profilePhoto,\n      }\n    : {\n        uri: `file://${photoDirectory()}/${photoFilename}`,\n      };\n\n  return (\n    <DrawerContentScrollView {...props}>\n      <View style={styles.profileContainer}>\n        <Image\n          source={profileSource}\n          style={styles.drawerPhoto}\n          accessibilityLabel=\"user photo\"\n        />\n        <Text style={styles.userName}>{name}</Text>\n      </View>\n      <CustomItem\n        testId=\"drawerHomeBtn\"\n        focused={false}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.home')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <Home\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 0,\n            routes: [{ name: 'Home' }],\n          });\n        }}\n      />\n      <CustomItem\n        testId=\"drawerEditProfileBtn\"\n        focused={state.routeNames[state.index] === 'Edit Profile'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.editProfile')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <Pencil\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Edit Profile' }],\n          });\n        }}\n      />\n      <CustomItem\n        testId=\"drawerRecoveryConnectionsBtn\"\n        focused={state.routeNames[state.index] === 'Recovery Connections'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label=\"Recovery Connections\"\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <RecoveryAccount\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Recovery Connections' }],\n          });\n        }}\n      />\n      <CustomItem\n        testId=\"drawerAchievementsBtn\"\n        focused={state.routeNames[state.index] === 'Achievements'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.achievements')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <List\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Achievements' }],\n          });\n        }}\n      />\n\n      <CustomItem\n        testId=\"drawerExplorerCodeBtn\"\n        focused={state.routeNames[state.index] === 'Copy Explorer Code'}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.copyExplorerCode')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <GraphQl\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Copy Explorer Code' }],\n          });\n        }}\n      />\n      <CustomItem\n        focused={false}\n        testId=\"groupsBtn\"\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.groups')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={() => (\n          <SvgXml\n            xml={GroupsDrawerIcon}\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'Groups' }],\n          });\n        }}\n      />\n      <CustomItem\n        focused={false}\n        testId=\"findFriendsBtn\"\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.findFriends')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={() => (\n          <SvgXml\n            xml={FindFriendsIcon}\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'FindFriendsScreen' }],\n          });\n        }}\n      />\n\n      <CustomItem\n        focused={false}\n        testId=\"devicesBtn\"\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.devices')}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        icon={({ focused }) => (\n          <Devices\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [\n              { name: 'Devices' },\n              { name: 'Devices', params: { syncing: false, asScanner: false } },\n            ],\n          });\n        }}\n      />\n\n      <CustomItem\n        testId=\"drawerUpdateBtn\"\n        focused={false}\n        inactiveTintColor={BLACK}\n        inactiveBackgroundColor={WHITE}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.checkForUpdates')}\n        icon={({ focused }) => (\n          <Faq\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          codePush.sync(\n            {\n              updateDialog: {},\n              installMode: codePush.InstallMode.IMMEDIATE,\n            },\n            (status) => {\n              if (status === codePush.SyncStatus.UP_TO_DATE) {\n                Alert.alert(\n                  t('drawer.alert.title.upToDate'),\n                  t('drawer.alert.text.upToDate'),\n                );\n              }\n            },\n          );\n        }}\n      />\n      <CustomItem\n        testId=\"drawerContactUsBtn\"\n        focused={state.routeNames[state.index] === 'ContactUs'}\n        // style={styles.drawerItem}\n        // labelStyle={styles.labelStyle}\n        inactiveBackgroundColor={WHITE}\n        inactiveTintColor={BLACK}\n        activeTintColor={WHITE}\n        activeBackgroundColor={ORANGE}\n        label={t('drawer.label.contactUs')}\n        icon={({ focused }) => (\n          <Mail\n            width={DEVICE_LARGE ? 28 : 24}\n            height={DEVICE_LARGE ? 28 : 24}\n            color={focused ? GREY : BLACK}\n            highlight={focused ? WHITE : ORANGE}\n          />\n        )}\n        onPress={() => {\n          navigation.reset({\n            index: 1,\n            routes: [{ name: 'Home' }, { name: 'ContactUs' }],\n          });\n        }}\n      />\n      {__DEV__ && (\n        <CustomItem\n          testId=\"drawerIconsBtn\"\n          focused={state.routeNames[state.index] === 'SampleIconPage'}\n          // style={styles.drawerItem}\n          // labelStyle={styles.labelStyle}\n          inactiveBackgroundColor={WHITE}\n          inactiveTintColor={BLACK}\n          activeTintColor={WHITE}\n          activeBackgroundColor={ORANGE}\n          label=\"Sample Icon Page\"\n          icon={({ focused }) => (\n            <List\n              width={DEVICE_LARGE ? 28 : 24}\n              height={DEVICE_LARGE ? 28 : 24}\n              color={focused ? GREY : BLACK}\n              highlight={focused ? WHITE : ORANGE}\n            />\n          )}\n          onPress={() => {\n            navigation.reset({\n              index: 1,\n              routes: [{ name: 'Home' }, { name: 'SampleIconPage' }],\n            });\n          }}\n        />\n      )}\n    </DrawerContentScrollView>\n  );\n};\n\nconst Drawer = createDrawerNavigator();\n\nexport const HomeDrawer = () => {\n  let headerHeight = useHeaderHeight();\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  return (\n    <Drawer.Navigator\n      drawerType=\"front\"\n      sceneContainerStyle={[styles.sceneContainer]}\n      drawerStyle={[styles.drawer, { marginTop: headerHeight }]}\n      drawerContentOptions={{\n        activeTintColor: WHITE,\n        inactiveTintColor: BLACK,\n        activeBackgroundColor: ORANGE,\n        inactiveBackgroundColor: WHITE,\n        itemStyle: styles.drawerItem,\n        labelStyle: styles.labelStyle,\n      }}\n      overlayColor=\"transparent\"\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Home\" component={HomeScreen} />\n      <Drawer.Screen name=\"Achievements\" component={TasksScreen} />\n      <Drawer.Screen name=\"FindFriendsScreen\" component={FindFriendsScreen} />\n      <Drawer.Screen\n        name=\"BituVerification\"\n        component={BituVerificationScreen}\n      />\n      <Drawer.Screen name=\"Edit Profile\" component={EditProfileScreen} />\n      <Drawer.Screen\n        name=\"Recovery Connections\"\n        component={RecoveryConnectionsScreen}\n      />\n      <Drawer.Screen\n        name=\"Copy Explorer Code\"\n        component={GraphExplorerScreen}\n      />\n      <Drawer.Screen name=\"ContactUs\" component={ContactUsScreen} />\n      {__DEV__ && (\n        <Drawer.Screen\n          name=\"SampleIconPage\"\n          component={require('@/components/Icons/SamplePage').default}\n        />\n      )}\n    </Drawer.Navigator>\n  );\n};\n\nconst styles = StyleSheet.create({\n  sceneContainer: {\n    backgroundColor: WHITE,\n  },\n  drawer: {\n    width: '85%',\n    borderTopRightRadius: 40,\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n  },\n  drawerPhoto: {\n    width: DEVICE_LARGE ? 48 : 42,\n    height: DEVICE_LARGE ? 48 : 42,\n    borderRadius: 71,\n  },\n  profileContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'center',\n    paddingLeft: DEVICE_LARGE ? 45 : 35,\n    paddingTop: DEVICE_LARGE ? 20 : 18,\n    paddingBottom: DEVICE_LARGE ? 30 : 25,\n  },\n  userName: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: DEVICE_LARGE ? 20 : 18,\n  },\n  drawerItem: {\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'row',\n    marginVertical: 4,\n    marginHorizontal: 10,\n    overflow: 'hidden',\n    paddingLeft: DEVICE_LARGE ? 43 : 34,\n    paddingVertical: 10,\n  },\n  labelStyle: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    marginLeft: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}