{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { useTranslation } from 'react-i18next';\nimport Ionicon from \"@expo/vector-icons/Ionicons\";\nimport { DEVICE_LARGE, DEVICE_IOS } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport Search from \"../Icons/Search\";\nimport { GREY, LIGHT_BLACK, WHITE } from \"../../theme/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar X_TRANSFORM = DEVICE_LARGE ? 250 : 195;\n\nvar AnimatedTopSearchBar = function AnimatedTopSearchBar(_ref) {\n  var sortable = _ref.sortable,\n      _ref$handleSort = _ref.handleSort,\n      handleSort = _ref$handleSort === void 0 ? function () {\n    return null;\n  } : _ref$handleSort,\n      setSearchValue = _ref.setSearchValue,\n      setSearchOpen = _ref.setSearchOpen,\n      searchOpenSelector = _ref.searchOpenSelector;\n  var dispatch = useDispatch();\n  var textInput = useRef(null);\n  var searchOpen = useSelector(searchOpenSelector);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  useEffect(function () {\n    return function () {\n      console.log('clearing search param');\n      dispatch(setSearchValue(''));\n      dispatch(setSearchOpen(false));\n    };\n  }, []);\n  var leftAnim = useRef(new Animated.Value(X_TRANSFORM)).current;\n\n  var getPidded = function getPidded() {\n    if (searchOpen) {\n      var _textInput$current, _textInput$current2;\n\n      dispatch(setSearchValue(''));\n      (_textInput$current = textInput.current) == null ? void 0 : _textInput$current.clear();\n      (_textInput$current2 = textInput.current) == null ? void 0 : _textInput$current2.blur();\n    } else {\n      var _textInput$current3;\n\n      (_textInput$current3 = textInput.current) == null ? void 0 : _textInput$current3.focus();\n    }\n\n    dispatch(setSearchOpen(!searchOpen));\n    Animated.spring(leftAnim, {\n      toValue: searchOpen ? X_TRANSFORM : 0,\n      useNativeDriver: true\n    }).start();\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TouchableOpacity, {\n      style: styles.searchIcon,\n      onPress: getPidded,\n      testID: \"SearchBarBtn\",\n      children: _jsx(Search, {\n        width: DEVICE_LARGE ? 20 : 18,\n        height: DEVICE_LARGE ? 20 : 18\n      })\n    }), _jsx(TextInput, {\n      testID: \"SearchParam\",\n      ref: textInput,\n      onChangeText: function onChangeText(value) {\n        dispatch(setSearchValue(value));\n      },\n      style: [styles.searchField, DEVICE_IOS && {\n        height: DEVICE_LARGE ? 33 : 26\n      }],\n      placeholder: t('common.placeholder.searchConnections'),\n      autoCapitalize: \"words\",\n      autoCorrect: false,\n      textContentType: \"none\",\n      underlineColorAndroid: \"transparent\",\n      placeholderTextColor: GREY,\n      clearTextOnFocus: true,\n      onFocus: function onFocus() {\n        dispatch(setSearchValue(''));\n      }\n    }), sortable && _jsx(TouchableOpacity, {\n      onPress: handleSort,\n      style: styles.optionsIcon,\n      children: _jsx(Ionicon, {\n        size: DEVICE_LARGE ? 22 : 20,\n        name: \"ios-options\",\n        color: LIGHT_BLACK\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '90%',\n    height: DEVICE_LARGE ? 40 : 36,\n    marginTop: '5%',\n    alignSelf: 'flex-end',\n    borderTopLeftRadius: 20,\n    borderBottomLeftRadius: 20,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: WHITE,\n    shadowColor: 'rgba(221, 179, 169, 0.3)',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 1,\n    shadowRadius: 5,\n    elevation: 5\n  },\n  searchIcon: {\n    marginLeft: 15\n  },\n  optionsIcon: {\n    marginLeft: 10,\n    marginRight: 8.8,\n    marginTop: 3\n  },\n  searchField: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[15],\n    color: LIGHT_BLACK,\n    marginLeft: DEVICE_LARGE ? 23 : 20,\n    flex: 1,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    letterSpacing: 0,\n    padding: 0,\n    alignItems: 'center'\n  }\n});\nexport default AnimatedTopSearchBar;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/RecoveryConnections/TopSearchBar.tsx"],"names":["X_TRANSFORM","DEVICE_LARGE","AnimatedTopSearchBar","sortable","handleSort","setSearchValue","setSearchOpen","searchOpenSelector","dispatch","useDispatch","textInput","useRef","searchOpen","useSelector","t","useTranslation","useEffect","console","leftAnim","Animated","getPidded","toValue","useNativeDriver","styles","DEVICE_IOS","height","StyleSheet","container","flexDirection","width","marginTop","alignSelf","borderTopLeftRadius","borderBottomLeftRadius","justifyContent","alignItems","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","searchIcon","marginLeft","optionsIcon","marginRight","searchField","fontFamily","fontSize","color","flex","fontWeight","fontStyle","letterSpacing","padding"],"mappings":"AAAA,SAAA,SAAA,EAAA,MAAA,QAAA,OAAA;;;;;;AASA,SAAA,WAAA,EAAA,WAAA;AACA,SAAA,cAAA,QAAA,eAAA;AACA,OAAA,OAAA,MAAA,6BAAA;AACA,SAAA,YAAA,EAAA,UAAA;AACA,SAAA,QAAA;AACA,OAAA,MAAA;AACA,SAAA,IAAA,EAAA,WAAA,EAAA,KAAA;;;AAOA,IAAMA,WAAW,GAAGC,YAAY,GAAA,GAAA,GAAhC,GAAA;;AAEA,IAAMC,oBAAoB,GAApBA,SAAAA,oBAAAA,CAAuB,IAAvBA,EAMA;EALJC,IAAAA,QAKI,GAAA,IAAA,CALJA,QAAAA;EAAAA,IAKI,eAAA,GAAA,IAAA,CAJJC,UADAD;EAAAA,IACAC,UAII,GAAA,eAAA,KAAA,KAAA,CAAA,GAJS,YAAA;IAAA,OAAA,IAAA;EAIT,CAAA,GAAA,eALJD;EAAAA,IAEAE,cAGI,GAAA,IAAA,CAHJA,cAFAF;EAAAA,IAGAG,aAEI,GAAA,IAAA,CAFJA,aAHAH;EAAAA,IAIAI,kBACI,GAAA,IAAA,CADJA,kBAJAJ;EAMA,IAAMK,QAAQ,GAAGC,WAAjB,EAAA;EACA,IAAMC,SAAS,GAAGC,MAAM,CAAxB,IAAwB,CAAxB;EACA,IAAMC,UAAU,GAAGC,WAAW,CAA9B,kBAA8B,CAA9B;;EACA,IAAA,eAAA,GAAcE,cAAd,EAAA;EAAA,IAAQD,CAAR,GAAA,eAAA,CAAA,CAAA;;EAEAE,SAAS,CAAC,YAAM;IAEd,OAAO,YAAM;MACXC,OAAO,CAAPA,GAAAA,CAAAA,uBAAAA;MACAT,QAAQ,CAACH,cAAc,CAAvBG,EAAuB,CAAf,CAARA;MACAA,QAAQ,CAACF,aAAa,CAAtBE,KAAsB,CAAd,CAARA;IAHF,CAAA;EAFO,CAAA,EAATQ,EAAS,CAATA;EAUA,IAAME,QAAQ,GAAGP,MAAM,CAAC,IAAIQ,QAAQ,CAAZ,KAAA,CAAPR,WAAO,CAAD,CAANA,CAAjB,OAAA;;EAEA,IAAMS,SAAS,GAATA,SAAAA,SAAAA,GAAkB;IACtB,IAAA,UAAA,EAAgB;MAAA,IAAA,kBAAA,EAAA,mBAAA;;MACdZ,QAAQ,CAACH,cAAc,CAAvBG,EAAuB,CAAf,CAARA;MACA,CAAA,kBAAA,GAAA,SAAS,CAAT,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,KAAA,EAAA;MACA,CAAA,mBAAA,GAAA,SAAS,CAAT,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,IAAA,EAAA;IAHF,CAAA,MAIO;MAAA,IAAA,mBAAA;;MACL,CAAA,mBAAA,GAAA,SAAS,CAAT,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,KAAA,EAAA;IAGFA;;IAAAA,QAAQ,CAACF,aAAa,CAAC,CAAvBE,UAAsB,CAAd,CAARA;IACAW,QAAQ,CAARA,MAAAA,CAAAA,QAAAA,EAA0B;MACxBE,OAAO,EAAET,UAAU,GAAA,WAAA,GADK,CAAA;MAExBU,eAAe,EAFjBH;IAA0B,CAA1BA,EAAAA,KAAAA;EAVF,CAAA;;EAgBA,OACE,KAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEI,MAAM,CAAnB,SAAA;IAAA,QAAA,EAAA,CACE,IAAA,CAAA,gBAAA,EAAA;MACE,KAAK,EAAEA,MAAM,CADf,UAAA;MAEE,OAAO,EAFT,SAAA;MAGE,MAAM,EAHR,cAAA;MAAA,QAAA,EAKE,IAAA,CAAA,MAAA,EAAA;QACE,KAAK,EAAEtB,YAAY,GAAA,EAAA,GADrB,EAAA;QAEE,MAAM,EAAEA,YAAY,GAAA,EAAA,GAR1B;MAMI,CAAA;IALF,CAAA,CADF,EAWE,IAAA,CAAA,SAAA,EAAA;MACE,MAAM,EADR,aAAA;MAEE,GAAG,EAFL,SAAA;MAGE,YAAY,EAAE,SAAA,YAAA,CAAA,KAAA,EAAW;QACvBO,QAAQ,CAACH,cAAc,CAAvBG,KAAuB,CAAf,CAARA;MAJJ,CAAA;MAME,KAAK,EAAE,CACLe,MAAM,CADD,WAAA,EAELC,UAAU,IAAI;QAAEC,MAAM,EAAExB,YAAY,GAAA,EAAA,GARxC;MAQkB,CAFT,CANT;MAUE,WAAW,EAAEa,CAAC,CAVhB,sCAUgB,CAVhB;MAWE,cAAc,EAXhB,OAAA;MAYE,WAAW,EAZb,KAAA;MAaE,eAAe,EAbjB,MAAA;MAcE,qBAAqB,EAdvB,aAAA;MAeE,oBAAoB,EAftB,IAAA;MAgBE,gBAAgB,EAhBlB,IAAA;MAiBE,OAAO,EAAE,SAAA,OAAA,GAAM;QACbN,QAAQ,CAACH,cAAc,CAAvBG,EAAuB,CAAf,CAARA;MA7BN;IAWE,CAAA,CAXF,EAgCGL,QAAQ,IACP,IAAA,CAAA,gBAAA,EAAA;MAAkB,OAAO,EAAzB,UAAA;MAAuC,KAAK,EAAEoB,MAAM,CAApD,WAAA;MAAA,QAAA,EACE,IAAA,CAAA,OAAA,EAAA;QACE,IAAI,EAAEtB,YAAY,GAAA,EAAA,GADpB,EAAA;QAEE,IAAI,EAFN,aAAA;QAGE,KAAK,EAtCf;MAmCQ,CAAA;IADF,CAAA,CAjCJ;EAAA,CAAA,CADF;AAxCF,CAAA;;AAsFA,IAAMsB,MAAM,GAAGG,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,aAAa,EADJ,KAAA;IAETC,KAAK,EAFI,KAAA;IAGTJ,MAAM,EAAExB,YAAY,GAAA,EAAA,GAHX,EAAA;IAIT6B,SAAS,EAJA,IAAA;IAKTC,SAAS,EALA,UAAA;IAMTC,mBAAmB,EANV,EAAA;IAOTC,sBAAsB,EAPb,EAAA;IAQTC,cAAc,EARL,eAAA;IASTC,UAAU,EATD,QAAA;IAUTC,eAAe,EAVN,KAAA;IAWTC,WAAW,EAXF,0BAAA;IAYTC,YAAY,EAAE;MAAET,KAAK,EAAP,CAAA;MAAYJ,MAAM,EAZvB;IAYK,CAZL;IAaTc,aAAa,EAbJ,CAAA;IAcTC,YAAY,EAdH,CAAA;IAeTC,SAAS,EAhBoB;EACpB,CADoB;EAkB/BC,UAAU,EAAE;IACVC,UAAU,EAnBmB;EAkBnB,CAlBmB;EAqB/BC,WAAW,EAAE;IACXD,UAAU,EADC,EAAA;IAEXE,WAAW,EAFA,GAAA;IAGXf,SAAS,EAxBoB;EAqBlB,CArBkB;EA0B/BgB,WAAW,EAAE;IACXC,UAAU,EADC,cAAA;IAEXC,QAAQ,EAAEA,QAAQ,CAFP,EAEO,CAFP;IAGXC,KAAK,EAHM,WAAA;IAIXN,UAAU,EAAE1C,YAAY,GAAA,EAAA,GAJb,EAAA;IAKXiD,IAAI,EALO,CAAA;IAMXC,UAAU,EANC,QAAA;IAOXC,SAAS,EAPE,QAAA;IAQXC,aAAa,EARF,CAAA;IASXC,OAAO,EATI,CAAA;IAUXnB,UAAU,EApCd;EA0Be;AA1BkB,CAAlBT,CAAf;AAwCA,eAAA,oBAAA","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  View,\n  Animated,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n} from 'react-native';\n\nimport { useDispatch, useSelector } from '@/store';\nimport { useTranslation } from 'react-i18next';\nimport Ionicon from 'react-native-vector-icons/Ionicons';\nimport { DEVICE_LARGE, DEVICE_IOS } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport Search from '@/components/Icons/Search';\nimport { GREY, LIGHT_BLACK, WHITE, ORANGE } from '@/theme/colors';\n\n/**\n * Search Bar in the Connections Screen\n * TODO: Add functionality for the Ionicons\n * TODO: add search filter in redux actions\n */\nconst X_TRANSFORM = DEVICE_LARGE ? 250 : 195;\n\nconst AnimatedTopSearchBar = ({\n  sortable,\n  handleSort = () => null,\n  setSearchValue,\n  setSearchOpen,\n  searchOpenSelector,\n}) => {\n  const dispatch = useDispatch();\n  const textInput = useRef<TextInput>(null);\n  const searchOpen = useSelector(searchOpenSelector);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    // reset search Param\n    return () => {\n      console.log('clearing search param');\n      dispatch(setSearchValue(''));\n      dispatch(setSearchOpen(false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const leftAnim = useRef(new Animated.Value(X_TRANSFORM)).current;\n\n  const getPidded = () => {\n    if (searchOpen) {\n      dispatch(setSearchValue(''));\n      textInput.current?.clear();\n      textInput.current?.blur();\n    } else {\n      textInput.current?.focus();\n    }\n\n    dispatch(setSearchOpen(!searchOpen));\n    Animated.spring(leftAnim, {\n      toValue: searchOpen ? X_TRANSFORM : 0,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        style={styles.searchIcon}\n        onPress={getPidded}\n        testID=\"SearchBarBtn\"\n      >\n        <Search\n          width={DEVICE_LARGE ? 20 : 18}\n          height={DEVICE_LARGE ? 20 : 18}\n        />\n      </TouchableOpacity>\n      <TextInput\n        testID=\"SearchParam\"\n        ref={textInput}\n        onChangeText={(value) => {\n          dispatch(setSearchValue(value));\n        }}\n        style={[\n          styles.searchField,\n          DEVICE_IOS && { height: DEVICE_LARGE ? 33 : 26 },\n        ]}\n        placeholder={t('common.placeholder.searchConnections')}\n        autoCapitalize=\"words\"\n        autoCorrect={false}\n        textContentType=\"none\"\n        underlineColorAndroid=\"transparent\"\n        placeholderTextColor={GREY}\n        clearTextOnFocus={true}\n        onFocus={() => {\n          dispatch(setSearchValue(''));\n        }}\n      />\n      {sortable && (\n        <TouchableOpacity onPress={handleSort} style={styles.optionsIcon}>\n          <Ionicon\n            size={DEVICE_LARGE ? 22 : 20}\n            name=\"ios-options\"\n            color={LIGHT_BLACK}\n          />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '90%',\n    height: DEVICE_LARGE ? 40 : 36,\n    marginTop: '5%',\n    alignSelf: 'flex-end',\n    borderTopLeftRadius: 20,\n    borderBottomLeftRadius: 20,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: WHITE,\n    shadowColor: 'rgba(221, 179, 169, 0.3)',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 1,\n    shadowRadius: 5,\n    elevation: 5,\n  },\n  searchIcon: {\n    marginLeft: 15,\n  },\n  optionsIcon: {\n    marginLeft: 10,\n    marginRight: 8.8,\n    marginTop: 3,\n  },\n  searchField: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[15],\n    color: LIGHT_BLACK,\n    marginLeft: DEVICE_LARGE ? 23 : 20,\n    flex: 1,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    letterSpacing: 0,\n    padding: 0,\n    alignItems: 'center',\n  },\n});\n\nexport default AnimatedTopSearchBar;\n"]},"metadata":{},"sourceType":"module"}