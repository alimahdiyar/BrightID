{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"openByDefault\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\n\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n    return it.type === 'drawer';\n  }));\n};\n\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [].concat(_toConsumableArray(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\n\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\n\nexport default function DrawerRouter(_ref) {\n  var openByDefault = _ref.openByDefault,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var router = TabRouter(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","Boolean","state","it","history","openByDefault","rest","router","TabRouter","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}