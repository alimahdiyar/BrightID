{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { asyncCreateMigrate } from \"./asyncCreateMigrate\";\n\nvar findContextId = function findContextId(item) {\n  return item.contextId;\n};\n\nvar appsMigrations = {\n  10: function _(state) {\n    var filteredContexts, ids, entities;\n    return _regeneratorRuntime.async(function _$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (Array.isArray(state.linkedContexts)) {\n              filteredContexts = state.linkedContexts.filter(findContextId);\n              ids = filteredContexts.map(findContextId);\n              entities = {};\n              filteredContexts.forEach(function (context) {\n                entities[findContextId(context)] = context;\n              });\n              state.linkedContexts = {\n                ids: ids,\n                entities: entities\n              };\n            }\n\n            return _context.abrupt(\"return\", state);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport var appsMigrate = asyncCreateMigrate(appsMigrations, {\n  debug: __DEV__\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/migrations/apps.ts"],"names":["findContextId","item","appsMigrations","Array","state","filteredContexts","ids","entities","appsMigrate","asyncCreateMigrate","debug"],"mappings":";AAEA,SAAA,kBAAA;;AAEA,IAAMA,aAAa,GAAbA,SAAAA,aAAAA,CAAgB,IAAhBA,EAAgB;EAAA,OAAuBC,IAAI,CAA3B,SAAA;AAAtB,CAAA;;AASA,IAAMC,cAAiC,GAAG;EACxC,IAAI,SAAA,CAAA,CAAA,KAAA,EAAA;IAAA,IAAA,gBAAA,EAAA,GAAA,EAAA,QAAA;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,EAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACF,IAAIC,KAAK,CAALA,OAAAA,CAAcC,KAAK,CAAvB,cAAID,CAAJ,EAAyC;cACjCE,gBADiC,GACdD,KAAK,CAALA,cAAAA,CAAAA,MAAAA,CADc,aACdA,CAAnBC;cAEAC,GAHiC,GAG3BD,gBAAgB,CAAhBA,GAAAA,CAH2B,aAG3BA,CAANC;cAEAC,QALiC,GAAA,EAKjCA;cAENF,gBAAgB,CAAhBA,OAAAA,CAAyB,UAAA,OAAA,EAAa;gBACpCE,QAAQ,CAACP,aAAa,CAAtBO,OAAsB,CAAd,CAARA,GAAAA,OAAAA;cADFF,CAAAA;cAIAD,KAAK,CAALA,cAAAA,GAAuB;gBAAEE,GAAG,EAAL,GAAA;gBAAOC,QAAQ,EAAtCH;cAAuB,CAAvBA;YAZA;;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,KAAA,CAAA;;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;EADN;AAA0C,CAA1C;AAoBA,OAAO,IAAMI,WAAW,GAAGC,kBAAkB,CAAA,cAAA,EAAiB;EAC5DC,KAAK,EADA;AAAuD,CAAjB,CAAtC","sourcesContent":["import { Dictionary } from '@reduxjs/toolkit';\nimport { PersistedState } from 'redux-persist';\nimport { asyncCreateMigrate, MigrationManifest } from './asyncCreateMigrate';\n\nconst findContextId = (item: ContextInfo) => item.contextId;\n\ntype V9State = {\n  apps: AppInfo[];\n  linkedContexts: ContextInfo[];\n} & PersistedState;\n\ntype V10State = AppsState & PersistedState;\n\nconst appsMigrations: MigrationManifest = {\n  10: async (state: V9State | V10State) => {\n    if (Array.isArray(state.linkedContexts)) {\n      const filteredContexts = state.linkedContexts.filter(findContextId);\n\n      const ids = filteredContexts.map(findContextId);\n\n      const entities: Dictionary<ContextInfo> = {};\n\n      filteredContexts.forEach((context) => {\n        entities[findContextId(context)] = context;\n      });\n\n      state.linkedContexts = { ids, entities };\n    }\n\n    return state as V10State;\n  },\n};\n\nexport const appsMigrate = asyncCreateMigrate(appsMigrations, {\n  debug: __DEV__,\n});\n"]},"metadata":{},"sourceType":"module"}