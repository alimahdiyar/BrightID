{"ast":null,"code":"import { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, handlers, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\n\nfunction logUnknownEvent(type) {\n  console.error(\"`\" + type + \"` is not a valid react-native-localize event\");\n}\n\nexport function addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\nexport function removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\nexport function findBestAvailableLanguage(languageTags) {\n  var locales = getLocales();\n  var loweredLanguageTags = languageTags.map(function (tag) {\n    return tag.toLowerCase();\n  });\n\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n        languageCode = currentLocale.languageCode,\n        scriptCode = currentLocale.scriptCode,\n        countryCode = currentLocale.countryCode,\n        isRTL = currentLocale.isRTL;\n    var combinaisons = [languageTag, !!scriptCode ? languageCode + \"-\" + scriptCode : null, languageCode + \"-\" + countryCode, languageCode].filter(function (value) {\n      return !!value;\n    });\n\n    for (var j = 0; j < combinaisons.length; j++) {\n      var combinaison = combinaisons[j].toLowerCase();\n      var tagIndex = loweredLanguageTags.indexOf(combinaison);\n\n      if (tagIndex !== -1) {\n        return {\n          languageTag: languageTags[tagIndex],\n          isRTL: isRTL\n        };\n      }\n    }\n  }\n}\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nexport * from \"./types\";\nexport default {\n  getCalendar: getCalendar,\n  getCountry: getCountry,\n  getCurrencies: getCurrencies,\n  getLocales: getLocales,\n  getNumberFormatSettings: getNumberFormatSettings,\n  getTemperatureUnit: getTemperatureUnit,\n  getTimeZone: getTimeZone,\n  uses24HourClock: uses24HourClock,\n  usesAutoDateAndTime: usesAutoDateAndTime,\n  usesAutoTimeZone: usesAutoTimeZone,\n  usesMetricSystem: usesMetricSystem,\n  findBestAvailableLanguage: findBestAvailableLanguage,\n  addEventListener: addEventListener,\n  removeEventListener: removeEventListener\n};","map":{"version":3,"sources":["index.ts"],"names":["console","type","logUnknownEvent","handlers","locales","getLocales","loweredLanguageTags","languageTags","tag","i","currentLocale","languageTag","languageCode","scriptCode","countryCode","isRTL","combinaisons","value","j","combinaison","tagIndex","getCalendar","getCountry","getCurrencies","getNumberFormatSettings","getTemperatureUnit","getTimeZone","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem","findBestAvailableLanguage","addEventListener","removeEventListener"],"mappings":"AAAA,SAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,uBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,gBAAA;;AAgBA,SAAA,eAAA,CAAA,IAAA,EAAuC;EACrCA,OAAO,CAAPA,KAAAA,CAAAA,MAAAA,IAAAA,GAAAA,8CAAAA;AAGF;;AAAA,OAAO,SAAA,gBAAA,CAAA,IAAA,EAAA,OAAA,EAGC;EACN,IAAIC,IAAI,KAAR,QAAA,EAAuB;IACrBC,eAAe,CADjB,IACiB,CAAfA;EADF,CAAA,MAEO,IAAI,CAACC,QAAQ,CAARA,GAAAA,CAAL,OAAKA,CAAL,EAA4B;IACjCA,QAAQ,CAARA,GAAAA,CAAAA,OAAAA;EAEH;AAED;AAAA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,OAAA,EAGC;EACN,IAAIF,IAAI,KAAR,QAAA,EAAuB;IACrBC,eAAe,CADjB,IACiB,CAAfA;EADF,CAAA,MAEO,IAAIC,QAAQ,CAARA,GAAAA,CAAJ,OAAIA,CAAJ,EAA2B;IAChCA,QAAQ,CAARA,MAAAA,CAAAA,OAAAA;EAEH;AAED;AAAA,OAAO,SAAA,yBAAA,CAAA,YAAA,EAE2C;EAChD,IAAMC,OAAO,GAAGC,UAAhB,EAAA;EACA,IAAMC,mBAAmB,GAAGC,YAAY,CAAZA,GAAAA,CAAkBC,UAAD,GAACA,EAAD;IAAA,OAASA,GAAG,CAAZ,WAASA,EAAT;EAA7C,CAA4BD,CAA5B;;EAEA,KAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGL,OAAO,CAA3B,MAAA,EAAoCK,CAApC,EAAA,EAAyC;IACvC,IAAMC,aAAa,GAAGN,OAAO,CAA7B,CAA6B,CAA7B;IAEA,IAAQO,WAAR,GACED,aADF,CAAA,WAAA;IAAA,IAAqBE,YAArB,GACEF,aADF,CAAA,YAAA;IAAA,IAAmCG,UAAnC,GACEH,aADF,CAAA,UAAA;IAAA,IAA+CI,WAA/C,GACEJ,aADF,CAAA,WAAA;IAAA,IAA4DK,KAA5D,GACEL,aADF,CAAA,KAAA;IAGA,IAAMM,YAAY,GAAG,CAAA,WAAA,EAEnB,CAAC,CAAD,UAAA,GAAeJ,YAAY,GAAZA,GAAAA,GAAf,UAAA,GAFmB,IAAA,EAGnBA,YAAY,GAAZA,GAAAA,GAHmB,WAAA,EAAA,YAAA,EAAA,MAAA,CAKXK,UAAD,KAACA,EAAD;MAAA,OAA4B,CAAC,CAA7B,KAAA;IALT,CAAqB,CAArB;;IAOA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,YAAY,CAAhC,MAAA,EAAyCE,CAAzC,EAAA,EAA8C;MAC5C,IAAMC,WAAW,GAAGH,YAAY,CAAZA,CAAY,CAAZA,CAApB,WAAoBA,EAApB;MACA,IAAMI,QAAQ,GAAGd,mBAAmB,CAAnBA,OAAAA,CAAjB,WAAiBA,CAAjB;;MAEA,IAAIc,QAAQ,KAAK,CAAjB,CAAA,EAAqB;QACnB,OAAO;UAAET,WAAW,EAAEJ,YAAY,CAA3B,QAA2B,CAA3B;UAAuCQ,KAAAA,EAA9C;QAAO,CAAP;MAEH;IACF;EACF;AAED;AAAA,SAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,uBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,gBAAA;AAaA;AAEA,eAAe;EACbM,WADa,EAAA,WAAA;EAEbC,UAFa,EAAA,UAAA;EAGbC,aAHa,EAAA,aAAA;EAIblB,UAJa,EAAA,UAAA;EAKbmB,uBALa,EAAA,uBAAA;EAMbC,kBANa,EAAA,kBAAA;EAObC,WAPa,EAAA,WAAA;EAQbC,eARa,EAAA,eAAA;EASbC,mBATa,EAAA,mBAAA;EAUbC,gBAVa,EAAA,gBAAA;EAWbC,gBAXa,EAAA,gBAAA;EAabC,yBAba,EAAA,yBAAA;EAcbC,gBAda,EAAA,gBAAA;EAebC,mBAAAA,EAfF;AAAe,CAAf","sourcesContent":["import {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  handlers,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nimport { LocalizationEvent } from \"./types\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n  const loweredLanguageTags = languageTags.map((tag) => tag.toLowerCase());\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n\n    const { languageTag, languageCode, scriptCode, countryCode, isRTL } =\n      currentLocale;\n\n    const combinaisons = [\n      languageTag,\n      !!scriptCode ? languageCode + \"-\" + scriptCode : null,\n      languageCode + \"-\" + countryCode,\n      languageCode,\n    ].filter((value): value is string => !!value);\n\n    for (let j = 0; j < combinaisons.length; j++) {\n      const combinaison = combinaisons[j].toLowerCase();\n      const tagIndex = loweredLanguageTags.indexOf(combinaison);\n\n      if (tagIndex !== -1) {\n        return { languageTag: languageTags[tagIndex], isRTL };\n      }\n    }\n  }\n}\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nexport * from \"./types\";\n\nexport default {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n};\n"]},"metadata":{},"sourceType":"module"}