{"ast":null,"code":"var buffer = require('buffer');\n\nvar Buffer = buffer.Buffer;\n\nfunction copyProps(src, dst) {\n  for (var key in src) {\n    dst[key] = src[key];\n  }\n}\n\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer;\n} else {\n  copyProps(buffer, exports);\n  exports.Buffer = SafeBuffer;\n}\n\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length);\n}\n\ncopyProps(Buffer, SafeBuffer);\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number');\n  }\n\n  return Buffer(arg, encodingOrOffset, length);\n};\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  var buf = Buffer(size);\n\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding);\n    } else {\n      buf.fill(fill);\n    }\n  } else {\n    buf.fill(0);\n  }\n\n  return buf;\n};\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  return Buffer(size);\n};\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  return buffer.SlowBuffer(size);\n};","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/safe-buffer/index.js"],"names":["buffer","require","Buffer","dst","src","module","copyProps","exports","SafeBuffer","buf","fill"],"mappings":"AACA,IAAIA,MAAM,GAAGC,OAAO,CAApB,QAAoB,CAApB;;AACA,IAAIC,MAAM,GAAGF,MAAM,CAAnB,MAAA;;AAGA,SAAA,SAAA,CAAA,GAAA,EAAA,GAAA,EAA8B;EAC5B,KAAK,IAAL,GAAA,IAAA,GAAA,EAAqB;IACnBG,GAAG,CAAHA,GAAG,CAAHA,GAAWC,GAAG,CAAdD,GAAc,CAAdA;EAEH;AACD;;AAAA,IAAID,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAArBA,KAAAA,IAA+BA,MAAM,CAArCA,WAAAA,IAAqDA,MAAM,CAA/D,eAAA,EAAiF;EAC/EG,MAAM,CAANA,OAAAA,GAAAA,MAAAA;AADF,CAAA,MAEO;EAELC,SAAS,CAAA,MAAA,EAATA,OAAS,CAATA;EACAC,OAAO,CAAPA,MAAAA,GAAAA,UAAAA;AAGF;;AAAA,SAAA,UAAA,CAAA,GAAA,EAAA,gBAAA,EAAA,MAAA,EAAoD;EAClD,OAAOL,MAAM,CAAA,GAAA,EAAA,gBAAA,EAAb,MAAa,CAAb;AAIFI;;AAAAA,SAAS,CAAA,MAAA,EAATA,UAAS,CAATA;;AAEAE,UAAU,CAAVA,IAAAA,GAAkB,UAAA,GAAA,EAAA,gBAAA,EAAA,MAAA,EAAyC;EACzD,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAC3B,MAAM,IAAA,SAAA,CAAN,+BAAM,CAAN;EAEF;;EAAA,OAAON,MAAM,CAAA,GAAA,EAAA,gBAAA,EAAb,MAAa,CAAb;AAJFM,CAAAA;;AAOAA,UAAU,CAAVA,KAAAA,GAAmB,UAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAgC;EACjD,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;IAC5B,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;EAEF;;EAAA,IAAIC,GAAG,GAAGP,MAAM,CAAhB,IAAgB,CAAhB;;EACA,IAAIQ,IAAI,KAAR,SAAA,EAAwB;IACtB,IAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;MAChCD,GAAG,CAAHA,IAAAA,CAAAA,IAAAA,EAAAA,QAAAA;IADF,CAAA,MAEO;MACLA,GAAG,CAAHA,IAAAA,CAAAA,IAAAA;IAEH;EAND,CAAA,MAMO;IACLA,GAAG,CAAHA,IAAAA,CAAAA,CAAAA;EAEF;;EAAA,OAAA,GAAA;AAdFD,CAAAA;;AAiBAA,UAAU,CAAVA,WAAAA,GAAyB,UAAA,IAAA,EAAgB;EACvC,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;IAC5B,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;EAEF;;EAAA,OAAON,MAAM,CAAb,IAAa,CAAb;AAJFM,CAAAA;;AAOAA,UAAU,CAAVA,eAAAA,GAA6B,UAAA,IAAA,EAAgB;EAC3C,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;IAC5B,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;EAEF;;EAAA,OAAOR,MAAM,CAANA,UAAAA,CAAP,IAAOA,CAAP;AAJFQ,CAAAA","sourcesContent":["/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n"]},"metadata":{},"sourceType":"script"}