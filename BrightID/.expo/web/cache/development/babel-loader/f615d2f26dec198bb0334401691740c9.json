{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport i18next from 'i18next';\nimport { GROUPS_TYPE, INVITE_ACTIVE, MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION, MIN_RECOVERY_CONNECTIONS, MISC_TYPE, connection_levels } from \"../utils/constants\";\nimport { getInvites } from \"../utils/invites\";\nimport { getGroupName } from \"../utils/groups\";\nimport { setInvites } from \"./index\";\nimport { recoveryConnectionsSelector, verifiedConnectionsSelector } from \"../reducer/connectionsSlice\";\nexport var SET_BACKUP_PENDING = 'SET_BACKUP_PENDING';\nexport var SET_DEVICE_TOKEN = 'SET_DEVICE_TOKEN';\nexport var SET_NOTIFICATION_TOKEN = 'SET_NOTIFICATION_TOKEN';\nexport var SET_ACTIVE_NOTIFICATION = 'SET_ACTIVE_NOTIFICATION';\nexport var REMOVE_ACTIVE_NOTIFICATION = 'REMOVE_ACTIVE_NOTIFICATION';\nexport var SET_RECOVERY_CONNECTIONS_PENDING = 'SET_RECOVERY_CONNECTIONS_PENDING';\nexport var setBackupPending = function setBackupPending(backupPending) {\n  return {\n    type: SET_BACKUP_PENDING,\n    backupPending: backupPending\n  };\n};\nexport var setRecoveryConnectionsPending = function setRecoveryConnectionsPending(recoveryConnectionsPending) {\n  return {\n    type: SET_RECOVERY_CONNECTIONS_PENDING,\n    recoveryConnectionsPending: recoveryConnectionsPending\n  };\n};\nexport var setDeviceToken = function setDeviceToken(deviceToken) {\n  return {\n    type: SET_DEVICE_TOKEN,\n    deviceToken: deviceToken\n  };\n};\nexport var setNotificationToken = function setNotificationToken(notificationToken) {\n  return {\n    type: SET_NOTIFICATION_TOKEN,\n    notificationToken: notificationToken\n  };\n};\nexport var setActiveNotification = function setActiveNotification(notification) {\n  return {\n    type: SET_ACTIVE_NOTIFICATION,\n    notification: notification\n  };\n};\nexport var removeActiveNotification = function removeActiveNotification() {\n  return {\n    type: REMOVE_ACTIVE_NOTIFICATION\n  };\n};\nexport var updateNotifications = function updateNotifications(api) {\n  return function _callee(dispatch, getState) {\n    var password, verifiedConnections, knownLevels, recoveryEligibleConnections, recoveryConnections, _getState, oldInvites, invites, activeInvites, groupName, message;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              password = getState().user.password;\n\n              if (!password) {\n                dispatch(setBackupPending(true));\n                dispatch(setActiveNotification({\n                  title: i18next.t('notificationBar.title.backupPassword'),\n                  message: i18next.t('notificationBar.text.backupPassword'),\n                  type: MISC_TYPE,\n                  oncePerSession: true,\n                  navigationTarget: 'Notifications',\n                  icon: 'PhoneLock'\n                }));\n              } else {\n                dispatch(setBackupPending(false));\n              }\n            } catch (err) {\n              console.log(err);\n            }\n\n            try {\n              verifiedConnections = verifiedConnectionsSelector(getState());\n              knownLevels = Array(connection_levels.ALREADY_KNOWN, connection_levels.RECOVERY);\n              recoveryEligibleConnections = verifiedConnections.filter(function (conn) {\n                return knownLevels.includes(conn.level) && knownLevels.includes(conn.incomingLevel);\n              });\n              recoveryConnections = recoveryConnectionsSelector(getState());\n\n              if (recoveryConnections.length < MIN_RECOVERY_CONNECTIONS && recoveryEligibleConnections.length >= MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION) {\n                dispatch(setRecoveryConnectionsPending(true));\n                dispatch(setActiveNotification({\n                  title: i18next.t('notificationBar.title.socialRecovery'),\n                  message: i18next.t('notificationBar.text.socialRecovery'),\n                  type: MISC_TYPE,\n                  oncePerSession: true,\n                  navigationTarget: 'Notifications',\n                  icon: 'PhoneLock'\n                }));\n              } else {\n                dispatch(setRecoveryConnectionsPending(false));\n              }\n            } catch (err) {\n              console.log(err);\n            }\n\n            if (!api) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.prev = 3;\n            _getState = getState(), oldInvites = _getState.groups.invites;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(getInvites(api));\n\n          case 7:\n            invites = _context.sent;\n            dispatch(setInvites(invites));\n\n            if (invites.length > oldInvites.length) {\n              activeInvites = invites.filter(function (invite) {\n                return invite.state === INVITE_ACTIVE;\n              });\n              groupName = getGroupName(activeInvites[activeInvites.length - 1].group);\n              message = \"You've been invited to join \" + groupName;\n              dispatch(setActiveNotification({\n                title: 'Group Invitation',\n                message: message,\n                type: GROUPS_TYPE,\n                navigationTarget: 'Notifications',\n                icon: 'AddGroup'\n              }));\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 12]], Promise);\n  };\n};","map":{"version":3,"names":["i18next","GROUPS_TYPE","INVITE_ACTIVE","MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION","MIN_RECOVERY_CONNECTIONS","MISC_TYPE","connection_levels","getInvites","getGroupName","setInvites","recoveryConnectionsSelector","verifiedConnectionsSelector","SET_BACKUP_PENDING","SET_DEVICE_TOKEN","SET_NOTIFICATION_TOKEN","SET_ACTIVE_NOTIFICATION","REMOVE_ACTIVE_NOTIFICATION","SET_RECOVERY_CONNECTIONS_PENDING","setBackupPending","backupPending","type","setRecoveryConnectionsPending","recoveryConnectionsPending","setDeviceToken","deviceToken","setNotificationToken","notificationToken","setActiveNotification","notification","removeActiveNotification","updateNotifications","api","dispatch","getState","password","user","title","t","message","oncePerSession","navigationTarget","icon","err","console","log","verifiedConnections","knownLevels","Array","ALREADY_KNOWN","RECOVERY","recoveryEligibleConnections","filter","conn","includes","level","incomingLevel","recoveryConnections","length","oldInvites","groups","invites","activeInvites","invite","state","groupName","group"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/notifications.ts"],"sourcesContent":["import i18next from 'i18next';\nimport { NodeApi } from '@/api/brightId';\nimport {\n  GROUPS_TYPE,\n  INVITE_ACTIVE,\n  MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION,\n  MIN_RECOVERY_CONNECTIONS,\n  MISC_TYPE,\n  connection_levels,\n} from '@/utils/constants';\nimport { getInvites } from '@/utils/invites';\nimport { getGroupName } from '@/utils/groups';\nimport { setInvites } from './index';\nimport {\n  recoveryConnectionsSelector,\n  verifiedConnectionsSelector,\n} from '@/reducer/connectionsSlice';\n\nexport const SET_BACKUP_PENDING = 'SET_BACKUP_PENDING';\nexport const SET_DEVICE_TOKEN = 'SET_DEVICE_TOKEN';\nexport const SET_NOTIFICATION_TOKEN = 'SET_NOTIFICATION_TOKEN';\nexport const SET_ACTIVE_NOTIFICATION = 'SET_ACTIVE_NOTIFICATION';\nexport const REMOVE_ACTIVE_NOTIFICATION = 'REMOVE_ACTIVE_NOTIFICATION';\nexport const SET_RECOVERY_CONNECTIONS_PENDING =\n  'SET_RECOVERY_CONNECTIONS_PENDING';\n\nexport const setBackupPending = (backupPending: boolean) => ({\n  type: SET_BACKUP_PENDING,\n  backupPending,\n});\n\nexport const setRecoveryConnectionsPending = (\n  recoveryConnectionsPending: boolean,\n) => ({\n  type: SET_RECOVERY_CONNECTIONS_PENDING,\n  recoveryConnectionsPending,\n});\n\nexport const setDeviceToken = (deviceToken: string) => ({\n  type: SET_DEVICE_TOKEN,\n  deviceToken,\n});\n\nexport const setNotificationToken = (notificationToken: string) => ({\n  type: SET_NOTIFICATION_TOKEN,\n  notificationToken,\n});\n\nexport const setActiveNotification = (notification: BannerNotification) => ({\n  type: SET_ACTIVE_NOTIFICATION,\n  notification,\n});\n\nexport const removeActiveNotification = () => ({\n  type: REMOVE_ACTIVE_NOTIFICATION,\n});\n\nexport const updateNotifications =\n  (api?: NodeApi) => async (dispatch: dispatch, getState: () => State) => {\n    // check for pending backup setup\n    try {\n      const { password } = getState().user;\n      if (!password) {\n        dispatch(setBackupPending(true));\n        dispatch(\n          setActiveNotification({\n            title: i18next.t('notificationBar.title.backupPassword'),\n            message: i18next.t('notificationBar.text.backupPassword'),\n            type: MISC_TYPE,\n            oncePerSession: true,\n            navigationTarget: 'Notifications',\n            icon: 'PhoneLock',\n          }),\n        );\n      } else {\n        dispatch(setBackupPending(false));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    // check for pending recovery connections\n    try {\n      const verifiedConnections = verifiedConnectionsSelector(getState());\n      const knownLevels = Array<ConnectionLevel>(\n        connection_levels.ALREADY_KNOWN,\n        connection_levels.RECOVERY,\n      );\n      const recoveryEligibleConnections = verifiedConnections.filter(\n        (conn) =>\n          knownLevels.includes(conn.level) &&\n          knownLevels.includes(conn.incomingLevel),\n      );\n      const recoveryConnections = recoveryConnectionsSelector(getState());\n      if (\n        recoveryConnections.length < MIN_RECOVERY_CONNECTIONS &&\n        recoveryEligibleConnections.length >=\n          MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION\n      ) {\n        dispatch(setRecoveryConnectionsPending(true));\n        dispatch(\n          setActiveNotification({\n            title: i18next.t('notificationBar.title.socialRecovery'),\n            message: i18next.t('notificationBar.text.socialRecovery'),\n            type: MISC_TYPE,\n            oncePerSession: true,\n            navigationTarget: 'Notifications',\n            icon: 'PhoneLock',\n          }),\n        );\n      } else {\n        dispatch(setRecoveryConnectionsPending(false));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    // check for invites\n    if (api) {\n      try {\n        const {\n          groups: { invites: oldInvites },\n        } = getState();\n        // this can not be done in reducer because it should be in an async function\n        const invites = await getInvites(api);\n        dispatch(setInvites(invites));\n        if (invites.length > oldInvites.length) {\n          const activeInvites = invites.filter(\n            (invite) => invite.state === INVITE_ACTIVE,\n          );\n          const groupName = getGroupName(\n            activeInvites[activeInvites.length - 1].group,\n          );\n          const message = `You've been invited to join ${groupName}`;\n          dispatch(\n            setActiveNotification({\n              title: 'Group Invitation',\n              message,\n              type: GROUPS_TYPE,\n              navigationTarget: 'Notifications',\n              icon: 'AddGroup',\n            }),\n          );\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}