{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNode = addNode;\nexports.attachListeners = attachListeners;\nexports.getResponderNode = getResponderNode;\nexports.removeNode = removeNode;\nexports.terminateResponder = terminateResponder;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _createResponderEvent = _interopRequireDefault(require(\"./createResponderEvent\"));\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\nvar _utils = require(\"./utils\");\n\nvar _ResponderTouchHistoryStore = _interopRequireDefault(require(\"./ResponderTouchHistoryStore\"));\n\nvar emptyObject = {};\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  }\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  }\n\n  if (eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  }\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = (0, _ResponderEventTypes.isStartish)(eventType) && (0, _utils.isPrimaryPointerDown)(domEvent);\n  var isMoveEvent = (0, _ResponderEventTypes.isMoveish)(eventType);\n  var isEndEvent = (0, _ResponderEventTypes.isEndish)(eventType);\n  var isScrollEvent = (0, _ResponderEventTypes.isScroll)(eventType);\n  var isSelectionChangeEvent = (0, _ResponderEventTypes.isSelectionChange)(eventType);\n  var responderEvent = (0, _createResponderEvent.default)(domEvent);\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    _ResponderTouchHistoryStore.default.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n\n  var eventPaths = (0, _utils.getResponderPaths)(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder;\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = (0, _utils.getLowestCommonAncestor)(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  }\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } else if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n        onResponderMove(responderEvent);\n      }\n    } else {\n      var isTerminateEvent = (0, _ResponderEventTypes.isCancelish)(eventType) || eventType === 'contextmenu' || eventType === 'blur' && eventTarget === window || eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || isScrollEvent && trackedTouchCount === 0 || isScrollEvent && eventTarget.contains(node) && eventTarget !== node || isSelectionChangeEvent && (0, _utils.hasValidSelection)(domEvent);\n      var isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, _utils.hasTargetTouches)(node, domEvent.touches);\n\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n          onResponderEnd(responderEvent);\n        }\n      }\n\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n          onResponderRelease(responderEvent);\n        }\n\n        changeCurrentResponder(emptyResponder);\n      }\n\n      if (isTerminateEvent) {\n        var shouldTerminate = true;\n\n        if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n            onResponderTerminate(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    };\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    }\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node;\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } else {\n    var _getResponderConfig3 = getResponderConfig(currentId),\n        onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n    var allowTransfer = true;\n\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n\n    if (allowTransfer) {\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n        onResponderTerminate(responderEvent);\n      }\n\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n\n      changeCurrentResponder(wantsResponder);\n    } else {\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = ['mousedown', 'mousemove', 'mouseup', 'dragstart', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'contextmenu', 'select', 'selectionchange'];\n\nfunction attachListeners() {\n  if (_ExecutionEnvironment.canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n\nfunction addNode(id, node, config) {\n  (0, _utils.setResponderId)(node, id);\n  responderListenersMap.set(id, config);\n}\n\nfunction removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n\nfunction terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = (0, _createResponderEvent.default)({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n\nfunction getResponderNode() {\n  return currentResponder.node;\n}","map":{"version":3,"names":["emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","Map","isEmulatingMouseEvents","trackedTouchCount","currentResponder","changeCurrentResponder","responder","getResponderConfig","config","get","eventListener","domEvent","eventType","type","eventTarget","target","isStartEvent","isStartish","isPrimaryPointerDown","isMoveEvent","isMoveish","isEndEvent","isEndish","isScrollEvent","isScroll","isSelectionChangeEvent","isSelectionChange","responderEvent","createResponderEvent","touches","length","ResponderTouchHistoryStore","recordTouchTrack","nativeEvent","eventPaths","getResponderPaths","wasNegotiated","wantsResponder","currentResponderIdPath","eventIdPath","lowestCommonAncestor","getLowestCommonAncestor","indexOfLowestCommonAncestor","indexOf","index","slice","nodePath","findWantsResponder","attemptTransfer","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","currentTarget","dispatchConfig","registrationName","isTerminateEvent","isCancelish","window","contains","relatedTarget","hasValidSelection","isReleaseEvent","hasTargetTouches","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","callbackName","shouldSetCallback","prunedIdPath","i","result","isPropagationStopped","currentId","currentNode","onResponderGrant","onResponderReject","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","attachListeners","canUseDOM","__reactResponderSystemActive","addEventListener","forEach","document","addNode","setResponderId","set","removeNode","terminateResponder","has","delete","event","getResponderNode"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/useResponderEvents/ResponderSystem.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * RESPONDER EVENT SYSTEM\n *\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n * that pointer interactions are exclusive to that view and none other. The \"interaction\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n * pointers continue to be active.\n *\n * Responder being granted:\n *\n * A view can become the \"responder\" after the following events:\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n *  * \"scroll\" (while a pointer is down)\n *  * \"selectionchange\" (while a pointer is down)\n *\n * If nothing is already the \"responder\", the event propagates to (capture) and from\n * (bubble) the event target until a view returns `true` for\n * `on*ShouldSetResponder(Capture)`.\n *\n * If something is already the responder, the event propagates to (capture) and from\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n * Then negotiation happens between the current \"responder\" and a view that wants to\n * become the \"responder\": see the timing diagram below.\n *\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\n * system must result in the current \"responder\" being notified that it no longer has\n * the \"interaction lock\" - the native system has taken over.\n *\n * Responder being released:\n *\n * As soon as there are no more active pointers that *started* inside descendants\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n * current \"responder\", and the responder lock is released.\n *\n * Typical sequence of events:\n *  * startShouldSetResponder\n *  * responderGrant/Reject\n *  * responderStart\n *  * responderMove\n *  * responderEnd\n *  * responderRelease\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +--------------+          |                            |\n     | onTouchStart |          |                            |\n     +------+-------+    none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | | onResponder            | |\n            +------------------->|    TerminationRequest  | |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | | onResponderTerminate   |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\n\nimport type { ResponderEvent } from './createResponderEvent';\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createResponderEvent from './createResponderEvent';\nimport {\n  isCancelish,\n  isEndish,\n  isMoveish,\n  isScroll,\n  isSelectionChange,\n  isStartish\n} from './ResponderEventTypes';\nimport {\n  getLowestCommonAncestor,\n  getResponderPaths,\n  hasTargetTouches,\n  hasValidSelection,\n  isPrimaryPointerDown,\n  setResponderId\n} from './utils';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\n/* ------------ TYPES ------------ */\n\ntype ResponderId = number;\n\ntype ActiveResponderInstance = {\n  id: ResponderId,\n  idPath: Array<number>,\n  node: any\n};\n\ntype EmptyResponderInstance = {\n  id: null,\n  idPath: null,\n  node: null\n};\n\ntype ResponderInstance = ActiveResponderInstance | EmptyResponderInstance;\n\nexport type ResponderConfig = {\n  // Direct responder events dispatched directly to responder. Do not bubble.\n  onResponderEnd?: ?(e: ResponderEvent) => void,\n  onResponderGrant?: ?(e: ResponderEvent) => void | boolean,\n  onResponderMove?: ?(e: ResponderEvent) => void,\n  onResponderRelease?: ?(e: ResponderEvent) => void,\n  onResponderReject?: ?(e: ResponderEvent) => void,\n  onResponderStart?: ?(e: ResponderEvent) => void,\n  onResponderTerminate?: ?(e: ResponderEvent) => void,\n  onResponderTerminationRequest?: ?(e: ResponderEvent) => boolean,\n  // On pointer down, should this element become the responder?\n  onStartShouldSetResponder?: ?(e: ResponderEvent) => boolean,\n  onStartShouldSetResponderCapture?: ?(e: ResponderEvent) => boolean,\n  // On pointer move, should this element become the responder?\n  onMoveShouldSetResponder?: ?(e: ResponderEvent) => boolean,\n  onMoveShouldSetResponderCapture?: ?(e: ResponderEvent) => boolean,\n  // On scroll, should this element become the responder? Do no bubble\n  onScrollShouldSetResponder?: ?(e: ResponderEvent) => boolean,\n  onScrollShouldSetResponderCapture?: ?(e: ResponderEvent) => boolean,\n  // On text selection change, should this element become the responder?\n  onSelectionChangeShouldSetResponder?: ?(e: ResponderEvent) => boolean,\n  onSelectionChangeShouldSetResponderCapture?: ?(e: ResponderEvent) => boolean\n};\n\nconst emptyObject = {};\n\n/* ------------ IMPLEMENTATION ------------ */\n\nconst startRegistration = [\n  'onStartShouldSetResponderCapture',\n  'onStartShouldSetResponder',\n  { bubbles: true }\n];\nconst moveRegistration = [\n  'onMoveShouldSetResponderCapture',\n  'onMoveShouldSetResponder',\n  { bubbles: true }\n];\nconst scrollRegistration = [\n  'onScrollShouldSetResponderCapture',\n  'onScrollShouldSetResponder',\n  { bubbles: false }\n];\nconst shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\n\nconst emptyResponder = { id: null, idPath: null, node: null };\nconst responderListenersMap = new Map();\n\nlet isEmulatingMouseEvents = false;\nlet trackedTouchCount = 0;\nlet currentResponder: ResponderInstance = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder: ResponderInstance) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id: ResponderId): ResponderConfig | Object {\n  const config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n\n/**\n * Process native events\n *\n * A single event listener is used to manage the responder system.\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n * are interpreted in terms of the Responder System and checked to see if\n * the responder should be transferred. Each host node that is attached to\n * the Responder System has an ID, which is used to look up its associated\n * callbacks.\n */\nfunction eventListener(domEvent: any) {\n  const eventType = domEvent.type;\n  const eventTarget = domEvent.target;\n\n  /**\n   * Manage emulated events and early bailout.\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\n   * necessary to manually manage the mess of browser touch/mouse events.\n   * And bailout early for termination events when there is no active responder.\n   */\n\n  // Flag when browser may produce emulated events\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  }\n  // Remove flag when browser will not produce emulated events\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  }\n  // Ignore various events in particular circumstances\n  if (\n    // Ignore browser emulated mouse events\n    (eventType === 'mousedown' && isEmulatingMouseEvents) ||\n    (eventType === 'mousemove' && isEmulatingMouseEvents) ||\n    // Ignore mousemove if a mousedown didn't occur first\n    (eventType === 'mousemove' && trackedTouchCount < 1)\n  ) {\n    return;\n  }\n  // Remove flag after emulated events are finished\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n    return;\n  }\n\n  const isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\n  const isMoveEvent = isMoveish(eventType);\n  const isEndEvent = isEndish(eventType);\n  const isScrollEvent = isScroll(eventType);\n  const isSelectionChangeEvent = isSelectionChange(eventType);\n  const responderEvent = createResponderEvent(domEvent);\n\n  /**\n   * Record the state of active pointers\n   */\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n    ResponderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n\n  /**\n   * Responder System logic\n   */\n\n  let eventPaths = getResponderPaths(domEvent);\n  let wasNegotiated = false;\n  let wantsResponder;\n\n  // If an event occured that might change the current responder...\n  if (isStartEvent || isMoveEvent || (isScrollEvent && trackedTouchCount > 0)) {\n    // If there is already a responder, prune the event paths to the lowest common ancestor\n    // of the existing responder and deepest target of the event.\n    const currentResponderIdPath = currentResponder.idPath;\n    const eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      const lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\n      if (lowestCommonAncestor != null) {\n        const indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n        // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n        const index =\n          indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      // If a node wants to become the responder, attempt to transfer.\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n      if (wantsResponder != null) {\n        // Sets responder if none exists, or negotates with existing responder.\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  }\n\n  // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n  if (currentResponder.id != null && currentResponder.node != null) {\n    const { id, node } = currentResponder;\n    const {\n      onResponderStart,\n      onResponderMove,\n      onResponderEnd,\n      onResponderRelease,\n      onResponderTerminate,\n      onResponderTerminationRequest\n    } = getResponderConfig(id);\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n\n    // Start\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    }\n    // Move\n    else if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n        onResponderMove(responderEvent);\n      }\n    } else {\n      const isTerminateEvent =\n        isCancelish(eventType) ||\n        // native context menu\n        eventType === 'contextmenu' ||\n        // window blur\n        (eventType === 'blur' && eventTarget === window) ||\n        // responder (or ancestors) blur\n        (eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node) ||\n        // native scroll without using a pointer\n        (isScrollEvent && trackedTouchCount === 0) ||\n        // native scroll on node that is parent of the responder (allow siblings to scroll)\n        (isScrollEvent && eventTarget.contains(node) && eventTarget !== node) ||\n        // native select/selectionchange on node\n        (isSelectionChangeEvent && hasValidSelection(domEvent));\n\n      const isReleaseEvent =\n        isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches);\n\n      // End\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n          onResponderEnd(responderEvent);\n        }\n      }\n      // Release\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n          onResponderRelease(responderEvent);\n        }\n        changeCurrentResponder(emptyResponder);\n      }\n      // Terminate\n      if (isTerminateEvent) {\n        let shouldTerminate = true;\n\n        // Responders can still avoid termination but only for these events.\n        if (\n          eventType === 'contextmenu' ||\n          eventType === 'scroll' ||\n          eventType === 'selectionchange'\n        ) {\n          // Only call this function is it wasn't already called during negotiation.\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n            onResponderTerminate(responderEvent);\n          }\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Walk the event path to/from the target node. At each node, stop and call the\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\n * call \"stopPropagation\" on the event, stop searching for a responder.\n */\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  const shouldSetCallbacks = shouldSetResponderEvents[(domEvent.type: any)]; // for Flow\n\n  if (shouldSetCallbacks != null) {\n    const { idPath, nodePath } = eventPaths;\n\n    const shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    const shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    const { bubbles } = shouldSetCallbacks[2];\n\n    const check = function (id, node, callbackName) {\n      const config = getResponderConfig(id);\n      const shouldSetCallback = config[callbackName];\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n        if (shouldSetCallback(responderEvent) === true) {\n          // Start the path from the potential responder\n          const prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return { id, node, idPath: prunedIdPath };\n        }\n      }\n    };\n\n    // capture\n    for (let i = idPath.length - 1; i >= 0; i--) {\n      const id = idPath[i];\n      const node = nodePath[i];\n      const result = check(id, node, shouldSetCallbackCaptureName);\n      if (result != null) {\n        return result;\n      }\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    }\n\n    // bubble\n    if (bubbles) {\n      for (let i = 0; i < idPath.length; i++) {\n        const id = idPath[i];\n        const node = nodePath[i];\n        const result = check(id, node, shouldSetCallbackBubbleName);\n        if (result != null) {\n          return result;\n        }\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      const id = idPath[0];\n      const node = nodePath[0];\n      const target = domEvent.target;\n      if (target === node) {\n        return check(id, node, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n\n/**\n * Attempt to transfer the responder.\n */\nfunction attemptTransfer(responderEvent: ResponderEvent, wantsResponder: ActiveResponderInstance) {\n  const { id: currentId, node: currentNode } = currentResponder;\n  const { id, node } = wantsResponder;\n\n  const { onResponderGrant, onResponderReject } = getResponderConfig(id);\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node;\n\n  // Set responder\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n    changeCurrentResponder(wantsResponder);\n  }\n  // Negotiate with current responder\n  else {\n    const { onResponderTerminate, onResponderTerminationRequest } = getResponderConfig(currentId);\n\n    let allowTransfer = true;\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n\n    if (allowTransfer) {\n      // Terminate existing responder\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n        onResponderTerminate(responderEvent);\n      }\n      // Grant next responder\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n      changeCurrentResponder(wantsResponder);\n    } else {\n      // Reject responder request\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\n\n/* ------------ PUBLIC API ------------ */\n\n/**\n * Attach Listeners\n *\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\n * this system.\n */\nconst documentEventsCapturePhase = ['blur', 'scroll'];\nconst documentEventsBubblePhase = [\n  // mouse\n  'mousedown',\n  'mousemove',\n  'mouseup',\n  'dragstart',\n  // touch\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  // other\n  'contextmenu',\n  'select',\n  'selectionchange'\n];\nexport function attachListeners() {\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach((eventType) => {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach((eventType) => {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n\n/**\n * Register a node with the ResponderSystem.\n */\nexport function addNode(id: ResponderId, node: any, config: ResponderConfig) {\n  setResponderId(node, id);\n  responderListenersMap.set(id, config);\n}\n\n/**\n * Unregister a node with the ResponderSystem.\n */\nexport function removeNode(id: ResponderId) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n\n/**\n * Allow the current responder to be terminated from within components to support\n * more complex requirements, such as use with other React libraries for working\n * with scroll views, input views, etc.\n */\nexport function terminateResponder() {\n  const { id, node } = currentResponder;\n  if (id != null && node != null) {\n    const { onResponderTerminate } = getResponderConfig(id);\n    if (onResponderTerminate != null) {\n      const event = createResponderEvent({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n    changeCurrentResponder(emptyResponder);\n  }\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n\n/**\n * Allow unit tests to inspect the current responder in the system.\n * FOR TESTING ONLY.\n */\nexport function getResponderNode(): any {\n  return currentResponder.node;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}