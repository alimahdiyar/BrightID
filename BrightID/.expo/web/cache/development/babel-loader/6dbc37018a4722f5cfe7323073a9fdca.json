{"ast":null,"code":"import React, { useContext } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useActionSheet } from '@expo/react-native-action-sheet';\nimport { useDispatch } from \"../store\";\nimport { BLUE, WHITE } from \"../theme/colors\";\nimport { NodeApiContext } from \"../components/NodeApiGate\";\nimport { connectWithOtherFakeConnections, joinAllGroups, reconnectFakeConnection } from \"../actions/fakeContact\";\nimport { connection_levels } from \"./constants\";\nimport { connectionLevelStrings } from \"./connectionLevelStrings\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar btnOptions = ['Accept all group invites', 'Reconnect with changed profile', 'Reconnect with identical profile', \"Connect with all other fake connections - \" + connectionLevelStrings[connection_levels.JUST_MET], \"Connect with all other fake connections - \" + connectionLevelStrings[connection_levels.ALREADY_KNOWN], \"Connect with all other fake connections - \" + connectionLevelStrings[connection_levels.RECOVERY], 'cancel'];\n\nvar ConnectionTestButton = function ConnectionTestButton(_ref) {\n  var connectionId = _ref.connectionId;\n\n  var _useActionSheet = useActionSheet(),\n      showActionSheetWithOptions = _useActionSheet.showActionSheetWithOptions;\n\n  var dispatch = useDispatch();\n  var api = useContext(NodeApiContext);\n\n  var performAction = function performAction(index) {\n    switch (index) {\n      case 0:\n        console.log(\"Joining all groups\");\n        dispatch(joinAllGroups(connectionId, api));\n        break;\n\n      case 1:\n        console.log(\"Reconnecting with different profile\");\n        dispatch(reconnectFakeConnection(connectionId, true));\n        break;\n\n      case 2:\n        console.log(\"Reconnecting with same profile\");\n        dispatch(reconnectFakeConnection(connectionId, false));\n        break;\n\n      case 3:\n        console.log(\"Connecting to other fake connections - JUST MET\");\n        dispatch(connectWithOtherFakeConnections(connectionId, api, connection_levels.JUST_MET));\n        break;\n\n      case 4:\n        console.log(\"Connecting to other fake connections - ALREADY KNOWN\");\n        dispatch(connectWithOtherFakeConnections(connectionId, api, connection_levels.ALREADY_KNOWN));\n        break;\n\n      case 5:\n        console.log(\"Connecting to other fake connections - RECOVERY\");\n        dispatch(connectWithOtherFakeConnections(connectionId, api, connection_levels.RECOVERY));\n        break;\n\n      case 6:\n        console.log(\"Cancelled\");\n        break;\n\n      default:\n        console.log(\"Unhandled action index \" + index);\n    }\n  };\n\n  var handleButton = function handleButton() {\n    showActionSheetWithOptions({\n      options: btnOptions,\n      cancelButtonIndex: btnOptions.length - 1,\n      title: \"Connection Test options\",\n      showSeparators: true,\n      textStyle: {\n        color: BLUE,\n        textAlign: 'center',\n        width: '100%'\n      },\n      titleTextStyle: {\n        textAlign: 'center',\n        width: '100%'\n      }\n    }, performAction);\n  };\n\n  return _jsx(TouchableOpacity, {\n    testID: \"connectionTestBtn\",\n    style: {\n      marginRight: 11\n    },\n    onPress: handleButton,\n    children: _jsx(Material, {\n      name: \"ghost\",\n      size: 30,\n      color: WHITE\n    })\n  });\n};\n\nexport default ConnectionTestButton;","map":{"version":3,"names":["React","useContext","Material","useActionSheet","useDispatch","BLUE","WHITE","NodeApiContext","connectWithOtherFakeConnections","joinAllGroups","reconnectFakeConnection","connection_levels","connectionLevelStrings","btnOptions","JUST_MET","ALREADY_KNOWN","RECOVERY","ConnectionTestButton","connectionId","showActionSheetWithOptions","dispatch","api","performAction","index","console","log","handleButton","options","cancelButtonIndex","length","title","showSeparators","textStyle","color","textAlign","width","titleTextStyle","marginRight"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/connectionTestButton.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useActionSheet } from '@expo/react-native-action-sheet';\nimport { useDispatch } from '@/store';\nimport { BLUE, WHITE } from '@/theme/colors';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport {\n  connectWithOtherFakeConnections,\n  joinAllGroups,\n  reconnectFakeConnection,\n} from '../actions/fakeContact';\nimport { connection_levels } from '@/utils/constants';\nimport { connectionLevelStrings } from '@/utils/connectionLevelStrings';\n\n/*\nReturn a button that opens actionsheet with test methods\n */\nconst btnOptions = [\n  'Accept all group invites',\n  'Reconnect with changed profile',\n  'Reconnect with identical profile',\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.JUST_MET]\n  }`,\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.ALREADY_KNOWN]\n  }`,\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.RECOVERY]\n  }`,\n  'cancel',\n];\n\nconst ConnectionTestButton = ({ connectionId }: { connectionId: string }) => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n\n  const performAction = (index: number) => {\n    switch (index) {\n      case 0:\n        console.log(`Joining all groups`);\n        dispatch(joinAllGroups(connectionId, api));\n        break;\n      case 1:\n        console.log(`Reconnecting with different profile`);\n        dispatch(reconnectFakeConnection(connectionId, true));\n        break;\n      case 2:\n        console.log(`Reconnecting with same profile`);\n        dispatch(reconnectFakeConnection(connectionId, false));\n        break;\n      case 3:\n        console.log(`Connecting to other fake connections - JUST MET`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.JUST_MET,\n          ),\n        );\n        break;\n      case 4:\n        console.log(`Connecting to other fake connections - ALREADY KNOWN`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.ALREADY_KNOWN,\n          ),\n        );\n        break;\n      case 5:\n        console.log(`Connecting to other fake connections - RECOVERY`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.RECOVERY,\n          ),\n        );\n        break;\n      case 6:\n        console.log(`Cancelled`);\n        break;\n      default:\n        console.log(`Unhandled action index ${index}`);\n    }\n  };\n\n  const handleButton = () => {\n    showActionSheetWithOptions(\n      {\n        options: btnOptions,\n        cancelButtonIndex: btnOptions.length - 1,\n        title: `Connection Test options`,\n        showSeparators: true,\n        textStyle: {\n          color: BLUE,\n          textAlign: 'center',\n          width: '100%',\n        },\n        titleTextStyle: {\n          textAlign: 'center',\n          width: '100%',\n        },\n      },\n      performAction,\n    );\n  };\n\n  return (\n    <TouchableOpacity\n      testID=\"connectionTestBtn\"\n      style={{ marginRight: 11 }}\n      onPress={handleButton}\n    >\n      <Material name=\"ghost\" size={30} color={WHITE} />\n    </TouchableOpacity>\n  );\n};\n\nexport default ConnectionTestButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}