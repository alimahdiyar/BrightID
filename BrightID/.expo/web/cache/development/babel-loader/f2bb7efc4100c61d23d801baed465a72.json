{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { SingleNavigatorContext } from \"./EnsureSingleNavigator\";\nexport default function useRegisterNavigator() {\n  var _React$useState = React.useState(function () {\n    return nanoid();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      key = _React$useState2[0];\n\n  var container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\");\n  }\n\n  React.useEffect(function () {\n    var register = container.register,\n        unregister = container.unregister;\n    register(key);\n    return function () {\n      return unregister(key);\n    };\n  }, [container, key]);\n  return key;\n}","map":{"version":3,"sources":["useRegisterNavigator.tsx"],"names":["key","React","nanoid","container","register","unregister"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,MAAA,QAAA,mBAAA;AACA,SAAA,sBAAA;AAMA,eAAe,SAAA,oBAAA,GAAgC;EAC7C,IAAA,eAAA,GAAcC,KAAK,CAALA,QAAAA,CAAe,YAAA;IAAA,OAAMC,MAAN,EAAA;EAA7B,CAAcD,CAAd;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOD,GAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;;EACA,IAAMG,SAAS,GAAGF,KAAK,CAALA,UAAAA,CAAlB,sBAAkBA,CAAlB;;EAEA,IAAIE,SAAS,KAAb,SAAA,EAA6B;IAC3B,MAAM,IAAA,KAAA,CAAN,wFAAM,CAAN;EAKFF;;EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAQG,QAAR,GAAiCD,SAAjC,CAAA,QAAA;IAAA,IAAkBE,UAAlB,GAAiCF,SAAjC,CAAA,UAAA;IAEAC,QAAQ,CAARA,GAAQ,CAARA;IAEA,OAAO,YAAA;MAAA,OAAMC,UAAU,CAAhB,GAAgB,CAAhB;IALTJ,CAKE;EALFA,CAAAA,EAMG,CAAA,SAAA,EANHA,GAMG,CANHA;EAQA,OAAA,GAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\n\n/**\n * Register a navigator in the parent context (either a navigation container or a screen).\n * This is used to prevent multiple navigators under a single container or screen.\n */\nexport default function useRegisterNavigator() {\n  const [key] = React.useState(() => nanoid());\n  const container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\"\n    );\n  }\n\n  React.useEffect(() => {\n    const { register, unregister } = container;\n\n    register(key);\n\n    return () => unregister(key);\n  }, [container, key]);\n\n  return key;\n}\n"]},"metadata":{},"sourceType":"module"}