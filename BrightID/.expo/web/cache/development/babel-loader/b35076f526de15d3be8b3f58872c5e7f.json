{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNativeKeychain = require(\"react-native-keychain\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _encoding = require(\"../../utils/encoding\");\n\nvar getItem = function _callee(key) {\n  var _await$getGenericPass, username, password, _JSON$parse, publicKey, version, secretKey, data, _JSON$parse2, _publicKey, _secretKey, _persist;\n\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regenerator.default.awrap((0, _reactNativeKeychain.getGenericPassword)());\n\n        case 3:\n          _await$getGenericPass = _context.sent;\n          username = _await$getGenericPass.username;\n          password = _await$getGenericPass.password;\n          _JSON$parse = JSON.parse(username), publicKey = _JSON$parse.publicKey, version = _JSON$parse.version;\n\n          if (!(!publicKey || !password)) {\n            _context.next = 9;\n            break;\n          }\n\n          throw new Error(\"keypair does not exist in keychain!\");\n\n        case 9:\n          secretKey = (0, _encoding.b64ToUint8Array)(password);\n          return _context.abrupt(\"return\", {\n            publicKey: publicKey,\n            secretKey: secretKey,\n            _persist: {\n              version: version,\n              rehydrated: true\n            }\n          });\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return _regenerator.default.awrap(_asyncStorage.default.getItem(key));\n\n        case 17:\n          data = _context.sent;\n\n          if (!data) {\n            _context.next = 25;\n            break;\n          }\n\n          console.error(\"react-native-keychain is not accessible\");\n          _JSON$parse2 = JSON.parse(data), _publicKey = _JSON$parse2.publicKey, _secretKey = _JSON$parse2.secretKey, _persist = _JSON$parse2._persist;\n          _secretKey = (0, _encoding.b64ToUint8Array)(_secretKey);\n          return _context.abrupt(\"return\", {\n            publicKey: _publicKey,\n            secretKey: _secretKey,\n            _persist: _persist\n          });\n\n        case 25:\n          throw _context.t0;\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nvar setItem = function _callee2(key, keypair) {\n  var password, username, opts;\n  return _regenerator.default.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          password = (0, _encoding.uInt8ArrayToB64)(keypair.secretKey);\n          _context2.prev = 1;\n          username = JSON.stringify({\n            version: keypair._persist.version,\n            publicKey: keypair.publicKey\n          });\n\n          if (!_deviceConstants.DEVICE_ANDROID) {\n            _context2.next = 9;\n            break;\n          }\n\n          opts = {\n            rules: 'none'\n          };\n          _context2.next = 7;\n          return _regenerator.default.awrap((0, _reactNativeKeychain.setGenericPassword)(username, password, opts));\n\n        case 7:\n          _context2.next = 11;\n          break;\n\n        case 9:\n          _context2.next = 11;\n          return _regenerator.default.awrap((0, _reactNativeKeychain.setGenericPassword)(username, password));\n\n        case 11:\n          _context2.next = 13;\n          return _regenerator.default.awrap(_asyncStorage.default.setItem(key, JSON.stringify({\n            publicKey: keypair.publicKey,\n            secretKey: password,\n            _persist: keypair._persist\n          })));\n\n        case 13:\n          return _context2.abrupt(\"return\", true);\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.error(_context2.t0.message);\n          _context2.next = 21;\n          return _regenerator.default.awrap(_asyncStorage.default.setItem(key, JSON.stringify({\n            publicKey: keypair.publicKey,\n            secretKey: password,\n            _persist: keypair._persist\n          })));\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 16]], Promise);\n};\n\nvar removeItem = function _callee3(key) {\n  return _regenerator.default.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regenerator.default.awrap((0, _reactNativeKeychain.resetGenericPassword)());\n\n        case 3:\n          _context3.next = 5;\n          return _regenerator.default.awrap(_asyncStorage.default.removeItem(key));\n\n        case 5:\n          return _context3.abrupt(\"return\", true);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0.message);\n          _context3.next = 13;\n          return _regenerator.default.awrap(_asyncStorage.default.removeItem(key));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar KeychainStorage = {\n  getItem: getItem,\n  setItem: setItem,\n  removeItem: removeItem\n};\nvar _default = KeychainStorage;\nexports.default = _default;","map":{"version":3,"names":["getItem","key","getGenericPassword","username","password","JSON","parse","publicKey","version","Error","secretKey","b64ToUint8Array","_persist","rehydrated","AsyncStorage","data","console","error","setItem","keypair","uInt8ArrayToB64","stringify","DEVICE_ANDROID","opts","rules","setGenericPassword","message","removeItem","resetGenericPassword","KeychainStorage"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/storage/keychainAdapter.js"],"sourcesContent":["import {\n  getGenericPassword,\n  setGenericPassword,\n  resetGenericPassword,\n} from 'react-native-keychain';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { b64ToUint8Array, uInt8ArrayToB64 } from '@/utils/encoding';\n\n/**\n *\n * @param {string} key\n * @returns\n */\nconst getItem = async (key) => {\n  try {\n    let { username, password } = await getGenericPassword();\n    let { publicKey, version } = JSON.parse(username);\n    if (!publicKey || !password) {\n      throw new Error(`keypair does not exist in keychain!`);\n    }\n    let secretKey = b64ToUint8Array(password);\n    return {\n      publicKey,\n      secretKey,\n      _persist: { version, rehydrated: true },\n    };\n  } catch (err) {\n    let data = await AsyncStorage.getItem(key);\n    if (data) {\n      console.error(`react-native-keychain is not accessible`);\n      let { publicKey, secretKey, _persist } = JSON.parse(data);\n      secretKey = b64ToUint8Array(secretKey);\n      return { publicKey, secretKey, _persist };\n    } else {\n      throw err;\n    }\n  }\n};\n\n/**\n *\n * @param {string} key\n * @param {{\n *   publicKey: string;\n *   secretKey: Uint8Array;\n *   _persist: { version: number };\n * }} keypair\n * @returns {Promise<boolean>}\n */\nconst setItem = async (key, keypair) => {\n  let password = uInt8ArrayToB64(keypair.secretKey);\n  try {\n    let username = JSON.stringify({\n      version: keypair._persist.version,\n      publicKey: keypair.publicKey,\n    });\n\n    if (DEVICE_ANDROID) {\n      let opts = { rules: 'none' };\n      await setGenericPassword(username, password, opts);\n    } else {\n      await setGenericPassword(username, password);\n    }\n    // we can remove this later once we have better metrics for react-native-keychain\n    await AsyncStorage.setItem(\n      key,\n      JSON.stringify({\n        publicKey: keypair.publicKey,\n        secretKey: password,\n        _persist: keypair._persist,\n      }),\n    );\n    return true;\n  } catch (err) {\n    console.error(err.message);\n    await AsyncStorage.setItem(\n      key,\n      JSON.stringify({\n        publicKey: keypair.publicKey,\n        secretKey: password,\n        _persist: keypair._persist,\n      }),\n    );\n  }\n};\n\nconst removeItem = async (key) => {\n  try {\n    await resetGenericPassword();\n    await AsyncStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    console.error(err.message);\n    await AsyncStorage.removeItem(key);\n  }\n};\n\nconst KeychainStorage = {\n  getItem,\n  setItem,\n  removeItem,\n};\n\nexport default KeychainStorage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}