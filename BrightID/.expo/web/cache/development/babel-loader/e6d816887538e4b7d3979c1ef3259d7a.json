{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'invariant';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport var EventEmitter = function () {\n  function EventEmitter(nativeModule) {\n    _classCallCheck(this, EventEmitter);\n\n    this._listenerCount = 0;\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      var _this = this,\n          _subscription;\n\n      if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n        this._nativeModule.startObserving();\n      }\n\n      this._listenerCount++;\n\n      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n      var subscription = (_subscription = {}, _defineProperty(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), _defineProperty(_subscription, \"remove\", function remove() {\n        _this.removeSubscription(subscription);\n      }), _subscription);\n      return subscription;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var removedListenerCount = this._eventEmitter.listenerCount ? this._eventEmitter.listenerCount(eventName) : this._eventEmitter.listeners(eventName).length;\n\n      this._eventEmitter.removeAllListeners(eventName);\n\n      this._listenerCount -= removedListenerCount;\n      invariant(this._listenerCount >= 0, \"EventEmitter must have a non-negative number of listeners\");\n\n      if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n        this._nativeModule.stopObserving();\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n      if (!nativeEmitterSubscription) {\n        return;\n      }\n\n      if ('remove' in nativeEmitterSubscription) {\n        nativeEmitterSubscription.remove();\n      } else if ('removeSubscription' in this._eventEmitter) {\n        this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n      }\n\n      this._listenerCount--;\n      delete subscription[nativeEmitterSubscriptionKey];\n\n      subscription.remove = function () {};\n\n      if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n        this._nativeModule.stopObserving();\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this$_eventEmitter;\n\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));\n    }\n  }]);\n\n  return EventEmitter;\n}();","map":{"version":3,"sources":["../src/EventEmitter.ts"],"names":["nativeEmitterSubscriptionKey","EventEmitter","_listenerCount","Platform","nativeEmitterSubscription","subscription","removedListenerCount","invariant","params"],"mappings":"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","sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}