{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { saveImage } from \"../../../../utils/filesystem\";\nimport { decryptData } from \"../../../../utils/cryptoHelper\";\nimport { b64ToUrlSafeB64 } from \"../../../../utils/encoding\";\nimport { addConnection, upsertGroup, selectAllConnections } from \"../../../../actions\";\nimport { RecoveryError, RecoveryErrorType } from \"../RecoveryError\";\nimport { setSig, updateNamePhoto, increaseRecoveredConnections, increaseRecoveredGroups, setRecoveryError } from \"../recoveryDataSlice\";\n\nvar downloadConnection = function _callee(_ref) {\n  var dataId, channelApi, aesKey, channelId, encrypted, connectionData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          dataId = _ref.dataId, channelApi = _ref.channelApi, aesKey = _ref.aesKey, channelId = _ref.channelId;\n          _context.prev = 1;\n          console.log(channelId, dataId);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(channelApi.download({\n            channelId: channelId,\n            dataId: dataId,\n            deleteAfterDownload: true\n          }));\n\n        case 5:\n          encrypted = _context.sent;\n          connectionData = decryptData(encrypted, aesKey);\n\n          if (!(!connectionData || !(connectionData != null && connectionData.id) || !(connectionData != null && connectionData.name))) {\n            _context.next = 10;\n            break;\n          }\n\n          console.log('missing connection data');\n          return _context.abrupt(\"return\");\n\n        case 10:\n          console.log(\"Downloaded profile data of \" + connectionData.name + \" (\" + (connectionData == null ? void 0 : connectionData.id) + \")\");\n          return _context.abrupt(\"return\", connectionData);\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](1);\n          console.error(\"downloadConnection: \" + _context.t0.message);\n          throw _context.t0;\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 14]], Promise);\n};\n\nexport var downloadConnections = function downloadConnections(_ref2) {\n  var channelApi = _ref2.channelApi,\n      dataIds = _ref2.dataIds;\n  return function _callee2(dispatch, getState) {\n    var _getState, signingKey, _getState$recoveryDat, recoveryId, aesKey, channelId, connections, existingConnIds, isConn, connId, uploader, connectionDataIds, count, _iterator, _step, dataId, connectionData, filename, newConnection;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _getState = getState(), signingKey = _getState.keypair.publicKey, _getState$recoveryDat = _getState.recoveryData, recoveryId = _getState$recoveryDat.id, aesKey = _getState$recoveryDat.aesKey, channelId = _getState$recoveryDat.channel.channelId;\n            connections = selectAllConnections(getState());\n            existingConnIds = connections.map(function (c) {\n              return c.id;\n            });\n\n            isConn = function isConn(id) {\n              return id.startsWith('connection_');\n            };\n\n            connId = function connId(id) {\n              return id.replace('connection_', '').split(':')[0];\n            };\n\n            uploader = function uploader(id) {\n              return id.replace('connection_', '').split(':')[1];\n            };\n\n            connectionDataIds = dataIds.filter(function (id) {\n              return isConn(id) && uploader(id) !== b64ToUrlSafeB64(signingKey) && !existingConnIds.includes(connId(id)) && connId(id) !== recoveryId;\n            });\n            count = 0;\n            _iterator = _createForOfIteratorHelperLoose(connectionDataIds);\n\n          case 10:\n            if ((_step = _iterator()).done) {\n              _context2.next = 26;\n              break;\n            }\n\n            dataId = _step.value;\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(downloadConnection({\n              dataId: dataId,\n              channelApi: channelApi,\n              aesKey: aesKey,\n              channelId: channelId\n            }));\n\n          case 14:\n            connectionData = _context2.sent;\n\n            if (!connectionData) {\n              _context2.next = 24;\n              break;\n            }\n\n            filename = void 0;\n\n            if (!connectionData.photo) {\n              _context2.next = 21;\n              break;\n            }\n\n            _context2.next = 20;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: connectionData.id,\n              base64Image: connectionData.photo\n            }));\n\n          case 20:\n            filename = _context2.sent;\n\n          case 21:\n            newConnection = _objectSpread(_objectSpread({}, connectionData), {}, {\n              photo: {\n                filename: filename\n              }\n            });\n            dispatch(addConnection(newConnection));\n            count++;\n\n          case 24:\n            _context2.next = 10;\n            break;\n\n          case 26:\n            if (count > 0) {\n              dispatch(increaseRecoveredConnections(count));\n            }\n\n            return _context2.abrupt(\"return\", connectionDataIds.length);\n\n          case 30:\n            _context2.prev = 30;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(\"downloadingConnections: \" + _context2.t0.message);\n\n          case 33:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 30]], Promise);\n  };\n};\nexport var downloadNamePhoto = function downloadNamePhoto(_ref3) {\n  var channelApi = _ref3.channelApi,\n      dataIds = _ref3.dataIds;\n  return function _callee3(dispatch, getState) {\n    var _getState2, signingKey, _getState2$recoveryDa, recoveryId, aesKey, channelId, connId, uploader, dataId, connectionData, _getState3, name, filename;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _getState2 = getState(), signingKey = _getState2.keypair.publicKey, _getState2$recoveryDa = _getState2.recoveryData, recoveryId = _getState2$recoveryDa.id, aesKey = _getState2$recoveryDa.aesKey, channelId = _getState2$recoveryDa.channel.channelId;\n\n            connId = function connId(id) {\n              return id.replace('connection_', '').split(':')[0];\n            };\n\n            uploader = function uploader(id) {\n              return id.replace('connection_', '').split(':')[1];\n            };\n\n            dataId = dataIds.find(function (id) {\n              return connId(id) === recoveryId && uploader(id) !== b64ToUrlSafeB64(signingKey);\n            });\n\n            if (!dataId) {\n              _context3.next = 15;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(downloadConnection({\n              dataId: dataId,\n              channelApi: channelApi,\n              aesKey: aesKey,\n              channelId: channelId\n            }));\n\n          case 7:\n            connectionData = _context3.sent;\n            _getState3 = getState(), name = _getState3.recoveryData.name;\n\n            if (!(!name && connectionData)) {\n              _context3.next = 15;\n              break;\n            }\n\n            if (!connectionData.photo) {\n              _context3.next = 14;\n              break;\n            }\n\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: connectionData.id,\n              base64Image: connectionData.photo\n            }));\n\n          case 13:\n            filename = _context3.sent;\n\n          case 14:\n            dispatch(updateNamePhoto({\n              name: connectionData.name,\n              photo: {\n                filename: filename\n              }\n            }));\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar downloadGroup = function _callee4(_ref4) {\n  var dataId, channelApi, aesKey, channelId, encrypted, groupData, filename;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          dataId = _ref4.dataId, channelApi = _ref4.channelApi, aesKey = _ref4.aesKey, channelId = _ref4.channelId;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(channelApi.download({\n            channelId: channelId,\n            dataId: dataId,\n            deleteAfterDownload: true\n          }));\n\n        case 4:\n          encrypted = _context4.sent;\n          groupData = decryptData(encrypted, aesKey);\n\n          if (!(!groupData || !(groupData != null && groupData.id) || !(groupData != null && groupData.aesKey))) {\n            _context4.next = 9;\n            break;\n          }\n\n          console.log('missing group data');\n          return _context4.abrupt(\"return\");\n\n        case 9:\n          if (!groupData.photo) {\n            _context4.next = 13;\n            break;\n          }\n\n          _context4.next = 12;\n          return _regeneratorRuntime.awrap(saveImage({\n            imageName: groupData.id,\n            base64Image: groupData.photo\n          }));\n\n        case 12:\n          filename = _context4.sent;\n\n        case 13:\n          groupData.photo = {\n            filename: filename\n          };\n          return _context4.abrupt(\"return\", groupData);\n\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.error(\"downloadGroup: \" + _context4.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 17]], Promise);\n};\n\nexport var downloadGroups = function downloadGroups(_ref5) {\n  var channelApi = _ref5.channelApi,\n      dataIds = _ref5.dataIds;\n  return function _callee5(dispatch, getState) {\n    var _getState4, signingKey, _getState4$recoveryDa, aesKey, channelId, isGroup, uploader, groupDataIds, count, _iterator2, _step2, dataId, groupData;\n\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _getState4 = getState(), signingKey = _getState4.keypair.publicKey, _getState4$recoveryDa = _getState4.recoveryData, aesKey = _getState4$recoveryDa.aesKey, channelId = _getState4$recoveryDa.channel.channelId;\n\n            isGroup = function isGroup(id) {\n              return id.startsWith('group_');\n            };\n\n            uploader = function uploader(id) {\n              return id.replace('group_', '').split(':')[1];\n            };\n\n            groupDataIds = dataIds.filter(function (id) {\n              return isGroup(id) && uploader(id) !== b64ToUrlSafeB64(signingKey);\n            });\n            count = 0;\n            _iterator2 = _createForOfIteratorHelperLoose(groupDataIds);\n\n          case 7:\n            if ((_step2 = _iterator2()).done) {\n              _context5.next = 15;\n              break;\n            }\n\n            dataId = _step2.value;\n            _context5.next = 11;\n            return _regeneratorRuntime.awrap(downloadGroup({\n              dataId: dataId,\n              channelApi: channelApi,\n              aesKey: aesKey,\n              channelId: channelId\n            }));\n\n          case 11:\n            groupData = _context5.sent;\n\n            if (groupData) {\n              dispatch(upsertGroup(groupData));\n              count++;\n            }\n\n          case 13:\n            _context5.next = 7;\n            break;\n\n          case 15:\n            if (count > 0) {\n              dispatch(increaseRecoveredGroups(count));\n            }\n\n            return _context5.abrupt(\"return\", groupDataIds.length);\n\n          case 19:\n            _context5.prev = 19;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.error(\"downloadingGroups: \" + _context5.t0.message);\n\n          case 22:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n};\nexport var downloadSigs = function downloadSigs(_ref6) {\n  var channelApi = _ref6.channelApi,\n      dataIds = _ref6.dataIds;\n  return function _callee6(dispatch, getState) {\n    var _getState5, _getState5$recoveryDa, sigs, channelId, id, isSig, sigId, sigDataIds, _iterator3, _step3, dataId, signer, sig;\n\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _getState5 = getState(), _getState5$recoveryDa = _getState5.recoveryData, sigs = _getState5$recoveryDa.sigs, channelId = _getState5$recoveryDa.channel.channelId, id = _getState5$recoveryDa.id;\n\n            isSig = function isSig(id) {\n              return id.startsWith('sig_');\n            };\n\n            sigId = function sigId(id) {\n              return id.replace('sig_', '').split(':')[0];\n            };\n\n            sigDataIds = dataIds.filter(function (dataId) {\n              return isSig(dataId) && !sigs[sigId(dataId)];\n            });\n            _iterator3 = _createForOfIteratorHelperLoose(sigDataIds);\n\n          case 6:\n            if ((_step3 = _iterator3()).done) {\n              _context6.next = 17;\n              break;\n            }\n\n            dataId = _step3.value;\n            signer = sigId(dataId);\n            _context6.next = 11;\n            return _regeneratorRuntime.awrap(channelApi.download({\n              channelId: channelId,\n              dataId: dataId\n            }));\n\n          case 11:\n            sig = _context6.sent;\n\n            if (!(id && sig.id !== id)) {\n              _context6.next = 14;\n              break;\n            }\n\n            throw new RecoveryError(RecoveryErrorType.MISMATCH_ID);\n\n          case 14:\n            dispatch(setSig({\n              signer: signer,\n              sig: sig\n            }));\n\n          case 15:\n            _context6.next = 6;\n            break;\n\n          case 17:\n            return _context6.abrupt(\"return\", sigDataIds.length);\n\n          case 20:\n            _context6.prev = 20;\n            _context6.t0 = _context6[\"catch\"](0);\n\n            if (_context6.t0 instanceof RecoveryError) {\n              console.error(\"downloadingSigs: \" + _context6.t0.errorType);\n              dispatch(setRecoveryError({\n                errorType: _context6.t0.errorType\n              }));\n            } else {\n              console.error(\"downloadingSigs: \" + _context6.t0.message);\n              dispatch(setRecoveryError({\n                errorType: RecoveryErrorType.GENERIC,\n                errorMessage: _context6.t0.message\n              }));\n            }\n\n          case 23:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 20]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/thunks/channelDownloadThunks.ts"],"names":["downloadConnection","dataId","channelApi","aesKey","channelId","console","encrypted","deleteAfterDownload","connectionData","decryptData","downloadConnections","dataIds","signingKey","recoveryId","getState","connections","selectAllConnections","existingConnIds","c","isConn","id","connId","uploader","connectionDataIds","b64ToUrlSafeB64","count","filename","saveImage","imageName","base64Image","newConnection","photo","dispatch","addConnection","increaseRecoveredConnections","downloadNamePhoto","name","updateNamePhoto","downloadGroup","groupData","downloadGroups","isGroup","groupDataIds","upsertGroup","increaseRecoveredGroups","downloadSigs","sigs","isSig","sigId","sigDataIds","signer","sig","RecoveryErrorType","setSig","setRecoveryError","errorType","errorMessage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAA,SAAA;AACA,SAAA,WAAA;AACA,SAAA,eAAA;AACA,SAAA,aAAA,EAAA,WAAA,EAAA,oBAAA;AACA,SAAA,aAAA,EAAA,iBAAA;AAIA,SAAA,MAAA,EAAA,eAAA,EAAA,4BAAA,EAAA,uBAAA,EAAA,gBAAA;;AAQA,IAAMA,kBAAkB,GAAG,SAAA,OAAA,CAAA,IAAA,EAAA;EAAA,IAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAA,cAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UACzBC,MADyB,GAAA,IAAA,CAAA,MACzBA,EACAC,UAFyB,GAAA,IAAA,CAAA,UACzBD,EAEAE,MAHyB,GAAA,IAAA,CAAA,MACzBF,EAGAG,SAJyB,GAAA,IAAA,CAAA,SACzBH;UADyB,QAAA,CAAA,IAAA,GAAA,CAAA;UAYvBI,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,EAAAA,MAAAA;UAZuB,QAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAaCH,UAAU,CAAVA,QAAAA,CAAoB;YAC1CE,SAAS,EADiC,SAAA;YAE1CH,MAAM,EAFoC,MAAA;YAG1CM,mBAAmB,EAhBE;UAaqB,CAApBL,CAbD,CAAA;;QAAA,KAAA,CAAA;UAajBI,SAbiB,GAAA,QAAA,CAAA,IAajBA;UAKAE,cAlBiB,GAkBAC,WAAW,CAAA,SAAA,EAlBX,MAkBW,CAA5BD;;UAlBiB,IAAA,EAqBnB,CAAA,cAAA,IAAmB,EAACA,cAAD,IAAA,IAACA,IAAAA,cAAc,CAAlC,EAAmB,CAAnB,IAA0C,EAACA,cAAD,IAAA,IAACA,IAAAA,cAAc,CArBtC,IAqBuB,CArBvB,CAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAsBrBH;;UAAAA,OAAO,CAAPA,GAAAA,CAAAA,yBAAAA;UAtBqB,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;QAAA,KAAA,EAAA;UAyBvBA,OAAO,CAAPA,GAAAA,CAAAA,gCACgCG,cAAc,CAD9CH,IAAAA,GAAAA,IAAAA,IACwDG,cADxDH,IAAAA,IACwDG,GADxDH,KAAAA,CACwDG,GAAAA,cAAc,CADtEH,EAAAA,IAAAA,GAAAA;UAzBuB,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,cAAA,CAAA;;QAAA,KAAA,EAAA;UAAA,QAAA,CAAA,IAAA,GAAA,EAAA;UAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;UA+BvBA,OAAO,CAAPA,KAAAA,CAAAA,yBAAqC,QAAA,CAAA,EAAA,CAArCA,OAAAA;UA/BuB,MAAA,QAAA,CAAA,EAAA;;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,QAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AAA3B,CAAA;;AAoCA,OAAO,IAAMK,mBAAmB,GAAnBA,SAAAA,mBAAAA,CACX,KADWA,EACX;EAAA,IACER,UADF,GAAA,KAAA,CAAA,UAAA;EAAA,IAEES,OAFF,GAAA,KAAA,CAAA,OAAA;EAAA,OAOA,SAAA,QAAA,CAAA,QAAA,EAAA,QAAA,EAAA;IAAA,IAAA,SAAA,EAAA,UAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,WAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,cAAA,EAAA,QAAA,EAAA,aAAA;;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,SAAA,GASQG,QATR,EAAA,EAG4BF,UAH5B,GAAA,SAAA,CAAA,OAAA,CAAA,SAAA,EAAA,qBAAA,GAAA,SAAA,CAAA,YAAA,EAKYC,UALZ,GAAA,qBAAA,CAAA,EAAA,EAMQV,MANR,GAAA,qBAAA,CAAA,MAAA,EAOmBC,SAPnB,GAAA,qBAAA,CAAA,OAAA,CAAA,SAAA;YAWUW,WAXV,GAWwBC,oBAAoB,CAACF,QAX7C,EAW4C,CAAlCC;YAEAE,eAbV,GAa4BF,WAAW,CAAXA,GAAAA,CAAgB,UAAA,CAAA,EAAA;cAAA,OAAOG,CAAC,CAAR,EAAA;YAb5C,CAa4BH,CAAlBE;;YAEAE,MAfV,GAeUA,SAAAA,MAAAA,CAAS,EAATA,EAAS;cAAA,OAAQC,EAAE,CAAFA,UAAAA,CAAR,aAAQA,CAAR;YAfnB,CAeUD;;YACAE,MAhBV,GAgBUA,SAAAA,MAAAA,CAAS,EAATA,EAAS;cAAA,OAAQD,EAAE,CAAFA,OAAAA,CAAAA,aAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAR,CAAQA,CAAR;YAhBnB,CAgBUC;;YACAC,QAjBV,GAiBUA,SAAAA,QAAAA,CAAW,EAAXA,EAAW;cAAA,OAAQF,EAAE,CAAFA,OAAAA,CAAAA,aAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAR,CAAQA,CAAR;YAjBrB,CAiBUE;;YAEAC,iBAnBV,GAmB8BZ,OAAO,CAAPA,MAAAA,CACxB,UAAA,EAAA,EAAA;cAAA,OACEQ,MAAM,CAANA,EAAM,CAANA,IACAG,QAAQ,CAARA,EAAQ,CAARA,KAAiBE,eAAe,CADhCL,UACgC,CADhCA,IAEA,CAACF,eAAe,CAAfA,QAAAA,CAAyBI,MAAM,CAFhCF,EAEgC,CAA/BF,CAFDE,IAGAE,MAAM,CAANA,EAAM,CAANA,KAJF,UAAA;YApBN,CAmB8BV,CAApBY;YAQFE,KA3BR,GAAA,CA2BQA;YA3BR,SAAA,GAAA,+BAAA,CAAA,iBAAA,CAAA;;UAAA,KAAA,EAAA;YAAA,IAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YA4BexB;;YAAAA,MA5Bf,GAAA,KAAA,CAAA,KA4BeA;YA5Bf,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CA6BmCD,kBAAkB,CAAC;cAC9CC,MAAM,EADwC,MAAA;cAE9CC,UAAU,EAFoC,UAAA;cAG9CC,MAAM,EAHwC,MAAA;cAI9CC,SAAS,EAjCjB;YA6BsD,CAAD,CA7BrD,CAAA;;UAAA,KAAA,EAAA;YA6BYI,cA7BZ,GAAA,SAAA,CAAA,IA6BYA;;YA7BZ,IAAA,CAAA,cAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAoCYkB;;YAAAA,QApCZ,GAAA,KAAA,CAoCYA;;YApCZ,IAAA,CAqCYlB,cAAc,CArC1B,KAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAsC2BmB,SAAS,CAAC;cACzBC,SAAS,EAAEpB,cAAc,CADA,EAAA;cAEzBqB,WAAW,EAAErB,cAAc,CAxCvC;YAsCqC,CAAD,CAtCpC,CAAA;;UAAA,KAAA,EAAA;YAsCUkB,QAtCV,GAAA,SAAA,CAAA,IAsCUA;;UAtCV,KAAA,EAAA;YA2CcI,aA3Cd,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAAA,EAAA,EAAA;cA6CUC,KAAK,EAAE;gBAAEL,QAAQ,EA7C3B;cA6CiB;YA7CjB,CAAA,CA2CcI;YAKNE,QAAQ,CAACC,aAAa,CAAtBD,aAAsB,CAAd,CAARA;YACAP,KAAK;;UAjDb,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;;UAAA,KAAA,EAAA;YAoDI,IAAIA,KAAK,GAAT,CAAA,EAAe;cACbO,QAAQ,CAACE,4BAA4B,CAArCF,KAAqC,CAA7B,CAARA;YArDN;;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAuDWT,iBAAiB,CAvD5B,MAAA,CAAA;;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAyDIlB,OAAO,CAAPA,KAAAA,CAAAA,6BAAyC,SAAA,CAAA,EAAA,CAAzCA,OAAAA;;UAzDJ,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;EAPA,CAAA;AADK,CAAA;AAqEP,OAAO,IAAM8B,iBAAiB,GAAjBA,SAAAA,iBAAAA,CACX,KADWA,EACX;EAAA,IACEjC,UADF,GAAA,KAAA,CAAA,UAAA;EAAA,IAEES,OAFF,GAAA,KAAA,CAAA,OAAA;EAAA,OAOA,SAAA,QAAA,CAAA,QAAA,EAAA,QAAA,EAAA;IAAA,IAAA,UAAA,EAAA,UAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,cAAA,EAAA,UAAA,EAAA,IAAA,EAAA,QAAA;;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,UAAA,GAQMG,QARN,EAAA,EAE0BF,UAF1B,GAAA,UAAA,CAAA,OAAA,CAAA,SAAA,EAAA,qBAAA,GAAA,UAAA,CAAA,YAAA,EAIUC,UAJV,GAAA,qBAAA,CAAA,EAAA,EAKMV,MALN,GAAA,qBAAA,CAAA,MAAA,EAMiBC,SANjB,GAAA,qBAAA,CAAA,OAAA,CAAA,SAAA;;YAUQiB,MAVR,GAUQA,SAAAA,MAAAA,CAAS,EAATA,EAAS;cAAA,OAAQD,EAAE,CAAFA,OAAAA,CAAAA,aAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAR,CAAQA,CAAR;YAVjB,CAUQC;;YACAC,QAXR,GAWQA,SAAAA,QAAAA,CAAW,EAAXA,EAAW;cAAA,OAAQF,EAAE,CAAFA,OAAAA,CAAAA,aAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAR,CAAQA,CAAR;YAXnB,CAWQE;;YAEArB,MAbR,GAaiBU,OAAO,CAAPA,IAAAA,CACb,UAAA,EAAA,EAAA;cAAA,OACEU,MAAM,CAANA,EAAM,CAANA,KAAAA,UAAAA,IACAC,QAAQ,CAARA,EAAQ,CAARA,KAAiBE,eAAe,CAFlC,UAEkC,CAFlC;YAdJ,CAaiBb,CAATV;;YAbR,IAAA,CAAA,MAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAoBiCD,kBAAkB,CAAC;cAC9CC,MAAM,EADwC,MAAA;cAE9CC,UAAU,EAFoC,UAAA;cAG9CC,MAAM,EAHwC,MAAA;cAI9CC,SAAS,EAxBf;YAoBoD,CAAD,CApBnD,CAAA;;UAAA,KAAA,CAAA;YAoBUI,cApBV,GAAA,SAAA,CAAA,IAoBUA;YApBV,UAAA,GA6BQM,QA7BR,EAAA,EA4BsBsB,IA5BtB,GAAA,UAAA,CAAA,YAAA,CAAA,IAAA;;YAAA,IAAA,EA+BQ,CAAA,IAAA,IA/BR,cAAA,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;;YAAA,IAAA,CAiCU5B,cAAc,CAjCxB,KAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAkCyBmB,SAAS,CAAC;cACzBC,SAAS,EAAEpB,cAAc,CADA,EAAA;cAEzBqB,WAAW,EAAErB,cAAc,CApCrC;YAkCmC,CAAD,CAlClC,CAAA;;UAAA,KAAA,EAAA;YAkCQkB,QAlCR,GAAA,SAAA,CAAA,IAkCQA;;UAlCR,KAAA,EAAA;YAuCMM,QAAQ,CACNK,eAAe,CAAC;cAAED,IAAI,EAAE5B,cAAc,CAAtB,IAAA;cAA6BuB,KAAK,EAAE;gBAAEL,QAAQ,EADhEM;cACsD;YAApC,CAAD,CADT,CAARA;;UAvCN,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;EAPA,CAAA;AADK,CAAA;;AAsDP,IAAMM,aAAa,GAAG,SAAA,QAAA,CAAA,KAAA,EAAA;EAAA,IAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,QAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UACpBrC,MADoB,GAAA,KAAA,CAAA,MACpBA,EACAC,UAFoB,GAAA,KAAA,CAAA,UACpBD,EAEAE,MAHoB,GAAA,KAAA,CAAA,MACpBF,EAGAG,SAJoB,GAAA,KAAA,CAAA,SACpBH;UADoB,SAAA,CAAA,IAAA,GAAA,CAAA;UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAYMC,UAAU,CAAVA,QAAAA,CAAoB;YAC1CE,SAAS,EADiC,SAAA;YAE1CH,MAAM,EAFoC,MAAA;YAG1CM,mBAAmB,EAfH;UAY0B,CAApBL,CAZN,CAAA;;QAAA,KAAA,CAAA;UAYZI,SAZY,GAAA,SAAA,CAAA,IAYZA;UAKAiC,SAjBY,GAiBA9B,WAAW,CAAA,SAAA,EAjBX,MAiBW,CAAvB8B;;UAjBY,IAAA,EAmBd,CAAA,SAAA,IAAc,EAACA,SAAD,IAAA,IAACA,IAAAA,SAAS,CAAxB,EAAc,CAAd,IAAgC,EAACA,SAAD,IAAA,IAACA,IAAAA,SAAS,CAnB5B,MAmBkB,CAnBlB,CAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAoBhBlC;;UAAAA,OAAO,CAAPA,GAAAA,CAAAA,oBAAAA;UApBgB,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;QAAA,KAAA,CAAA;UAAA,IAAA,CAyBdkC,SAAS,CAzBK,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA;;UAAA,SAAA,CAAA,IAAA,GAAA,EAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CA0BCZ,SAAS,CAAC;YACzBC,SAAS,EAAEW,SAAS,CADK,EAAA;YAEzBV,WAAW,EAAEU,SAAS,CA5BR;UA0BW,CAAD,CA1BV,CAAA;;QAAA,KAAA,EAAA;UA0BhBb,QA1BgB,GAAA,SAAA,CAAA,IA0BhBA;;QA1BgB,KAAA,EAAA;UA+BlBa,SAAS,CAATA,KAAAA,GAAkB;YAAEb,QAAQ,EAA5Ba;UAAkB,CAAlBA;UA/BkB,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA;;QAAA,KAAA,EAAA;UAAA,SAAA,CAAA,IAAA,GAAA,EAAA;UAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;UAkClBlC,OAAO,CAAPA,KAAAA,CAAAA,oBAAgC,SAAA,CAAA,EAAA,CAAhCA,OAAAA;;QAlCkB,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,SAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AAAtB,CAAA;;AAsCA,OAAO,IAAMmC,cAAc,GAAdA,SAAAA,cAAAA,CACX,KADWA,EACX;EAAA,IACEtC,UADF,GAAA,KAAA,CAAA,UAAA;EAAA,IAEES,OAFF,GAAA,KAAA,CAAA,OAAA;EAAA,OAOA,SAAA,QAAA,CAAA,QAAA,EAAA,QAAA,EAAA;IAAA,IAAA,UAAA,EAAA,UAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EAAA,QAAA,EAAA,YAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA;;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,UAAA,GAQQG,QARR,EAAA,EAG4BF,UAH5B,GAAA,UAAA,CAAA,OAAA,CAAA,SAAA,EAAA,qBAAA,GAAA,UAAA,CAAA,YAAA,EAKQT,MALR,GAAA,qBAAA,CAAA,MAAA,EAMmBC,SANnB,GAAA,qBAAA,CAAA,OAAA,CAAA,SAAA;;YAUUqC,OAVV,GAUUA,SAAAA,OAAAA,CAAU,EAAVA,EAAU;cAAA,OAAQrB,EAAE,CAAFA,UAAAA,CAAR,QAAQA,CAAR;YAVpB,CAUUqB;;YACAnB,QAXV,GAWUA,SAAAA,QAAAA,CAAW,EAAXA,EAAW;cAAA,OAAQF,EAAE,CAAFA,OAAAA,CAAAA,QAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAR,CAAQA,CAAR;YAXrB,CAWUE;;YACAoB,YAZV,GAYyB/B,OAAO,CAAPA,MAAAA,CACnB,UAAA,EAAA,EAAA;cAAA,OAAQ8B,OAAO,CAAPA,EAAO,CAAPA,IAAenB,QAAQ,CAARA,EAAQ,CAARA,KAAiBE,eAAe,CAAvD,UAAuD,CAAvD;YAbN,CAYyBb,CAAf+B;YAGFjB,KAfR,GAAA,CAeQA;YAfR,UAAA,GAAA,+BAAA,CAAA,YAAA,CAAA;;UAAA,KAAA,CAAA;YAAA,IAAA,CAAA,MAAA,GAAA,UAAA,EAAA,EAAA,IAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAgBexB;;YAAAA,MAhBf,GAAA,MAAA,CAAA,KAgBeA;YAhBf,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAiB8BqC,aAAa,CAAC;cACpCrC,MAAM,EAD8B,MAAA;cAEpCC,UAAU,EAF0B,UAAA;cAGpCC,MAAM,EAH8B,MAAA;cAIpCC,SAAS,EArBjB;YAiB4C,CAAD,CAjB3C,CAAA;;UAAA,KAAA,EAAA;YAiBYmC,SAjBZ,GAAA,SAAA,CAAA,IAiBYA;;YAMN,IAAA,SAAA,EAAe;cACbP,QAAQ,CAACW,WAAW,CAApBX,SAAoB,CAAZ,CAARA;cACAP,KAAK;YAzBb;;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;;UAAA,KAAA,EAAA;YA4BI,IAAIA,KAAK,GAAT,CAAA,EAAe;cACbO,QAAQ,CAACY,uBAAuB,CAAhCZ,KAAgC,CAAxB,CAARA;YA7BN;;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EA+BWU,YAAY,CA/BvB,MAAA,CAAA;;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAiCIrC,OAAO,CAAPA,KAAAA,CAAAA,wBAAoC,SAAA,CAAA,EAAA,CAApCA,OAAAA;;UAjCJ,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;EAPA,CAAA;AADK,CAAA;AA6CP,OAAO,IAAMwC,YAAY,GAAZA,SAAAA,YAAAA,CACX,KADWA,EACX;EAAA,IACE3C,UADF,GAAA,KAAA,CAAA,UAAA;EAAA,IAEES,OAFF,GAAA,KAAA,CAAA,OAAA;EAAA,OAOA,SAAA,QAAA,CAAA,QAAA,EAAA,QAAA,EAAA;IAAA,IAAA,UAAA,EAAA,qBAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA;;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,UAAA,GAQQG,QARR,EAAA,EAAA,qBAAA,GAAA,UAAA,CAAA,YAAA,EAIQgC,IAJR,GAAA,qBAAA,CAAA,IAAA,EAKmB1C,SALnB,GAAA,qBAAA,CAAA,OAAA,CAAA,SAAA,EAMQgB,EANR,GAAA,qBAAA,CAAA,EAAA;;YAUU2B,KAVV,GAUUA,SAAAA,KAAAA,CAAQ,EAARA,EAAQ;cAAA,OAAgB3B,EAAE,CAAFA,UAAAA,CAAhB,MAAgBA,CAAhB;YAVlB,CAUU2B;;YACAC,KAXV,GAWUA,SAAAA,KAAAA,CAAQ,EAARA,EAAQ;cAAA,OAAgB5B,EAAE,CAAFA,OAAAA,CAAAA,MAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAhB,CAAgBA,CAAhB;YAXlB,CAWU4B;;YAEAC,UAbV,GAauBtC,OAAO,CAAPA,MAAAA,CACjB,UAAA,MAAA,EAAA;cAAA,OAAYoC,KAAK,CAALA,MAAK,CAALA,IAAiB,CAACD,IAAI,CAACE,KAAK,CAAxC,MAAwC,CAAN,CAAlC;YAdN,CAauBrC,CAAbsC;YAbV,UAAA,GAAA,+BAAA,CAAA,UAAA,CAAA;;UAAA,KAAA,CAAA;YAAA,IAAA,CAAA,MAAA,GAAA,UAAA,EAAA,EAAA,IAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAiBehD;;YAAAA,MAjBf,GAAA,MAAA,CAAA,KAiBeA;YACHiD,MAlBZ,GAkBqBF,KAAK,CAlB1B,MAkB0B,CAAdE;YAlBZ,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAmBmChD,UAAU,CAAVA,QAAAA,CAAoB;cAAEE,SAAS,EAAX,SAAA;cAAaH,MAAM,EAnB1E;YAmBuD,CAApBC,CAnBnC,CAAA;;UAAA,KAAA,EAAA;YAmBYiD,GAnBZ,GAAA,SAAA,CAAA,IAmBYA;;YAnBZ,IAAA,EAoBU/B,EAAE,IAAI+B,GAAG,CAAHA,EAAAA,KApBhB,EAAA,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;;YAAA,MAsBc,IAAA,aAAA,CAAkBC,iBAAiB,CAtBjD,WAsBc,CAtBd;;UAAA,KAAA,EAAA;YAwBMpB,QAAQ,CAACqB,MAAM,CAAC;cAAEH,MAAM,EAAR,MAAA;cAAUC,GAAG,EAA7BnB;YAAgB,CAAD,CAAP,CAARA;;UAxBN,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EA0BWiB,UAAU,CA1BrB,MAAA,CAAA;;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;;YA4BI,IAAI,SAAA,CAAA,EAAA,YAAJ,aAAA,EAAkC;cAChC5C,OAAO,CAAPA,KAAAA,CAAAA,sBAAkC,SAAA,CAAA,EAAA,CAAlCA,SAAAA;cACA2B,QAAQ,CAACsB,gBAAgB,CAAC;gBAAEC,SAAS,EAAE,SAAA,CAAA,EAAA,CAAvCvB;cAA0B,CAAD,CAAjB,CAARA;YAFF,CAAA,MAGO;cACL3B,OAAO,CAAPA,KAAAA,CAAAA,sBAAkC,SAAA,CAAA,EAAA,CAAlCA,OAAAA;cACA2B,QAAQ,CACNsB,gBAAgB,CAAC;gBACfC,SAAS,EAAEH,iBAAiB,CADb,OAAA;gBAEfI,YAAY,EAAE,SAAA,CAAA,EAAA,CAHlBxB;cACmB,CAAD,CADV,CAARA;YAjCN;;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;EAPA,CAAA;AADK,CAAA","sourcesContent":["import ChannelAPI from '@/api/channelService';\nimport { saveImage } from '@/utils/filesystem';\nimport { decryptData } from '@/utils/cryptoHelper';\nimport { hash, b64ToUrlSafeB64 } from '@/utils/encoding';\nimport { addConnection, upsertGroup, selectAllConnections } from '@/actions';\nimport {\n  RecoveryError,\n  RecoveryErrorType,\n} from '@/components/Onboarding/RecoveryFlow/RecoveryError';\nimport {\n  setSig,\n  updateNamePhoto,\n  increaseRecoveredConnections,\n  increaseRecoveredGroups,\n  setRecoveryError,\n} from '../recoveryDataSlice';\n\nconst downloadConnection = async ({\n  dataId,\n  channelApi,\n  aesKey,\n  channelId,\n}: {\n  dataId: string;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  channelId: string;\n}): Promise<SyncConnection> => {\n  try {\n    console.log(channelId, dataId);\n    const encrypted = await channelApi.download({\n      channelId,\n      dataId,\n      deleteAfterDownload: true,\n    });\n    const connectionData = decryptData(encrypted, aesKey) as SyncConnection;\n\n    // missing data\n    if (!connectionData || !connectionData?.id || !connectionData?.name) {\n      console.log('missing connection data');\n      return;\n    }\n    console.log(\n      `Downloaded profile data of ${connectionData.name} (${connectionData?.id})`,\n    );\n\n    return connectionData;\n  } catch (err) {\n    console.error(`downloadConnection: ${err.message}`);\n    throw err;\n  }\n};\n\nexport const downloadConnections =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        keypair: { publicKey: signingKey },\n        recoveryData: {\n          id: recoveryId,\n          aesKey,\n          channel: { channelId },\n        },\n      } = getState();\n\n      const connections = selectAllConnections(getState());\n\n      const existingConnIds = connections.map((c) => c.id);\n\n      const isConn = (id) => id.startsWith('connection_');\n      const connId = (id) => id.replace('connection_', '').split(':')[0];\n      const uploader = (id) => id.replace('connection_', '').split(':')[1];\n\n      const connectionDataIds = dataIds.filter(\n        (id) =>\n          isConn(id) &&\n          uploader(id) !== b64ToUrlSafeB64(signingKey) &&\n          !existingConnIds.includes(connId(id)) &&\n          connId(id) !== recoveryId,\n      );\n\n      let count = 0;\n      for (const dataId of connectionDataIds) {\n        const connectionData = await downloadConnection({\n          dataId,\n          channelApi,\n          aesKey,\n          channelId,\n        });\n        if (connectionData) {\n          let filename: string;\n          if (connectionData.photo) {\n            filename = await saveImage({\n              imageName: connectionData.id,\n              base64Image: connectionData.photo,\n            });\n          }\n          const newConnection: Connection = {\n            ...connectionData,\n            photo: { filename },\n          };\n\n          dispatch(addConnection(newConnection));\n          count++;\n        }\n      }\n      if (count > 0) {\n        dispatch(increaseRecoveredConnections(count));\n      }\n      return connectionDataIds.length;\n    } catch (err) {\n      console.error(`downloadingConnections: ${err.message}`);\n    }\n  };\n\nexport const downloadNamePhoto =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    const {\n      keypair: { publicKey: signingKey },\n      recoveryData: {\n        id: recoveryId,\n        aesKey,\n        channel: { channelId },\n      },\n    } = getState();\n\n    const connId = (id) => id.replace('connection_', '').split(':')[0];\n    const uploader = (id) => id.replace('connection_', '').split(':')[1];\n\n    const dataId = dataIds.find(\n      (id) =>\n        connId(id) === recoveryId &&\n        uploader(id) !== b64ToUrlSafeB64(signingKey),\n    );\n\n    if (dataId) {\n      const connectionData = await downloadConnection({\n        dataId,\n        channelApi,\n        aesKey,\n        channelId,\n      });\n\n      const {\n        recoveryData: { name },\n      } = getState();\n\n      if (!name && connectionData) {\n        let filename: string;\n        if (connectionData.photo) {\n          filename = await saveImage({\n            imageName: connectionData.id,\n            base64Image: connectionData.photo,\n          });\n        }\n        dispatch(\n          updateNamePhoto({ name: connectionData.name, photo: { filename } }),\n        );\n      }\n    }\n  };\n\nconst downloadGroup = async ({\n  dataId,\n  channelApi,\n  aesKey,\n  channelId,\n}: {\n  dataId: string;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  channelId: string;\n}) => {\n  try {\n    const encrypted = await channelApi.download({\n      channelId,\n      dataId,\n      deleteAfterDownload: true,\n    });\n    const groupData = decryptData(encrypted, aesKey);\n    // group data missing\n    if (!groupData || !groupData?.id || !groupData?.aesKey) {\n      console.log('missing group data');\n      return;\n    }\n\n    let filename;\n    if (groupData.photo) {\n      filename = await saveImage({\n        imageName: groupData.id,\n        base64Image: groupData.photo,\n      });\n    }\n    groupData.photo = { filename };\n    return groupData;\n  } catch (err) {\n    console.error(`downloadGroup: ${err.message}`);\n  }\n};\n\nexport const downloadGroups =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        keypair: { publicKey: signingKey },\n        recoveryData: {\n          aesKey,\n          channel: { channelId },\n        },\n      } = getState();\n\n      const isGroup = (id) => id.startsWith('group_');\n      const uploader = (id) => id.replace('group_', '').split(':')[1];\n      const groupDataIds = dataIds.filter(\n        (id) => isGroup(id) && uploader(id) !== b64ToUrlSafeB64(signingKey),\n      );\n      let count = 0;\n      for (const dataId of groupDataIds) {\n        const groupData = await downloadGroup({\n          dataId,\n          channelApi,\n          aesKey,\n          channelId,\n        });\n        if (groupData) {\n          dispatch(upsertGroup(groupData));\n          count++;\n        }\n      }\n      if (count > 0) {\n        dispatch(increaseRecoveredGroups(count));\n      }\n      return groupDataIds.length;\n    } catch (err) {\n      console.error(`downloadingGroups: ${err.message}`);\n    }\n  };\n\nexport const downloadSigs =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        recoveryData: {\n          sigs,\n          channel: { channelId },\n          id,\n        },\n      } = getState();\n\n      const isSig = (id: string) => id.startsWith('sig_');\n      const sigId = (id: string) => id.replace('sig_', '').split(':')[0];\n\n      const sigDataIds = dataIds.filter(\n        (dataId) => isSig(dataId) && !sigs[sigId(dataId)],\n      );\n\n      for (const dataId of sigDataIds) {\n        const signer = sigId(dataId);\n        const sig: Signature = await channelApi.download({ channelId, dataId });\n        if (id && sig.id !== id) {\n          // recovery connections disagree on which account is being recovered!\n          throw new RecoveryError(RecoveryErrorType.MISMATCH_ID);\n        }\n        dispatch(setSig({ signer, sig }));\n      }\n      return sigDataIds.length;\n    } catch (err) {\n      if (err instanceof RecoveryError) {\n        console.error(`downloadingSigs: ${err.errorType}`);\n        dispatch(setRecoveryError({ errorType: err.errorType }));\n      } else {\n        console.error(`downloadingSigs: ${err.message}`);\n        dispatch(\n          setRecoveryError({\n            errorType: RecoveryErrorType.GENERIC,\n            errorMessage: err.message,\n          }),\n        );\n      }\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}