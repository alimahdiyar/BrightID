{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateNotifications = exports.setRecoveryConnectionsPending = exports.setNotificationToken = exports.setDeviceToken = exports.setBackupPending = exports.setActiveNotification = exports.removeActiveNotification = exports.SET_RECOVERY_CONNECTIONS_PENDING = exports.SET_NOTIFICATION_TOKEN = exports.SET_DEVICE_TOKEN = exports.SET_BACKUP_PENDING = exports.SET_ACTIVE_NOTIFICATION = exports.REMOVE_ACTIVE_NOTIFICATION = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _constants = require(\"../utils/constants\");\n\nvar _invites = require(\"../utils/invites\");\n\nvar _groups = require(\"../utils/groups\");\n\nvar _index = require(\"./index\");\n\nvar _connectionsSlice = require(\"../reducer/connectionsSlice\");\n\nvar SET_BACKUP_PENDING = 'SET_BACKUP_PENDING';\nexports.SET_BACKUP_PENDING = SET_BACKUP_PENDING;\nvar SET_DEVICE_TOKEN = 'SET_DEVICE_TOKEN';\nexports.SET_DEVICE_TOKEN = SET_DEVICE_TOKEN;\nvar SET_NOTIFICATION_TOKEN = 'SET_NOTIFICATION_TOKEN';\nexports.SET_NOTIFICATION_TOKEN = SET_NOTIFICATION_TOKEN;\nvar SET_ACTIVE_NOTIFICATION = 'SET_ACTIVE_NOTIFICATION';\nexports.SET_ACTIVE_NOTIFICATION = SET_ACTIVE_NOTIFICATION;\nvar REMOVE_ACTIVE_NOTIFICATION = 'REMOVE_ACTIVE_NOTIFICATION';\nexports.REMOVE_ACTIVE_NOTIFICATION = REMOVE_ACTIVE_NOTIFICATION;\nvar SET_RECOVERY_CONNECTIONS_PENDING = 'SET_RECOVERY_CONNECTIONS_PENDING';\nexports.SET_RECOVERY_CONNECTIONS_PENDING = SET_RECOVERY_CONNECTIONS_PENDING;\n\nvar setBackupPending = function setBackupPending(backupPending) {\n  return {\n    type: SET_BACKUP_PENDING,\n    backupPending: backupPending\n  };\n};\n\nexports.setBackupPending = setBackupPending;\n\nvar setRecoveryConnectionsPending = function setRecoveryConnectionsPending(recoveryConnectionsPending) {\n  return {\n    type: SET_RECOVERY_CONNECTIONS_PENDING,\n    recoveryConnectionsPending: recoveryConnectionsPending\n  };\n};\n\nexports.setRecoveryConnectionsPending = setRecoveryConnectionsPending;\n\nvar setDeviceToken = function setDeviceToken(deviceToken) {\n  return {\n    type: SET_DEVICE_TOKEN,\n    deviceToken: deviceToken\n  };\n};\n\nexports.setDeviceToken = setDeviceToken;\n\nvar setNotificationToken = function setNotificationToken(notificationToken) {\n  return {\n    type: SET_NOTIFICATION_TOKEN,\n    notificationToken: notificationToken\n  };\n};\n\nexports.setNotificationToken = setNotificationToken;\n\nvar setActiveNotification = function setActiveNotification(notification) {\n  return {\n    type: SET_ACTIVE_NOTIFICATION,\n    notification: notification\n  };\n};\n\nexports.setActiveNotification = setActiveNotification;\n\nvar removeActiveNotification = function removeActiveNotification() {\n  return {\n    type: REMOVE_ACTIVE_NOTIFICATION\n  };\n};\n\nexports.removeActiveNotification = removeActiveNotification;\n\nvar updateNotifications = function updateNotifications(api) {\n  return function _callee(dispatch, getState) {\n    var password, verifiedConnections, knownLevels, recoveryEligibleConnections, recoveryConnections, _getState, oldInvites, invites, activeInvites, groupName, message;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              password = getState().user.password;\n\n              if (!password) {\n                dispatch(setBackupPending(true));\n                dispatch(setActiveNotification({\n                  title: _i18next.default.t('notificationBar.title.backupPassword'),\n                  message: _i18next.default.t('notificationBar.text.backupPassword'),\n                  type: _constants.MISC_TYPE,\n                  oncePerSession: true,\n                  navigationTarget: 'Notifications',\n                  icon: 'PhoneLock'\n                }));\n              } else {\n                dispatch(setBackupPending(false));\n              }\n            } catch (err) {\n              console.log(err);\n            }\n\n            try {\n              verifiedConnections = (0, _connectionsSlice.verifiedConnectionsSelector)(getState());\n              knownLevels = Array(_constants.connection_levels.ALREADY_KNOWN, _constants.connection_levels.RECOVERY);\n              recoveryEligibleConnections = verifiedConnections.filter(function (conn) {\n                return knownLevels.includes(conn.level) && knownLevels.includes(conn.incomingLevel);\n              });\n              recoveryConnections = (0, _connectionsSlice.recoveryConnectionsSelector)(getState());\n\n              if (recoveryConnections.length < _constants.MIN_RECOVERY_CONNECTIONS && recoveryEligibleConnections.length >= _constants.MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION) {\n                dispatch(setRecoveryConnectionsPending(true));\n                dispatch(setActiveNotification({\n                  title: _i18next.default.t('notificationBar.title.socialRecovery'),\n                  message: _i18next.default.t('notificationBar.text.socialRecovery'),\n                  type: _constants.MISC_TYPE,\n                  oncePerSession: true,\n                  navigationTarget: 'Notifications',\n                  icon: 'PhoneLock'\n                }));\n              } else {\n                dispatch(setRecoveryConnectionsPending(false));\n              }\n            } catch (err) {\n              console.log(err);\n            }\n\n            if (!api) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.prev = 3;\n            _getState = getState(), oldInvites = _getState.groups.invites;\n            _context.next = 7;\n            return _regenerator.default.awrap((0, _invites.getInvites)(api));\n\n          case 7:\n            invites = _context.sent;\n            dispatch((0, _index.setInvites)(invites));\n\n            if (invites.length > oldInvites.length) {\n              activeInvites = invites.filter(function (invite) {\n                return invite.state === _constants.INVITE_ACTIVE;\n              });\n              groupName = (0, _groups.getGroupName)(activeInvites[activeInvites.length - 1].group);\n              message = \"You've been invited to join \" + groupName;\n              dispatch(setActiveNotification({\n                title: 'Group Invitation',\n                message: message,\n                type: _constants.GROUPS_TYPE,\n                navigationTarget: 'Notifications',\n                icon: 'AddGroup'\n              }));\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 12]], Promise);\n  };\n};\n\nexports.updateNotifications = updateNotifications;","map":{"version":3,"names":["SET_BACKUP_PENDING","SET_DEVICE_TOKEN","SET_NOTIFICATION_TOKEN","SET_ACTIVE_NOTIFICATION","REMOVE_ACTIVE_NOTIFICATION","SET_RECOVERY_CONNECTIONS_PENDING","setBackupPending","backupPending","type","setRecoveryConnectionsPending","recoveryConnectionsPending","setDeviceToken","deviceToken","setNotificationToken","notificationToken","setActiveNotification","notification","removeActiveNotification","updateNotifications","api","dispatch","getState","password","user","title","i18next","t","message","MISC_TYPE","oncePerSession","navigationTarget","icon","err","console","log","verifiedConnections","verifiedConnectionsSelector","knownLevels","Array","connection_levels","ALREADY_KNOWN","RECOVERY","recoveryEligibleConnections","filter","conn","includes","level","incomingLevel","recoveryConnections","recoveryConnectionsSelector","length","MIN_RECOVERY_CONNECTIONS","MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION","oldInvites","groups","invites","getInvites","setInvites","activeInvites","invite","state","INVITE_ACTIVE","groupName","getGroupName","group","GROUPS_TYPE"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/notifications.ts"],"sourcesContent":["import i18next from 'i18next';\nimport { NodeApi } from '@/api/brightId';\nimport {\n  GROUPS_TYPE,\n  INVITE_ACTIVE,\n  MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION,\n  MIN_RECOVERY_CONNECTIONS,\n  MISC_TYPE,\n  connection_levels,\n} from '@/utils/constants';\nimport { getInvites } from '@/utils/invites';\nimport { getGroupName } from '@/utils/groups';\nimport { setInvites } from './index';\nimport {\n  recoveryConnectionsSelector,\n  verifiedConnectionsSelector,\n} from '@/reducer/connectionsSlice';\n\nexport const SET_BACKUP_PENDING = 'SET_BACKUP_PENDING';\nexport const SET_DEVICE_TOKEN = 'SET_DEVICE_TOKEN';\nexport const SET_NOTIFICATION_TOKEN = 'SET_NOTIFICATION_TOKEN';\nexport const SET_ACTIVE_NOTIFICATION = 'SET_ACTIVE_NOTIFICATION';\nexport const REMOVE_ACTIVE_NOTIFICATION = 'REMOVE_ACTIVE_NOTIFICATION';\nexport const SET_RECOVERY_CONNECTIONS_PENDING =\n  'SET_RECOVERY_CONNECTIONS_PENDING';\n\nexport const setBackupPending = (backupPending: boolean) => ({\n  type: SET_BACKUP_PENDING,\n  backupPending,\n});\n\nexport const setRecoveryConnectionsPending = (\n  recoveryConnectionsPending: boolean,\n) => ({\n  type: SET_RECOVERY_CONNECTIONS_PENDING,\n  recoveryConnectionsPending,\n});\n\nexport const setDeviceToken = (deviceToken: string) => ({\n  type: SET_DEVICE_TOKEN,\n  deviceToken,\n});\n\nexport const setNotificationToken = (notificationToken: string) => ({\n  type: SET_NOTIFICATION_TOKEN,\n  notificationToken,\n});\n\nexport const setActiveNotification = (notification: BannerNotification) => ({\n  type: SET_ACTIVE_NOTIFICATION,\n  notification,\n});\n\nexport const removeActiveNotification = () => ({\n  type: REMOVE_ACTIVE_NOTIFICATION,\n});\n\nexport const updateNotifications =\n  (api?: NodeApi) => async (dispatch: dispatch, getState: () => State) => {\n    // check for pending backup setup\n    try {\n      const { password } = getState().user;\n      if (!password) {\n        dispatch(setBackupPending(true));\n        dispatch(\n          setActiveNotification({\n            title: i18next.t('notificationBar.title.backupPassword'),\n            message: i18next.t('notificationBar.text.backupPassword'),\n            type: MISC_TYPE,\n            oncePerSession: true,\n            navigationTarget: 'Notifications',\n            icon: 'PhoneLock',\n          }),\n        );\n      } else {\n        dispatch(setBackupPending(false));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    // check for pending recovery connections\n    try {\n      const verifiedConnections = verifiedConnectionsSelector(getState());\n      const knownLevels = Array<ConnectionLevel>(\n        connection_levels.ALREADY_KNOWN,\n        connection_levels.RECOVERY,\n      );\n      const recoveryEligibleConnections = verifiedConnections.filter(\n        (conn) =>\n          knownLevels.includes(conn.level) &&\n          knownLevels.includes(conn.incomingLevel),\n      );\n      const recoveryConnections = recoveryConnectionsSelector(getState());\n      if (\n        recoveryConnections.length < MIN_RECOVERY_CONNECTIONS &&\n        recoveryEligibleConnections.length >=\n          MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION\n      ) {\n        dispatch(setRecoveryConnectionsPending(true));\n        dispatch(\n          setActiveNotification({\n            title: i18next.t('notificationBar.title.socialRecovery'),\n            message: i18next.t('notificationBar.text.socialRecovery'),\n            type: MISC_TYPE,\n            oncePerSession: true,\n            navigationTarget: 'Notifications',\n            icon: 'PhoneLock',\n          }),\n        );\n      } else {\n        dispatch(setRecoveryConnectionsPending(false));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    // check for invites\n    if (api) {\n      try {\n        const {\n          groups: { invites: oldInvites },\n        } = getState();\n        // this can not be done in reducer because it should be in an async function\n        const invites = await getInvites(api);\n        dispatch(setInvites(invites));\n        if (invites.length > oldInvites.length) {\n          const activeInvites = invites.filter(\n            (invite) => invite.state === INVITE_ACTIVE,\n          );\n          const groupName = getGroupName(\n            activeInvites[activeInvites.length - 1].group,\n          );\n          const message = `You've been invited to join ${groupName}`;\n          dispatch(\n            setActiveNotification({\n              title: 'Group Invitation',\n              message,\n              type: GROUPS_TYPE,\n              navigationTarget: 'Notifications',\n              icon: 'AddGroup',\n            }),\n          );\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}