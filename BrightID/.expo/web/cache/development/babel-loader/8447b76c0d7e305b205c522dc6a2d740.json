{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport CryptoJS from 'crypto-js';\nimport i18next from 'i18next';\nimport { saveImage } from \"../../utils/filesystem\";\nimport { encryptAesKey } from \"../../utils/invites\";\nimport { createGroup } from \"../../actions\";\nimport backupApi from \"../../api/backupService\";\nimport { hash, randomKey } from \"../../utils/encoding\";\nimport { selectConnectionById } from \"../../reducer/connectionsSlice\";\nimport { addOperation } from \"../../reducer/operationsSlice\";\nimport { backupPhoto, backupUser } from \"../Onboarding/RecoveryFlow/thunks/backupThunks\";\nexport var createNewGroup = function createNewGroup(photo, name, api, newGroupInvitees, setCreationState) {\n  return function _callee(dispatch, getState) {\n    var _getState, _getState$user, id, backupCompleted, invitees, aesKey, uuidKey, groupId, type, groupData, encryptedGroupData, url, filename, newGroup, createOp, _iterator, _step, inv, _await$api$getProfile, signingKeys, inviteData, inviteOp;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState = getState(), _getState$user = _getState.user, id = _getState$user.id, backupCompleted = _getState$user.backupCompleted;\n            invitees = newGroupInvitees.map(function (inv) {\n              return selectConnectionById(getState(), inv);\n            });\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(randomKey(16));\n\n          case 5:\n            aesKey = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(randomKey(9));\n\n          case 8:\n            uuidKey = _context.sent;\n            groupId = hash(uuidKey);\n            type = 'general';\n            groupData = JSON.stringify({\n              name: name,\n              photo: photo\n            });\n            encryptedGroupData = CryptoJS.AES.encrypt(groupData, aesKey).toString();\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(backupApi.putRecovery('immutable', groupId, encryptedGroupData));\n\n          case 15:\n            setCreationState('creatingGroup');\n            url = \"https://recovery.brightid.org/backups/immutable/\" + groupId;\n            filename = null;\n\n            if (!photo) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: groupId,\n              base64Image: photo\n            }));\n\n          case 21:\n            filename = _context.sent;\n\n          case 22:\n            newGroup = {\n              invites: [],\n              joined: 0,\n              timestamp: 0,\n              admins: [id],\n              members: [id],\n              id: groupId,\n              photo: {\n                filename: filename\n              },\n              name: name,\n              url: url,\n              aesKey: aesKey,\n              type: type,\n              state: 'initiated'\n            };\n            _context.next = 25;\n            return _regeneratorRuntime.awrap(api.createGroup(groupId, url, type));\n\n          case 25:\n            createOp = _context.sent;\n            dispatch(addOperation(createOp));\n            dispatch(createGroup(newGroup));\n            _iterator = _createForOfIteratorHelperLoose(invitees);\n\n          case 29:\n            if ((_step = _iterator()).done) {\n              _context.next = 44;\n              break;\n            }\n\n            inv = _step.value;\n            _context.next = 33;\n            return _regeneratorRuntime.awrap(api.getProfile(inv.id));\n\n          case 33:\n            _await$api$getProfile = _context.sent;\n            signingKeys = _await$api$getProfile.signingKeys;\n            _context.next = 37;\n            return _regeneratorRuntime.awrap(encryptAesKey(aesKey, signingKeys[0]));\n\n          case 37:\n            inviteData = _context.sent;\n            _context.next = 40;\n            return _regeneratorRuntime.awrap(api.invite(inv.id, groupId, inviteData));\n\n          case 40:\n            inviteOp = _context.sent;\n            dispatch(addOperation(inviteOp));\n\n          case 42:\n            _context.next = 29;\n            break;\n\n          case 44:\n            if (!backupCompleted) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 47;\n            return _regeneratorRuntime.awrap(dispatch(backupUser()));\n\n          case 47:\n            if (!filename) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 50;\n            return _regeneratorRuntime.awrap(dispatch(backupPhoto(groupId, filename)));\n\n          case 50:\n            return _context.abrupt(\"return\", true);\n\n          case 53:\n            _context.prev = 53;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0.message);\n            Alert.alert(i18next.t('createGroup.alert.title.createFailed'), _context.t0.message);\n            return _context.abrupt(\"return\", false);\n\n          case 58:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 53]], Promise);\n  };\n};","map":{"version":3,"names":["CryptoJS","i18next","saveImage","encryptAesKey","createGroup","backupApi","hash","randomKey","selectConnectionById","addOperation","backupPhoto","backupUser","createNewGroup","photo","name","api","newGroupInvitees","setCreationState","dispatch","getState","user","id","backupCompleted","invitees","map","inv","aesKey","uuidKey","groupId","type","groupData","JSON","stringify","encryptedGroupData","AES","encrypt","toString","putRecovery","url","filename","imageName","base64Image","newGroup","invites","joined","timestamp","admins","members","state","createOp","getProfile","signingKeys","inviteData","invite","inviteOp","console","error","message","Alert","alert","t"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Groups/actions.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport CryptoJS from 'crypto-js';\nimport i18next from 'i18next';\nimport { saveImage } from '@/utils/filesystem';\nimport { encryptAesKey } from '@/utils/invites';\nimport { createGroup } from '@/actions/index';\nimport backupApi from '@/api/backupService';\nimport { hash, randomKey } from '@/utils/encoding';\nimport { selectConnectionById } from '@/reducer/connectionsSlice';\nimport { addOperation } from '@/reducer/operationsSlice';\nimport {\n  backupPhoto,\n  backupUser,\n} from '../Onboarding/RecoveryFlow/thunks/backupThunks';\nimport { NodeApi } from '@/api/brightId';\n\nexport const createNewGroup =\n  (\n    photo: string,\n    name: string,\n    api: NodeApi,\n    newGroupInvitees: Array<string>,\n    setCreationState: (string) => void,\n  ) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        user: { id, backupCompleted },\n      } = getState();\n\n      const invitees = newGroupInvitees.map((inv) =>\n        selectConnectionById(getState(), inv),\n      );\n\n      const aesKey = await randomKey(16);\n      const uuidKey = await randomKey(9);\n      const groupId = hash(uuidKey);\n      const type = 'general';\n\n      const groupData = JSON.stringify({ name, photo });\n\n      const encryptedGroupData = CryptoJS.AES.encrypt(\n        groupData,\n        aesKey,\n      ).toString();\n\n      await backupApi.putRecovery('immutable', groupId, encryptedGroupData);\n      setCreationState('creatingGroup');\n\n      const url = `https://recovery.brightid.org/backups/immutable/${groupId}`;\n\n      let filename = null;\n      if (photo) {\n        filename = await saveImage({\n          imageName: groupId,\n          base64Image: photo,\n        });\n      }\n\n      const newGroup: Group = {\n        invites: [],\n        joined: 0,\n        timestamp: 0,\n        admins: [id],\n        members: [id],\n        id: groupId,\n        photo: { filename },\n        name,\n        url,\n        aesKey,\n        type,\n        state: 'initiated',\n      };\n\n      const createOp = await api.createGroup(groupId, url, type);\n      dispatch(addOperation(createOp));\n      dispatch(createGroup(newGroup));\n\n      for (const inv of invitees) {\n        const { signingKeys } = await api.getProfile(inv.id);\n        const inviteData = await encryptAesKey(aesKey, signingKeys[0]);\n        const inviteOp = await api.invite(inv.id, groupId, inviteData);\n        dispatch(addOperation(inviteOp));\n      }\n\n      if (backupCompleted) {\n        await dispatch(backupUser());\n        if (filename) {\n          await dispatch(backupPhoto(groupId, filename));\n        }\n      }\n      return true;\n    } catch (err) {\n      console.error(err.message);\n      Alert.alert(\n        i18next.t('createGroup.alert.title.createFailed'),\n        err.message,\n      );\n      return false;\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}