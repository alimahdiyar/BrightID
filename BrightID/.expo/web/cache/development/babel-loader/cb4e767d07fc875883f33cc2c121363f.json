{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Clipboard from '@react-native-community/clipboard';\nimport { useNavigation } from '@react-navigation/native';\nimport Svg, { Path } from 'react-native-svg';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { LIGHT_BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { qrCodeToSvg } from \"../../utils/qrCodes\";\nimport { useInterval } from \"../../utils/hooks\";\nimport { channel_states, channel_types, closeChannel } from \"./channelSlice\";\nimport { buildChannelQrUrl } from \"../../utils/channels\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Timer = function Timer(_ref) {\n  var channel = _ref.channel;\n  var navigation = useNavigation();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(channel ? channel.ttl - (Date.now() - channel.timestamp) : 0),\n      _useState2 = _slicedToArray(_useState, 2),\n      countdown = _useState2[0],\n      setCountdown = _useState2[1];\n\n  var timerTick = function timerTick() {\n    if (channel && navigation.isFocused()) {\n      var countDown = channel.ttl - (Date.now() - channel.timestamp);\n      setCountdown(countDown);\n    }\n  };\n\n  useInterval(timerTick, 1000);\n\n  var displayTime = function displayTime() {\n    var minutes = Math.floor(countdown / 60000);\n    var seconds = Math.trunc(countdown % 60000 / 1000);\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return minutes + \":\" + seconds;\n  };\n\n  return countdown > 0 ? _jsxs(View, {\n    style: styles.timerContainer,\n    testID: \"TimerContainer\",\n    children: [_jsxs(Text, {\n      style: styles.timerTextLeft,\n      children: [t('qrcode.text.expiresIn'), \" \"]\n    }), _jsx(Text, {\n      style: styles.timerTextRight,\n      children: displayTime()\n    })]\n  }) : _jsx(View, {\n    style: [styles.timerContainer, {\n      height: 20\n    }]\n  });\n};\n\nexport var QrCode = function QrCode(_ref2) {\n  var channel = _ref2.channel;\n  var dispatch = useDispatch();\n\n  var _useTranslation2 = useTranslation(),\n      t = _useTranslation2.t;\n\n  var myName = useSelector(function (state) {\n    return state.user.name;\n  });\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrString = _useState4[0],\n      setQrString = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      qrsvg = _useState6[0],\n      setQrsvg = _useState6[1];\n\n  useEffect(function () {\n    if (channel && channel.state === channel_states.OPEN) {\n      var newQrString = buildChannelQrUrl(channel).href;\n\n      if (newQrString !== qrString) {\n        console.log(\"Creating QRCode: profileId \" + channel.myProfileId + \" channel \" + channel.id);\n        setQrString(newQrString);\n        qrCodeToSvg(newQrString, function (qrsvg) {\n          return setQrsvg(qrsvg);\n        });\n      }\n    } else if (!channel || (channel == null ? void 0 : channel.state) !== channel_states.OPEN) {\n      setQrString('');\n      setQrsvg('');\n    }\n  }, [channel, qrString]);\n\n  var copyQr = function copyQr() {\n    var universalLink = \"https://app.brightid.org/connection-code/\" + encodeURIComponent(qrString);\n    var clipboardMsg = __DEV__ ? universalLink : (channel == null ? void 0 : channel.type) === channel_types.SINGLE ? t('qrcode.alert.connectSingle', {\n      name: myName,\n      link: universalLink\n    }) : t('qrcode.alert.connectGroup', {\n      name: myName,\n      link: universalLink\n    });\n    var alertMsg = (channel == null ? void 0 : channel.type) === channel_types.SINGLE ? t('qrcode.alert.text.shareLinkSingle') : t('qrcode.alert.text.shareLinkGroup');\n    Alert.alert(t('qrcode.alert.text.universalLink'), alertMsg, [{\n      text: t('common.button.copy'),\n      onPress: function onPress() {\n        Clipboard.setString(clipboardMsg);\n        if ((channel == null ? void 0 : channel.type) === channel_types.SINGLE) dispatch(closeChannel({\n          channelId: channel == null ? void 0 : channel.id,\n          background: true\n        }));\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  var CopyQr = function CopyQr() {\n    return _jsx(View, {\n      style: styles.copyContainer,\n      children: _jsxs(TouchableOpacity, {\n        testID: \"CopyQrBtn\",\n        style: styles.copyButton,\n        onPress: copyQr,\n        children: [_jsx(Material, {\n          size: 24,\n          name: \"content-copy\",\n          color: LIGHT_BLACK,\n          style: {\n            width: 24,\n            height: 24\n          }\n        }), _jsxs(Text, {\n          style: styles.copyText,\n          children: [\" \", t('qrcode.button.copyLink')]\n        })]\n      })\n    });\n  };\n\n  console.log('RENDERING QR CODE');\n  return qrsvg ? _jsxs(View, {\n    style: styles.qrCodeContainer,\n    testID: \"QRCodeContainer\",\n    children: [_jsx(Timer, {\n      channel: channel\n    }), _jsxs(Svg, {\n      height: DEVICE_LARGE ? '260' : '200',\n      width: DEVICE_LARGE ? '260' : '200',\n      viewBox: path(['svg', '$', 'viewBox'], qrsvg),\n      \"shape-rendering\": \"crispEdges\",\n      children: [_jsx(Path, {\n        fill: \"#fff\",\n        d: path(['svg', 'path', '0', '$', 'd'], qrsvg)\n      }), _jsx(Path, {\n        stroke: \"#000\",\n        d: path(['svg', 'path', '1', '$', 'd'], qrsvg)\n      })]\n    }), _jsx(CopyQr, {})]\n  }) : _jsx(View, {\n    style: styles.qrCodeContainer,\n    children: _jsx(View, {\n      style: styles.emptyQr,\n      children: _jsx(Spinner, {\n        isVisible: true,\n        size: 47,\n        type: \"FadingCircleAlt\",\n        color: LIGHT_BLACK\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  qrCodeContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    paddingTop: DEVICE_LARGE ? 35 : 20\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 260 : 200\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copyText: {\n    color: LIGHT_BLACK,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14]\n  },\n  timerContainer: {\n    flexDirection: 'row'\n  },\n  timerTextLeft: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK\n  },\n  timerTextRight: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244\n  }\n});\nexport default QrCode;","map":{"version":3,"names":["React","useState","useEffect","Clipboard","useNavigation","Svg","Path","useDispatch","useSelector","path","Spinner","Material","useTranslation","DEVICE_LARGE","LIGHT_BLACK","fontSize","qrCodeToSvg","useInterval","channel_states","channel_types","closeChannel","buildChannelQrUrl","Timer","channel","navigation","t","ttl","Date","now","timestamp","countdown","setCountdown","timerTick","isFocused","countDown","displayTime","minutes","Math","floor","seconds","trunc","styles","timerContainer","timerTextLeft","timerTextRight","height","QrCode","dispatch","myName","state","user","name","qrString","setQrString","qrsvg","setQrsvg","OPEN","newQrString","href","console","log","myProfileId","id","copyQr","universalLink","encodeURIComponent","clipboardMsg","__DEV__","type","SINGLE","link","alertMsg","Alert","alert","text","onPress","setString","channelId","background","cancelable","CopyQr","copyContainer","copyButton","width","copyText","qrCodeContainer","emptyQr","StyleSheet","create","justifyContent","alignItems","paddingTop","flexDirection","color","fontFamily"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/QrCode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Alert } from 'react-native';\nimport Clipboard from '@react-native-community/clipboard';\nimport { useNavigation } from '@react-navigation/native';\nimport Svg, { Path } from 'react-native-svg';\nimport { useDispatch, useSelector } from '@/store';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { LIGHT_BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { qrCodeToSvg } from '@/utils/qrCodes';\nimport { useInterval } from '@/utils/hooks';\nimport {\n  channel_states,\n  channel_types,\n  closeChannel,\n} from '@/components/PendingConnections/channelSlice';\nimport { buildChannelQrUrl } from '@/utils/channels';\n\n/**\n * My Code screen of BrightID\n *\n * USERA represents this user\n * ==================================================================\n * displays a qrcode\n *\n */\nconst Timer = ({ channel }) => {\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n\n  const [countdown, setCountdown] = useState(\n    channel ? channel.ttl - (Date.now() - channel.timestamp) : 0,\n  );\n\n  const timerTick = () => {\n    if (channel && navigation.isFocused()) {\n      const countDown = channel.ttl - (Date.now() - channel.timestamp);\n      setCountdown(countDown);\n    }\n  };\n\n  // start local timer to display countdown\n  useInterval(timerTick, 1000);\n  const displayTime = () => {\n    const minutes = Math.floor(countdown / 60000);\n    let seconds: string | number = Math.trunc((countdown % 60000) / 1000);\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n    return `${minutes}:${seconds}`;\n  };\n\n  return countdown > 0 ? (\n    <View style={styles.timerContainer} testID=\"TimerContainer\">\n      <Text style={styles.timerTextLeft}>{t('qrcode.text.expiresIn')} </Text>\n      <Text style={styles.timerTextRight}>{displayTime()}</Text>\n    </View>\n  ) : (\n    <View style={[styles.timerContainer, { height: 20 }]} />\n  );\n};\n\nexport const QrCode = ({ channel }) => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const myName = useSelector((state: State) => state.user.name);\n  const [qrString, setQrString] = useState('');\n  const [qrsvg, setQrsvg] = useState('');\n\n  // create QRCode from channel data\n  useEffect(() => {\n    if (channel && channel.state === channel_states.OPEN) {\n      const newQrString = buildChannelQrUrl(channel).href;\n      // do not re-render svg if we already have the string\n      if (newQrString !== qrString) {\n        console.log(\n          `Creating QRCode: profileId ${channel.myProfileId} channel ${channel.id}`,\n        );\n        setQrString(newQrString);\n        qrCodeToSvg(newQrString, (qrsvg) => setQrsvg(qrsvg));\n      }\n    } else if (!channel || channel?.state !== channel_states.OPEN) {\n      setQrString('');\n      setQrsvg('');\n    }\n  }, [channel, qrString]);\n\n  const copyQr = () => {\n    const universalLink = `https://app.brightid.org/connection-code/${encodeURIComponent(\n      qrString,\n    )}`;\n    const clipboardMsg = __DEV__\n      ? universalLink\n      : channel?.type === channel_types.SINGLE\n      ? t('qrcode.alert.connectSingle', {\n          name: myName,\n          link: universalLink,\n        })\n      : t('qrcode.alert.connectGroup', {\n          name: myName,\n          link: universalLink,\n        });\n\n    const alertMsg =\n      channel?.type === channel_types.SINGLE\n        ? t('qrcode.alert.text.shareLinkSingle')\n        : t('qrcode.alert.text.shareLinkGroup');\n    Alert.alert(\n      t('qrcode.alert.text.universalLink'),\n      alertMsg,\n      [\n        {\n          text: t('common.button.copy'),\n          onPress: () => {\n            Clipboard.setString(clipboardMsg);\n            if (channel?.type === channel_types.SINGLE)\n              dispatch(\n                closeChannel({ channelId: channel?.id, background: true }),\n              );\n          },\n        },\n      ],\n      { cancelable: false },\n    );\n  };\n\n  // we want to replace this QRcode with a different one for single connections\n\n  const CopyQr = () => (\n    <View style={styles.copyContainer}>\n      <TouchableOpacity\n        testID=\"CopyQrBtn\"\n        style={styles.copyButton}\n        onPress={copyQr}\n      >\n        <Material\n          size={24}\n          name=\"content-copy\"\n          color={LIGHT_BLACK}\n          style={{ width: 24, height: 24 }}\n        />\n        <Text style={styles.copyText}> {t('qrcode.button.copyLink')}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  console.log('RENDERING QR CODE');\n\n  return qrsvg ? (\n    <View style={styles.qrCodeContainer} testID=\"QRCodeContainer\">\n      <Timer channel={channel} />\n      <Svg\n        height={DEVICE_LARGE ? '260' : '200'}\n        width={DEVICE_LARGE ? '260' : '200'}\n        viewBox={path(['svg', '$', 'viewBox'], qrsvg)}\n        shape-rendering=\"crispEdges\"\n      >\n        <Path fill=\"#fff\" d={path(['svg', 'path', '0', '$', 'd'], qrsvg)} />\n        <Path stroke=\"#000\" d={path(['svg', 'path', '1', '$', 'd'], qrsvg)} />\n      </Svg>\n      <CopyQr />\n    </View>\n  ) : (\n    <View style={styles.qrCodeContainer}>\n      <View style={styles.emptyQr}>\n        <Spinner\n          isVisible={true}\n          size={47}\n          type=\"FadingCircleAlt\"\n          color={LIGHT_BLACK}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  qrCodeContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    // flexGrow: 1,\n    paddingTop: DEVICE_LARGE ? 35 : 20,\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 260 : 200,\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  copyText: {\n    color: LIGHT_BLACK,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n  },\n  timerContainer: {\n    flexDirection: 'row',\n  },\n  timerTextLeft: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  timerTextRight: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244,\n  },\n});\n\nexport default QrCode;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAEA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,GAAP,IAAcC,IAAd,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB;AACA,SAASC,IAAT,QAAqB,OAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,QAAP;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,YAAT;AACA,SAASC,WAAT;AACA,SAASC,QAAT;AACA,SAASC,WAAT;AACA,SAASC,WAAT;AACA,SACEC,cADF,EAEEC,aAFF,EAGEC,YAHF;AAKA,SAASC,iBAAT;;;;AAUA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAiB;EAAA,IAAdC,OAAc,QAAdA,OAAc;EAC7B,IAAMC,UAAU,GAAGpB,aAAa,EAAhC;;EACA,sBAAcQ,cAAc,EAA5B;EAAA,IAAQa,CAAR,mBAAQA,CAAR;;EAEA,gBAAkCxB,QAAQ,CACxCsB,OAAO,GAAGA,OAAO,CAACG,GAAR,IAAeC,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACM,SAApC,CAAH,GAAoD,CADnB,CAA1C;EAAA;EAAA,IAAOC,SAAP;EAAA,IAAkBC,YAAlB;;EAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;IACtB,IAAIT,OAAO,IAAIC,UAAU,CAACS,SAAX,EAAf,EAAuC;MACrC,IAAMC,SAAS,GAAGX,OAAO,CAACG,GAAR,IAAeC,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACM,SAApC,CAAlB;MACAE,YAAY,CAACG,SAAD,CAAZ;IACD;EACF,CALD;;EAQAjB,WAAW,CAACe,SAAD,EAAY,IAAZ,CAAX;;EACA,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;IACxB,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,SAAS,GAAG,KAAvB,CAAhB;IACA,IAAIS,OAAwB,GAAGF,IAAI,CAACG,KAAL,CAAYV,SAAS,GAAG,KAAb,GAAsB,IAAjC,CAA/B;;IACA,IAAIS,OAAO,GAAG,EAAd,EAAkB;MAChBA,OAAO,SAAOA,OAAd;IACD;;IACD,OAAUH,OAAV,SAAqBG,OAArB;EACD,CAPD;;EASA,OAAOT,SAAS,GAAG,CAAZ,GACL,MAAC,IAAD;IAAM,KAAK,EAAEW,MAAM,CAACC,cAApB;IAAoC,MAAM,EAAC,gBAA3C;IAAA,WACE,MAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,aAApB;MAAA,WAAoClB,CAAC,CAAC,uBAAD,CAArC;IAAA,EADF,EAEE,KAAC,IAAD;MAAM,KAAK,EAAEgB,MAAM,CAACG,cAApB;MAAA,UAAqCT,WAAW;IAAhD,EAFF;EAAA,EADK,GAML,KAAC,IAAD;IAAM,KAAK,EAAE,CAACM,MAAM,CAACC,cAAR,EAAwB;MAAEG,MAAM,EAAE;IAAV,CAAxB;EAAb,EANF;AAQD,CAlCD;;AAoCA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,QAAiB;EAAA,IAAdvB,OAAc,SAAdA,OAAc;EACrC,IAAMwB,QAAQ,GAAGxC,WAAW,EAA5B;;EACA,uBAAcK,cAAc,EAA5B;EAAA,IAAQa,CAAR,oBAAQA,CAAR;;EACA,IAAMuB,MAAM,GAAGxC,WAAW,CAAC,UAACyC,KAAD;IAAA,OAAkBA,KAAK,CAACC,IAAN,CAAWC,IAA7B;EAAA,CAAD,CAA1B;;EACA,iBAAgClD,QAAQ,CAAC,EAAD,CAAxC;EAAA;EAAA,IAAOmD,QAAP;EAAA,IAAiBC,WAAjB;;EACA,iBAA0BpD,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOqD,KAAP;EAAA,IAAcC,QAAd;;EAGArD,SAAS,CAAC,YAAM;IACd,IAAIqB,OAAO,IAAIA,OAAO,CAAC0B,KAAR,KAAkB/B,cAAc,CAACsC,IAAhD,EAAsD;MACpD,IAAMC,WAAW,GAAGpC,iBAAiB,CAACE,OAAD,CAAjB,CAA2BmC,IAA/C;;MAEA,IAAID,WAAW,KAAKL,QAApB,EAA8B;QAC5BO,OAAO,CAACC,GAAR,iCACgCrC,OAAO,CAACsC,WADxC,iBAC+DtC,OAAO,CAACuC,EADvE;QAGAT,WAAW,CAACI,WAAD,CAAX;QACAzC,WAAW,CAACyC,WAAD,EAAc,UAACH,KAAD;UAAA,OAAWC,QAAQ,CAACD,KAAD,CAAnB;QAAA,CAAd,CAAX;MACD;IACF,CAVD,MAUO,IAAI,CAAC/B,OAAD,IAAY,CAAAA,OAAO,QAAP,YAAAA,OAAO,CAAE0B,KAAT,MAAmB/B,cAAc,CAACsC,IAAlD,EAAwD;MAC7DH,WAAW,CAAC,EAAD,CAAX;MACAE,QAAQ,CAAC,EAAD,CAAR;IACD;EACF,CAfQ,EAeN,CAAChC,OAAD,EAAU6B,QAAV,CAfM,CAAT;;EAiBA,IAAMW,MAAM,GAAG,SAATA,MAAS,GAAM;IACnB,IAAMC,aAAa,iDAA+CC,kBAAkB,CAClFb,QADkF,CAApF;IAGA,IAAMc,YAAY,GAAGC,OAAO,GACxBH,aADwB,GAExB,CAAAzC,OAAO,QAAP,YAAAA,OAAO,CAAE6C,IAAT,MAAkBjD,aAAa,CAACkD,MAAhC,GACA5C,CAAC,CAAC,4BAAD,EAA+B;MAC9B0B,IAAI,EAAEH,MADwB;MAE9BsB,IAAI,EAAEN;IAFwB,CAA/B,CADD,GAKAvC,CAAC,CAAC,2BAAD,EAA8B;MAC7B0B,IAAI,EAAEH,MADuB;MAE7BsB,IAAI,EAAEN;IAFuB,CAA9B,CAPL;IAYA,IAAMO,QAAQ,GACZ,CAAAhD,OAAO,QAAP,YAAAA,OAAO,CAAE6C,IAAT,MAAkBjD,aAAa,CAACkD,MAAhC,GACI5C,CAAC,CAAC,mCAAD,CADL,GAEIA,CAAC,CAAC,kCAAD,CAHP;IAIA+C,KAAK,CAACC,KAAN,CACEhD,CAAC,CAAC,iCAAD,CADH,EAEE8C,QAFF,EAGE,CACE;MACEG,IAAI,EAAEjD,CAAC,CAAC,oBAAD,CADT;MAEEkD,OAAO,EAAE,mBAAM;QACbxE,SAAS,CAACyE,SAAV,CAAoBV,YAApB;QACA,IAAI,CAAA3C,OAAO,QAAP,YAAAA,OAAO,CAAE6C,IAAT,MAAkBjD,aAAa,CAACkD,MAApC,EACEtB,QAAQ,CACN3B,YAAY,CAAC;UAAEyD,SAAS,EAAEtD,OAAF,oBAAEA,OAAO,CAAEuC,EAAtB;UAA0BgB,UAAU,EAAE;QAAtC,CAAD,CADN,CAAR;MAGH;IARH,CADF,CAHF,EAeE;MAAEC,UAAU,EAAE;IAAd,CAfF;EAiBD,CArCD;;EAyCA,IAAMC,MAAM,GAAG,SAATA,MAAS;IAAA,OACb,KAAC,IAAD;MAAM,KAAK,EAAEvC,MAAM,CAACwC,aAApB;MAAA,UACE,MAAC,gBAAD;QACE,MAAM,EAAC,WADT;QAEE,KAAK,EAAExC,MAAM,CAACyC,UAFhB;QAGE,OAAO,EAAEnB,MAHX;QAAA,WAKE,KAAC,QAAD;UACE,IAAI,EAAE,EADR;UAEE,IAAI,EAAC,cAFP;UAGE,KAAK,EAAEjD,WAHT;UAIE,KAAK,EAAE;YAAEqE,KAAK,EAAE,EAAT;YAAatC,MAAM,EAAE;UAArB;QAJT,EALF,EAWE,MAAC,IAAD;UAAM,KAAK,EAAEJ,MAAM,CAAC2C,QAApB;UAAA,gBAAgC3D,CAAC,CAAC,wBAAD,CAAjC;QAAA,EAXF;MAAA;IADF,EADa;EAAA,CAAf;;EAkBAkC,OAAO,CAACC,GAAR,CAAY,mBAAZ;EAEA,OAAON,KAAK,GACV,MAAC,IAAD;IAAM,KAAK,EAAEb,MAAM,CAAC4C,eAApB;IAAqC,MAAM,EAAC,iBAA5C;IAAA,WACE,KAAC,KAAD;MAAO,OAAO,EAAE9D;IAAhB,EADF,EAEE,MAAC,GAAD;MACE,MAAM,EAAEV,YAAY,GAAG,KAAH,GAAW,KADjC;MAEE,KAAK,EAAEA,YAAY,GAAG,KAAH,GAAW,KAFhC;MAGE,OAAO,EAAEJ,IAAI,CAAC,CAAC,KAAD,EAAQ,GAAR,EAAa,SAAb,CAAD,EAA0B6C,KAA1B,CAHf;MAIE,mBAAgB,YAJlB;MAAA,WAME,KAAC,IAAD;QAAM,IAAI,EAAC,MAAX;QAAkB,CAAC,EAAE7C,IAAI,CAAC,CAAC,KAAD,EAAQ,MAAR,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAD,EAAiC6C,KAAjC;MAAzB,EANF,EAOE,KAAC,IAAD;QAAM,MAAM,EAAC,MAAb;QAAoB,CAAC,EAAE7C,IAAI,CAAC,CAAC,KAAD,EAAQ,MAAR,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAD,EAAiC6C,KAAjC;MAA3B,EAPF;IAAA,EAFF,EAWE,KAAC,MAAD,KAXF;EAAA,EADU,GAeV,KAAC,IAAD;IAAM,KAAK,EAAEb,MAAM,CAAC4C,eAApB;IAAA,UACE,KAAC,IAAD;MAAM,KAAK,EAAE5C,MAAM,CAAC6C,OAApB;MAAA,UACE,KAAC,OAAD;QACE,SAAS,EAAE,IADb;QAEE,IAAI,EAAE,EAFR;QAGE,IAAI,EAAC,iBAHP;QAIE,KAAK,EAAExE;MAJT;IADF;EADF,EAfF;AA0BD,CAhHM;AAkHP,IAAM2B,MAAM,GAAG8C,UAAU,CAACC,MAAX,CAAkB;EAC/BH,eAAe,EAAE;IACfF,KAAK,EAAE,MADQ;IAEfM,cAAc,EAAE,YAFD;IAGfC,UAAU,EAAE,QAHG;IAKfC,UAAU,EAAE9E,YAAY,GAAG,EAAH,GAAQ;EALjB,CADc;EAQ/BoE,aAAa,EAAE;IACbW,aAAa,EAAE,KADF;IAEbF,UAAU,EAAE,QAFC;IAGbD,cAAc,EAAE,QAHH;IAIbN,KAAK,EAAEtE,YAAY,GAAG,GAAH,GAAS;EAJf,CARgB;EAc/BqE,UAAU,EAAE;IACVU,aAAa,EAAE,KADL;IAEVF,UAAU,EAAE,QAFF;IAGVD,cAAc,EAAE;EAHN,CAdmB;EAmB/BL,QAAQ,EAAE;IACRS,KAAK,EAAE/E,WADC;IAERgF,UAAU,EAAE,gBAFJ;IAGR/E,QAAQ,EAAEA,QAAQ,CAAC,EAAD;EAHV,CAnBqB;EAwB/B2B,cAAc,EAAE;IACdkD,aAAa,EAAE;EADD,CAxBe;EA2B/BjD,aAAa,EAAE;IACbmD,UAAU,EAAE,gBADC;IAEb/E,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAFL;IAGb8E,KAAK,EAAE/E;EAHM,CA3BgB;EAgC/B8B,cAAc,EAAE;IACdkD,UAAU,EAAE,gBADE;IAEd/E,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAFJ;IAGd8E,KAAK,EAAE/E;EAHO,CAhCe;EAqC/BwE,OAAO,EAAE;IACPG,cAAc,EAAE,QADT;IAEPC,UAAU,EAAE,QAFL;IAGP7C,MAAM,EAAEhC,YAAY,GAAG,GAAH,GAAS;EAHtB;AArCsB,CAAlB,CAAf;AA4CA,eAAeiC,MAAf"},"metadata":{},"sourceType":"module"}