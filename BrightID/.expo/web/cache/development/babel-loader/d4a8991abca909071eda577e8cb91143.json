{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useContext, useEffect, useLayoutEffect, useState } from 'react';\nimport { useFocusEffect, useNavigation, useRoute } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../store\";\nimport ConnectionTestButton from \"../../utils/connectionTestButton\";\nimport { getVerificationPatches } from \"../../utils/verifications\";\nimport { selectConnectionById, selectAllConnections, setConnectionVerifications } from \"../../reducer/connectionsSlice\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport ConnectionScreen from \"./ConnectionScreen\";\nimport stringSimilarity from \"../../utils/stringSimilarity\";\nimport { MAX_CONNECTIONS_DUPLICATE_SEARCH, POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ConnectionScreenController() {\n  var navigation = useNavigation();\n  var route = useRoute();\n  var dispatch = useDispatch();\n  var connectionId = route.params.connectionId;\n  var api = useContext(NodeApiContext);\n  var connection = useSelector(function (state) {\n    return selectConnectionById(state, connectionId);\n  });\n  var myConnections = useSelector(selectAllConnections);\n  var myGroups = useSelector(function (state) {\n    return state.groups.groups;\n  });\n  var me = useSelector(function (state) {\n    return state.user;\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      mutualGroups = _useState2[0],\n      setMutualGroups = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mutualConnections = _useState4[0],\n      setMutualConnections = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      recoveryConnections = _useState6[0],\n      setRecoveryConnections = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      verificationsTexts = _useState8[0],\n      setVerificationsTexts = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      possibleDuplicates = _useState10[0],\n      setPossibleDuplicates = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      connectedAt = _useState12[0],\n      setConnectedAt = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var _useState15 = useState(undefined),\n      _useState16 = _slicedToArray(_useState15, 2),\n      connectionProfile = _useState16[0],\n      setConnectionProfile = _useState16[1];\n\n  useFocusEffect(useCallback(function () {\n    var fetchData = function _callee(connectionId) {\n      var profile, texts;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              console.log(\"fetching connection info for \" + connectionId);\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(api.getProfile(connectionId));\n\n            case 5:\n              profile = _context.sent;\n              setConnectionProfile(profile);\n              console.log(\"Updating verifications for \" + profile.id);\n              texts = getVerificationPatches(profile.verifications).map(function (patch) {\n                return patch.text;\n              });\n              setVerificationsTexts(texts);\n              dispatch(setConnectionVerifications({\n                id: connectionId,\n                verifications: profile.verifications\n              }));\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(\"Error getting profile for \" + connectionId + \": \" + _context.t0);\n\n            case 16:\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    };\n\n    if (connectionId !== undefined) {\n      fetchData(connectionId);\n    }\n  }, [api, connectionId, dispatch]));\n  useEffect(function () {\n    if (connectionProfile) {\n      console.log(\"Updating mutual groups etc. for \" + connectionProfile.id);\n      setConnectedAt(connectionProfile.connectedAt);\n      setMutualConnections(myConnections.filter(function (conn) {\n        return connectionProfile.mutualConnections.includes(conn.id);\n      }));\n      setMutualGroups(myGroups.filter(function (g) {\n        return connectionProfile.mutualGroups.includes(g.id);\n      }));\n\n      var _recoveryConnections = connectionProfile.recoveryConnections.map(function (rc) {\n        if (rc.id === me.id) {\n          rc.conn = me;\n        } else {\n          rc.conn = myConnections.find(function (c) {\n            return rc.id === c.id;\n          });\n        }\n\n        return rc;\n      });\n\n      setRecoveryConnections(_recoveryConnections);\n    }\n  }, [connectionProfile, me, myConnections, myGroups]);\n  useEffect(function () {\n    console.log(\"Searching possible duplicates for \" + (connection == null ? void 0 : connection.id));\n\n    if (connection && myConnections.length <= MAX_CONNECTIONS_DUPLICATE_SEARCH) {\n      setPossibleDuplicates(myConnections.filter(function (conn) {\n        return stringSimilarity(conn.name, connection.name) >= POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE && conn.id !== connection.id;\n      }));\n    } else {\n      setPossibleDuplicates([]);\n    }\n  }, [connection, myConnections]);\n  useEffect(function () {\n    if (!connection) {\n      navigation.goBack();\n    }\n  }, [navigation, connection]);\n  useLayoutEffect(function () {\n    if (__DEV__) {\n      navigation.setOptions({\n        headerRight: function headerRight() {\n          return _jsx(ConnectionTestButton, {\n            connectionId: connectionId\n          });\n        }\n      });\n    }\n  }, [navigation, connectionId]);\n\n  if (!connection) {\n    return null;\n  }\n\n  return _jsx(ConnectionScreen, {\n    connection: connection,\n    verificationsTexts: verificationsTexts,\n    loading: loading,\n    connectedAt: connectedAt,\n    mutualConnections: mutualConnections,\n    mutualGroups: mutualGroups,\n    recoveryConnections: recoveryConnections,\n    possibleDuplicates: possibleDuplicates\n  });\n}\n\nexport default ConnectionScreenController;","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useLayoutEffect","useState","useFocusEffect","useNavigation","useRoute","useDispatch","useSelector","ConnectionTestButton","getVerificationPatches","selectConnectionById","selectAllConnections","setConnectionVerifications","NodeApiContext","ConnectionScreen","stringSimilarity","MAX_CONNECTIONS_DUPLICATE_SEARCH","POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE","ConnectionScreenController","navigation","route","dispatch","connectionId","params","api","connection","state","myConnections","myGroups","groups","me","user","mutualGroups","setMutualGroups","mutualConnections","setMutualConnections","recoveryConnections","setRecoveryConnections","verificationsTexts","setVerificationsTexts","possibleDuplicates","setPossibleDuplicates","connectedAt","setConnectedAt","loading","setLoading","undefined","connectionProfile","setConnectionProfile","fetchData","console","log","getProfile","profile","id","texts","verifications","map","patch","text","filter","conn","includes","g","rc","find","c","length","name","goBack","__DEV__","setOptions","headerRight"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/ConnectionScreenController.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  useFocusEffect,\n  useNavigation,\n  useRoute,\n  RouteProp,\n} from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport ConnectionTestButton from '@/utils/connectionTestButton';\nimport { getVerificationPatches } from '@/utils/verifications';\nimport {\n  selectConnectionById,\n  selectAllConnections,\n  setConnectionVerifications,\n} from '@/reducer/connectionsSlice';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport ConnectionScreen from './ConnectionScreen';\nimport stringSimilarity from '@/utils/stringSimilarity';\nimport {\n  MAX_CONNECTIONS_DUPLICATE_SEARCH,\n  POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE,\n} from '@/utils/constants';\n\ntype ConnectionRoute = RouteProp<\n  { Connection: { connectionId: string } },\n  'Connection'\n>;\n\ntype DetailedRecoveryConnection = RecoveryConnection & { conn?: Connection };\n\nfunction ConnectionScreenController() {\n  const navigation = useNavigation();\n  const route = useRoute<ConnectionRoute>();\n  const dispatch = useDispatch();\n  const { connectionId } = route.params;\n  const api = useContext(NodeApiContext);\n  const connection = useSelector((state: State) =>\n    selectConnectionById(state, connectionId),\n  );\n  const myConnections = useSelector(selectAllConnections);\n  const myGroups = useSelector((state: State) => state.groups.groups);\n  const me = useSelector((state: State) => state.user);\n  const [mutualGroups, setMutualGroups] = useState<Array<Group>>([]);\n  const [mutualConnections, setMutualConnections] = useState<Array<Connection>>(\n    [],\n  );\n  const [recoveryConnections, setRecoveryConnections] = useState<\n    Array<DetailedRecoveryConnection>\n  >([]);\n  const [verificationsTexts, setVerificationsTexts] = useState<Array<string>>(\n    [],\n  );\n  const [possibleDuplicates, setPossibleDuplicates] = useState<\n    Array<Connection>\n  >([]);\n  const [connectedAt, setConnectedAt] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [connectionProfile, setConnectionProfile] = useState<\n    ProfileInfo | undefined\n  >(undefined);\n\n  useFocusEffect(\n    useCallback(() => {\n      const fetchData = async (connectionId) => {\n        setLoading(true);\n        console.log(`fetching connection info for ${connectionId}`);\n        try {\n          const profile: ProfileInfo = await api.getProfile(connectionId);\n          setConnectionProfile(profile);\n          console.log(`Updating verifications for ${profile.id}`);\n          const texts = getVerificationPatches(profile.verifications).map(\n            (patch) => patch.text,\n          );\n          setVerificationsTexts(texts);\n          // TODO: This causes unnecessary rerender by replacing the verifications array in redux\n          //  store, although contents are most likely identical\n          dispatch(\n            setConnectionVerifications({\n              id: connectionId,\n              verifications: profile.verifications,\n            }),\n          );\n        } catch (e) {\n          console.log(`Error getting profile for ${connectionId}: ${e}`);\n        }\n        setLoading(false);\n      };\n      if (connectionId !== undefined) {\n        fetchData(connectionId);\n      }\n    }, [api, connectionId, dispatch]),\n  );\n\n  // Update mutual groups etc. in local state\n  useEffect(() => {\n    if (connectionProfile) {\n      console.log(`Updating mutual groups etc. for ${connectionProfile.id}`);\n      setConnectedAt(connectionProfile.connectedAt);\n      setMutualConnections(\n        myConnections.filter((conn) => {\n          return connectionProfile.mutualConnections.includes(conn.id);\n        }),\n      );\n      setMutualGroups(\n        myGroups.filter((g) => {\n          return connectionProfile.mutualGroups.includes(g.id);\n        }),\n      );\n      const recoveryConnections: Array<DetailedRecoveryConnection> =\n        connectionProfile.recoveryConnections.map(\n          (rc: DetailedRecoveryConnection) => {\n            if (rc.id === me.id) {\n              rc.conn = me;\n            } else {\n              rc.conn = myConnections.find((c) => rc.id === c.id);\n            }\n            return rc;\n          },\n        );\n      setRecoveryConnections(recoveryConnections);\n    }\n  }, [connectionProfile, me, myConnections, myGroups]);\n\n  // get possible duplicates\n  useEffect(() => {\n    console.log(`Searching possible duplicates for ${connection?.id}`);\n    // Prevent high system load: Don't try to search duplicates if we have too many connections\n    if (\n      connection &&\n      myConnections.length <= MAX_CONNECTIONS_DUPLICATE_SEARCH\n    ) {\n      setPossibleDuplicates(\n        myConnections.filter(\n          (conn) =>\n            stringSimilarity(conn.name, connection.name) >=\n              POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE &&\n            conn.id !== connection.id,\n        ),\n      );\n    } else {\n      setPossibleDuplicates([]);\n    }\n  }, [connection, myConnections]);\n\n  useEffect(() => {\n    if (!connection) {\n      // connection not there anymore.\n      navigation.goBack();\n    }\n  }, [navigation, connection]);\n\n  // Add fake user functionality in DEV mode\n  useLayoutEffect(() => {\n    if (__DEV__) {\n      navigation.setOptions({\n        headerRight: () => <ConnectionTestButton connectionId={connectionId} />,\n      });\n    }\n  }, [navigation, connectionId]);\n\n  if (!connection) {\n    return null;\n  }\n\n  return (\n    <ConnectionScreen\n      connection={connection}\n      verificationsTexts={verificationsTexts}\n      loading={loading}\n      connectedAt={connectedAt}\n      mutualConnections={mutualConnections}\n      mutualGroups={mutualGroups}\n      recoveryConnections={recoveryConnections}\n      possibleDuplicates={possibleDuplicates}\n    />\n  );\n}\n\nexport default ConnectionScreenController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}