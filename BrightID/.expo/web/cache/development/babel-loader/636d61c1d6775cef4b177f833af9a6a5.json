{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar _UIManager$getViewMan, _UIManager$getViewMan2, _UIManager$getConstan;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nvar _NativeModules$UIMana = NativeModules.UIManager,\n    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManager$getViewMan = (_UIManager$getViewMan2 = UIManager.getViewManagerConfig) === null || _UIManager$getViewMan2 === void 0 ? void 0 : _UIManager$getViewMan2.call(UIManager, 'getConstants')) !== null && _UIManager$getViewMan !== void 0 ? _UIManager$getViewMan : (_UIManager$getConstan = UIManager.getConstants) === null || _UIManager$getConstan === void 0 ? void 0 : _UIManager$getConstan.call(UIManager);\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n    _UIManager$clearJSRes = UIManager.clearJSResponder,\n    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\n\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nvar handlerTag = 1;\nvar handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var res = _objectSpread({}, defaults);\n\n  validProps.forEach(function (key) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n\n      res[key] = _value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(_ref2) {\n  var name = _ref2.name,\n      _ref2$allowedProps = _ref2.allowedProps,\n      allowedProps = _ref2$allowedProps === void 0 ? [] : _ref2$allowedProps,\n      _ref2$config = _ref2.config,\n      config = _ref2$config === void 0 ? {} : _ref2$config,\n      transformProps = _ref2.transformProps,\n      _ref2$customNativePro = _ref2.customNativeProps,\n      customNativeProps = _ref2$customNativePro === void 0 ? [] : _ref2$customNativePro;\n\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      _classCallCheck(this, Handler);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n\n      _this.handlerTag = handlerTag++;\n      _this.config = {};\n      _this.propsRef = React.createRef();\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\".concat(props.id, \"\\\" already registered\"));\n        }\n\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n            onGestureEvent = _this$props5.onGestureEvent,\n            onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n            onHandlerStateChange = _this$props6.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n\n    return Handler;\n  }(React.Component);\n\n  _defineProperty(Handler, \"displayName\", name);\n\n  return Handler;\n}","map":{"version":3,"sources":["createHandler.ts"],"names":["Platform","findNodeHandleRN","UIManager","NativeModules","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","UIManagerConstants","oldSetJSResponder","oldClearJSResponder","RNGestureHandlerModule","handlerTag","handlerIDToTag","param","Object","name","defaults","res","validProps","key","value","props","isConfigParam","transformIntoHandlerTags","top","left","bottom","right","Array","handlerIDs","current","handle","handlerID","extract","refs","r","stateToPropMappings","State","allowedProps","config","transformProps","customNativeProps","Handler","React","constructor","componentDidMount","hasUnresolvedRefs","setImmediate","filterConfig","findNodeHandle","componentDidUpdate","viewTag","componentWillUnmount","clearImmediate","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","update","deepEqual","setNativeProps","mergedProps","render","gestureEventHandler","onGestureEvent","gestureStateEventHandler","onHandlerStateChange","events","grandChildren","Touchable","color","hitSlop","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}