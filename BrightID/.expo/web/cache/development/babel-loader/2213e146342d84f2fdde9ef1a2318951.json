{"ast":null,"code":"'use strict';\n\nimport Platform from \"../../../exports/Platform\";\nimport RCTDeviceEventEmitter from \"./RCTDeviceEventEmitter\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    var _this$_nativeModule,\n        _this = this;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: function remove() {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  };\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  };\n\n  _proto.emit = function emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  };\n\n  return NativeEventEmitter;\n}();\n\nexport { NativeEventEmitter as default };","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js"],"names":["NativeEventEmitter","Platform","invariant","nativeModule","_proto","_this","_this$_nativeModule","subscription","RCTDeviceEventEmitter","remove","_this$_nativeModule2","_this$_nativeModule3","_len","arguments","args","_key","eventType","_this$_nativeModule4"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nvar NativeEventEmitter = /*#__PURE__*/function () {\n  function NativeEventEmitter(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    var _this$_nativeModule,\n        _this = this;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: function remove() {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  };\n\n  _proto.emit = function emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  };\n\n  return NativeEventEmitter;\n}();\n\nexport { NativeEventEmitter as default };"]},"metadata":{},"sourceType":"module"}