{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport _ from 'lodash';\nimport { setVerifications, updateMemberships, updateConnections, setIsSponsored, updateNotifications, setActiveDevices } from \"./index\";\n\nvar fetchUserInfo = function fetchUserInfo(api) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve) {\n      InteractionManager.runAfterInteractions(function _callee() {\n        var _getState, id, verifications, memberships, connections, incomingConns, incomingConnsById, _iterator, _step, _incomingConnsById$co, conn, _await$api$getProfile, sponsored, signingKeys;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getState = getState(), id = _getState.user.id;\n\n                if (id) {\n                  _context.next = 4;\n                  break;\n                }\n\n                console.log(\"Can't fetch user info - id missing\");\n                return _context.abrupt(\"return\");\n\n              case 4:\n                console.log('refreshing user info', id);\n                _context.prev = 5;\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(api.getVerifications(id));\n\n              case 8:\n                verifications = _context.sent;\n                dispatch(setVerifications(verifications));\n                _context.next = 12;\n                return _regeneratorRuntime.awrap(api.getMemberships(id));\n\n              case 12:\n                memberships = _context.sent;\n                dispatch(updateMemberships(memberships));\n                _context.next = 16;\n                return _regeneratorRuntime.awrap(api.getConnections(id, 'outbound'));\n\n              case 16:\n                connections = _context.sent;\n                _context.next = 19;\n                return _regeneratorRuntime.awrap(api.getConnections(id, 'inbound'));\n\n              case 19:\n                incomingConns = _context.sent;\n                incomingConnsById = _.keyBy(incomingConns, 'id');\n\n                for (_iterator = _createForOfIteratorHelperLoose(connections); !(_step = _iterator()).done;) {\n                  conn = _step.value;\n                  conn.incomingLevel = (_incomingConnsById$co = incomingConnsById[conn.id]) == null ? void 0 : _incomingConnsById$co.level;\n                }\n\n                dispatch(updateConnections(connections));\n                _context.next = 25;\n                return _regeneratorRuntime.awrap(api.getProfile(id));\n\n              case 25:\n                _await$api$getProfile = _context.sent;\n                sponsored = _await$api$getProfile.sponsored;\n                signingKeys = _await$api$getProfile.signingKeys;\n                dispatch(setIsSponsored(sponsored));\n                dispatch(setActiveDevices(signingKeys));\n                dispatch(updateNotifications(api));\n                resolve(null);\n                _context.next = 37;\n                break;\n\n              case 34:\n                _context.prev = 34;\n                _context.t0 = _context[\"catch\"](5);\n                console.log(_context.t0.message);\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[5, 34]], Promise);\n      });\n    });\n  };\n};\n\nexport default fetchUserInfo;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/fetchUserInfo.ts"],"names":["fetchUserInfo","InteractionManager","id","getState","console","verifications","api","dispatch","setVerifications","memberships","updateMemberships","connections","incomingConns","incomingConnsById","_","conn","updateConnections","sponsored","signingKeys","setIsSponsored","setActiveDevices","updateNotifications","resolve"],"mappings":"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","sourcesContent":["import { InteractionManager } from 'react-native';\nimport _ from 'lodash';\nimport { NodeApi } from '@/api/brightId';\nimport {\n  setVerifications,\n  updateMemberships,\n  updateConnections,\n  setIsSponsored,\n  updateNotifications,\n  setActiveDevices,\n} from './index';\n\nconst fetchUserInfo =\n  (api: NodeApi) => (dispatch: dispatch, getState: getState) => {\n    return new Promise((resolve) => {\n      InteractionManager.runAfterInteractions(async () => {\n        const {\n          user: { id },\n        } = getState();\n\n        if (!id) {\n          console.log(`Can't fetch user info - id missing`);\n          return;\n        }\n\n        console.log('refreshing user info', id);\n        try {\n          const verifications = await api.getVerifications(id);\n          dispatch(setVerifications(verifications));\n          const memberships = await api.getMemberships(id);\n          dispatch(updateMemberships(memberships));\n          const connections = await api.getConnections(id, 'outbound');\n          const incomingConns = await api.getConnections(id, 'inbound');\n          const incomingConnsById = _.keyBy(incomingConns, 'id');\n          for (const conn of connections) {\n            conn.incomingLevel = incomingConnsById[conn.id]?.level;\n          }\n          dispatch(updateConnections(connections));\n          const { sponsored, signingKeys } = await api.getProfile(id);\n          dispatch(setIsSponsored(sponsored));\n          dispatch(setActiveDevices(signingKeys));\n          dispatch(updateNotifications(api));\n          resolve(null);\n        } catch (err) {\n          console.log(err.message);\n        }\n      });\n    });\n  };\n\nexport default fetchUserInfo;\n"]},"metadata":{},"sourceType":"module"}