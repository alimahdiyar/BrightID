{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/modules/useResponderEvents/index.js"],"names":["emptyObject","idCounter","ref","React","getInitialValue","config","id","useStable","isAttachedRef","ResponderSystem","_config","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","hostRef","isResponder"],"mappings":"AAkBA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,eAAA;AACA,IAAIA,WAAW,GAAf,EAAA;AACA,IAAIC,SAAS,GAAb,CAAA;;AAEA,SAAA,SAAA,CAAA,eAAA,EAAoC;EAClC,IAAIC,GAAG,GAAGC,KAAK,CAALA,MAAAA,CAAV,IAAUA,CAAV;;EAEA,IAAID,GAAG,CAAHA,OAAAA,IAAJ,IAAA,EAAyB;IACvBA,GAAG,CAAHA,OAAAA,GAAcE,eAAdF,EAAAA;EAGF;;EAAA,OAAOA,GAAG,CAAV,OAAA;AAGF;;AAAA,eAAe,SAAA,kBAAA,CAAA,OAAA,EAAA,MAAA,EAA6C;EAC1D,IAAIG,MAAM,KAAK,KAAf,CAAA,EAAuB;IACrBA,MAAM,GAANA,WAAAA;EAGF;;EAAA,IAAIC,EAAE,GAAGC,SAAS,CAAC,YAAY;IAC7B,OAAON,SAAP,EAAA;EADF,CAAkB,CAAlB;EAGA,IAAIO,aAAa,GAAGL,KAAK,CAALA,MAAAA,CAApB,KAAoBA,CAApB;EAIAA,KAAK,CAALA,SAAAA,CAAgB,YAAY;IAC1BM,eAAe,CAAfA,eAAAA;IACA,OAAO,YAAY;MACjBA,eAAe,CAAfA,UAAAA,CAAAA,EAAAA;IADF,CAAA;EAFFN,CAAAA,EAKG,CALHA,EAKG,CALHA;EAOAA,KAAK,CAALA,SAAAA,CAAgB,YAAY;IAC1B,IAAIO,OAAO,GAAX,MAAA;IAAA,IACIC,wBAAwB,GAAGD,OAAO,CADtC,wBAAA;IAAA,IAEIE,+BAA+B,GAAGF,OAAO,CAF7C,+BAAA;IAAA,IAGIG,0BAA0B,GAAGH,OAAO,CAHxC,0BAAA;IAAA,IAIII,iCAAiC,GAAGJ,OAAO,CAJ/C,iCAAA;IAAA,IAKIK,mCAAmC,GAAGL,OAAO,CALjD,mCAAA;IAAA,IAMIM,0CAA0C,GAAGN,OAAO,CANxD,0CAAA;IAAA,IAOIO,yBAAyB,GAAGP,OAAO,CAPvC,yBAAA;IAAA,IAQIQ,gCAAgC,GAAGR,OAAO,CAR9C,gCAAA;IASA,IAAIS,uBAAuB,GAAGR,wBAAwB,IAAxBA,IAAAA,IAAoCC,+BAA+B,IAAnED,IAAAA,IAA+EE,0BAA0B,IAAzGF,IAAAA,IAAqHG,iCAAiC,IAAtJH,IAAAA,IAAkKI,mCAAmC,IAArMJ,IAAAA,IAAiNK,0CAA0C,IAA3PL,IAAAA,IAAuQM,yBAAyB,IAAhSN,IAAAA,IAA4SO,gCAAgC,IAA1W,IAAA;IACA,IAAIE,IAAI,GAAGC,OAAO,CAAlB,OAAA;;IAEA,IAAA,uBAAA,EAA6B;MAC3BZ,eAAe,CAAfA,OAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,MAAAA;MACAD,aAAa,CAAbA,OAAAA,GAAAA,IAAAA;IAFF,CAAA,MAGO,IAAIA,aAAa,CAAjB,OAAA,EAA2B;MAChCC,eAAe,CAAfA,UAAAA,CAAAA,EAAAA;MACAD,aAAa,CAAbA,OAAAA,GAAAA,KAAAA;IAEH;EApBDL,CAAAA,EAoBG,CAAA,MAAA,EAAA,OAAA,EApBHA,EAoBG,CApBHA;EAqBAA,KAAK,CAALA,aAAAA,CAAoB;IAClBmB,WAAW,EAAED,OAAO,CAAPA,OAAAA,KAAoBZ,eAAe,CADlDN,gBACmCM;EADf,CAApBN;EAGAA,KAAK,CAALA,aAAAA,CAAAA,MAAAA;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false); // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]); // Register and unregister with the Responder System as necessary\n\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}"]},"metadata":{},"sourceType":"module"}