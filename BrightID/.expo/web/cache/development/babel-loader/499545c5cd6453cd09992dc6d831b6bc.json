{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pollChannel = exports.createChannel = exports.clearChannel = exports.checkChannel = exports.CHANNEL_POLL_INTERVAL = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _encoding = require(\"../../../../utils/encoding\");\n\nvar _channelService = _interopRequireDefault(require(\"../../../../api/channelService\"));\n\nvar _settingsSlice = require(\"../../../../reducer/settingsSlice\");\n\nvar _channelDownloadThunks = require(\"./channelDownloadThunks\");\n\nvar _recoveryDataSlice = require(\"../recoveryDataSlice\");\n\nvar _recovery = require(\"../../../../utils/recovery\");\n\nvar CHANNEL_POLL_INTERVAL = 3000;\nexports.CHANNEL_POLL_INTERVAL = CHANNEL_POLL_INTERVAL;\n\nvar createChannel = function createChannel() {\n  return function _callee(dispatch, getState) {\n    var _getState, recoveryData, baseUrl, url, channelApi, channelId, msg;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState = getState(), recoveryData = _getState.recoveryData;\n            baseUrl = (0, _settingsSlice.selectBaseUrl)(getState());\n            url = new URL(baseUrl + \"/profile\");\n            channelApi = new _channelService.default(url.href);\n            channelId = (0, _encoding.hash)(recoveryData.aesKey);\n            console.log(\"created channel \" + channelId + \" for recovery data\");\n            dispatch((0, _recoveryDataSlice.setRecoveryChannel)({\n              channelId: channelId,\n              url: url\n            }));\n            _context.next = 10;\n            return _regenerator.default.awrap((0, _recovery.uploadRecoveryData)(recoveryData, channelApi));\n\n          case 10:\n            console.log(\"Finished uploading recovery data to channel \" + channelId);\n            _context.next = 18;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            msg = 'Profile data already exists in channel';\n\n            if (_context.t0.message.startsWith(msg)) {\n              _context.next = 18;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};\n\nexports.createChannel = createChannel;\nvar channelIntervalId;\nvar checkInProgress = false;\n\nvar pollChannel = function pollChannel() {\n  return function _callee2(dispatch) {\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            clearInterval(channelIntervalId);\n            channelIntervalId = setInterval(function () {\n              if (!checkInProgress) {\n                checkInProgress = true;\n                dispatch(checkChannel()).then(function () {\n                  checkInProgress = false;\n                }).catch(function (err) {\n                  checkInProgress = false;\n                  console.error(\"Error polling recovery channel: \" + err.message);\n                });\n              }\n            }, CHANNEL_POLL_INTERVAL);\n            console.log(\"start polling recovery channel (\" + channelIntervalId);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.pollChannel = pollChannel;\n\nvar clearChannel = function clearChannel() {\n  console.log(\"stop polling recovery channel (\" + channelIntervalId + \")\");\n  clearInterval(channelIntervalId);\n};\n\nexports.clearChannel = clearChannel;\n\nvar checkChannel = function checkChannel() {\n  return function _callee3(dispatch, getState) {\n    var _getState2, _getState2$recoveryDa, recoveryId, name, _getState2$recoveryDa2, channelId, url, channelApi, dataIds;\n\n    return _regenerator.default.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _getState2 = getState(), _getState2$recoveryDa = _getState2.recoveryData, recoveryId = _getState2$recoveryDa.id, name = _getState2$recoveryDa.name, _getState2$recoveryDa2 = _getState2$recoveryDa.channel, channelId = _getState2$recoveryDa2.channelId, url = _getState2$recoveryDa2.url;\n            channelApi = new _channelService.default(url.href);\n            _context3.next = 4;\n            return _regenerator.default.awrap(channelApi.list(channelId));\n\n          case 4:\n            dataIds = _context3.sent;\n\n            if (!recoveryId) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 8;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks.downloadConnections)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 8:\n            _context3.next = 10;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks.downloadGroups)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 10:\n            if (name) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 13;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks.downloadNamePhoto)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 13:\n            _context3.next = 15;\n            return _regenerator.default.awrap(dispatch((0, _channelDownloadThunks.downloadSigs)({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.checkChannel = checkChannel;","map":{"version":3,"names":["CHANNEL_POLL_INTERVAL","createChannel","dispatch","getState","recoveryData","baseUrl","selectBaseUrl","url","URL","channelApi","ChannelAPI","href","channelId","hash","aesKey","console","log","setRecoveryChannel","uploadRecoveryData","msg","message","startsWith","channelIntervalId","checkInProgress","pollChannel","clearInterval","setInterval","checkChannel","then","catch","err","error","clearChannel","recoveryId","id","name","channel","list","dataIds","downloadConnections","downloadGroups","downloadNamePhoto","downloadSigs"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/thunks/channelThunks.ts"],"sourcesContent":["import { hash } from '@/utils/encoding';\nimport ChannelAPI from '@/api/channelService';\nimport { selectBaseUrl } from '@/reducer/settingsSlice';\nimport {\n  downloadConnections,\n  downloadGroups,\n  downloadSigs,\n  downloadNamePhoto,\n} from './channelDownloadThunks';\nimport { setRecoveryChannel } from '../recoveryDataSlice';\nimport { uploadRecoveryData } from '@/utils/recovery';\n\n// CONSTANTS\n\nexport const CHANNEL_POLL_INTERVAL = 3000;\n\n// THUNKS\n\nexport const createChannel =\n  () => async (dispatch: dispatch, getState: getState) => {\n    try {\n      const { recoveryData } = getState();\n      const baseUrl = selectBaseUrl(getState());\n      const url = new URL(`${baseUrl}/profile`);\n      // use this for local running profile service\n      // const url = new URL(`http://10.0.2.2:3000/`);\n      const channelApi = new ChannelAPI(url.href);\n      const channelId = hash(recoveryData.aesKey);\n      console.log(`created channel ${channelId} for recovery data`);\n      dispatch(setRecoveryChannel({ channelId, url }));\n      await uploadRecoveryData(recoveryData, channelApi);\n      console.log(`Finished uploading recovery data to channel ${channelId}`);\n    } catch (e) {\n      const msg = 'Profile data already exists in channel';\n      if (!e.message.startsWith(msg)) {\n        throw e;\n      }\n    }\n  };\n\nlet channelIntervalId: IntervalId;\nlet checkInProgress = false;\n\nexport const pollChannel = () => async (dispatch: dispatch) => {\n  clearInterval(channelIntervalId);\n\n  channelIntervalId = setInterval(() => {\n    if (!checkInProgress) {\n      checkInProgress = true;\n      dispatch(checkChannel())\n        .then(() => {\n          checkInProgress = false;\n        })\n        .catch((err) => {\n          checkInProgress = false;\n          console.error(`Error polling recovery channel: ${err.message}`);\n        });\n    }\n  }, CHANNEL_POLL_INTERVAL);\n\n  console.log(`start polling recovery channel (${channelIntervalId}`);\n};\n\nexport const clearChannel = () => {\n  console.log(`stop polling recovery channel (${channelIntervalId})`);\n  clearInterval(channelIntervalId);\n};\n\nexport const checkChannel =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const {\n      recoveryData: {\n        id: recoveryId,\n        name,\n        channel: { channelId, url },\n      },\n    } = getState();\n    const channelApi = new ChannelAPI(url.href);\n    const dataIds = await channelApi.list(channelId);\n\n    if (recoveryId) {\n      // process connections uploaded to the channel\n      // returns true if downloading connecion data this cycle\n      await dispatch(downloadConnections({ channelApi, dataIds }));\n\n      // process groups uploaded to the channel\n      // returns true if downloading group data this cycle\n      await dispatch(downloadGroups({ channelApi, dataIds }));\n\n      if (!name) {\n        await dispatch(downloadNamePhoto({ channelApi, dataIds }));\n      }\n    }\n\n    // process signatures uploaded to the channel\n    // returns true if downloading sigs this cycle\n    await dispatch(downloadSigs({ channelApi, dataIds }));\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}