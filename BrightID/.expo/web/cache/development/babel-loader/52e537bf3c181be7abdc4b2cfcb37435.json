{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport nacl from 'tweetnacl';\nimport { createImageDirectory, saveImage } from \"../../../../utils/filesystem\";\nimport { hash, urlSafeRandomKey } from \"../../../../utils/encoding\";\nimport { setUserData, setConnections, setGroups, setKeypair, addOperation, upsertSig } from \"../../../../actions\";\nimport BrightidError, { OPERATION_APPLIED_BEFORE } from \"../../../../api/brightidError\";\nimport fetchUserInfo from \"../../../../actions/fetchUserInfo\";\nimport { fetchBackupData } from \"./backupThunks\";\nimport { init, resetRecoveryData, resetRecoverySigs, updateNamePhoto } from \"../recoveryDataSlice\";\nvar THREE_DAYS = 259200000;\n\nvar pastLimit = function pastLimit(timestamp) {\n  return timestamp + THREE_DAYS < Date.now();\n};\n\nexport var setupRecovery = function setupRecovery() {\n  return function _callee(dispatch, getState) {\n    var _getState, recoveryData, _await$nacl$sign$keyP, publicKey, secretKey, aesKey;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"Setting up recovery...\");\n            _getState = getState(), recoveryData = _getState.recoveryData;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(createImageDirectory());\n\n          case 4:\n            if (!(!recoveryData.timestamp || pastLimit(recoveryData.timestamp))) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(nacl.sign.keyPair());\n\n          case 7:\n            _await$nacl$sign$keyP = _context.sent;\n            publicKey = _await$nacl$sign$keyP.publicKey;\n            secretKey = _await$nacl$sign$keyP.secretKey;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(urlSafeRandomKey(16));\n\n          case 12:\n            aesKey = _context.sent;\n            dispatch(init({\n              publicKey: publicKey,\n              secretKey: secretKey,\n              aesKey: aesKey\n            }));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var socialRecovery = function socialRecovery(api) {\n  return function _callee2(dispatch, getState) {\n    var _getState2, recoveryData, sigs, op, errorString;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getState2 = getState(), recoveryData = _getState2.recoveryData;\n            sigs = Object.values(recoveryData.sigs);\n            console.log('setting signing key');\n            _context2.prev = 3;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(api.socialRecovery({\n              id: recoveryData.id,\n              signingKey: recoveryData.publicKey,\n              timestamp: recoveryData.timestamp,\n              id1: sigs[0].signer,\n              id2: sigs[1].signer,\n              sig1: sigs[0].sig,\n              sig2: sigs[1].sig\n            }));\n\n          case 6:\n            op = _context2.sent;\n            dispatch(addOperation(op));\n            return _context2.abrupt(\"return\", op);\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](3);\n            errorString = '';\n\n            if (!(_context2.t0 instanceof BrightidError)) {\n              _context2.next = 21;\n              break;\n            }\n\n            if (!(_context2.t0.errorNum === OPERATION_APPLIED_BEFORE)) {\n              _context2.next = 18;\n              break;\n            }\n\n            console.log(\"Social Recovery operation already applied. Ignoring this error.\");\n            return _context2.abrupt(\"return\", 'ALREADY APPLIED');\n\n          case 18:\n            errorString = _context2.t0.errorNum + \" - \" + _context2.t0.message;\n            _context2.next = 22;\n            break;\n\n          case 21:\n            if (_context2.t0 instanceof Error) {\n              errorString = _context2.t0.name + \" - \" + _context2.t0.message;\n            } else {\n              errorString = \"\" + _context2.t0;\n            }\n\n          case 22:\n            console.log(\"Error in socialRecovery: \" + errorString);\n            dispatch(resetRecoverySigs());\n            throw new Error(errorString);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 11]], Promise);\n  };\n};\nexport var restoreUserData = function _callee3(id, pass) {\n  var decrypted, _JSON$parse, userData, connections, _JSON$parse$groups, groups, userPhoto, filename;\n\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fetchBackupData('data', id, pass));\n\n        case 2:\n          decrypted = _context3.sent;\n          _JSON$parse = JSON.parse(decrypted), userData = _JSON$parse.userData, connections = _JSON$parse.connections, _JSON$parse$groups = _JSON$parse.groups, groups = _JSON$parse$groups === void 0 ? [] : _JSON$parse$groups;\n\n          if (!(!userData || !connections)) {\n            _context3.next = 6;\n            break;\n          }\n\n          throw new Error('bad password');\n\n        case 6:\n          _context3.prev = 6;\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(fetchBackupData(id, id, pass));\n\n        case 9:\n          userPhoto = _context3.sent;\n          _context3.next = 15;\n          break;\n\n        case 12:\n          _context3.prev = 12;\n          _context3.t0 = _context3[\"catch\"](6);\n          console.log(\"Failed to recover user photo\");\n\n        case 15:\n          if (!userPhoto) {\n            _context3.next = 20;\n            break;\n          }\n\n          _context3.next = 18;\n          return _regeneratorRuntime.awrap(saveImage({\n            imageName: id,\n            base64Image: userPhoto\n          }));\n\n        case 18:\n          filename = _context3.sent;\n          userData.photo = {\n            filename: filename\n          };\n\n        case 20:\n          return _context3.abrupt(\"return\", {\n            userData: userData,\n            connections: connections,\n            groups: groups\n          });\n\n        case 21:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[6, 12]], Promise);\n};\nexport var setRecoveryKeys = function setRecoveryKeys() {\n  return function (dispatch, getState) {\n    var _getState$recoveryDat = getState().recoveryData,\n        publicKey = _getState$recoveryDat.publicKey,\n        secretKey = _getState$recoveryDat.secretKey;\n    dispatch(setKeypair({\n      publicKey: publicKey,\n      secretKey: secretKey\n    }));\n  };\n};\nexport var recoverData = function recoverData(pass, api, setTotalItems, setCurrentItem) {\n  return function _callee4(dispatch, getState) {\n    var id, restoredData, userData, connections, groups, apps, blindSigApps, currentItem, _iterator, _step, conn, decrypted, filename, errorString, _iterator2, _step2, _group$photo, group, _decrypted, _errorString, _iterator3, _step3, app, _iterator4, _step4, verification, vel, roundedTimestamp, key, _decrypted2;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            id = getState().recoveryData.id;\n            console.log(\"Starting recoverData for \" + id);\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(restoreUserData(id, pass));\n\n          case 4:\n            restoredData = _context4.sent;\n            console.log(\"Got recovery data for \" + id);\n            userData = restoredData.userData;\n            connections = restoredData.connections;\n            groups = restoredData.groups;\n            _context4.next = 11;\n            return _regeneratorRuntime.awrap(api.getApps());\n\n          case 11:\n            apps = _context4.sent;\n            blindSigApps = apps.filter(function (app) {\n              return app.usingBlindSig;\n            });\n            setTotalItems(connections.length + groups.length + blindSigApps.length);\n            dispatch(setConnections(connections));\n            dispatch(setGroups(groups));\n            dispatch(updateNamePhoto({\n              name: userData.name,\n              photo: userData.photo\n            }));\n            currentItem = 1;\n            _iterator = _createForOfIteratorHelperLoose(connections);\n\n          case 19:\n            if ((_step = _iterator()).done) {\n              _context4.next = 40;\n              break;\n            }\n\n            conn = _step.value;\n            _context4.prev = 21;\n            setCurrentItem(currentItem++);\n            _context4.next = 25;\n            return _regeneratorRuntime.awrap(fetchBackupData(conn.id, id, pass));\n\n          case 25:\n            decrypted = _context4.sent;\n            _context4.next = 28;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: conn.id,\n              base64Image: decrypted\n            }));\n\n          case 28:\n            filename = _context4.sent;\n            conn.photo = {\n              filename: filename\n            };\n            _context4.next = 38;\n            break;\n\n          case 32:\n            _context4.prev = 32;\n            _context4.t0 = _context4[\"catch\"](21);\n            errorString = '';\n\n            if (_context4.t0 instanceof Error) {\n              errorString = _context4.t0.name + \" - \" + _context4.t0.message;\n            } else {\n              errorString = \"\" + _context4.t0;\n            }\n\n            console.log('Connection image not found', errorString);\n            conn.photo = {\n              filename: ''\n            };\n\n          case 38:\n            _context4.next = 19;\n            break;\n\n          case 40:\n            _iterator2 = _createForOfIteratorHelperLoose(groups);\n\n          case 41:\n            if ((_step2 = _iterator2()).done) {\n              _context4.next = 60;\n              break;\n            }\n\n            group = _step2.value;\n            setCurrentItem(currentItem++);\n\n            if (!((_group$photo = group.photo) != null && _group$photo.filename)) {\n              _context4.next = 58;\n              break;\n            }\n\n            _context4.prev = 45;\n            _context4.next = 48;\n            return _regeneratorRuntime.awrap(fetchBackupData(group.id, id, pass));\n\n          case 48:\n            _decrypted = _context4.sent;\n            _context4.next = 51;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: group.id,\n              base64Image: _decrypted\n            }));\n\n          case 51:\n            _context4.next = 58;\n            break;\n\n          case 53:\n            _context4.prev = 53;\n            _context4.t1 = _context4[\"catch\"](45);\n            _errorString = '';\n\n            if (_context4.t1 instanceof Error) {\n              _errorString = _context4.t1.name + \" - \" + _context4.t1.message;\n            } else {\n              _errorString = \"\" + _context4.t1;\n            }\n\n            console.log('Group image not found', _errorString);\n\n          case 58:\n            _context4.next = 41;\n            break;\n\n          case 60:\n            _iterator3 = _createForOfIteratorHelperLoose(blindSigApps);\n\n          case 61:\n            if ((_step3 = _iterator3()).done) {\n              _context4.next = 85;\n              break;\n            }\n\n            app = _step3.value;\n            setCurrentItem(currentItem++);\n            _iterator4 = _createForOfIteratorHelperLoose(app.verifications);\n\n          case 65:\n            if ((_step4 = _iterator4()).done) {\n              _context4.next = 83;\n              break;\n            }\n\n            verification = _step4.value;\n            vel = app.verificationExpirationLength;\n            roundedTimestamp = vel ? Math.floor(Date.now() / vel) * vel : 0;\n            key = hash(app.id + \" \" + verification + \" \" + roundedTimestamp);\n            _context4.prev = 70;\n            _context4.next = 73;\n            return _regeneratorRuntime.awrap(fetchBackupData(key, id, pass));\n\n          case 73:\n            _decrypted2 = _context4.sent;\n            _context4.next = 76;\n            return _regeneratorRuntime.awrap(dispatch(upsertSig(JSON.parse(_decrypted2))));\n\n          case 76:\n            _context4.next = 81;\n            break;\n\n          case 78:\n            _context4.prev = 78;\n            _context4.t2 = _context4[\"catch\"](70);\n            console.log(\"blind sig not found for \" + key, _context4.t2.message);\n\n          case 81:\n            _context4.next = 65;\n            break;\n\n          case 83:\n            _context4.next = 61;\n            break;\n\n          case 85:\n            dispatch(fetchUserInfo(api));\n\n          case 86:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[21, 32], [45, 53], [70, 78]], Promise);\n  };\n};\nexport var finishRecovery = function finishRecovery() {\n  return function _callee5(dispatch, getState) {\n    var _getState$recoveryDat2, id, name, photo;\n\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _getState$recoveryDat2 = getState().recoveryData, id = _getState$recoveryDat2.id, name = _getState$recoveryDat2.name, photo = _getState$recoveryDat2.photo;\n            dispatch(resetRecoveryData());\n            dispatch(setUserData({\n              id: id,\n              name: name,\n              photo: photo\n            }));\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/thunks/recoveryThunks.ts"],"names":["THREE_DAYS","pastLimit","timestamp","Date","setupRecovery","console","recoveryData","getState","createImageDirectory","publicKey","secretKey","nacl","aesKey","urlSafeRandomKey","dispatch","init","socialRecovery","sigs","Object","op","api","id","signingKey","id1","id2","sig1","sig2","addOperation","errorString","resetRecoverySigs","restoreUserData","decrypted","fetchBackupData","userData","connections","groups","JSON","userPhoto","filename","saveImage","imageName","base64Image","setRecoveryKeys","setKeypair","recoverData","restoredData","apps","blindSigApps","app","setTotalItems","setConnections","setGroups","updateNamePhoto","name","photo","currentItem","conn","setCurrentItem","group","verification","vel","roundedTimestamp","Math","key","hash","upsertSig","fetchUserInfo","finishRecovery","resetRecoveryData","setUserData"],"mappings":"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","sourcesContent":["import nacl from 'tweetnacl';\nimport { createImageDirectory, saveImage } from '@/utils/filesystem';\nimport { hash, urlSafeRandomKey } from '@/utils/encoding';\nimport {\n  setUserData,\n  setConnections,\n  setGroups,\n  setKeypair,\n  addOperation,\n  upsertSig,\n} from '@/actions';\nimport BrightidError, { OPERATION_APPLIED_BEFORE } from '@/api/brightidError';\nimport { NodeApi } from '@/api/brightId';\nimport fetchUserInfo from '@/actions/fetchUserInfo';\nimport { fetchBackupData } from './backupThunks';\nimport {\n  init,\n  resetRecoveryData,\n  resetRecoverySigs,\n  updateNamePhoto,\n} from '../recoveryDataSlice';\n\n// HELPERS\n\nconst THREE_DAYS = 259200000;\n\nconst pastLimit = (timestamp) => timestamp + THREE_DAYS < Date.now();\n\n// THUNKS\n\nexport const setupRecovery =\n  () => async (dispatch: dispatch, getState: getState) => {\n    console.log(`Setting up recovery...`);\n    const { recoveryData } = getState();\n    await createImageDirectory();\n    // setup recovery data\n    if (!recoveryData.timestamp || pastLimit(recoveryData.timestamp)) {\n      const { publicKey, secretKey } = await nacl.sign.keyPair();\n      const aesKey = await urlSafeRandomKey(16);\n      // setup recovery data slice with new keypair\n      dispatch(init({ publicKey, secretKey, aesKey }));\n    }\n  };\n\nexport const socialRecovery =\n  (api: NodeApi) => async (dispatch: dispatch, getState: getState) => {\n    const { recoveryData } = getState();\n    const sigs = Object.values(recoveryData.sigs);\n    console.log('setting signing key');\n    try {\n      const op = await api.socialRecovery({\n        id: recoveryData.id,\n        signingKey: recoveryData.publicKey,\n        timestamp: recoveryData.timestamp,\n        id1: sigs[0].signer,\n        id2: sigs[1].signer,\n        sig1: sigs[0].sig,\n        sig2: sigs[1].sig,\n      });\n      dispatch(addOperation(op));\n      return op;\n    } catch (err) {\n      let errorString = '';\n      if (err instanceof BrightidError) {\n        if (err.errorNum === OPERATION_APPLIED_BEFORE) {\n          console.log(\n            `Social Recovery operation already applied. Ignoring this error.`,\n          );\n          return 'ALREADY APPLIED';\n        }\n        errorString = `${err.errorNum} - ${err.message}`;\n      } else if (err instanceof Error) {\n        errorString = `${err.name} - ${err.message}`;\n      } else {\n        errorString = `${err}`;\n      }\n      console.log(`Error in socialRecovery: ${errorString}`);\n      dispatch(resetRecoverySigs());\n      throw new Error(errorString);\n    }\n  };\n\nexport const restoreUserData = async (id: string, pass: string) => {\n  const decrypted = await fetchBackupData('data', id, pass);\n  const { userData, connections, groups = [] } = JSON.parse(decrypted);\n  if (!userData || !connections) {\n    // TODO Better error handling\n    throw new Error('bad password');\n  }\n\n  let userPhoto;\n  try {\n    userPhoto = await fetchBackupData(id, id, pass);\n  } catch (e) {\n    console.log(`Failed to recover user photo`);\n    // ignore this error and try to continue recovery process\n  }\n\n  if (userPhoto) {\n    const filename = await saveImage({\n      imageName: id,\n      base64Image: userPhoto,\n    });\n    userData.photo = { filename };\n  }\n\n  return { userData, connections, groups };\n};\n\nexport const setRecoveryKeys =\n  () => (dispatch: dispatch, getState: getState) => {\n    const { publicKey, secretKey } = getState().recoveryData;\n    dispatch(setKeypair({ publicKey, secretKey }));\n  };\n\nexport const recoverData =\n  (\n    pass: string,\n    api: NodeApi,\n    setTotalItems: (totalItems: number) => void,\n    setCurrentItem: (currentItem: number) => void,\n  ) =>\n  async (dispatch: dispatch, getState: getState) => {\n    const { id } = getState().recoveryData;\n    console.log(`Starting recoverData for ${id}`);\n    // throws if data is bad\n    const restoredData = await restoreUserData(id, pass);\n    console.log(`Got recovery data for ${id}`);\n    const { userData } = restoredData;\n    const { connections } = restoredData;\n    const { groups } = restoredData;\n    const apps = await api.getApps();\n    const blindSigApps = apps.filter((app) => app.usingBlindSig);\n    setTotalItems(connections.length + groups.length + blindSigApps.length);\n    dispatch(setConnections(connections));\n    dispatch(setGroups(groups));\n    dispatch(updateNamePhoto({ name: userData.name, photo: userData.photo }));\n\n    let currentItem = 1;\n\n    // fetch connection images\n    for (const conn of connections) {\n      try {\n        setCurrentItem(currentItem++);\n        const decrypted = await fetchBackupData(conn.id, id, pass);\n        const filename = await saveImage({\n          imageName: conn.id,\n          base64Image: decrypted,\n        });\n        conn.photo = { filename };\n      } catch (err) {\n        let errorString = '';\n        if (err instanceof Error) {\n          errorString = `${err.name} - ${err.message}`;\n        } else {\n          errorString = `${err}`;\n        }\n        console.log('Connection image not found', errorString);\n        conn.photo = { filename: '' };\n      }\n    }\n\n    // fetch group images\n    for (const group of groups) {\n      setCurrentItem(currentItem++);\n      if (group.photo?.filename) {\n        try {\n          const decrypted = await fetchBackupData(group.id, id, pass);\n          await saveImage({\n            imageName: group.id,\n            base64Image: decrypted,\n          });\n        } catch (err) {\n          let errorString = '';\n          if (err instanceof Error) {\n            errorString = `${err.name} - ${err.message}`;\n          } else {\n            errorString = `${err}`;\n          }\n          console.log('Group image not found', errorString);\n        }\n      }\n    }\n\n    // fetch blind sigs\n    for (const app of blindSigApps) {\n      setCurrentItem(currentItem++);\n      for (const verification of app.verifications) {\n        const vel = app.verificationExpirationLength;\n        const roundedTimestamp = vel ? Math.floor(Date.now() / vel) * vel : 0;\n        const key = hash(`${app.id} ${verification} ${roundedTimestamp}`);\n        try {\n          const decrypted = await fetchBackupData(key, id, pass);\n          await dispatch(upsertSig(JSON.parse(decrypted)));\n        } catch (err) {\n          console.log(`blind sig not found for ${key}`, err.message);\n        }\n      }\n    }\n\n    dispatch(fetchUserInfo(api));\n  };\n\nexport const finishRecovery =\n  () => async (dispatch: dispatch, getState: getState) => {\n    // collect user data that was populated either by uploads from recovery connections or by restoring backup\n    const { id, name, photo } = getState().recoveryData;\n    // clear recovery data from state\n    dispatch(resetRecoveryData());\n    // finally set the user data\n    dispatch(setUserData({ id, name, photo }));\n  };\n"]},"metadata":{},"sourceType":"module"}