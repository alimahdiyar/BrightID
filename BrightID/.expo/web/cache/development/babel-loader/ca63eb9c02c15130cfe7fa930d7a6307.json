{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { useDispatch, useSelector } from \"../../store\";\nimport TaskCard from \"./TaskCard\";\nimport { UserTasks } from \"./UserTasks\";\nimport { resetTask } from \"./TasksSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction TaskCardController(_ref) {\n  var taskId = _ref.taskId;\n  var dispatch = useDispatch();\n  var storeTask = useSelector(function (state) {\n    return state.tasks[taskId];\n  });\n\n  var extendedTask = _objectSpread(_objectSpread({}, storeTask), UserTasks[taskId]);\n\n  var reset = function reset() {\n    dispatch(resetTask(taskId));\n  };\n\n  return _jsx(TaskCard, {\n    description: extendedTask.description,\n    fulfilled: extendedTask.completed,\n    id: extendedTask.id,\n    title: extendedTask.title,\n    url: extendedTask.url,\n    navigationTarget: extendedTask.navigationTarget,\n    onClick: __DEV__ ? reset : null\n  });\n}\n\nexport default TaskCardController;","map":{"version":3,"names":["React","useDispatch","useSelector","TaskCard","UserTasks","resetTask","TaskCardController","taskId","dispatch","storeTask","state","tasks","extendedTask","reset","description","completed","id","title","url","navigationTarget","__DEV__"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TaskCardController.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from '@/store';\nimport TaskCard from './TaskCard';\nimport { UserTasks } from './UserTasks';\nimport { resetTask } from './TasksSlice';\n\n/*\n  Purpose: Setup required data for rendering TaskCard by\n  combining static Task descriptions with current Task state from Redux\n */\ntype TaskCardControllerProps = {\n  taskId: string;\n};\n\nfunction TaskCardController({ taskId }: TaskCardControllerProps) {\n  const dispatch = useDispatch();\n  const storeTask = useSelector((state: State) => state.tasks[taskId]);\n  const extendedTask = {\n    ...storeTask,\n    ...UserTasks[taskId],\n  };\n\n  const reset = () => {\n    dispatch(resetTask(taskId));\n  };\n\n  return (\n    <TaskCard\n      description={extendedTask.description}\n      fulfilled={extendedTask.completed}\n      id={extendedTask.id}\n      title={extendedTask.title}\n      url={extendedTask.url}\n      navigationTarget={extendedTask.navigationTarget}\n      onClick={__DEV__ ? reset : null}\n    />\n  );\n}\n\nexport default TaskCardController;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB;AACA,OAAOC,QAAP;AACA,SAASC,SAAT;AACA,SAASC,SAAT;;;AAUA,SAASC,kBAAT,OAAiE;EAAA,IAAnCC,MAAmC,QAAnCA,MAAmC;EAC/D,IAAMC,QAAQ,GAAGP,WAAW,EAA5B;EACA,IAAMQ,SAAS,GAAGP,WAAW,CAAC,UAACQ,KAAD;IAAA,OAAkBA,KAAK,CAACC,KAAN,CAAYJ,MAAZ,CAAlB;EAAA,CAAD,CAA7B;;EACA,IAAMK,YAAY,mCACbH,SADa,GAEbL,SAAS,CAACG,MAAD,CAFI,CAAlB;;EAKA,IAAMM,KAAK,GAAG,SAARA,KAAQ,GAAM;IAClBL,QAAQ,CAACH,SAAS,CAACE,MAAD,CAAV,CAAR;EACD,CAFD;;EAIA,OACE,KAAC,QAAD;IACE,WAAW,EAAEK,YAAY,CAACE,WAD5B;IAEE,SAAS,EAAEF,YAAY,CAACG,SAF1B;IAGE,EAAE,EAAEH,YAAY,CAACI,EAHnB;IAIE,KAAK,EAAEJ,YAAY,CAACK,KAJtB;IAKE,GAAG,EAAEL,YAAY,CAACM,GALpB;IAME,gBAAgB,EAAEN,YAAY,CAACO,gBANjC;IAOE,OAAO,EAAEC,OAAO,GAAGP,KAAH,GAAW;EAP7B,EADF;AAWD;;AAED,eAAeP,kBAAf"},"metadata":{},"sourceType":"module"}