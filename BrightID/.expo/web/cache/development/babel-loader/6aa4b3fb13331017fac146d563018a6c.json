{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { store } from \"../../../../store\";\nimport { b64ToUrlSafeB64 } from \"../../../../utils/encoding\";\nimport { encryptData } from \"../../../../utils/cryptoHelper\";\nimport { retrieveImage } from \"../../../../utils/filesystem\";\nimport { selectAllConnections } from \"../../../../reducer/connectionsSlice\";\nimport { selectAllLinkedContexts, selectAllSigs } from \"../../../../reducer/appsSlice\";\nimport ChannelAPI from \"../../../../api/channelService\";\nimport { uploadBlindSig, uploadConnection, uploadContextInfo, uploadGroup } from \"../../../../utils/channels\";\nimport { IMPORT_PREFIX, RECOVERY_CHANNEL_TTL } from \"../../../../utils/constants\";\nexport var uploadAllInfoAfter = function _callee(after) {\n  var _store$getState, user, signingKey, groups, _store$getState$recov, _store$getState$recov2, url, channelId, aesKey, isPrimaryDevice, channelApi, photo, data, encrypted, userDataId, connections, _iterator, _step, conn, _iterator2, _step2, group, linkedContexts, _iterator3, _step3, contextInfo, sigs, _iterator4, _step4, sig, completeDataId;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _store$getState = store.getState(), user = _store$getState.user, signingKey = _store$getState.keypair.publicKey, groups = _store$getState.groups.groups, _store$getState$recov = _store$getState.recoveryData, _store$getState$recov2 = _store$getState$recov.channel, url = _store$getState$recov2.url, channelId = _store$getState$recov2.channelId, aesKey = _store$getState$recov.aesKey, isPrimaryDevice = _store$getState.settings.isPrimaryDevice;\n          channelApi = new ChannelAPI(url.href);\n          console.log('uploading user info');\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(retrieveImage(user.photo.filename));\n\n        case 5:\n          photo = _context.sent;\n          data = {\n            id: user.id,\n            name: user.name,\n            photo: photo,\n            isSponsored: user.isSponsored,\n            isSponsoredv6: user.isSponsoredv6,\n            backupCompleted: user.backupCompleted,\n            password: user.password,\n            updateTimestamps: user.updateTimestamps\n          };\n          encrypted = encryptData(data, aesKey);\n          userDataId = IMPORT_PREFIX + \"userinfo_\" + user.id + \":\" + b64ToUrlSafeB64(signingKey);\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: channelId,\n            dataId: userDataId,\n            data: encrypted\n          }));\n\n        case 11:\n          console.log('uploading connections');\n          connections = selectAllConnections(store.getState()).filter(function (conn) {\n            return conn.timestamp > after;\n          });\n          _iterator = _createForOfIteratorHelperLoose(connections);\n\n        case 14:\n          if ((_step = _iterator()).done) {\n            _context.next = 20;\n            break;\n          }\n\n          conn = _step.value;\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(uploadConnection({\n            conn: conn,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey\n          }));\n\n        case 18:\n          _context.next = 14;\n          break;\n\n        case 20:\n          console.log('uploading groups');\n          _iterator2 = _createForOfIteratorHelperLoose(groups);\n\n        case 22:\n          if ((_step2 = _iterator2()).done) {\n            _context.next = 29;\n            break;\n          }\n\n          group = _step2.value;\n\n          if (!(group.joined > after)) {\n            _context.next = 27;\n            break;\n          }\n\n          _context.next = 27;\n          return _regeneratorRuntime.awrap(uploadGroup({\n            group: group,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey\n          }));\n\n        case 27:\n          _context.next = 22;\n          break;\n\n        case 29:\n          console.log('uploading linked contexts');\n          linkedContexts = selectAllLinkedContexts(store.getState()).filter(function (linkedContext) {\n            return linkedContext.dateAdded > after && linkedContext.state === 'applied';\n          });\n          _iterator3 = _createForOfIteratorHelperLoose(linkedContexts);\n\n        case 32:\n          if ((_step3 = _iterator3()).done) {\n            _context.next = 38;\n            break;\n          }\n\n          contextInfo = _step3.value;\n          _context.next = 36;\n          return _regeneratorRuntime.awrap(uploadContextInfo({\n            contextInfo: contextInfo,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey,\n            prefix: IMPORT_PREFIX\n          }));\n\n        case 36:\n          _context.next = 32;\n          break;\n\n        case 38:\n          console.log('uploading blind sigs');\n\n          if (!isPrimaryDevice) {\n            _context.next = 49;\n            break;\n          }\n\n          sigs = selectAllSigs(store.getState());\n          _iterator4 = _createForOfIteratorHelperLoose(sigs);\n\n        case 42:\n          if ((_step4 = _iterator4()).done) {\n            _context.next = 49;\n            break;\n          }\n\n          sig = _step4.value;\n\n          if (!(sig.signedTimestamp > after || sig.linkedTimestamp > after)) {\n            _context.next = 47;\n            break;\n          }\n\n          _context.next = 47;\n          return _regeneratorRuntime.awrap(uploadBlindSig({\n            sig: sig,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey,\n            prefix: IMPORT_PREFIX\n          }));\n\n        case 47:\n          _context.next = 42;\n          break;\n\n        case 49:\n          console.log('uploading completed flag');\n          completeDataId = IMPORT_PREFIX + \"completed_\" + user.id + \":\" + b64ToUrlSafeB64(signingKey);\n          _context.next = 53;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: channelId,\n            dataId: completeDataId,\n            data: 'completed'\n          }));\n\n        case 53:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var uploadDeviceInfo = function _callee2() {\n  var _store$getState2, _store$getState2$reco, _store$getState2$reco2, url, channelId, signingKey, _store$getState2$sett, lastSyncTime, isPrimaryDevice, dataObj, data, channelApi;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _store$getState2 = store.getState(), _store$getState2$reco = _store$getState2.recoveryData, _store$getState2$reco2 = _store$getState2$reco.channel, url = _store$getState2$reco2.url, channelId = _store$getState2$reco2.channelId, signingKey = _store$getState2$reco.publicKey, _store$getState2$sett = _store$getState2.settings, lastSyncTime = _store$getState2$sett.lastSyncTime, isPrimaryDevice = _store$getState2$sett.isPrimaryDevice;\n          dataObj = {\n            signingKey: signingKey,\n            lastSyncTime: lastSyncTime,\n            isPrimaryDevice: isPrimaryDevice\n          };\n          data = JSON.stringify(dataObj);\n          channelApi = new ChannelAPI(url.href);\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: channelId,\n            data: data,\n            dataId: IMPORT_PREFIX + \"data\",\n            requestedTtl: RECOVERY_CHANNEL_TTL\n          }));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/thunks/channelUploadThunks.ts"],"names":["uploadAllInfoAfter","user","signingKey","groups","url","channelId","aesKey","isPrimaryDevice","store","channelApi","console","photo","retrieveImage","data","id","name","isSponsored","isSponsoredv6","backupCompleted","password","updateTimestamps","encrypted","encryptData","userDataId","IMPORT_PREFIX","b64ToUrlSafeB64","dataId","connections","selectAllConnections","conn","uploadConnection","group","uploadGroup","linkedContexts","selectAllLinkedContexts","linkedContext","contextInfo","uploadContextInfo","prefix","sigs","selectAllSigs","sig","uploadBlindSig","completeDataId","uploadDeviceInfo","lastSyncTime","dataObj","JSON","requestedTtl"],"mappings":"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","sourcesContent":["import { store } from '@/store';\nimport { b64ToUrlSafeB64 } from '@/utils/encoding';\nimport { encryptData } from '@/utils/cryptoHelper';\nimport { retrieveImage } from '@/utils/filesystem';\nimport { selectAllConnections } from '@/reducer/connectionsSlice';\nimport { selectAllLinkedContexts, selectAllSigs } from '@/reducer/appsSlice';\nimport ChannelAPI from '@/api/channelService';\nimport {\n  uploadBlindSig,\n  uploadConnection,\n  uploadContextInfo,\n  uploadGroup,\n} from '@/utils/channels';\nimport { IMPORT_PREFIX, RECOVERY_CHANNEL_TTL } from '@/utils/constants';\n\nexport const uploadAllInfoAfter = async (after) => {\n  const {\n    user,\n    keypair: { publicKey: signingKey },\n    groups: { groups },\n    recoveryData: {\n      channel: { url, channelId },\n      aesKey,\n    },\n    settings: { isPrimaryDevice },\n  } = store.getState();\n  // use keypair for sync and recovery for import\n  const channelApi = new ChannelAPI(url.href);\n\n  console.log('uploading user info');\n  const photo = await retrieveImage(user.photo.filename);\n  const data = {\n    id: user.id,\n    name: user.name,\n    photo,\n    isSponsored: user.isSponsored,\n    isSponsoredv6: user.isSponsoredv6,\n    backupCompleted: user.backupCompleted,\n    password: user.password,\n    updateTimestamps: user.updateTimestamps,\n  };\n\n  const encrypted = encryptData(data, aesKey);\n  const userDataId = `${IMPORT_PREFIX}userinfo_${user.id}:${b64ToUrlSafeB64(\n    signingKey,\n  )}`;\n  await channelApi.upload({\n    channelId,\n    dataId: userDataId,\n    data: encrypted,\n  });\n\n  console.log('uploading connections');\n  const connections = selectAllConnections(store.getState()).filter(\n    (conn) => conn.timestamp > after,\n  );\n  for (const conn of connections) {\n    await uploadConnection({\n      conn,\n      channelApi,\n      aesKey,\n      signingKey,\n    });\n  }\n\n  console.log('uploading groups');\n  for (const group of groups) {\n    if (group.joined > after) {\n      await uploadGroup({\n        group,\n        channelApi,\n        aesKey,\n        signingKey,\n      });\n    }\n  }\n\n  console.log('uploading linked contexts');\n  const linkedContexts = selectAllLinkedContexts(store.getState()).filter(\n    (linkedContext) =>\n      linkedContext.dateAdded > after && linkedContext.state === 'applied',\n  );\n  for (const contextInfo of linkedContexts) {\n    await uploadContextInfo({\n      contextInfo,\n      channelApi,\n      aesKey,\n      signingKey,\n      prefix: IMPORT_PREFIX,\n    });\n  }\n\n  console.log('uploading blind sigs');\n  if (isPrimaryDevice) {\n    const sigs = selectAllSigs(store.getState());\n    for (const sig of sigs) {\n      if (sig.signedTimestamp > after || sig.linkedTimestamp > after) {\n        await uploadBlindSig({\n          sig,\n          channelApi,\n          aesKey,\n          signingKey,\n          prefix: IMPORT_PREFIX,\n        });\n      }\n    }\n  }\n\n  console.log('uploading completed flag');\n  const completeDataId = `${IMPORT_PREFIX}completed_${\n    user.id\n  }:${b64ToUrlSafeB64(signingKey)}`;\n  await channelApi.upload({\n    channelId,\n    dataId: completeDataId,\n    data: 'completed',\n  });\n};\n\nexport const uploadDeviceInfo = async () => {\n  const {\n    recoveryData: {\n      channel: { url, channelId },\n      publicKey: signingKey,\n    },\n    settings: { lastSyncTime, isPrimaryDevice },\n  } = store.getState();\n  const dataObj: SyncDeviceInfo = { signingKey, lastSyncTime, isPrimaryDevice };\n  const data = JSON.stringify(dataObj);\n  const channelApi = new ChannelAPI(url.href);\n  await channelApi.upload({\n    channelId,\n    data,\n    dataId: `${IMPORT_PREFIX}data`,\n    requestedTtl: RECOVERY_CHANNEL_TTL,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}