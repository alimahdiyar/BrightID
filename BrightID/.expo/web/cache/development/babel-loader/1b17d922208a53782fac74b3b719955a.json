{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Material from \"@expo/vector-icons/MaterialIcons\";\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation } from '@react-navigation/native';\nimport { connectionLevelColors, connectionLevelStrings } from \"../../utils/connectionLevelStrings\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { BLUE, BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { connection_levels } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction TrustLevelView(_ref) {\n  var level = _ref.level,\n      connectionId = _ref.connectionId;\n  var navigation = useNavigation();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var setLevel = function setLevel() {\n    navigation.navigate('SetTrustlevel', {\n      connectionId: connectionId\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.trustLevelLabel,\n      children: _jsx(Text, {\n        style: styles.trustLevelLabelText,\n        children: t('connectionDetails.label.connectionLevel')\n      })\n    }), _jsx(View, {\n      style: styles.trustLevel,\n      children: _jsx(Text, {\n        testID: \"ConnectionLevelText\",\n        style: [styles.trustLevelText, {\n          color: connectionLevelColors[level]\n        }],\n        children: connectionLevelStrings[level]\n      })\n    }), level !== connection_levels.REPORTED && _jsx(TouchableOpacity, {\n      style: styles.trustLevelButton,\n      testID: \"EditConnectionLevelBtn\",\n      onPress: setLevel,\n      children: _jsx(Material, {\n        name: \"edit\",\n        size: DEVICE_LARGE ? 22 : 20,\n        color: BLUE\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: DEVICE_LARGE ? 22 : 20\n  },\n  trustLevelLabel: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  trustLevelLabelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  trustLevel: {\n    flex: 1,\n    alignItems: 'flex-end',\n    justifyContent: 'center'\n  },\n  trustLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLACK\n  },\n  trustLevelButton: {\n    padding: 5\n  }\n});\nexport default TrustLevelView;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustLevelView.tsx"],"names":["level","connectionId","navigation","useNavigation","t","useTranslation","setLevel","styles","color","connectionLevelColors","connectionLevelStrings","connection_levels","DEVICE_LARGE","StyleSheet","container","flexDirection","alignItems","marginBottom","trustLevelLabel","justifyContent","trustLevelLabelText","fontFamily","fontSize","trustLevel","flex","trustLevelText","trustLevelButton","padding"],"mappings":";;;;AAEA,OAAA,QAAA,MAAA,kCAAA;AACA,SAAA,cAAA,QAAA,eAAA;AACA,SAAA,aAAA,QAAA,0BAAA;AACA,SAAA,qBAAA,EAAA,sBAAA;AAIA,SAAA,YAAA;AACA,SAAA,IAAA,EAAA,KAAA;AACA,SAAA,QAAA;AACA,SAAA,iBAAA;;;;AAOA,SAAA,cAAA,CAAA,IAAA,EAAwD;EAA9BA,IAAAA,KAA8B,GAAA,IAAA,CAA9BA,KAAAA;EAAAA,IAAOC,YAAuB,GAAA,IAAA,CAAvBA,YAAPD;EACxB,IAAME,UAAU,GAAGC,aAAnB,EAAA;;EACA,IAAA,eAAA,GAAcE,cAAd,EAAA;EAAA,IAAQD,CAAR,GAAA,eAAA,CAAA,CAAA;;EACA,IAAME,QAAQ,GAARA,SAAAA,QAAAA,GAAiB;IACrBJ,UAAU,CAAVA,QAAAA,CAAAA,eAAAA,EAAqC;MACnCD,YAAY,EADdC;IAAqC,CAArCA;EADF,CAAA;;EAKA,OACE,KAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEK,MAAM,CAAnB,SAAA;IAAA,QAAA,EAAA,CACE,IAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEA,MAAM,CAAnB,eAAA;MAAA,QAAA,EACE,IAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEA,MAAM,CAAnB,mBAAA;QAAA,QAAA,EACGH,CAAC,CAHR,yCAGQ;MADJ,CAAA;IADF,CAAA,CADF,EAOE,IAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEG,MAAM,CAAnB,UAAA;MAAA,QAAA,EACE,IAAA,CAAA,IAAA,EAAA;QACE,MAAM,EADR,qBAAA;QAEE,KAAK,EAAE,CACLA,MAAM,CADD,cAAA,EAEL;UAAEC,KAAK,EAAEC,qBAAqB,CAJlC,KAIkC;QAA9B,CAFK,CAFT;QAAA,QAAA,EAOGC,sBAAsB,CAf7B,KAe6B;MAPzB,CAAA;IADF,CAAA,CAPF,EAkBGV,KAAK,KAAKW,iBAAiB,CAA3BX,QAAAA,IACC,IAAA,CAAA,gBAAA,EAAA;MACE,KAAK,EAAEO,MAAM,CADf,gBAAA;MAEE,MAAM,EAFR,wBAAA;MAGE,OAAO,EAHT,QAAA;MAAA,QAAA,EAKE,IAAA,CAAA,QAAA,EAAA;QAAU,IAAI,EAAd,MAAA;QAAsB,IAAI,EAAEK,YAAY,GAAA,EAAA,GAAxC,EAAA;QAAoD,KAAK,EAzBjE;MAyBQ,CAAA;IALF,CAAA,CAnBJ;EAAA,CAAA,CADF;AAgCF;;AAAA,IAAML,MAAM,GAAGM,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,aAAa,EADJ,KAAA;IAETC,UAAU,EAFD,QAAA;IAGTC,YAAY,EAAEL,YAAY,GAAA,EAAA,GAJG;EACpB,CADoB;EAM/BM,eAAe,EAAE;IACfF,UAAU,EADK,QAAA;IAEfG,cAAc,EARe;EAMd,CANc;EAU/BC,mBAAmB,EAAE;IACnBC,UAAU,EADS,gBAAA;IAEnBC,QAAQ,EAAEA,QAAQ,CAFC,EAED,CAFC;IAGnBd,KAAK,EAbwB;EAUV,CAVU;EAe/Be,UAAU,EAAE;IACVC,IAAI,EADM,CAAA;IAEVR,UAAU,EAFA,UAAA;IAGVG,cAAc,EAlBe;EAenB,CAfmB;EAoB/BM,cAAc,EAAE;IACdJ,UAAU,EADI,gBAAA;IAEdC,QAAQ,EAAEA,QAAQ,CAFJ,EAEI,CAFJ;IAGdd,KAAK,EAvBwB;EAoBf,CApBe;EAyB/BkB,gBAAgB,EAAE;IAChBC,OAAO,EA1BX;EAyBoB;AAzBa,CAAlBd,CAAf;AA8BA,eAAA,cAAA","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialIcons';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  connectionLevelColors,\n  connectionLevelStrings,\n} from '@/utils/connectionLevelStrings';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLUE, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { connection_levels } from '@/utils/constants';\n\ntype Props = {\n  level: ConnectionLevel;\n  connectionId: string;\n};\n\nfunction TrustLevelView({ level, connectionId }: Props) {\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n  const setLevel = () => {\n    navigation.navigate('SetTrustlevel', {\n      connectionId,\n    });\n  };\n  return (\n    <View style={styles.container}>\n      <View style={styles.trustLevelLabel}>\n        <Text style={styles.trustLevelLabelText}>\n          {t('connectionDetails.label.connectionLevel')}\n        </Text>\n      </View>\n\n      <View style={styles.trustLevel}>\n        <Text\n          testID=\"ConnectionLevelText\"\n          style={[\n            styles.trustLevelText,\n            { color: connectionLevelColors[level] },\n          ]}\n        >\n          {connectionLevelStrings[level]}\n        </Text>\n      </View>\n      {level !== connection_levels.REPORTED && (\n        <TouchableOpacity\n          style={styles.trustLevelButton}\n          testID=\"EditConnectionLevelBtn\"\n          onPress={setLevel}\n        >\n          <Material name=\"edit\" size={DEVICE_LARGE ? 22 : 20} color={BLUE} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: DEVICE_LARGE ? 22 : 20,\n  },\n  trustLevelLabel: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  trustLevelLabelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  trustLevel: {\n    flex: 1,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n  },\n  trustLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLACK,\n  },\n  trustLevelButton: {\n    padding: 5,\n  },\n});\n\nexport default TrustLevelView;\n"]},"metadata":{},"sourceType":"module"}