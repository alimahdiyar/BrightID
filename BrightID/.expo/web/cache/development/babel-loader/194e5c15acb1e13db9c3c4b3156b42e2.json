{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { useNavigation } from '@react-navigation/native';\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { BLACK, BLUE } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { TaskState } from \"./TaskState\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction TaskCard(props) {\n  var title = props.title,\n      description = props.description,\n      fulfilled = props.fulfilled,\n      url = props.url,\n      onClick = props.onClick,\n      navigationTarget = props.navigationTarget;\n  var navigation = useNavigation();\n  var desc = url || navigationTarget ? _jsx(TouchableOpacity, {\n    onPress: function onPress() {\n      if (navigationTarget) {\n        navigation.navigate(navigationTarget, {\n          url: url\n        });\n      } else if (url) {\n        Linking.openURL(url);\n      }\n    },\n    children: _jsx(Text, {\n      style: styles.linkifiedDescription,\n      children: description\n    })\n  }) : _jsx(Text, {\n    style: styles.description,\n    children: description\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.taskInfo,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: title\n      }), desc]\n    }), _jsx(TaskState, {\n      complete: fulfilled,\n      onClick: onClick\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: DEVICE_LARGE ? 15 : 12,\n    paddingRight: 0,\n    paddingBottom: DEVICE_LARGE ? 15 : 12,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  },\n  taskInfo: {\n    marginRight: 25,\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-evenly'\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    fontStyle: 'normal',\n    fontSize: fontSize[20],\n    color: BLACK\n  },\n  description: {\n    fontFamily: 'Poppins-Medium',\n    fontStyle: 'normal',\n    fontSize: fontSize[15],\n    color: BLACK\n  },\n  linkifiedDescription: {\n    fontFamily: 'Poppins-Medium',\n    fontStyle: 'normal',\n    fontSize: fontSize[15],\n    color: BLUE\n  }\n});\nexport default TaskCard;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TaskCard.tsx"],"names":["title","description","fulfilled","url","onClick","navigationTarget","props","navigation","useNavigation","desc","Linking","styles","StyleSheet","container","paddingTop","DEVICE_LARGE","paddingRight","paddingBottom","flexDirection","justifyContent","taskInfo","marginRight","flex","fontFamily","fontStyle","fontSize","color","linkifiedDescription"],"mappings":";;;;oBAOA,uC;AACA,SAAA,aAAA,QAAA,0BAAA;AACA,SAAA,YAAA;AACA,SAAA,KAAA,EAAA,IAAA;AACA,SAAA,QAAA;AACA,SAAA,SAAA;;;;AAYA,SAAA,QAAA,CAAA,KAAA,EAAwC;EACtC,IAAQA,KAAR,GACEM,KADF,CAAA,KAAA;EAAA,IAAeL,WAAf,GACEK,KADF,CAAA,WAAA;EAAA,IAA4BJ,SAA5B,GACEI,KADF,CAAA,SAAA;EAAA,IAAuCH,GAAvC,GACEG,KADF,CAAA,GAAA;EAAA,IAA4CF,OAA5C,GACEE,KADF,CAAA,OAAA;EAAA,IAAqDD,gBAArD,GACEC,KADF,CAAA,gBAAA;EAEA,IAAMC,UAAU,GAAGC,aAAnB,EAAA;EAEA,IAAMC,IAAI,GACRN,GAAG,IAAHA,gBAAAA,GACE,IAAA,CAAA,gBAAA,EAAA;IACE,OAAO,EAAE,SAAA,OAAA,GAAM;MACb,IAAA,gBAAA,EAAsB;QACpBI,UAAU,CAAVA,QAAAA,CAAAA,gBAAAA,EAAsC;UAAEJ,GAAG,EAA3CI;QAAsC,CAAtCA;MADF,CAAA,MAEO,IAAA,GAAA,EAAS;QACdG,OAAO,CAAPA,OAAAA,CAAAA,GAAAA;MAEH;IAPH,CAAA;IAAA,QAAA,EASE,IAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEC,MAAM,CAAnB,oBAAA;MAAA,QAAA,EAVJR;IAUI,CAAA;EATF,CAAA,CADFA,GAaE,IAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEQ,MAAM,CAAnB,WAAA;IAAA,QAAA,EAdJ;EAcI,CAAA,CAdJ;EAiBA,OACE,KAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEA,MAAM,CAAnB,SAAA;IAAA,QAAA,EAAA,CACE,KAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEA,MAAM,CAAnB,QAAA;MAAA,QAAA,EAAA,CACE,IAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEA,MAAM,CAAnB,KAAA;QAAA,QAAA,EADF;MACE,CAAA,CADF,EADF,IACE;IAAA,CAAA,CADF,EAKE,IAAA,CAAA,SAAA,EAAA;MAAW,QAAQ,EAAnB,SAAA;MAAgC,OAAO,EAN3C;IAMI,CAAA,CALF;EAAA,CAAA,CADF;AAWF;;AAAA,IAAMA,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,UAAU,EAAEC,YAAY,GAAA,EAAA,GADf,EAAA;IAETC,YAAY,EAFH,CAAA;IAGTC,aAAa,EAAEF,YAAY,GAAA,EAAA,GAHlB,EAAA;IAITG,aAAa,EAJJ,KAAA;IAKTC,cAAc,EANe;EACpB,CADoB;EAQ/BC,QAAQ,EAAE;IACRC,WAAW,EADH,EAAA;IAERC,IAAI,EAFI,CAAA;IAGRJ,aAAa,EAHL,QAAA;IAIRC,cAAc,EAZe;EAQrB,CARqB;EAc/BnB,KAAK,EAAE;IACLuB,UAAU,EADL,gBAAA;IAELC,SAAS,EAFJ,QAAA;IAGLC,QAAQ,EAAEA,QAAQ,CAHb,EAGa,CAHb;IAILC,KAAK,EAlBwB;EAcxB,CAdwB;EAoB/BzB,WAAW,EAAE;IACXsB,UAAU,EADC,gBAAA;IAEXC,SAAS,EAFE,QAAA;IAGXC,QAAQ,EAAEA,QAAQ,CAHP,EAGO,CAHP;IAIXC,KAAK,EAxBwB;EAoBlB,CApBkB;EA0B/BC,oBAAoB,EAAE;IACpBJ,UAAU,EADU,gBAAA;IAEpBC,SAAS,EAFW,QAAA;IAGpBC,QAAQ,EAAEA,QAAQ,CAHE,EAGF,CAHE;IAIpBC,KAAK,EA9BT;EA0BwB;AA1BS,CAAlBd,CAAf;AAkCA,eAAA,QAAA","sourcesContent":["import {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Linking,\n} from 'react-native';\nimport React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLACK, BLUE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { TaskState } from './TaskState';\n\ntype TaskCardProps = {\n  id: string;\n  title: string;\n  description: string;\n  fulfilled: boolean;\n  url: string | null | undefined;\n  navigationTarget: string | null | undefined;\n  onClick: () => any | null | undefined;\n};\n\nfunction TaskCard(props: TaskCardProps) {\n  const { title, description, fulfilled, url, onClick, navigationTarget } =\n    props;\n  const navigation = useNavigation();\n\n  const desc =\n    url || navigationTarget ? (\n      <TouchableOpacity\n        onPress={() => {\n          if (navigationTarget) {\n            navigation.navigate(navigationTarget, { url });\n          } else if (url) {\n            Linking.openURL(url);\n          }\n        }}\n      >\n        <Text style={styles.linkifiedDescription}>{description}</Text>\n      </TouchableOpacity>\n    ) : (\n      <Text style={styles.description}>{description}</Text>\n    );\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.taskInfo}>\n        <Text style={styles.title}>{title}</Text>\n        {desc}\n      </View>\n      <TaskState complete={fulfilled} onClick={onClick} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: DEVICE_LARGE ? 15 : 12,\n    paddingRight: 0,\n    paddingBottom: DEVICE_LARGE ? 15 : 12,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n  },\n  taskInfo: {\n    marginRight: 25,\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-evenly',\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    fontStyle: 'normal',\n    fontSize: fontSize[20],\n    color: BLACK,\n  },\n  description: {\n    fontFamily: 'Poppins-Medium',\n    fontStyle: 'normal',\n    fontSize: fontSize[15],\n    color: BLACK,\n  },\n  linkifiedDescription: {\n    fontFamily: 'Poppins-Medium',\n    fontStyle: 'normal',\n    fontSize: fontSize[15],\n    color: BLUE,\n  },\n});\n\nexport default TaskCard;\n"]},"metadata":{},"sourceType":"module"}