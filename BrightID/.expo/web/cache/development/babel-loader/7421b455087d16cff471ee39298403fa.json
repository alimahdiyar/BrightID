{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { useDispatch, useSelector } from \"../store\";\nimport { addNodeUrl, removeCurrentNodeUrl, selectAllNodeUrls, selectBaseUrl, setBaseUrl } from \"../reducer/settingsSlice\";\nimport { NodeApi } from \"../api/brightId\";\nimport { pollOperations } from \"../utils/operations\";\nimport chooseNode from \"../utils/nodeChooser\";\nimport { NodeApiGateScreen } from \"./NodeApiGateScreen\";\nimport { leaveAllChannels } from \"./PendingConnections/actions/channelThunks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NodeApiContext = React.createContext(null);\nexport var ApiGateState = {\n  INITIAL: 'INITIAL',\n  SEARCH_REQUESTED: 'SEARCH_REQUESTED',\n  SEARCHING_NODE: 'SEARCHING',\n  NODE_AVAILABLE: 'NODE_AVAILABLE',\n  ERROR_NO_NODE: 'ERROR_NO_NODE'\n};\n\nvar NodeApiGate = function NodeApiGate(props) {\n  var id = useSelector(function (state) {\n    return state.user.id;\n  });\n  var secretKey = useSelector(function (state) {\n    return state.keypair.secretKey;\n  });\n  var url = useSelector(selectBaseUrl);\n  var candidates = useSelector(selectAllNodeUrls);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      nodeError = _useState2[0],\n      setNodeError = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      api = _useState4[0],\n      setApi = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      startTimestamp = _useState6[0],\n      setStartTimestamp = _useState6[1];\n\n  var _useState7 = useState(ApiGateState.INITIAL),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gateState = _useState8[0],\n      setGateState = _useState8[1];\n\n  var dispatch = useDispatch();\n\n  var retryHandler = function retryHandler() {\n    if (gateState === ApiGateState.ERROR_NO_NODE) {\n      console.log(\"User clicked retry -> triggering search.\");\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  };\n\n  useEffect(function () {\n    if (!url) {\n      console.log(\"URL is null -> triggering search.\");\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  }, [url]);\n  useEffect(function () {\n    var runEffect = function _callee() {\n      var fastestUrl;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(candidates.length === 0)) {\n                _context.next = 5;\n                break;\n              }\n\n              console.log(\"No node candidates available\");\n              setGateState(ApiGateState.ERROR_NO_NODE);\n              _context.next = 21;\n              break;\n\n            case 5:\n              console.log(\"Running nodechooser to select backend\");\n              setStartTimestamp(Date.now());\n              setGateState(ApiGateState.SEARCHING_NODE);\n              _context.prev = 8;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(chooseNode(candidates));\n\n            case 11:\n              fastestUrl = _context.sent;\n              dispatch(setBaseUrl(fastestUrl));\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](8);\n              setGateState(ApiGateState.ERROR_NO_NODE);\n\n            case 18:\n              _context.prev = 18;\n              setStartTimestamp(0);\n              return _context.finish(18);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[8, 15, 18, 21]], Promise);\n    };\n\n    if (gateState === ApiGateState.SEARCH_REQUESTED) {\n      runEffect();\n    }\n  }, [candidates, dispatch, gateState]);\n  useEffect(function () {\n    if (nodeError) {\n      Alert.alert('Node error!', 'Current node seems not to be functional', [{\n        text: 'Switch to different node',\n        onPress: function onPress() {\n          dispatch(leaveAllChannels());\n          dispatch(removeCurrentNodeUrl());\n          setNodeError(false);\n        }\n      }, {\n        text: 'Ignore',\n        style: 'cancel',\n        onPress: function onPress() {\n          setNodeError(false);\n        }\n      }], {\n        cancelable: true\n      });\n    }\n  }, [dispatch, nodeError]);\n  useEffect(function () {\n    var responseCounter = 0;\n\n    var apiMonitor = function apiMonitor(response) {\n      responseCounter++;\n\n      if (!response.ok) {\n        switch (response.problem) {\n          case 'SERVER_ERROR':\n          case 'CONNECTION_ERROR':\n          case 'NETWORK_ERROR':\n          case 'TIMEOUT_ERROR':\n            console.log(\"Node monitor: Detected problem: \" + response.status + \" - \" + response.problem + \".\");\n            setNodeError(true);\n            break;\n\n          default:\n            console.log(\"Node monitor: Ignoring problem \" + response.problem);\n        }\n      }\n    };\n\n    if (url) {\n      var apiInstance;\n\n      if (id && id.length > 0 && secretKey && secretKey.length > 0) {\n        console.log(\"Creating API with credentials using \" + url);\n        apiInstance = new NodeApi({\n          url: url,\n          id: id,\n          secretKey: secretKey,\n          monitor: apiMonitor\n        });\n      } else {\n        console.log(\"Creating anonymous API using \" + url);\n        apiInstance = new NodeApi({\n          url: url,\n          id: undefined,\n          secretKey: undefined,\n          monitor: apiMonitor\n        });\n      }\n\n      setGateState(ApiGateState.NODE_AVAILABLE);\n      setApi(apiInstance);\n    } else {\n      setApi(null);\n    }\n  }, [url, id, secretKey]);\n  useEffect(function () {\n    if (api) {\n      var timerId = setInterval(function () {\n        InteractionManager.runAfterInteractions(function () {\n          pollOperations(api);\n        });\n      }, 5000);\n      console.log(\"Started pollOperationsTimer \" + timerId);\n      return function () {\n        console.log(\"Stop pollOperationsTimer \" + timerId);\n        clearInterval(timerId);\n      };\n    }\n  }, [api]);\n\n  var setNode = function _callee2(nodeUrl) {\n    var _url;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch(leaveAllChannels());\n            setGateState(ApiGateState.SEARCHING_NODE);\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(chooseNode([nodeUrl]));\n\n          case 5:\n            _url = _context2.sent;\n            dispatch(addNodeUrl(_url));\n            dispatch(setBaseUrl(_url));\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            setGateState(ApiGateState.ERROR_NO_NODE);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  if (url && api && gateState === ApiGateState.NODE_AVAILABLE) {\n    return _jsx(NodeApiContext.Provider, {\n      value: api,\n      children: props.children\n    });\n  } else {\n    return _jsx(NodeApiGateScreen, {\n      gateState: gateState,\n      retryHandler: retryHandler,\n      startTimestamp: startTimestamp\n    });\n  }\n};\n\nexport default NodeApiGate;","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","addNodeUrl","removeCurrentNodeUrl","selectAllNodeUrls","selectBaseUrl","setBaseUrl","NodeApi","pollOperations","chooseNode","NodeApiGateScreen","leaveAllChannels","NodeApiContext","createContext","ApiGateState","INITIAL","SEARCH_REQUESTED","SEARCHING_NODE","NODE_AVAILABLE","ERROR_NO_NODE","NodeApiGate","props","id","state","user","secretKey","keypair","url","candidates","nodeError","setNodeError","api","setApi","startTimestamp","setStartTimestamp","gateState","setGateState","dispatch","retryHandler","console","log","runEffect","length","Date","now","fastestUrl","Alert","alert","text","onPress","style","cancelable","responseCounter","apiMonitor","response","ok","problem","status","apiInstance","monitor","undefined","timerId","setInterval","InteractionManager","runAfterInteractions","clearInterval","setNode","nodeUrl","children"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/NodeApiGate.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Alert, InteractionManager } from 'react-native';\nimport { ApiResponse } from 'apisauce';\nimport { RootState, useDispatch, useSelector } from '@/store';\nimport {\n  addNodeUrl,\n  removeCurrentNodeUrl,\n  selectAllNodeUrls,\n  selectBaseUrl,\n  setBaseUrl,\n} from '@/reducer/settingsSlice';\nimport { NodeApi } from '@/api/brightId';\nimport { pollOperations } from '@/utils/operations';\nimport chooseNode from '@/utils/nodeChooser';\nimport { NodeApiGateScreen } from '@/components/NodeApiGateScreen';\nimport { leaveAllChannels } from './PendingConnections/actions/channelThunks';\n\ntype ApiContext = NodeApi | null;\n\nexport const NodeApiContext = React.createContext<ApiContext>(null);\n\nexport const ApiGateState = {\n  INITIAL: 'INITIAL',\n  SEARCH_REQUESTED: 'SEARCH_REQUESTED', // should start looking for node\n  SEARCHING_NODE: 'SEARCHING', // currently looking for working node\n  NODE_AVAILABLE: 'NODE_AVAILABLE', // All good, valid node is set\n  ERROR_NO_NODE: 'ERROR_NO_NODE', // Failed to find a working node\n} as const;\nexport type ApiGateState = typeof ApiGateState[keyof typeof ApiGateState];\n\nconst NodeApiGate = (props: React.PropsWithChildren<unknown>) => {\n  const id = useSelector<string>((state: RootState) => state.user.id);\n  const secretKey = useSelector<Uint8Array>(\n    (state: RootState) => state.keypair.secretKey,\n  );\n  const url = useSelector<string>(selectBaseUrl);\n  const candidates = useSelector(selectAllNodeUrls);\n  const [nodeError, setNodeError] = useState(false);\n  const [api, setApi] = useState<NodeApi | null>(null);\n  const [startTimestamp, setStartTimestamp] = useState(0);\n  const [gateState, setGateState] = useState<ApiGateState>(\n    ApiGateState.INITIAL,\n  );\n  const dispatch = useDispatch();\n\n  // Trigger nodechooser when user clicks retry\n  const retryHandler = () => {\n    // Only allow retry if I'm in error state\n    if (gateState === ApiGateState.ERROR_NO_NODE) {\n      console.log(`User clicked retry -> triggering search.`);\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  };\n\n  // Trigger nodechooser when no url is set\n  useEffect(() => {\n    if (!url) {\n      console.log(`URL is null -> triggering search.`);\n      setGateState(ApiGateState.SEARCH_REQUESTED);\n    }\n  }, [url]);\n\n  // Run nodechooser if requested\n  useEffect(() => {\n    const runEffect = async () => {\n      if (candidates.length === 0) {\n        console.log(`No node candidates available`);\n        setGateState(ApiGateState.ERROR_NO_NODE);\n      } else {\n        console.log(`Running nodechooser to select backend`);\n        setStartTimestamp(Date.now());\n        setGateState(ApiGateState.SEARCHING_NODE);\n        try {\n          const fastestUrl = await chooseNode(candidates);\n          dispatch(setBaseUrl(fastestUrl));\n        } catch (e) {\n          // No usable node found :-(\n          setGateState(ApiGateState.ERROR_NO_NODE);\n        } finally {\n          setStartTimestamp(0);\n        }\n      }\n    };\n    if (gateState === ApiGateState.SEARCH_REQUESTED) {\n      runEffect();\n    }\n  }, [candidates, dispatch, gateState]);\n\n  // show node error modal\n  useEffect(() => {\n    if (nodeError) {\n      Alert.alert(\n        'Node error!',\n        'Current node seems not to be functional',\n        [\n          {\n            text: 'Switch to different node',\n            onPress: () => {\n              dispatch(leaveAllChannels());\n              dispatch(removeCurrentNodeUrl());\n              setNodeError(false);\n            },\n          },\n          {\n            text: 'Ignore',\n            style: 'cancel',\n            onPress: () => {\n              setNodeError(false);\n            },\n          },\n        ],\n        {\n          cancelable: true,\n        },\n      );\n    }\n  }, [dispatch, nodeError]);\n\n  // Manage NodeAPI instance\n  useEffect(() => {\n    let responseCounter = 0;\n    const apiMonitor = (response: ApiResponse<NodeApiRes, ErrRes>) => {\n      responseCounter++;\n      if (!response.ok) {\n        switch (response.problem) {\n          case 'SERVER_ERROR':\n          case 'CONNECTION_ERROR':\n          case 'NETWORK_ERROR':\n          case 'TIMEOUT_ERROR':\n            console.log(\n              `Node monitor: Detected problem: ${response.status} - ${response.problem}.`,\n            );\n            setNodeError(true);\n            break;\n          default:\n            console.log(`Node monitor: Ignoring problem ${response.problem}`);\n        }\n      }\n      /*\n      if (responseCounter % 5 === 0) {\n        console.log(`Pretending server error`);\n        setNodeError(true);\n      }\n       */\n    };\n\n    if (url) {\n      let apiInstance: NodeApi;\n      if (id && id.length > 0 && secretKey && secretKey.length > 0) {\n        console.log(`Creating API with credentials using ${url}`);\n        apiInstance = new NodeApi({ url, id, secretKey, monitor: apiMonitor });\n      } else {\n        console.log(`Creating anonymous API using ${url}`);\n        apiInstance = new NodeApi({\n          url,\n          id: undefined,\n          secretKey: undefined,\n          monitor: apiMonitor,\n        });\n      }\n      setGateState(ApiGateState.NODE_AVAILABLE);\n      setApi(apiInstance);\n    } else {\n      setApi(null);\n    }\n  }, [url, id, secretKey]);\n\n  // Manage polling for operations\n  useEffect(() => {\n    if (api) {\n      // subscribe to operations\n      const timerId = setInterval(() => {\n        InteractionManager.runAfterInteractions(() => {\n          pollOperations(api);\n        });\n      }, 5000);\n      console.log(`Started pollOperationsTimer ${timerId}`);\n\n      return () => {\n        console.log(`Stop pollOperationsTimer ${timerId}`);\n        clearInterval(timerId);\n      };\n    }\n  }, [api]);\n\n  /* Manually set node url */\n  const setNode = async (nodeUrl: string) => {\n    try {\n      dispatch(leaveAllChannels());\n      // Check if node is working\n      setGateState(ApiGateState.SEARCHING_NODE);\n      const url = await chooseNode([nodeUrl]);\n      // Add it to node list and set as current node\n      dispatch(addNodeUrl(url));\n      dispatch(setBaseUrl(url));\n    } catch (e) {\n      // Node does not work :-(\n      setGateState(ApiGateState.ERROR_NO_NODE);\n    }\n  };\n\n  if (url && api && gateState === ApiGateState.NODE_AVAILABLE) {\n    return (\n      <NodeApiContext.Provider value={api}>\n        {props.children}\n      </NodeApiContext.Provider>\n    );\n  } else {\n    return (\n      <NodeApiGateScreen\n        gateState={gateState}\n        retryHandler={retryHandler}\n        startTimestamp={startTimestamp}\n      />\n    );\n  }\n};\n\nexport default NodeApiGate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}