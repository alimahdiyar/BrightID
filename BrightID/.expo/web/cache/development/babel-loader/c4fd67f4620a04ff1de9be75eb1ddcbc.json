{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useMemo, useCallback, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { selectAllConnections, recoveryConnectionsSelector, firstRecoveryTimeSelector } from \"../../reducer/connectionsSlice\";\nimport { addOperation, setConnectionLevel, setConnectionsSearch, setConnectionsSearchOpen, setFirstRecoveryTime } from \"../../actions\";\nimport { toSearchString } from \"../../utils/strings\";\nimport { ORANGE, WHITE, GREY } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from \"../../utils/constants\";\nimport { DEVICE_LARGE, DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport RecoveryConnectionCard from \"./RecoverConnectionsCard\";\nimport AnimatedTopSearchBar from \"./TopSearchBar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar searchParamSelector = function searchParamSelector(state) {\n  return state.connections.searchParam;\n};\n\nvar newRecoveryConnectionSelector = createSelector([selectAllConnections, searchParamSelector], function (connections, search) {\n  var searchString = toSearchString(search);\n  var includeRecovery = Array(connection_levels.ALREADY_KNOWN, connection_levels.RECOVERY);\n  return connections.filter(function (conn) {\n    return includeRecovery.includes(conn.incomingLevel) && conn.level !== connection_levels.RECOVERY && conn.level !== connection_levels.REPORTED && toSearchString(\"\" + (conn == null ? void 0 : conn.name)).includes(searchString);\n  });\n});\n\nvar EmptyList = function EmptyList() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      width: '100%',\n      height: '100%',\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingTop: '50%'\n    },\n    children: _jsx(Text, {\n      style: styles.emptyMessage,\n      children: t('recoveryConnections.text.pleaseMakeSomeConnections')\n    })\n  });\n};\n\nexport var NewRecoveryConnectionList = function NewRecoveryConnectionList(props) {\n  var navigation = props.navigation;\n\n  var _useTranslation2 = useTranslation(),\n      t = _useTranslation2.t;\n\n  var api = useContext(NodeApiContext);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      myId = _useSelector.id;\n\n  var firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  var connections = useSelector(newRecoveryConnectionSelector);\n  var recoveryConnections = useSelector(recoveryConnectionsSelector);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedAccounts = _useState2[0],\n      setSelectedAccounts = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      updateInProgress = _useState4[0],\n      setUpdateInProgress = _useState4[1];\n\n  var filter = useCallback(function (id) {\n    if (selectedAccounts.includes(id)) {\n      setSelectedAccounts(selectedAccounts.filter(function (value) {\n        return value !== id;\n      }));\n    } else {\n      setSelectedAccounts([].concat(_toConsumableArray(selectedAccounts), [id]));\n    }\n  }, [selectedAccounts]);\n\n  var confirm = function _callee() {\n    var totalRecoveryAccount, promises, _iterator, _step, id, ops, _iterator2, _step2, op;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!updateInProgress) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            setUpdateInProgress(true);\n            console.log(recoveryConnections.length);\n            console.log(selectedAccounts.length);\n            totalRecoveryAccount = recoveryConnections.length + selectedAccounts.length;\n\n            if (!(totalRecoveryAccount < 3)) {\n              _context.next = 11;\n              break;\n            }\n\n            Alert.alert(t('common.alert.error'), t('recoveryConnections.text.threeMore', {\n              amount: 3 - totalRecoveryAccount\n            }));\n            _context.next = 19;\n            break;\n\n          case 11:\n            promises = [];\n\n            for (_iterator = _createForOfIteratorHelperLoose(selectedAccounts); !(_step = _iterator()).done;) {\n              id = _step.value;\n              promises.push(api.addConnection(myId, id, connection_levels.RECOVERY, Date.now()));\n              dispatch(setConnectionLevel({\n                id: id,\n                level: connection_levels.RECOVERY\n              }));\n            }\n\n            if (selectedAccounts.length > 0 && !firstRecoveryTime) {\n              dispatch(setFirstRecoveryTime(Date.now()));\n            }\n\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(Promise.all(promises));\n\n          case 16:\n            ops = _context.sent;\n\n            for (_iterator2 = _createForOfIteratorHelperLoose(ops); !(_step2 = _iterator2()).done;) {\n              op = _step2.value;\n              dispatch(addOperation(op));\n            }\n\n            if (firstRecoveryTime && Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION) {\n              navigation.navigate('RecoveryCooldownInfo', {\n                successCallback: function successCallback() {\n                  navigation.navigate('Home');\n                }\n              });\n            } else {\n              Alert.alert(t('common.alert.success'), t('recoveryConnections.text.completed', 'Recovery connections have been successfully added'));\n              navigation.navigate('Home');\n            }\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](2);\n            console.warn(_context.t0.message);\n\n          case 24:\n            _context.prev = 24;\n            setUpdateInProgress(false);\n            return _context.finish(24);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 21, 24, 27]], Promise);\n  };\n\n  var ConnectionsList = useMemo(function () {\n    return _jsx(FlatList, {\n      data: connections,\n      contentContainerStyle: {\n        paddingTop: '5%',\n        paddingBottom: '33%'\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _jsx(RecoveryConnectionCard, _objectSpread(_objectSpread({\n          activeBefore: 0,\n          activeAfter: 0\n        }, item), {}, {\n          index: index,\n          isSelectionActive: true,\n          onSelect: filter,\n          isSelected: selectedAccounts.includes(item.id)\n        }));\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      ListEmptyComponent: _jsx(EmptyList, {})\n    });\n  }, [connections, selectedAccounts, filter]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [recoveryConnections.length === 0 ? _jsx(Text, {\n        style: styles.recoveryMessage,\n        children: t('recoveryConnections.text.chooseThreeConnections')\n      }) : _jsx(Text, {\n        style: styles.recoveryMessage,\n        children: t('recoveryConnections.text.connectionsAlreadyKnown')\n      }), _jsx(AnimatedTopSearchBar, {\n        sortable: false,\n        setSearchValue: setConnectionsSearch,\n        setSearchOpen: setConnectionsSearchOpen,\n        searchOpenSelector: function searchOpenSelector(state) {\n          return state.connections.searchOpen;\n        }\n      }), ConnectionsList, _jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(TouchableOpacity, {\n          disabled: updateInProgress || selectedAccounts.length === 0,\n          style: [styles.button, {\n            backgroundColor: updateInProgress || selectedAccounts.length === 0 ? GREY : ORANGE\n          }],\n          onPress: confirm,\n          children: updateInProgress ? _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: WHITE\n          }) : _jsx(Text, {\n            style: styles.buttonLabel,\n            children: t('recoveryConnections.text.add')\n          })\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: '3%',\n    paddingBottom: DEVICE_ANDROID ? '5%' : '10%',\n    backgroundColor: 'white'\n  },\n  button: {\n    backgroundColor: ORANGE,\n    height: 50,\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50\n  },\n  buttonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: WHITE\n  },\n  recoveryMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginTop: '5%',\n    textAlign: 'center'\n  },\n  emptyMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center'\n  }\n});\nexport default NewRecoveryConnectionList;","map":{"version":3,"names":["React","useMemo","useCallback","useState","useContext","createSelector","useTranslation","useDispatch","useSelector","selectAllConnections","recoveryConnectionsSelector","firstRecoveryTimeSelector","addOperation","setConnectionLevel","setConnectionsSearch","setConnectionsSearchOpen","setFirstRecoveryTime","toSearchString","ORANGE","WHITE","GREY","fontSize","connection_levels","RECOVERY_COOLDOWN_EXEMPTION","DEVICE_LARGE","DEVICE_ANDROID","NodeApiContext","RecoveryConnectionCard","AnimatedTopSearchBar","searchParamSelector","state","connections","searchParam","newRecoveryConnectionSelector","search","searchString","includeRecovery","Array","ALREADY_KNOWN","RECOVERY","filter","conn","includes","incomingLevel","level","REPORTED","name","EmptyList","t","flex","width","height","justifyContent","alignItems","paddingTop","styles","emptyMessage","NewRecoveryConnectionList","props","navigation","api","dispatch","user","myId","id","firstRecoveryTime","recoveryConnections","selectedAccounts","setSelectedAccounts","updateInProgress","setUpdateInProgress","value","confirm","console","log","length","totalRecoveryAccount","Alert","alert","amount","promises","push","addConnection","Date","now","Promise","all","ops","op","navigate","successCallback","warn","message","ConnectionsList","paddingBottom","item","index","orangeTop","container","recoveryMessage","searchOpen","buttonContainer","button","backgroundColor","buttonLabel","StyleSheet","create","borderTopLeftRadius","marginTop","overflow","zIndex","mainContainer","flexDirection","position","bottom","left","right","borderRadius","fontFamily","color","paddingHorizontal","textAlign"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/RecoveryConnections/NewRecoveryConnectionScreen.tsx"],"sourcesContent":["import React, { useMemo, useCallback, useState, useContext } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  StatusBar,\n  TouchableOpacity,\n  FlatList,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\n\n// Redux\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  selectAllConnections,\n  recoveryConnectionsSelector,\n  firstRecoveryTimeSelector,\n} from '@/reducer/connectionsSlice';\nimport {\n  addOperation,\n  setConnectionLevel,\n  setConnectionsSearch,\n  setConnectionsSearchOpen,\n  setFirstRecoveryTime,\n} from '@/actions';\n\nimport { toSearchString } from '@/utils/strings';\nimport { ORANGE, WHITE, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { DEVICE_LARGE, DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { NodeApiContext } from '../NodeApiGate';\n// Import Components Local\nimport RecoveryConnectionCard from './RecoverConnectionsCard';\nimport AnimatedTopSearchBar from './TopSearchBar';\n\nconst searchParamSelector = (state: State) => state.connections.searchParam;\n\nconst newRecoveryConnectionSelector = createSelector(\n  [selectAllConnections, searchParamSelector],\n  (connections, search) => {\n    const searchString = toSearchString(search);\n    const includeRecovery = Array<ConnectionLevel>(\n      connection_levels.ALREADY_KNOWN,\n      connection_levels.RECOVERY,\n    );\n    return connections.filter(\n      (conn) =>\n        includeRecovery.includes(conn.incomingLevel) &&\n        conn.level !== connection_levels.RECOVERY &&\n        conn.level !== connection_levels.REPORTED &&\n        toSearchString(`${conn?.name}`).includes(searchString),\n    );\n  },\n);\n\n// Create Custom Local Components\nconst EmptyList = () => {\n  const { t } = useTranslation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '50%',\n      }}\n    >\n      <Text style={styles.emptyMessage}>\n        {t('recoveryConnections.text.pleaseMakeSomeConnections')}\n      </Text>\n    </View>\n  );\n};\n\nexport const NewRecoveryConnectionList = (props) => {\n  const { navigation } = props;\n\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n  const dispatch = useDispatch();\n  const { id: myId } = useSelector((state) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  const connections = useSelector(newRecoveryConnectionSelector);\n  const recoveryConnections = useSelector(recoveryConnectionsSelector);\n\n  const [selectedAccounts, setSelectedAccounts] = useState<string[]>([]);\n  const [updateInProgress, setUpdateInProgress] = useState<boolean>(false);\n\n  // toggle for select and deselect recovery account\n  const filter = useCallback(\n    (id: string) => {\n      if (selectedAccounts.includes(id)) {\n        setSelectedAccounts(selectedAccounts.filter((value) => value !== id));\n      } else {\n        setSelectedAccounts([...selectedAccounts, id]);\n      }\n    },\n    [selectedAccounts],\n  );\n\n  // submit new recovery account\n  const confirm = async () => {\n    if (updateInProgress) return;\n\n    try {\n      setUpdateInProgress(true);\n      console.log(recoveryConnections.length);\n      console.log(selectedAccounts.length);\n\n      const totalRecoveryAccount =\n        recoveryConnections.length + selectedAccounts.length;\n\n      if (totalRecoveryAccount < 3) {\n        Alert.alert(\n          t('common.alert.error'),\n          t('recoveryConnections.text.threeMore', {\n            amount: 3 - totalRecoveryAccount,\n          }),\n        );\n      } else {\n        // apply\n        const promises = [];\n        for (const id of selectedAccounts) {\n          promises.push(\n            api.addConnection(myId, id, connection_levels.RECOVERY, Date.now()),\n          );\n          dispatch(\n            setConnectionLevel({ id, level: connection_levels.RECOVERY }),\n          );\n        }\n        if (selectedAccounts.length > 0 && !firstRecoveryTime) {\n          dispatch(setFirstRecoveryTime(Date.now()));\n        }\n\n        const ops = await Promise.all(promises);\n        for (const op of ops) {\n          dispatch(addOperation(op));\n        }\n\n        // show info about cooldown period\n        if (\n          firstRecoveryTime &&\n          Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n        ) {\n          navigation.navigate('RecoveryCooldownInfo', {\n            successCallback: () => {\n              navigation.navigate('Home');\n            },\n          });\n        } else {\n          Alert.alert(\n            t('common.alert.success'),\n            t(\n              'recoveryConnections.text.completed',\n              'Recovery connections have been successfully added',\n            ),\n          );\n          navigation.navigate('Home');\n        }\n      }\n    } catch (error) {\n      console.warn(error.message);\n    } finally {\n      setUpdateInProgress(false);\n    }\n  };\n\n  const ConnectionsList = useMemo(() => {\n    return (\n      <FlatList\n        data={connections}\n        contentContainerStyle={{\n          paddingTop: '5%',\n          paddingBottom: '33%',\n        }}\n        renderItem={({ item, index }) => (\n          <RecoveryConnectionCard\n            activeBefore={0}\n            activeAfter={0}\n            {...item}\n            index={index}\n            isSelectionActive={true}\n            onSelect={filter}\n            isSelected={selectedAccounts.includes(item.id)}\n          />\n        )}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={<EmptyList />}\n      />\n    );\n  }, [connections, selectedAccounts, filter]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n\n      <View style={styles.container}>\n        {recoveryConnections.length === 0 ? (\n          <Text style={styles.recoveryMessage}>\n            {t('recoveryConnections.text.chooseThreeConnections')}\n          </Text>\n        ) : (\n          <Text style={styles.recoveryMessage}>\n            {t('recoveryConnections.text.connectionsAlreadyKnown')}\n          </Text>\n        )}\n        <AnimatedTopSearchBar\n          sortable={false}\n          setSearchValue={setConnectionsSearch}\n          setSearchOpen={setConnectionsSearchOpen}\n          searchOpenSelector={(state: State) => state.connections.searchOpen}\n        />\n        {ConnectionsList}\n        <View\n          style={styles.buttonContainer}\n          // blurType=\"light\"\n          // blurAmount={5}\n          // reducedTransparencyFallbackColor={WHITE}\n        >\n          <TouchableOpacity\n            disabled={updateInProgress || selectedAccounts.length === 0}\n            style={[\n              styles.button,\n              {\n                backgroundColor:\n                  updateInProgress || selectedAccounts.length === 0\n                    ? GREY\n                    : ORANGE,\n              },\n            ]}\n            onPress={confirm}\n          >\n            {updateInProgress ? (\n              <ActivityIndicator size=\"small\" color={WHITE} />\n            ) : (\n              <Text style={styles.buttonLabel}>\n                {t('recoveryConnections.text.add')}\n              </Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10,\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: '3%',\n    paddingBottom: DEVICE_ANDROID ? '5%' : '10%',\n    backgroundColor: 'white',\n  },\n  button: {\n    backgroundColor: ORANGE,\n    height: 50,\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n  },\n  buttonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: WHITE,\n  },\n  recoveryMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginTop: '5%',\n    textAlign: 'center',\n  },\n  emptyMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n  },\n});\n\nexport default NewRecoveryConnectionList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}