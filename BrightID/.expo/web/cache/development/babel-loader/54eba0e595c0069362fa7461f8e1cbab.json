{"ast":null,"code":"import { useCallback } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\nimport { DEVICE_LARGE, DEVICE_IOS } from \"../../utils/deviceConstants\";\nimport { GREY, WHITE } from \"../../theme/colors\";\nimport { useTranslation } from 'react-i18next';\nimport TaskCardController from \"./TaskCardController\";\nimport { TasksProgress } from \"./TasksProgress\";\nimport { selectTaskIds, selectCompletedTaskIds, checkTasks } from \"./TasksSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar FlatListItemSeparator = function FlatListItemSeparator() {\n  return _jsx(View, {\n    style: {\n      height: StyleSheet.hairlineWidth,\n      backgroundColor: GREY\n    }\n  });\n};\n\nexport var TasksScreen = function TasksScreen() {\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var taskIds = useSelector(selectTaskIds);\n  var completedTaskIds = useSelector(selectCompletedTaskIds);\n  var headerHeight = useHeaderHeight();\n\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  var isDrawerOpen = useIsDrawerOpen();\n  var refreshTasks = useCallback(function () {\n    dispatch(checkTasks());\n  }, [dispatch]);\n  useFocusEffect(refreshTasks);\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TaskCardController, {\n      taskId: item\n    });\n  };\n\n  return _jsxs(View, {\n    style: [styles.container, {\n      marginTop: headerHeight\n    }, !isDrawerOpen && styles.shadow],\n    testID: \"tasksScreen\",\n    children: [_jsx(TasksProgress, {\n      currentSteps: completedTaskIds.length,\n      totalSteps: taskIds.length,\n      label: t('achievements.progress.title')\n    }), _jsx(FlatList, {\n      data: taskIds,\n      contentContainerStyle: {\n        paddingBottom: 50,\n        flexGrow: 1\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item;\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      ItemSeparatorComponent: FlatListItemSeparator,\n      renderItem: renderItem,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: false,\n        onRefresh: refreshTasks\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: DEVICE_LARGE ? 50 : 40,\n    paddingLeft: 42,\n    paddingRight: 18\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  }\n});\nexport default TasksScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TasksScreen.tsx"],"names":["FlatListItemSeparator","height","StyleSheet","backgroundColor","TasksScreen","dispatch","useDispatch","t","useTranslation","taskIds","useSelector","completedTaskIds","headerHeight","useHeaderHeight","DEVICE_IOS","isDrawerOpen","useIsDrawerOpen","refreshTasks","useCallback","checkTasks","useFocusEffect","renderItem","item","styles","marginTop","paddingBottom","flexGrow","container","flex","borderTopLeftRadius","DEVICE_LARGE","paddingLeft","paddingRight","shadow","shadowColor","shadowOpacity","shadowRadius","elevation","shadowOffset","width"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { FlatList, StyleSheet, View, RefreshControl } from 'react-native';\nimport { useDispatch, useSelector } from '@/store';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\nimport { DEVICE_LARGE, DEVICE_IOS } from '@/utils/deviceConstants';\nimport { GREY, WHITE } from '@/theme/colors';\nimport { useTranslation } from 'react-i18next';\nimport TaskCardController from './TaskCardController';\nimport { TasksProgress } from './TasksProgress';\nimport {\n  selectTaskIds,\n  selectCompletedTaskIds,\n  checkTasks,\n} from './TasksSlice';\n\nconst FlatListItemSeparator = () => {\n  return (\n    <View\n      style={{\n        height: StyleSheet.hairlineWidth,\n        backgroundColor: GREY,\n      }}\n    />\n  );\n};\n\nexport const TasksScreen = function () {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const taskIds = useSelector(selectTaskIds);\n  const completedTaskIds = useSelector(selectCompletedTaskIds);\n  let headerHeight = useHeaderHeight();\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n  const isDrawerOpen = useIsDrawerOpen();\n\n  const refreshTasks = useCallback(() => {\n    dispatch(checkTasks());\n  }, [dispatch]);\n\n  useFocusEffect(refreshTasks);\n\n  const renderItem = ({ item }) => <TaskCardController taskId={item} />;\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { marginTop: headerHeight },\n        !isDrawerOpen && styles.shadow,\n      ]}\n      testID=\"tasksScreen\"\n    >\n      <TasksProgress\n        currentSteps={completedTaskIds.length}\n        totalSteps={taskIds.length}\n        label={t('achievements.progress.title')}\n      />\n      <FlatList\n        data={taskIds}\n        contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n        keyExtractor={(item) => item}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={FlatListItemSeparator}\n        renderItem={renderItem}\n        refreshControl={\n          <RefreshControl refreshing={false} onRefresh={refreshTasks} />\n        }\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: DEVICE_LARGE ? 50 : 40,\n    paddingLeft: 42,\n    paddingRight: 18,\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n  },\n});\n\nexport default TasksScreen;\n"]},"metadata":{},"sourceType":"module"}