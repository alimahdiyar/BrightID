{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BlurWidget from \"../BlurWidget/BlurWidget.web\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { isEqual } from 'lodash';\nimport { LIGHT_BLACK, ORANGE, WHITE, BLACK } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { clearBaseUrl, removeCurrentNodeUrl, resetNodeUrls, selectAllNodeUrls, selectBaseUrl, selectDefaultNodeUrls } from \"../../reducer/settingsSlice\";\nimport { leaveAllChannels } from \"../PendingConnections/actions/channelThunks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar NodeModal = function NodeModal() {\n  var navigation = useNavigation();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var currentBaseUrl = useSelector(selectBaseUrl);\n  var defaultNodeUrls = useSelector(selectDefaultNodeUrls);\n  var currentNodeUrls = useSelector(selectAllNodeUrls);\n  var dispatch = useDispatch();\n\n  var goBack = function goBack() {\n    navigation.goBack();\n  };\n\n  var changeNodeHandler = function changeNodeHandler() {\n    navigation.goBack();\n    dispatch(leaveAllChannels());\n    dispatch(removeCurrentNodeUrl());\n  };\n\n  var resetHandler = function resetHandler() {\n    dispatch(resetNodeUrls());\n    dispatch(leaveAllChannels());\n    dispatch(clearBaseUrl());\n  };\n\n  var resetContainer;\n\n  if (!isEqual(defaultNodeUrls, currentNodeUrls)) {\n    resetContainer = _jsxs(_Fragment, {\n      children: [_jsx(View, {\n        style: styles.resetInfoContainer,\n        children: _jsx(Text, {\n          style: styles.resetInfoText,\n          children: t('nodeApiGate.reset.text')\n        })\n      }), _jsx(TouchableOpacity, {\n        style: styles.resetButton,\n        onPress: resetHandler,\n        children: _jsx(Text, {\n          style: styles.resetButtonText,\n          children: t('nodeApiGate.reset.button')\n        })\n      })]\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BlurWidget, {\n      style: styles.blurView,\n      blurType: \"dark\",\n      blurAmount: 5,\n      reducedTransparencyFallbackColor: BLACK\n    }), _jsx(TouchableWithoutFeedback, {\n      onPress: goBack,\n      children: _jsx(View, {\n        style: styles.blurView\n      })\n    }), _jsxs(View, {\n      style: styles.modalContainer,\n      children: [_jsxs(View, {\n        style: styles.header,\n        children: [_jsx(Text, {\n          style: styles.headerText,\n          children: t('nodeModal.currentNode.header')\n        }), _jsx(Text, {\n          style: styles.subHeaderText,\n          children: currentBaseUrl\n        })]\n      }), _jsx(TouchableOpacity, {\n        testID: \"SaveLevelBtn\",\n        style: styles.switchNodeButton,\n        onPress: changeNodeHandler,\n        children: _jsx(Text, {\n          style: styles.switchNodeButtonText,\n          children: t('nodeModal.switchNodeButtonLabel')\n        })\n      }), resetContainer]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  blurView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  },\n  modalContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: WHITE,\n    width: '90%',\n    borderRadius: 25,\n    padding: DEVICE_LARGE ? 30 : 25\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: 10\n  },\n  headerText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[19],\n    textAlign: 'center',\n    color: LIGHT_BLACK\n  },\n  subHeaderText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK\n  },\n  switchNodeButton: {\n    width: '90%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: ORANGE,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20\n  },\n  switchNodeButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    color: WHITE\n  },\n  resetInfoContainer: {\n    marginBottom: 3,\n    marginTop: 25\n  },\n  resetInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: LIGHT_BLACK\n  },\n  resetButton: {\n    width: '70%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: ORANGE,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20\n  },\n  resetButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: WHITE\n  }\n});\nexport default NodeModal;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/NodeModal.tsx"],"names":["NodeModal","navigation","useNavigation","t","useTranslation","currentBaseUrl","useSelector","defaultNodeUrls","currentNodeUrls","dispatch","useDispatch","goBack","changeNodeHandler","leaveAllChannels","removeCurrentNodeUrl","resetHandler","resetNodeUrls","clearBaseUrl","isEqual","resetContainer","styles","StyleSheet","container","flex","flexDirection","alignItems","justifyContent","blurView","position","left","right","top","bottom","modalContainer","backgroundColor","width","borderRadius","padding","DEVICE_LARGE","header","marginTop","marginBottom","headerText","fontFamily","fontSize","textAlign","color","subHeaderText","switchNodeButton","paddingTop","paddingBottom","switchNodeButtonText","resetInfoContainer","resetInfoText","resetButton","resetButtonText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport BlurWidget from '@/components/BlurWidget/BlurWidget.web';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { isEqual } from 'lodash';\nimport { LIGHT_BLACK, ORANGE, WHITE, BLACK } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  clearBaseUrl,\n  removeCurrentNodeUrl,\n  resetNodeUrls,\n  selectAllNodeUrls,\n  selectBaseUrl,\n  selectDefaultNodeUrls,\n} from '@/reducer/settingsSlice';\nimport { leaveAllChannels } from '@/components/PendingConnections/actions/channelThunks';\n\nconst NodeModal = () => {\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n  const currentBaseUrl = useSelector(selectBaseUrl);\n  const defaultNodeUrls = useSelector(selectDefaultNodeUrls);\n  const currentNodeUrls = useSelector(selectAllNodeUrls);\n  const dispatch = useDispatch();\n\n  const goBack = () => {\n    navigation.goBack();\n  };\n\n  const changeNodeHandler = () => {\n    navigation.goBack();\n    dispatch(leaveAllChannels());\n    dispatch(removeCurrentNodeUrl());\n  };\n\n  const resetHandler = () => {\n    dispatch(resetNodeUrls());\n    dispatch(leaveAllChannels());\n    dispatch(clearBaseUrl());\n  };\n\n  let resetContainer;\n  if (!isEqual(defaultNodeUrls, currentNodeUrls)) {\n    resetContainer = (\n      <>\n        <View style={styles.resetInfoContainer}>\n          <Text style={styles.resetInfoText}>\n            {t('nodeApiGate.reset.text')}\n          </Text>\n        </View>\n        <TouchableOpacity style={styles.resetButton} onPress={resetHandler}>\n          <Text style={styles.resetButtonText}>\n            {t('nodeApiGate.reset.button')}\n          </Text>\n        </TouchableOpacity>\n      </>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <BlurWidget\n        style={styles.blurView}\n        blurType=\"dark\"\n        blurAmount={5}\n        reducedTransparencyFallbackColor={BLACK}\n      />\n      <TouchableWithoutFeedback onPress={goBack}>\n        <View style={styles.blurView} />\n      </TouchableWithoutFeedback>\n      <View style={styles.modalContainer}>\n        <View style={styles.header}>\n          <Text style={styles.headerText}>\n            {t('nodeModal.currentNode.header')}\n          </Text>\n          <Text style={styles.subHeaderText}>{currentBaseUrl}</Text>\n        </View>\n        <TouchableOpacity\n          testID=\"SaveLevelBtn\"\n          style={styles.switchNodeButton}\n          onPress={changeNodeHandler}\n        >\n          <Text style={styles.switchNodeButtonText}>\n            {t('nodeModal.switchNodeButtonLabel')}\n          </Text>\n        </TouchableOpacity>\n        {resetContainer}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  blurView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  modalContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: WHITE,\n    width: '90%',\n    borderRadius: 25,\n    padding: DEVICE_LARGE ? 30 : 25,\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: 10,\n  },\n  headerText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[19],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  subHeaderText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  switchNodeButton: {\n    width: '90%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: ORANGE,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n  },\n  switchNodeButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    color: WHITE,\n  },\n  resetInfoContainer: {\n    marginBottom: 3,\n    marginTop: 25,\n  },\n  resetInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: LIGHT_BLACK,\n  },\n  resetButton: {\n    width: '70%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: ORANGE,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n  },\n  resetButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: WHITE,\n  },\n});\n\nexport default NodeModal;\n"]},"metadata":{},"sourceType":"module"}