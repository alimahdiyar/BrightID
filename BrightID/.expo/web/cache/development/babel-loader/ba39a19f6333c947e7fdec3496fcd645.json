{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useTranslation } from 'react-i18next';\nimport { useContext, useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport FloatingActionButton from \"../Helpers/FloatingActionButton\";\nimport { WHITE, ORANGE, BLACK } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { allGroupsSelector, filteredGroupsSelector, updateGroup, updateMemberships } from \"../../actions\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { GroupCard } from \"./GroupCard\";\nimport { NoGroups } from \"./NoGroups\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar ITEM_HEIGHT = DEVICE_LARGE ? 94 : 80;\nvar ITEM_MARGIN = DEVICE_LARGE ? 11.8 : 6;\n\nvar getItemLayout = function getItemLayout(data, index) {\n  return {\n    length: ITEM_HEIGHT + ITEM_MARGIN,\n    offset: (ITEM_HEIGHT + ITEM_MARGIN) * index,\n    index: index\n  };\n};\n\nexport var GroupsScreen = function GroupsScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n  var allGroups = useSelector(allGroupsSelector);\n  var filteredGroups = useSelector(filteredGroupsSelector);\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      id = _useSelector.id;\n\n  var renderGroup = function renderGroup(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return _jsx(TouchableOpacity, {\n      testID: \"groupItem-\" + index,\n      onPress: function onPress() {\n        return navigation.navigate('Members', {\n          group: item\n        });\n      },\n      children: _jsx(GroupCard, {\n        group: item,\n        index: index\n      })\n    });\n  };\n\n  var onRefresh = function _callee() {\n    var memberships, _iterator, _step, group, groupInfo;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setRefreshing(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(api.getMemberships(id));\n\n          case 4:\n            memberships = _context.sent;\n            dispatch(updateMemberships(memberships));\n            _iterator = _createForOfIteratorHelperLoose(allGroups);\n\n          case 7:\n            if ((_step = _iterator()).done) {\n              _context.next = 16;\n              break;\n            }\n\n            group = _step.value;\n            console.log(\"Refreshing group \" + group.id);\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(api.getGroup(group.id));\n\n          case 12:\n            groupInfo = _context.sent;\n            dispatch(updateGroup(groupInfo));\n\n          case 14:\n            _context.next = 7;\n            break;\n\n          case 16:\n            setRefreshing(false);\n            _context.next = 23;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0.message);\n            setRefreshing(false);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n\n  var hasGroups = allGroups.length;\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      testID: \"groupsScreen\",\n      children: [_jsx(View, {\n        style: styles.mainContainer,\n        children: _jsx(View, {\n          style: styles.mainContainer,\n          children: _jsx(FlatList, {\n            style: styles.groupsContainer,\n            contentContainerStyle: {\n              flexGrow: 1,\n              paddingBottom: 50\n            },\n            testID: \"groupsFlatList\",\n            data: filteredGroups,\n            keyExtractor: function keyExtractor(_ref2, index) {\n              var id = _ref2.id;\n              return id + index;\n            },\n            renderItem: renderGroup,\n            showsHorizontalScrollIndicator: false,\n            showsVerticalScrollIndicator: false,\n            getItemLayout: getItemLayout,\n            refreshControl: _jsx(RefreshControl, {\n              refreshing: refreshing,\n              onRefresh: onRefresh\n            }),\n            ListEmptyComponent: hasGroups ? _jsx(Text, {\n              testID: \"noMatchText\",\n              style: styles.emptyText,\n              children: t('groups.text.noGroupsMatchSearch')\n            }) : _jsx(NoGroups, {})\n          })\n        })\n      }), allGroups.length > 0 && _jsx(FloatingActionButton, {\n        testID: \"addGroupBtn\",\n        onPress: function onPress() {\n          return navigation.navigate('GroupInfo');\n        }\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    marginTop: 8\n  },\n  groupsContainer: {\n    flex: 1\n  },\n  moreIcon: {\n    marginRight: 16\n  },\n  emptyText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[20],\n    color: BLACK\n  }\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Groups/GroupsScreen.tsx"],"names":["ITEM_HEIGHT","DEVICE_LARGE","ITEM_MARGIN","getItemLayout","length","offset","index","GroupsScreen","refreshing","setRefreshing","useState","navigation","useNavigation","dispatch","useDispatch","t","useTranslation","api","useContext","allGroups","useSelector","filteredGroups","id","state","renderGroup","item","group","onRefresh","memberships","updateMemberships","console","groupInfo","updateGroup","hasGroups","styles","flexGrow","paddingBottom","StyleSheet","orangeTop","backgroundColor","height","width","zIndex","container","flex","borderTopLeftRadius","marginTop","overflow","mainContainer","alignItems","flexDirection","justifyContent","groupsContainer","moreIcon","marginRight","emptyText","fontFamily","fontSize","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  FlatList,\n  View,\n  TouchableOpacity,\n  RefreshControl,\n  Text,\n  StatusBar,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport { useContext, useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport FloatingActionButton from '@/components/Helpers/FloatingActionButton';\nimport { WHITE, ORANGE, BLACK } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport {\n  allGroupsSelector,\n  filteredGroupsSelector,\n  updateGroup,\n  updateMemberships,\n} from '@/actions';\nimport { useDispatch, useSelector } from '@/store';\nimport { GroupCard } from './GroupCard';\nimport { NoGroups } from './NoGroups';\n\n/**\n * Group screen of BrightID\n * Displays a search input and list of Group Cards\n */\n\nconst ITEM_HEIGHT = DEVICE_LARGE ? 94 : 80;\nconst ITEM_MARGIN = DEVICE_LARGE ? 11.8 : 6;\n\nconst getItemLayout = (data, index) => ({\n  length: ITEM_HEIGHT + ITEM_MARGIN,\n  offset: (ITEM_HEIGHT + ITEM_MARGIN) * index,\n  index,\n});\n\nexport const GroupsScreen = () => {\n  const [refreshing, setRefreshing] = useState(false);\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n  const allGroups = useSelector(allGroupsSelector);\n  const filteredGroups = useSelector(filteredGroupsSelector);\n  const { id } = useSelector((state) => state.user);\n\n  const renderGroup = ({ item, index }) => {\n    return (\n      <TouchableOpacity\n        testID={`groupItem-${index}`}\n        onPress={() => navigation.navigate('Members', { group: item })}\n      >\n        <GroupCard group={item} index={index} />\n      </TouchableOpacity>\n    );\n  };\n\n  const onRefresh = async () => {\n    try {\n      setRefreshing(true);\n      const memberships = await api.getMemberships(id);\n      dispatch(updateMemberships(memberships));\n      for (const group of allGroups) {\n        console.log(`Refreshing group ${group.id}`);\n        const groupInfo = await api.getGroup(group.id);\n        dispatch(updateGroup(groupInfo));\n      }\n      setRefreshing(false);\n    } catch (err) {\n      console.log(err.message);\n      setRefreshing(false);\n    }\n  };\n\n  const hasGroups = allGroups.length;\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"groupsScreen\">\n        <View style={styles.mainContainer}>\n          <View style={styles.mainContainer}>\n            <FlatList\n              style={styles.groupsContainer}\n              contentContainerStyle={{ flexGrow: 1, paddingBottom: 50 }}\n              testID=\"groupsFlatList\"\n              data={filteredGroups}\n              keyExtractor={({ id }, index) => id + index}\n              renderItem={renderGroup}\n              showsHorizontalScrollIndicator={false}\n              showsVerticalScrollIndicator={false}\n              getItemLayout={getItemLayout}\n              refreshControl={\n                <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n              }\n              ListEmptyComponent={\n                hasGroups ? (\n                  <Text testID=\"noMatchText\" style={styles.emptyText}>\n                    {t('groups.text.noGroupsMatchSearch')}\n                  </Text>\n                ) : (\n                  <NoGroups />\n                )\n              }\n            />\n          </View>\n        </View>\n        {allGroups.length > 0 && (\n          <FloatingActionButton\n            testID=\"addGroupBtn\"\n            onPress={() => navigation.navigate('GroupInfo')}\n          />\n        )}\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    marginTop: 8,\n  },\n  groupsContainer: {\n    flex: 1,\n  },\n  moreIcon: {\n    marginRight: 16,\n  },\n  emptyText: {\n    fontFamily: 'ApexNew-Book',\n    fontSize: fontSize[20],\n    color: BLACK,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}