{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\nimport { RESET_STORE } from \"../actions/resetStore\";\nvar devicesAdapter = createEntityAdapter({\n  selectId: function selectId(device) {\n    return device.signingKey;\n  }\n});\nvar devicesSlice = createSlice({\n  name: 'devices',\n  initialState: devicesAdapter.getInitialState(),\n  reducers: {\n    addDevice: devicesAdapter.upsertOne,\n    removeDevice: devicesAdapter.removeOne,\n    setActiveDevices: function setActiveDevices(state, action) {\n      console.log('updating devices based on server state');\n      devicesAdapter.updateMany(state, state.ids.map(function (signingKey) {\n        var active = action.payload.indexOf(signingKey) > -1;\n        return {\n          id: signingKey,\n          changes: {\n            active: active\n          }\n        };\n      }));\n      var newDevices = action.payload.filter(function (id) {\n        return !state.ids.includes(id);\n      });\n      devicesAdapter.addMany(state, newDevices.map(function (signingKey) {\n        return {\n          signingKey: signingKey,\n          active: true,\n          name: 'Unknown'\n        };\n      }));\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return devicesAdapter.getInitialState();\n  })\n});\nvar _devicesSlice$actions = devicesSlice.actions,\n    addDevice = _devicesSlice$actions.addDevice,\n    removeDevice = _devicesSlice$actions.removeDevice,\n    setActiveDevices = _devicesSlice$actions.setActiveDevices;\nexport { addDevice, removeDevice, setActiveDevices };\n\nvar _devicesAdapter$getSe = devicesAdapter.getSelectors(function (state) {\n  return state.devices;\n}),\n    selectAllDevices = _devicesAdapter$getSe.selectAll;\n\nexport { selectAllDevices };\nexport var selectActiveDevices = createSelector(selectAllDevices, function (devices) {\n  return devices.filter(function (d) {\n    return d == null ? void 0 : d.active;\n  });\n});\nexport default devicesSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/devicesSlice.ts"],"names":["devicesAdapter","createEntityAdapter","selectId","device","devicesSlice","createSlice","name","initialState","reducers","addDevice","removeDevice","setActiveDevices","console","state","active","action","id","changes","newDevices","signingKey","extraReducers","selectAllDevices","selectActiveDevices","createSelector","devices","d"],"mappings":";AAAA,SAAA,WAAA,EAAA,mBAAA,EAAA,cAAA,QAAA,kBAAA;AAMA,SAAA,WAAA;AAEA,IAAMA,cAAc,GAAGC,mBAAmB,CAAS;EACjDC,QAAQ,EAAE,SAAA,QAAA,CAAA,MAAA,EAAA;IAAA,OAAYC,MAAM,CAAlB,UAAA;EADZ;AAAmD,CAAT,CAA1C;AAIA,IAAMC,YAAY,GAAGC,WAAW,CAAC;EAC/BC,IAAI,EAD2B,SAAA;EAE/BC,YAAY,EAAEP,cAAc,CAFG,eAEjBA,EAFiB;EAG/BQ,QAAQ,EAAE;IACRC,SAAS,EAAET,cAAc,CADjB,SAAA;IAERU,YAAY,EAAEV,cAAc,CAFpB,SAAA;IAGRW,gBAAgB,EAAE,SAAA,gBAAA,CAAA,KAAA,EAAA,MAAA,EAA4C;MAC5DC,OAAO,CAAPA,GAAAA,CAAAA,wCAAAA;MAEAZ,cAAc,CAAdA,UAAAA,CAAAA,KAAAA,EAEEa,KAAK,CAALA,GAAAA,CAAAA,GAAAA,CAAc,UAAA,UAAA,EAAwB;QACpC,IAAMC,MAAM,GAAGC,MAAM,CAANA,OAAAA,CAAAA,OAAAA,CAAAA,UAAAA,IAAqC,CAApD,CAAA;QACA,OAAO;UAAEC,EAAE,EAAJ,UAAA;UAAkBC,OAAO,EAAE;YAAEH,MAAM,EAA1C;UAAkC;QAA3B,CAAP;MAJJd,CAEEa,CAFFb;MAQA,IAAMkB,UAAU,GAAGH,MAAM,CAANA,OAAAA,CAAAA,MAAAA,CAAsB,UAAA,EAAA,EAAA;QAAA,OAAQ,CAACF,KAAK,CAALA,GAAAA,CAAAA,QAAAA,CAAT,EAASA,CAAT;MAAzC,CAAmBE,CAAnB;MACAf,cAAc,CAAdA,OAAAA,CAAAA,KAAAA,EAEEkB,UAAU,CAAVA,GAAAA,CAAe,UAAA,UAAA,EAAgB;QAC7B,OAAO;UAAEC,UAAU,EAAZ,UAAA;UAAcL,MAAM,EAApB,IAAA;UAA4BR,IAAI,EAAvC;QAAO,CAAP;MAHJN,CAEEkB,CAFFlB;IAlB2B;EAGrB,CAHqB;EA0B/BoB,aAAa,EAAA,eAAA,CAAA,EAAA,EAAA,WAAA,EACI,YAAM;IACnB,OAAOpB,cAAc,CAArB,eAAOA,EAAP;EA5BN,CA0Be;AA1BkB,CAAD,CAAhC;AAkCO,IAAA,qBAAA,GACLI,YAAY,CADP,OAAA;AAAA,IAAQK,SAAR,GAAA,qBAAA,CAAA,SAAA;AAAA,IAAmBC,YAAnB,GAAA,qBAAA,CAAA,YAAA;AAAA,IAAiCC,gBAAjC,GAAA,qBAAA,CAAA,gBAAA;;;AAIA,IAAA,qBAAA,GAAwCX,cAAc,CAAdA,YAAAA,CAC7C,UAAA,KAAA,EAAA;EAAA,OAAkBa,KAAK,CAAvB,OAAA;AADK,CAAwCb,CAAxC;AAAA,IAAmBqB,gBAAnB,GAAA,qBAAA,CAAA,SAAA;;;AAIP,OAAO,IAAMC,mBAAmB,GAAGC,cAAc,CAAA,gBAAA,EAE/C,UAAA,OAAA,EAAa;EACX,OAAOC,OAAO,CAAPA,MAAAA,CAAe,UAAA,CAAA,EAAA;IAAA,OAAOC,CAAP,IAAA,IAAOA,GAAP,KAAA,CAAOA,GAAAA,CAAC,CAAR,MAAA;EAAtB,CAAOD,CAAP;AAHG,CAA0C,CAA1C;AAQP,eAAepB,YAAY,CAA3B,OAAA","sourcesContent":["import {\n  createSlice,\n  PayloadAction,\n  createEntityAdapter,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\n\nconst devicesAdapter = createEntityAdapter<Device>({\n  selectId: (device) => device.signingKey,\n});\n\nconst devicesSlice = createSlice({\n  name: 'devices',\n  initialState: devicesAdapter.getInitialState(),\n  reducers: {\n    addDevice: devicesAdapter.upsertOne,\n    removeDevice: devicesAdapter.removeOne,\n    setActiveDevices: (state, action: PayloadAction<string[]>) => {\n      console.log('updating devices based on server state');\n      // update existing devices\n      devicesAdapter.updateMany(\n        state,\n        state.ids.map((signingKey: string) => {\n          const active = action.payload.indexOf(signingKey) > -1;\n          return { id: signingKey, changes: { active } };\n        }),\n      );\n      // add new devices\n      const newDevices = action.payload.filter((id) => !state.ids.includes(id));\n      devicesAdapter.addMany(\n        state,\n        newDevices.map((signingKey) => {\n          return { signingKey, active: true, name: 'Unknown' };\n        }),\n      );\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return devicesAdapter.getInitialState();\n    },\n  },\n});\n\n// Export channel actions\nexport const { addDevice, removeDevice, setActiveDevices } =\n  devicesSlice.actions;\n\n// export selectors\nexport const { selectAll: selectAllDevices } = devicesAdapter.getSelectors(\n  (state: State) => state.devices,\n);\n\nexport const selectActiveDevices = createSelector(\n  selectAllDevices,\n  (devices) => {\n    return devices.filter((d) => d?.active);\n  },\n);\n\n// Export reducer\nexport default devicesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}