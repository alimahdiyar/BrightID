{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreviewConnectionController = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _store = require(\"../../store\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _NodeApiGate = require(\"../NodeApiGate\");\n\nvar _pendingConnectionThunks = require(\"./actions/pendingConnectionThunks\");\n\nvar _pendingConnectionSlice = require(\"./pendingConnectionSlice\");\n\nvar _ReconnectView = require(\"./ReconnectView\");\n\nvar _PreviewConnectionView = require(\"./PreviewConnectionView\");\n\nvar _constants = require(\"../../utils/constants\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PreviewConnectionController.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar PreviewConnectionController = function PreviewConnectionController(props) {\n  var pendingConnectionId = props.pendingConnectionId,\n      moveToNext = props.moveToNext;\n  var dispatch = (0, _store.useDispatch)();\n  var api = (0, _react.useContext)(_NodeApiGate.NodeApiContext);\n  var pendingConnection = (0, _store.useSelector)(function (state) {\n    return (0, _pendingConnectionSlice.selectPendingConnectionById)(state, pendingConnectionId);\n  });\n  var navigation = (0, _native.useNavigation)();\n\n  if (!pendingConnection) {\n    return null;\n  }\n\n  var isReconnect = !!pendingConnection.pendingConnectionData.existingConnection;\n\n  if (pendingConnection.state !== _pendingConnectionSlice.pendingConnection_states.UNCONFIRMED) {\n    isReconnect = false;\n  }\n\n  var setLevelHandler = function setLevelHandler(level) {\n    moveToNext();\n\n    _reactNative.InteractionManager.runAfterInteractions(function () {\n      dispatch((0, _pendingConnectionThunks.confirmPendingConnectionThunk)(pendingConnection.profileId, level, api));\n    });\n  };\n\n  var abuseHandler = function _callee() {\n    var sharedProfile;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sharedProfile = pendingConnection.pendingConnectionData.sharedProfile;\n            navigation.navigate('ReportReason', {\n              connectionId: sharedProfile.id,\n              connectionName: sharedProfile.name,\n              reporting: true,\n              source: isReconnect ? _constants.report_sources.RECONNECT : _constants.report_sources.PREVIEW,\n              successCallback: function successCallback(reason) {\n                dispatch((0, _pendingConnectionThunks.confirmPendingConnectionThunk)(pendingConnection.profileId, _constants.connection_levels.REPORTED, api, reason));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var photoTouchHandler = function photoTouchHandler() {\n    navigation.navigate('FullScreenPhoto', {\n      photo: pendingConnection.pendingConnectionData.sharedProfile.photo,\n      base64: true\n    });\n  };\n\n  console.log(\"rendering \" + pendingConnection.pendingConnectionData.sharedProfile.name);\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.previewContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, isReconnect ? _react.default.createElement(_ReconnectView.ReconnectView, {\n    pendingConnection: pendingConnection,\n    existingConnection: pendingConnection.pendingConnectionData.existingConnection,\n    setLevelHandler: setLevelHandler,\n    abuseHandler: abuseHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }) : _react.default.createElement(_PreviewConnectionView.PreviewConnectionView, {\n    pendingConnection: pendingConnection,\n    setLevelHandler: setLevelHandler,\n    photoTouchHandler: photoTouchHandler,\n    abuseHandler: abuseHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }));\n};\n\nexports.PreviewConnectionController = PreviewConnectionController;\n\nvar styles = _reactNative.StyleSheet.create({\n  previewContainer: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: _colors.WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    paddingVertical: 10\n  }\n});","map":{"version":3,"names":["PreviewConnectionController","props","pendingConnectionId","moveToNext","dispatch","useDispatch","api","useContext","NodeApiContext","pendingConnection","useSelector","state","selectPendingConnectionById","navigation","useNavigation","isReconnect","pendingConnectionData","existingConnection","pendingConnection_states","UNCONFIRMED","setLevelHandler","level","InteractionManager","runAfterInteractions","confirmPendingConnectionThunk","profileId","abuseHandler","sharedProfile","navigate","connectionId","id","connectionName","name","reporting","source","report_sources","RECONNECT","PREVIEW","successCallback","reason","connection_levels","REPORTED","photoTouchHandler","photo","base64","console","log","styles","previewContainer","StyleSheet","create","flex","width","backgroundColor","WHITE","alignItems","justifyContent","flexDirection","paddingVertical"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PreviewConnectionController.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { InteractionManager, StyleSheet, View } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { WHITE } from '@/theme/colors';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { confirmPendingConnectionThunk } from './actions/pendingConnectionThunks';\nimport {\n  pendingConnection_states,\n  selectPendingConnectionById,\n  updatePendingConnection,\n} from './pendingConnectionSlice';\nimport { ReconnectView } from './ReconnectView';\nimport { PreviewConnectionView } from './PreviewConnectionView';\nimport { connection_levels, report_sources } from '@/utils/constants';\n\ntype PreviewConnectionProps = {\n  pendingConnectionId: string;\n  moveToNext: () => void;\n};\n\nexport const PreviewConnectionController = (props: PreviewConnectionProps) => {\n  const { pendingConnectionId, moveToNext } = props;\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n  const pendingConnection = useSelector((state: State) =>\n    selectPendingConnectionById(state, pendingConnectionId),\n  ) as PendingConnection;\n\n  const navigation = useNavigation();\n\n  if (!pendingConnection) {\n    // pending connection has vanished. Most likely channel expired.\n    // Just return null, parent components will take care of moving to a different screen.\n    return null;\n  }\n\n  let isReconnect =\n    !!pendingConnection.pendingConnectionData.existingConnection;\n  if (pendingConnection.state !== pendingConnection_states.UNCONFIRMED) {\n    // Don't display reconnect screen for connections that have just been confirmed\n    isReconnect = false;\n  }\n\n  const setLevelHandler = (level: ConnectionLevel) => {\n    // navigates to next view in the viewpager\n    moveToNext();\n    // wait until after finishes navigation before dispatching confirm action\n    InteractionManager.runAfterInteractions(() => {\n      dispatch(\n        confirmPendingConnectionThunk(pendingConnection.profileId, level, api),\n      );\n    });\n  };\n\n  const abuseHandler = async () => {\n    const { sharedProfile } = pendingConnection.pendingConnectionData;\n    navigation.navigate('ReportReason', {\n      connectionId: sharedProfile.id,\n      connectionName: sharedProfile.name,\n      reporting: true,\n      source: isReconnect ? report_sources.RECONNECT : report_sources.PREVIEW,\n      successCallback: (reason) => {\n        dispatch(\n          confirmPendingConnectionThunk(\n            pendingConnection.profileId,\n            connection_levels.REPORTED,\n            api,\n            reason\n          ),\n        );\n      },\n    });\n  };\n\n  const photoTouchHandler = () => {\n    navigation.navigate('FullScreenPhoto', {\n      photo: pendingConnection.pendingConnectionData.sharedProfile.photo,\n      base64: true,\n    });\n  };\n\n  console.log(\n    `rendering ${pendingConnection.pendingConnectionData.sharedProfile.name}`,\n  );\n  return (\n    <View style={styles.previewContainer}>\n      {isReconnect ? (\n        <ReconnectView\n          pendingConnection={pendingConnection}\n          existingConnection={\n            pendingConnection.pendingConnectionData.existingConnection\n          }\n          setLevelHandler={setLevelHandler}\n          abuseHandler={abuseHandler}\n        />\n      ) : (\n        <PreviewConnectionView\n          pendingConnection={pendingConnection}\n          setLevelHandler={setLevelHandler}\n          photoTouchHandler={photoTouchHandler}\n          abuseHandler={abuseHandler}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  previewContainer: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    paddingVertical: 10,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}