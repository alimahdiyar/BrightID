{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerItemList;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _DrawerItem = _interopRequireDefault(require(\"./DrawerItem\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeTintColor = _ref.activeTintColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle;\n  var buildLink = (0, _native.useLinkBuilder)();\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon;\n    return React.createElement(_DrawerItem.default, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      labelStyle: labelStyle,\n      style: itemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: function onPress() {\n        navigation.dispatch((0, _extends2.default)({}, focused ? _native.DrawerActions.closeDrawer() : _native.CommonActions.navigate(route.name), {\n          target: state.key\n        }));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["labelStyle","buildLink","focused","i","state","drawerIcon","descriptors","route","drawerLabel","title","navigation","DrawerActions","CommonActions","target","key"],"mappings":";;;;;;;;;AAAA;;AACA;;AAOA;;;;;;AAgBe,SAAA,cAAA,OAUL;EAAA,IAV6B,KAU7B,QAV6B,KAU7B;EAAA,IAV6B,UAU7B,QAV6B,UAU7B;EAAA,IAV6B,WAU7B,QAV6B,WAU7B;EAAA,IAV6B,eAU7B,QAV6B,eAU7B;EAAA,IAV6B,iBAU7B,QAV6B,iBAU7B;EAAA,IAV6B,qBAU7B,QAV6B,qBAU7B;EAAA,IAV6B,uBAU7B,QAV6B,uBAU7B;EAAA,IAV6B,SAU7B,QAV6B,SAU7B;EAAA,IADRA,UACQ,QADRA,UACQ;EACR,IAAMC,SAAS,GAAf,IAAA,sBAAA,GAAA;EAEA,OAAQ,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;IACrC,IAAMC,OAAO,GAAGC,CAAC,KAAKC,KAAK,CAA3B,KAAA;IACA,4BAA2CE,WAAW,CAACC,KAAK,CAAjBD,GAAW,CAAXA,CAA3C,OAAA;IAAA,IAAM,KAAN,yBAAM,KAAN;IAAA,IAAM,WAAN,yBAAM,WAAN;IAAA,IAA4BD,UAA5B,yBAA4BA,UAA5B;IAEA,OACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;MACE,GAAG,EAAEE,KAAK,CADZ,GAAA;MAEE,KAAK,EACHC,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEIC,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAF,KAAK,CAPb,IAAA;MASE,IAAI,EATN,UAAA;MAUE,OAAO,EAVT,OAAA;MAWE,eAAe,EAXjB,eAAA;MAYE,iBAAiB,EAZnB,iBAAA;MAaE,qBAAqB,EAbvB,qBAAA;MAcE,uBAAuB,EAdzB,uBAAA;MAeE,UAAU,EAfZ,UAAA;MAgBE,KAAK,EAhBP,SAAA;MAiBE,EAAE,EAAEN,SAAS,CAACM,KAAK,CAAN,IAAA,EAAaA,KAAK,CAjBjC,MAiBe,CAjBf;MAkBE,OAAO,EAAE,mBAAM;QACbG,UAAU,CAAVA,QAAAA,4BACMR,OAAO,GACPS,qBAAAA,CADO,WACPA,EADO,GAEPC,qBAAAA,CAAAA,QAAAA,CAAuBL,KAAK,CAHd,IAGdK,CAHNF;UAIEG,MAAM,EAAET,KAAK,CAACU;QAJhBJ;MAMD;IAzBH,CAAA,CADF;EAJF,CAAQ,CAAR;AAkCD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport type {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"script"}