{"ast":null,"code":"'use strict';\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-dropdownalert/node_modules/fbjs/lib/invariant.js"],"names":["validateFormat","process","format","error","args","argIndex","module"],"mappings":"AAQA;;AAaA,IAAIA,cAAc,GAAG,SAAA,cAAA,CAAA,MAAA,EAAgC,CAArD,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;EACzCD,cAAc,GAAG,SAAA,cAAA,CAAA,MAAA,EAAgC;IAC/C,IAAIE,MAAM,KAAV,SAAA,EAA0B;MACxB,MAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;IAEH;EAJDF,CAAAA;AAOF;;AAAA,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwD;EACtDA,cAAc,CAAdA,MAAc,CAAdA;;EAEA,IAAI,CAAJ,SAAA,EAAgB;IACd,IAAA,KAAA;;IACA,IAAIE,MAAM,KAAV,SAAA,EAA0B;MACxBC,KAAK,GAAG,IAAA,KAAA,CAAU,uEAAlBA,6DAAQ,CAARA;IADF,CAAA,MAEO;MACL,IAAIC,IAAI,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAX,CAAW,CAAX;MACA,IAAIC,QAAQ,GAAZ,CAAA;MACAF,KAAK,GAAG,IAAA,KAAA,CAAUD,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAsB,YAAY;QAClD,OAAOE,IAAI,CAACC,QAAZ,EAAW,CAAX;MADFF,CAAkBD,CAAV,CAARC;MAGAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;IAGFA;;IAAAA,KAAK,CAALA,WAAAA,GAAAA,CAAAA;IACA,MAAA,KAAA;EAEH;AAEDG;;AAAAA,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"]},"metadata":{},"sourceType":"script"}