{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport i18next from 'i18next';\nimport { b64ToUrlSafeB64, hash, urlSafeRandomKey } from \"./encoding\";\nimport { CHANNEL_TTL, CHANNEL_INFO_NAME, MIN_CHANNEL_INFO_VERSION, CHANNEL_INFO_VERSION_1, CHANNEL_INFO_VERSION_2, MAX_CHANNEL_INFO_VERSION } from \"./constants\";\nimport { channel_states, channel_types } from \"../components/PendingConnections/channelSlice\";\nimport ChannelAPI from \"../api/channelService\";\nimport { encryptData } from \"./cryptoHelper\";\nimport { retrieveImage } from \"./filesystem\";\nexport var generateChannelData = function _callee(channelType, url) {\n  var aesKey, id, timestamp, ttl, myProfileId, initiatorProfileId, type, state, channelApi;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(16));\n\n        case 2:\n          aesKey = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n        case 5:\n          id = _context.sent;\n          timestamp = Date.now();\n          ttl = CHANNEL_TTL;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n        case 10:\n          myProfileId = _context.sent;\n          initiatorProfileId = myProfileId;\n          type = channelType;\n          state = channel_states.OPEN;\n          channelApi = new ChannelAPI(url.href);\n          return _context.abrupt(\"return\", {\n            aesKey: aesKey,\n            api: channelApi,\n            id: id,\n            initiatorProfileId: initiatorProfileId,\n            myProfileId: myProfileId,\n            state: state,\n            timestamp: timestamp,\n            ttl: ttl,\n            type: type,\n            url: url\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createChannelInfo = function createChannelInfo(channel) {\n  var version;\n\n  switch (channel.type) {\n    case channel_types.SINGLE:\n    case channel_types.GROUP:\n      version = CHANNEL_INFO_VERSION_1;\n      break;\n\n    case channel_types.STAR:\n      version = CHANNEL_INFO_VERSION_2;\n      break;\n\n    default:\n      throw new Error(\"Unhandled channel type \" + channel.type);\n  }\n\n  var obj = {\n    version: version,\n    type: channel.type,\n    timestamp: channel.timestamp,\n    ttl: channel.ttl,\n    initiatorProfileId: channel.initiatorProfileId\n  };\n  return obj;\n};\nexport var buildChannelQrUrl = function buildChannelQrUrl(_ref) {\n  var aesKey = _ref.aesKey,\n      id = _ref.id,\n      url = _ref.url;\n  var qrUrl = new URL(url.href);\n  qrUrl.searchParams.append('aes', aesKey);\n  qrUrl.searchParams.append('id', id);\n  return qrUrl;\n};\nexport var parseChannelQrURL = function _callee2(url) {\n  var aesKey, id, channelApi, channelInfo, msg, _msg, myProfileId, channel;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          aesKey = url.searchParams.get('aes');\n          url.searchParams.delete('aes');\n          id = url.searchParams.get('id');\n          url.searchParams.delete('id');\n          channelApi = new ChannelAPI(url.href);\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(channelApi.download({\n            channelId: id,\n            dataId: CHANNEL_INFO_NAME\n          }));\n\n        case 7:\n          channelInfo = _context2.sent;\n          console.log(\"Got ChannelInfo:\");\n          console.log(channelInfo);\n\n          if (!(channelInfo.version > MAX_CHANNEL_INFO_VERSION)) {\n            _context2.next = 15;\n            break;\n          }\n\n          msg = i18next.t('channel.alert.text.localOutdated', 'client version outdated - please update your client and retry');\n          throw new Error(msg);\n\n        case 15:\n          if (!(channelInfo.version < MIN_CHANNEL_INFO_VERSION)) {\n            _context2.next = 18;\n            break;\n          }\n\n          _msg = i18next.t('channel.alert.text.otherOutdated', 'other client version outdated - QRCode creator needs to update client and retry');\n          throw new Error(_msg);\n\n        case 18:\n          _context2.next = 20;\n          return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n        case 20:\n          myProfileId = _context2.sent;\n          channel = {\n            aesKey: aesKey,\n            api: channelApi,\n            id: id,\n            initiatorProfileId: channelInfo.initiatorProfileId,\n            myProfileId: myProfileId,\n            state: channel_states.OPEN,\n            timestamp: channelInfo.timestamp,\n            ttl: channelInfo.ttl,\n            type: channelInfo.type,\n            url: url\n          };\n          return _context2.abrupt(\"return\", channel);\n\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var uploadConnection = function _callee3(_ref2) {\n  var conn, channelApi, aesKey, signingKey, id, name, photo, timestamp, socialMedia, photoString, dataObj, encrypted;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          conn = _ref2.conn, channelApi = _ref2.channelApi, aesKey = _ref2.aesKey, signingKey = _ref2.signingKey;\n          _context3.prev = 1;\n          id = conn.id, name = conn.name, photo = conn.photo, timestamp = conn.timestamp, socialMedia = conn.socialMedia;\n          photoString = '';\n\n          if (name) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 6:\n          if (!(photo != null && photo.filename)) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(retrieveImage(photo.filename));\n\n        case 9:\n          photoString = _context3.sent;\n\n        case 10:\n          dataObj = {\n            id: id,\n            photo: photoString,\n            name: name,\n            timestamp: timestamp,\n            socialMedia: socialMedia\n          };\n          encrypted = encryptData(dataObj, aesKey);\n          console.log(\"Posting profile data of \" + id + \" ...\");\n          _context3.next = 15;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: \"connection_\" + id + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 15:\n          _context3.next = 20;\n          break;\n\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.error(\"uploadConnection: \" + _context3.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 17]], Promise);\n};\nexport var uploadGroup = function _callee4(_ref3) {\n  var group, channelApi, aesKey, signingKey, id, name, photo, groupKey, members, admins, photoString, dataObj, encrypted;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          group = _ref3.group, channelApi = _ref3.channelApi, aesKey = _ref3.aesKey, signingKey = _ref3.signingKey;\n          _context4.prev = 1;\n          id = group.id, name = group.name, photo = group.photo, groupKey = group.aesKey, members = group.members, admins = group.admins;\n          photoString = '';\n\n          if (groupKey) {\n            _context4.next = 6;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 6:\n          if (!(photo != null && photo.filename)) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(retrieveImage(photo.filename));\n\n        case 9:\n          photoString = _context4.sent;\n\n        case 10:\n          dataObj = {\n            id: id,\n            photo: photoString,\n            name: name,\n            aesKey: groupKey,\n            members: members,\n            admins: admins\n          };\n          encrypted = encryptData(dataObj, aesKey);\n          console.log(\"Posting group data of \" + id + \" ...\");\n          _context4.next = 15;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: \"group_\" + id + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 15:\n          _context4.next = 20;\n          break;\n\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.error(\"uploadGroup: \" + _context4.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 17]], Promise);\n};\nexport var uploadBlindSig = function _callee5(_ref4) {\n  var sig, channelApi, aesKey, signingKey, prefix, encrypted;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          sig = _ref4.sig, channelApi = _ref4.channelApi, aesKey = _ref4.aesKey, signingKey = _ref4.signingKey, prefix = _ref4.prefix;\n          _context5.prev = 1;\n          encrypted = encryptData(sig, aesKey);\n          console.log(\"Posting blind sig for app: \" + sig.app + \" verification: \" + sig.verification + \" ...\");\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: prefix + \"blindsig_\" + hash(sig.uid) + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.error(\"uploadBlindSig: \" + _context5.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\nexport var uploadContextInfo = function _callee6(_ref5) {\n  var contextInfo, channelApi, aesKey, signingKey, prefix, encrypted;\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          contextInfo = _ref5.contextInfo, channelApi = _ref5.channelApi, aesKey = _ref5.aesKey, signingKey = _ref5.signingKey, prefix = _ref5.prefix;\n          _context6.prev = 1;\n          encrypted = encryptData(contextInfo, aesKey);\n          console.log(\"Posting ContextInfo: \" + contextInfo.context + \" - \" + contextInfo.contextId + \"...\");\n          _context6.next = 6;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: hash(aesKey),\n            data: encrypted,\n            dataId: prefix + \"contextInfo_\" + hash(contextInfo.context) + \":\" + b64ToUrlSafeB64(signingKey)\n          }));\n\n        case 6:\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.error(\"uploadContextInfo: \" + _context6.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/channels.ts"],"names":["generateChannelData","aesKey","urlSafeRandomKey","id","timestamp","Date","ttl","myProfileId","initiatorProfileId","type","state","channel_states","channelApi","url","api","createChannelInfo","channel","channel_types","version","obj","buildChannelQrUrl","qrUrl","parseChannelQrURL","channelInfo","channelId","dataId","console","msg","i18next","uploadConnection","conn","signingKey","name","photo","socialMedia","photoString","retrieveImage","dataObj","encrypted","encryptData","hash","data","b64ToUrlSafeB64","uploadGroup","group","groupKey","members","admins","uploadBlindSig","sig","prefix","uploadContextInfo","contextInfo"],"mappings":"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","sourcesContent":["import i18next from 'i18next';\nimport { b64ToUrlSafeB64, hash, urlSafeRandomKey } from '@/utils/encoding';\nimport {\n  CHANNEL_TTL,\n  CHANNEL_INFO_NAME,\n  MIN_CHANNEL_INFO_VERSION,\n  CHANNEL_INFO_VERSION_1,\n  CHANNEL_INFO_VERSION_2,\n  MAX_CHANNEL_INFO_VERSION,\n} from '@/utils/constants';\nimport {\n  channel_states,\n  channel_types,\n} from '@/components/PendingConnections/channelSlice';\nimport ChannelAPI from '@/api/channelService';\nimport { encryptData } from '@/utils/cryptoHelper';\nimport { retrieveImage } from '@/utils/filesystem';\n\nexport const generateChannelData = async (\n  channelType: ChannelType,\n  url: URL,\n): Promise<Channel> => {\n  const aesKey = await urlSafeRandomKey(16);\n  const id = await urlSafeRandomKey(9);\n  const timestamp = Date.now();\n  const ttl = CHANNEL_TTL;\n  const myProfileId = await urlSafeRandomKey(9);\n  const initiatorProfileId = myProfileId;\n  const type = channelType;\n  const state = channel_states.OPEN;\n  const channelApi = new ChannelAPI(url.href);\n\n  return {\n    aesKey,\n    api: channelApi,\n    id,\n    initiatorProfileId,\n    myProfileId,\n    state,\n    timestamp,\n    ttl,\n    type,\n    url,\n  };\n};\n\nexport const createChannelInfo = (channel: Channel) => {\n  /*\n    Channel types \"SINGLE\" and \"GROUP\" are compatible with CHANNEL_INFO_VERSION 1.\n    Channel type \"STAR\" requires CHANNEL_INFO_VERSION 2\n   */\n  let version;\n  switch (channel.type) {\n    case channel_types.SINGLE:\n    case channel_types.GROUP:\n      version = CHANNEL_INFO_VERSION_1;\n      break;\n    case channel_types.STAR:\n      version = CHANNEL_INFO_VERSION_2;\n      break;\n    default:\n      throw new Error(`Unhandled channel type ${channel.type}`);\n  }\n  const obj: ChannelInfo = {\n    version,\n    type: channel.type,\n    timestamp: channel.timestamp,\n    ttl: channel.ttl,\n    initiatorProfileId: channel.initiatorProfileId,\n  };\n  return obj;\n};\n\nexport const buildChannelQrUrl = ({ aesKey, id, url }: Channel) => {\n  const qrUrl = new URL(url.href);\n  qrUrl.searchParams.append('aes', aesKey);\n  qrUrl.searchParams.append('id', id);\n  return qrUrl;\n};\n\nexport const parseChannelQrURL = async (url: URL) => {\n  // parse and remove aesKey from URL\n  const aesKey = url.searchParams.get('aes');\n  url.searchParams.delete('aes');\n  // parse and remove channelID from URL\n  const id = url.searchParams.get('id');\n  url.searchParams.delete('id');\n\n  // create channelAPI\n  const channelApi = new ChannelAPI(url.href);\n  // download channelInfo\n  const channelInfo = await channelApi.download({\n    channelId: id,\n    dataId: CHANNEL_INFO_NAME,\n  });\n  console.log(`Got ChannelInfo:`);\n  console.log(channelInfo);\n\n  if (channelInfo.version > MAX_CHANNEL_INFO_VERSION) {\n    const msg = i18next.t(\n      'channel.alert.text.localOutdated',\n      'client version outdated - please update your client and retry',\n    );\n    throw new Error(msg);\n  } else if (channelInfo.version < MIN_CHANNEL_INFO_VERSION) {\n    const msg = i18next.t(\n      'channel.alert.text.otherOutdated',\n      'other client version outdated - QRCode creator needs to update client and retry',\n    );\n    throw new Error(msg);\n  }\n\n  const myProfileId = await urlSafeRandomKey(9);\n\n  const channel: Channel = {\n    aesKey,\n    api: channelApi,\n    id,\n    initiatorProfileId: channelInfo.initiatorProfileId,\n    myProfileId,\n    state: channel_states.OPEN,\n    timestamp: channelInfo.timestamp,\n    ttl: channelInfo.ttl,\n    type: channelInfo.type,\n    url,\n  };\n  return channel;\n};\n\nexport const uploadConnection = async ({\n  conn,\n  channelApi,\n  aesKey,\n  signingKey,\n}: {\n  conn: Connection;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n}) => {\n  try {\n    const { id, name, photo, timestamp, socialMedia } = conn;\n    let photoString = '';\n\n    if (!name) {\n      return;\n    }\n\n    // retrieve photo\n    if (photo?.filename) {\n      photoString = await retrieveImage(photo.filename);\n    }\n\n    const dataObj: SyncConnection = {\n      id,\n      photo: photoString,\n      name,\n      timestamp,\n      socialMedia,\n    };\n\n    const encrypted = encryptData(dataObj, aesKey);\n    console.log(`Posting profile data of ${id} ...`);\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      dataId: `connection_${id}:${b64ToUrlSafeB64(signingKey)}`,\n    });\n  } catch (err) {\n    console.error(`uploadConnection: ${err.message}`);\n  }\n};\n\nexport const uploadGroup = async ({\n  group,\n  channelApi,\n  aesKey,\n  signingKey,\n}: {\n  group: {\n    id: string;\n    name?: string;\n    photo?: Photo;\n    aesKey?: string;\n    members: Array<string>;\n    admins: Array<string>;\n  };\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n}) => {\n  try {\n    const { id, name, photo, aesKey: groupKey, members, admins } = group;\n    let photoString = '';\n    if (!groupKey) {\n      // not worth uploading group data is missing\n      return;\n    }\n    // retrieve photo\n    if (photo?.filename) {\n      photoString = await retrieveImage(photo.filename);\n    }\n\n    const dataObj = {\n      id,\n      photo: photoString,\n      name,\n      aesKey: groupKey,\n      members,\n      admins,\n    };\n\n    const encrypted = encryptData(dataObj, aesKey);\n    console.log(`Posting group data of ${id} ...`);\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      dataId: `group_${id}:${b64ToUrlSafeB64(signingKey)}`,\n    });\n  } catch (err) {\n    console.error(`uploadGroup: ${err.message}`);\n  }\n};\n\nexport const uploadBlindSig = async ({\n  sig,\n  channelApi,\n  aesKey,\n  signingKey,\n  prefix,\n}: {\n  sig: SigInfo;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n  prefix: string;\n}) => {\n  try {\n    const encrypted = encryptData(sig, aesKey);\n    console.log(\n      `Posting blind sig for app: ${sig.app} verification: ${sig.verification} ...`,\n    );\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      // use hash of sig.uid to avoid revealing it\n      dataId: `${prefix}blindsig_${hash(sig.uid)}:${b64ToUrlSafeB64(\n        signingKey,\n      )}`,\n    });\n  } catch (err) {\n    console.error(`uploadBlindSig: ${err.message}`);\n  }\n};\n\nexport const uploadContextInfo = async ({\n  contextInfo,\n  channelApi,\n  aesKey,\n  signingKey,\n  prefix,\n}: {\n  contextInfo: ContextInfo;\n  channelApi: ChannelAPI;\n  aesKey: string;\n  signingKey: string;\n  prefix: string;\n}) => {\n  try {\n    const encrypted = encryptData(contextInfo, aesKey);\n    console.log(\n      `Posting ContextInfo: ${contextInfo.context} - ${contextInfo.contextId}...`,\n    );\n    await channelApi.upload({\n      channelId: hash(aesKey),\n      data: encrypted,\n      dataId: `${prefix}contextInfo_${hash(\n        contextInfo.context,\n      )}:${b64ToUrlSafeB64(signingKey)}`,\n    });\n  } catch (err) {\n    console.error(`uploadContextInfo: ${err.message}`);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}