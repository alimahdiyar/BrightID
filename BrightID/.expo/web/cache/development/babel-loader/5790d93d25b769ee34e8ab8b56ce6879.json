{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\nimport { RESET_STORE } from \"../actions/resetStore\";\nvar devicesAdapter = createEntityAdapter({\n  selectId: function selectId(device) {\n    return device.signingKey;\n  }\n});\nvar devicesSlice = createSlice({\n  name: 'devices',\n  initialState: devicesAdapter.getInitialState(),\n  reducers: {\n    addDevice: devicesAdapter.upsertOne,\n    removeDevice: devicesAdapter.removeOne,\n    setActiveDevices: function setActiveDevices(state, action) {\n      console.log('updating devices based on server state');\n      devicesAdapter.updateMany(state, state.ids.map(function (signingKey) {\n        var active = action.payload.indexOf(signingKey) > -1;\n        return {\n          id: signingKey,\n          changes: {\n            active: active\n          }\n        };\n      }));\n      var newDevices = action.payload.filter(function (id) {\n        return !state.ids.includes(id);\n      });\n      devicesAdapter.addMany(state, newDevices.map(function (signingKey) {\n        return {\n          signingKey: signingKey,\n          active: true,\n          name: 'Unknown'\n        };\n      }));\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return devicesAdapter.getInitialState();\n  })\n});\nvar _devicesSlice$actions = devicesSlice.actions,\n    addDevice = _devicesSlice$actions.addDevice,\n    removeDevice = _devicesSlice$actions.removeDevice,\n    setActiveDevices = _devicesSlice$actions.setActiveDevices;\nexport { addDevice, removeDevice, setActiveDevices };\n\nvar _devicesAdapter$getSe = devicesAdapter.getSelectors(function (state) {\n  return state.devices;\n}),\n    selectAllDevices = _devicesAdapter$getSe.selectAll;\n\nexport { selectAllDevices };\nexport var selectActiveDevices = createSelector(selectAllDevices, function (devices) {\n  return devices.filter(function (d) {\n    return d == null ? void 0 : d.active;\n  });\n});\nexport default devicesSlice.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","createSelector","RESET_STORE","devicesAdapter","selectId","device","signingKey","devicesSlice","name","initialState","getInitialState","reducers","addDevice","upsertOne","removeDevice","removeOne","setActiveDevices","state","action","console","log","updateMany","ids","map","active","payload","indexOf","id","changes","newDevices","filter","includes","addMany","extraReducers","actions","getSelectors","devices","selectAllDevices","selectAll","selectActiveDevices","d","reducer"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/devicesSlice.ts"],"sourcesContent":["import {\n  createSlice,\n  PayloadAction,\n  createEntityAdapter,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\n\nconst devicesAdapter = createEntityAdapter<Device>({\n  selectId: (device) => device.signingKey,\n});\n\nconst devicesSlice = createSlice({\n  name: 'devices',\n  initialState: devicesAdapter.getInitialState(),\n  reducers: {\n    addDevice: devicesAdapter.upsertOne,\n    removeDevice: devicesAdapter.removeOne,\n    setActiveDevices: (state, action: PayloadAction<string[]>) => {\n      console.log('updating devices based on server state');\n      // update existing devices\n      devicesAdapter.updateMany(\n        state,\n        state.ids.map((signingKey: string) => {\n          const active = action.payload.indexOf(signingKey) > -1;\n          return { id: signingKey, changes: { active } };\n        }),\n      );\n      // add new devices\n      const newDevices = action.payload.filter((id) => !state.ids.includes(id));\n      devicesAdapter.addMany(\n        state,\n        newDevices.map((signingKey) => {\n          return { signingKey, active: true, name: 'Unknown' };\n        }),\n      );\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return devicesAdapter.getInitialState();\n    },\n  },\n});\n\n// Export channel actions\nexport const { addDevice, removeDevice, setActiveDevices } =\n  devicesSlice.actions;\n\n// export selectors\nexport const { selectAll: selectAllDevices } = devicesAdapter.getSelectors(\n  (state: State) => state.devices,\n);\n\nexport const selectActiveDevices = createSelector(\n  selectAllDevices,\n  (devices) => {\n    return devices.filter((d) => d?.active);\n  },\n);\n\n// Export reducer\nexport default devicesSlice.reducer;\n"],"mappings":";AAAA,SACEA,WADF,EAGEC,mBAHF,EAIEC,cAJF,QAKO,kBALP;AAMA,SAASC,WAAT;AAEA,IAAMC,cAAc,GAAGH,mBAAmB,CAAS;EACjDI,QAAQ,EAAE,kBAACC,MAAD;IAAA,OAAYA,MAAM,CAACC,UAAnB;EAAA;AADuC,CAAT,CAA1C;AAIA,IAAMC,YAAY,GAAGR,WAAW,CAAC;EAC/BS,IAAI,EAAE,SADyB;EAE/BC,YAAY,EAAEN,cAAc,CAACO,eAAf,EAFiB;EAG/BC,QAAQ,EAAE;IACRC,SAAS,EAAET,cAAc,CAACU,SADlB;IAERC,YAAY,EAAEX,cAAc,CAACY,SAFrB;IAGRC,gBAAgB,EAAE,0BAACC,KAAD,EAAQC,MAAR,EAA4C;MAC5DC,OAAO,CAACC,GAAR,CAAY,wCAAZ;MAEAjB,cAAc,CAACkB,UAAf,CACEJ,KADF,EAEEA,KAAK,CAACK,GAAN,CAAUC,GAAV,CAAc,UAACjB,UAAD,EAAwB;QACpC,IAAMkB,MAAM,GAAGN,MAAM,CAACO,OAAP,CAAeC,OAAf,CAAuBpB,UAAvB,IAAqC,CAAC,CAArD;QACA,OAAO;UAAEqB,EAAE,EAAErB,UAAN;UAAkBsB,OAAO,EAAE;YAAEJ,MAAM,EAANA;UAAF;QAA3B,CAAP;MACD,CAHD,CAFF;MAQA,IAAMK,UAAU,GAAGX,MAAM,CAACO,OAAP,CAAeK,MAAf,CAAsB,UAACH,EAAD;QAAA,OAAQ,CAACV,KAAK,CAACK,GAAN,CAAUS,QAAV,CAAmBJ,EAAnB,CAAT;MAAA,CAAtB,CAAnB;MACAxB,cAAc,CAAC6B,OAAf,CACEf,KADF,EAEEY,UAAU,CAACN,GAAX,CAAe,UAACjB,UAAD,EAAgB;QAC7B,OAAO;UAAEA,UAAU,EAAVA,UAAF;UAAckB,MAAM,EAAE,IAAtB;UAA4BhB,IAAI,EAAE;QAAlC,CAAP;MACD,CAFD,CAFF;IAMD;EArBO,CAHqB;EA0B/ByB,aAAa,sBACV/B,WADU,EACI,YAAM;IACnB,OAAOC,cAAc,CAACO,eAAf,EAAP;EACD,CAHU;AA1BkB,CAAD,CAAhC;AAkCO,4BACLH,YAAY,CAAC2B,OADR;AAAA,IAAQtB,SAAR,yBAAQA,SAAR;AAAA,IAAmBE,YAAnB,yBAAmBA,YAAnB;AAAA,IAAiCE,gBAAjC,yBAAiCA,gBAAjC;;;AAIA,4BAAwCb,cAAc,CAACgC,YAAf,CAC7C,UAAClB,KAAD;EAAA,OAAkBA,KAAK,CAACmB,OAAxB;AAAA,CAD6C,CAAxC;AAAA,IAAmBC,gBAAnB,yBAAQC,SAAR;;;AAIP,OAAO,IAAMC,mBAAmB,GAAGtC,cAAc,CAC/CoC,gBAD+C,EAE/C,UAACD,OAAD,EAAa;EACX,OAAOA,OAAO,CAACN,MAAR,CAAe,UAACU,CAAD;IAAA,OAAOA,CAAP,oBAAOA,CAAC,CAAEhB,MAAV;EAAA,CAAf,CAAP;AACD,CAJ8C,CAA1C;AAQP,eAAejB,YAAY,CAACkC,OAA5B"},"metadata":{},"sourceType":"module"}