{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { uInt8ArrayToB64 } from \"../../../utils/encoding\";\nimport { RecoveryErrorType } from \"./RecoveryError\";\nimport { RECOVERY_CHANNEL_TTL } from \"../../../utils/constants\";\nimport { RESET_STORE } from \"../../../actions\";\nexport var initialState = {\n  publicKey: '',\n  secretKey: new Uint8Array(),\n  aesKey: '',\n  errorMessage: '',\n  errorType: RecoveryErrorType.NONE,\n  id: '',\n  name: '',\n  photo: {\n    filename: ''\n  },\n  timestamp: 0,\n  sigs: {},\n  uploadCompletedBy: {},\n  qrcode: '',\n  recoveredConnections: 0,\n  recoveredGroups: 0,\n  recoveredBlindSigs: 0,\n  channel: {\n    channelId: '',\n    url: null,\n    expires: 0\n  }\n};\nvar recoveryData = createSlice({\n  name: 'recoveryData',\n  initialState: initialState,\n  reducers: {\n    init: function init(state, action) {\n      var _action$payload = action.payload,\n          publicKey = _action$payload.publicKey,\n          secretKey = _action$payload.secretKey,\n          aesKey = _action$payload.aesKey;\n      state.publicKey = uInt8ArrayToB64(publicKey != null ? publicKey : new Uint8Array());\n      state.secretKey = secretKey;\n      state.aesKey = aesKey;\n      state.timestamp = Date.now();\n      state.errorMessage = '';\n      state.errorType = RecoveryErrorType.NONE;\n      state.id = '';\n      state.name = '';\n      state.photo = {\n        filename: ''\n      };\n      state.recoveredConnections = 0;\n      state.recoveredGroups = 0;\n      state.recoveredBlindSigs = 0;\n      state.sigs = {};\n      state.uploadCompletedBy = {};\n    },\n    setRecoveryAesKey: function setRecoveryAesKey(state, action) {\n      state.aesKey = action.payload;\n    },\n    setRecoveryChannel: function setRecoveryChannel(state, action) {\n      var _action$payload2 = action.payload,\n          channelId = _action$payload2.channelId,\n          url = _action$payload2.url;\n      state.channel.channelId = channelId;\n      state.channel.url = url;\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    resetChannelExpiration: function resetChannelExpiration(state) {\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    setSig: function setSig(state, action) {\n      var _action$payload3 = action.payload,\n          signer = _action$payload3.signer,\n          sig = _action$payload3.sig;\n\n      var _original = original(state),\n          id = _original.id;\n\n      if (sig.id !== id) {\n        state.sigs = _defineProperty({}, signer, sig);\n        state.id = sig.id;\n        state.name = '';\n        state.photo = {\n          filename: ''\n        };\n      } else {\n        state.sigs[signer] = sig;\n      }\n    },\n    updateNamePhoto: function updateNamePhoto(state, action) {\n      var _action$payload4 = action.payload,\n          name = _action$payload4.name,\n          photo = _action$payload4.photo;\n      state.name = name;\n      state.photo = photo;\n    },\n    resetRecoverySigs: function resetRecoverySigs(state) {\n      state.sigs = {};\n    },\n    resetRecoveryData: function resetRecoveryData() {\n      return initialState;\n    },\n    setRecoveryError: function setRecoveryError(state, _ref) {\n      var payload = _ref.payload;\n      state.errorType = payload.errorType;\n      state.errorMessage = payload.errorMessage;\n    },\n    increaseRecoveredConnections: function increaseRecoveredConnections(state, action) {\n      state.recoveredConnections += action.payload;\n    },\n    increaseRecoveredGroups: function increaseRecoveredGroups(state, action) {\n      state.recoveredGroups += action.payload;\n    },\n    increaseRecoveredBlindSigs: function increaseRecoveredBlindSigs(state, action) {\n      state.recoveredBlindSigs += action.payload;\n    },\n    setUploadCompletedBy: function setUploadCompletedBy(state, action) {\n      state.uploadCompletedBy[action.payload] = true;\n    },\n    setRecoveryId: function setRecoveryId(state, action) {\n      state.id = action.payload;\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return initialState;\n  })\n});\nexport var uploadCompletedByOtherSide = function uploadCompletedByOtherSide(state) {\n  return Object.keys(state.recoveryData.uploadCompletedBy).length > 0;\n};\nvar _recoveryData$actions = recoveryData.actions,\n    init = _recoveryData$actions.init,\n    increaseRecoveredConnections = _recoveryData$actions.increaseRecoveredConnections,\n    increaseRecoveredGroups = _recoveryData$actions.increaseRecoveredGroups,\n    increaseRecoveredBlindSigs = _recoveryData$actions.increaseRecoveredBlindSigs,\n    setRecoveryAesKey = _recoveryData$actions.setRecoveryAesKey,\n    setRecoveryChannel = _recoveryData$actions.setRecoveryChannel,\n    setSig = _recoveryData$actions.setSig,\n    updateNamePhoto = _recoveryData$actions.updateNamePhoto,\n    resetChannelExpiration = _recoveryData$actions.resetChannelExpiration,\n    resetRecoverySigs = _recoveryData$actions.resetRecoverySigs,\n    resetRecoveryData = _recoveryData$actions.resetRecoveryData,\n    setRecoveryError = _recoveryData$actions.setRecoveryError,\n    setUploadCompletedBy = _recoveryData$actions.setUploadCompletedBy,\n    setRecoveryId = _recoveryData$actions.setRecoveryId;\nexport { init, increaseRecoveredConnections, increaseRecoveredGroups, increaseRecoveredBlindSigs, setRecoveryAesKey, setRecoveryChannel, setSig, updateNamePhoto, resetChannelExpiration, resetRecoverySigs, resetRecoveryData, setRecoveryError, setUploadCompletedBy, setRecoveryId };\nexport default recoveryData.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/recoveryDataSlice.ts"],"names":["initialState","publicKey","secretKey","aesKey","errorMessage","errorType","RecoveryErrorType","id","name","photo","filename","timestamp","sigs","uploadCompletedBy","qrcode","recoveredConnections","recoveredGroups","recoveredBlindSigs","channel","channelId","url","expires","recoveryData","createSlice","reducers","init","action","state","uInt8ArrayToB64","Date","setRecoveryAesKey","setRecoveryChannel","resetChannelExpiration","setSig","signer","sig","original","updateNamePhoto","resetRecoverySigs","resetRecoveryData","setRecoveryError","payload","increaseRecoveredConnections","increaseRecoveredGroups","increaseRecoveredBlindSigs","setUploadCompletedBy","setRecoveryId","extraReducers","uploadCompletedByOtherSide","Object"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { uInt8ArrayToB64 } from '@/utils/encoding';\nimport { RecoveryErrorType } from '@/components/Onboarding/RecoveryFlow/RecoveryError';\nimport { RECOVERY_CHANNEL_TTL } from '@/utils/constants';\nimport { RESET_STORE } from '@/actions';\n\nexport const initialState: RecoveryData = {\n  publicKey: '',\n  secretKey: new Uint8Array(),\n  aesKey: '',\n  errorMessage: '',\n  errorType: RecoveryErrorType.NONE,\n  id: '',\n  name: '',\n  photo: {\n    filename: '',\n  },\n  timestamp: 0,\n  sigs: {},\n  uploadCompletedBy: {},\n  qrcode: '',\n  recoveredConnections: 0,\n  recoveredGroups: 0,\n  recoveredBlindSigs: 0,\n  channel: {\n    channelId: '',\n    url: null,\n    expires: 0,\n  },\n};\n\nconst recoveryData = createSlice({\n  name: 'recoveryData',\n  initialState,\n  reducers: {\n    init(\n      state,\n      action: PayloadAction<{\n        publicKey?: Uint8Array;\n        secretKey?: Uint8Array;\n        aesKey: string;\n      }>,\n    ) {\n      const { publicKey, secretKey, aesKey } = action.payload;\n      state.publicKey = uInt8ArrayToB64(publicKey ?? new Uint8Array());\n      state.secretKey = secretKey;\n      state.aesKey = aesKey;\n      state.timestamp = Date.now();\n      state.errorMessage = '';\n      state.errorType = RecoveryErrorType.NONE;\n      state.id = '';\n      state.name = '';\n      state.photo = {\n        filename: '',\n      };\n      state.recoveredConnections = 0;\n      state.recoveredGroups = 0;\n      state.recoveredBlindSigs = 0;\n      state.sigs = {};\n      state.uploadCompletedBy = {};\n    },\n    setRecoveryAesKey(state, action: PayloadAction<string>) {\n      state.aesKey = action.payload;\n    },\n    setRecoveryChannel(\n      state,\n      action: PayloadAction<{ channelId: string; url: URL }>,\n    ) {\n      const { channelId, url } = action.payload;\n      state.channel.channelId = channelId;\n      state.channel.url = url;\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    resetChannelExpiration(state) {\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    setSig(state, action: PayloadAction<{ sig: Signature; signer: string }>) {\n      const { signer, sig } = action.payload;\n      // access previous values from the reducer\n      const { id } = original(state);\n\n      if (sig.id !== id) {\n        state.sigs = { [signer]: sig };\n        state.id = sig.id;\n        // clear name and photo in case id changes\n        state.name = '';\n        state.photo = {\n          filename: '',\n        };\n      } else {\n        state.sigs[signer] = sig;\n      }\n    },\n    updateNamePhoto(\n      state,\n      action: PayloadAction<{ name: string; photo: Photo }>,\n    ) {\n      const { name, photo } = action.payload;\n      state.name = name;\n      state.photo = photo;\n    },\n    resetRecoverySigs(state) {\n      state.sigs = {};\n    },\n    resetRecoveryData() {\n      return initialState;\n    },\n    setRecoveryError(\n      state,\n      {\n        payload,\n      }: PayloadAction<{\n        errorType: RecoveryErrorType;\n        errorMessage?: string;\n      }>,\n    ) {\n      state.errorType = payload.errorType;\n      state.errorMessage = payload.errorMessage;\n    },\n    increaseRecoveredConnections(state, action: PayloadAction<number>) {\n      state.recoveredConnections += action.payload;\n    },\n    increaseRecoveredGroups(state, action: PayloadAction<number>) {\n      state.recoveredGroups += action.payload;\n    },\n    increaseRecoveredBlindSigs(state, action: PayloadAction<number>) {\n      state.recoveredBlindSigs += action.payload;\n    },\n    // used for import/sync\n    setUploadCompletedBy(state, action: PayloadAction<string>) {\n      state.uploadCompletedBy[action.payload] = true;\n    },\n    // used for import\n    setRecoveryId(state, action: PayloadAction<string>) {\n      state.id = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\nexport const uploadCompletedByOtherSide = (state) => {\n  return Object.keys(state.recoveryData.uploadCompletedBy).length > 0;\n};\n\n// Export channel actions\nexport const {\n  init,\n  increaseRecoveredConnections,\n  increaseRecoveredGroups,\n  increaseRecoveredBlindSigs,\n  setRecoveryAesKey,\n  setRecoveryChannel,\n  setSig,\n  updateNamePhoto,\n  resetChannelExpiration,\n  resetRecoverySigs,\n  resetRecoveryData,\n  setRecoveryError,\n  setUploadCompletedBy,\n  setRecoveryId,\n} = recoveryData.actions;\n\n// Export reducer\nexport default recoveryData.reducer;\n"]},"metadata":{},"sourceType":"module"}