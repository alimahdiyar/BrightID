{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ScanCodeScreen = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _reactNativeBarcodeMask = _interopRequireDefault(require(\"react-native-barcode-mask\"));\n\nvar _reactNativeSpinkit = _interopRequireDefault(require(\"react-native-spinkit\"));\n\nvar _MaterialCommunityIcons = _interopRequireDefault(require(\"react-native-vector-icons/MaterialCommunityIcons\"));\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _store = require(\"../../store\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _channelSlice = require(\"./channelSlice\");\n\nvar _pendingConnectionSlice = require(\"./pendingConnectionSlice\");\n\nvar _channels = require(\"../../utils/channels\");\n\nvar _channelThunks = require(\"./actions/channelThunks\");\n\nvar _actions = require(\"../../actions\");\n\nvar _encoding = require(\"../../utils/encoding\");\n\nvar _constants = require(\"../../utils/constants\");\n\nvar _NodeApiGate = require(\"../NodeApiGate\");\n\nvar _RNCameraProvider = require(\"./RNCameraProvider\");\n\nvar _recoveryDataSlice = require(\"../Onboarding/RecoveryFlow/recoveryDataSlice\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/ScanCodeScreen.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction validQrString(qrString) {\n  return qrString.length >= 42;\n}\n\nvar NotAuthorizedView = function NotAuthorizedView() {\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.cameraPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: {\n      fontFamily: 'Poppins-Medium',\n      color: _colors.GREY\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, \"Camera not Authorized\"));\n};\n\nvar ScanCodeScreen = function ScanCodeScreen() {\n  var route = (0, _native.useRoute)();\n  var navigation = (0, _native.useNavigation)();\n  var dispatch = (0, _store.useDispatch)();\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      channel = _useState2[0],\n      setChannel = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(undefined),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      qrData = _useState4[0],\n      setQrData = _useState4[1];\n\n  var name = (0, _store.useSelector)(function (state) {\n    return state.user.name;\n  });\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var api = (0, _react.useContext)(_NodeApiGate.NodeApiContext);\n  var pendingConnectionSizeForChannel = (0, _store.useSelector)(function (state) {\n    if (channel) {\n      return (0, _pendingConnectionSlice.selectAllUnconfirmedConnectionsByChannelIds)(state, [channel.id]).length;\n    } else {\n      return 0;\n    }\n  });\n  (0, _native.useFocusEffect)((0, _react.useCallback)(function () {\n    setQrData(undefined);\n    setChannel(null);\n    dispatch((0, _actions.setActiveNotification)(null));\n  }, [dispatch]));\n  (0, _react.useEffect)(function () {\n    if (channel && pendingConnectionSizeForChannel > 0 && navigation.isFocused()) {\n      switch (channel.type) {\n        case _channelSlice.channel_types.SINGLE:\n        case _channelSlice.channel_types.STAR:\n          navigation.navigate('PendingConnections');\n          dispatch((0, _channelSlice.closeChannel)({\n            channelId: channel.id,\n            background: true\n          }));\n          break;\n\n        case _channelSlice.channel_types.GROUP:\n          navigation.navigate('GroupConnection', {\n            channel: channel\n          });\n          break;\n      }\n    }\n  }, [channel, pendingConnectionSizeForChannel, navigation, dispatch]);\n  (0, _react.useEffect)(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.qrcode) {\n      console.log(\"Got qrcode \" + route.params.qrcode + \" from Deeplink\");\n      setQrData(decodeURIComponent(route.params.qrcode));\n    }\n  }, [route.params, setQrData]);\n  (0, _react.useEffect)(function () {\n    var handleQrData = function _callee(qrData) {\n      var channelURL, urlType, aesKey, channelId, _channel;\n\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!qrData.startsWith('brightid://')) {\n                _context.next = 7;\n                break;\n              }\n\n              console.log(\"handleQrData: calling Linking.openURL() with \" + qrData);\n              _context.next = 5;\n              return _regenerator.default.awrap(_reactNative.Linking.openURL(qrData));\n\n            case 5:\n              _context.next = 33;\n              break;\n\n            case 7:\n              if (!validQrString(qrData)) {\n                _context.next = 32;\n                break;\n              }\n\n              channelURL = new URL(qrData);\n              urlType = channelURL.searchParams.get('t');\n              if (urlType) channelURL.searchParams.delete('t');\n              _context.t0 = urlType;\n              _context.next = _context.t0 === _constants.qrCodeURL_types.RECOVERY ? 14 : _context.t0 === _constants.qrCodeURL_types.SYNC ? 14 : _context.t0 === _constants.qrCodeURL_types.IMPORT ? 14 : _context.t0 === _constants.qrCodeURL_types.CONNECTION ? 22 : 22;\n              break;\n\n            case 14:\n              aesKey = channelURL.searchParams.get('aes');\n              channelURL.searchParams.delete('aes');\n              channelId = (0, _encoding.hash)(aesKey);\n              console.log(\"handleQrData: Got type \" + urlType + \" recovery channel \" + channelId + \" at \" + channelURL.href);\n              dispatch((0, _recoveryDataSlice.setRecoveryAesKey)(aesKey));\n              dispatch((0, _recoveryDataSlice.setRecoveryChannel)({\n                channelId: channelId,\n                url: channelURL\n              }));\n\n              if (urlType === _constants.qrCodeURL_types.RECOVERY) {\n                navigation.navigate('RecoveringConnection');\n              } else if (urlType === _constants.qrCodeURL_types.SYNC) {\n                navigation.navigate('Devices', {\n                  syncing: true,\n                  asScanner: true\n                });\n              } else if (urlType === _constants.qrCodeURL_types.IMPORT) {\n                navigation.navigate('Add Device');\n              }\n\n              return _context.abrupt(\"break\", 30);\n\n            case 22:\n              console.log(\"handleQrData: Got connection channel at \" + channelURL.href);\n              _context.next = 25;\n              return _regenerator.default.awrap((0, _channels.parseChannelQrURL)(channelURL));\n\n            case 25:\n              _channel = _context.sent;\n              setChannel(_channel);\n              _context.next = 29;\n              return _regenerator.default.awrap(dispatch((0, _channelThunks.joinChannel)(_channel, api)));\n\n            case 29:\n              return _context.abrupt(\"break\", 30);\n\n            case 30:\n              _context.next = 33;\n              break;\n\n            case 32:\n              throw Error(\"Can not parse QRData \" + qrData);\n\n            case 33:\n              _context.next = 40;\n              break;\n\n            case 35:\n              _context.prev = 35;\n              _context.t1 = _context[\"catch\"](0);\n              console.log(_context.t1.message);\n\n              _reactNative.Alert.alert(_i18next.default.t('common.alert.error'), _i18next.default.t('pendingConnection.alert.text.errorJoinChannel', {\n                message: \"\" + _context.t1.message\n              }));\n\n              setQrData(undefined);\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 35]], Promise);\n    };\n\n    if (qrData) {\n      handleQrData(qrData);\n    }\n  }, [api, dispatch, navigation, qrData]);\n\n  var handleBarCodeRead = function handleBarCodeRead(_ref) {\n    var data = _ref.data;\n    console.log(\"Scanned QRCode: \" + data);\n    setQrData(data);\n  };\n\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: _colors.ORANGE,\n    animated: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.orangeTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, !qrData ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {\n    style: styles.infoTopContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactI18next.Trans, {\n    i18nKey: \"qrcode.text.scanCode\",\n    components: {\n      text: _react.default.createElement(_reactNative.Text, {\n        style: styles.infoTopText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 37\n        }\n      })\n    },\n    values: {\n      name: name\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: styles.cameraContainer,\n    testID: \"CameraContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_RNCameraProvider.RNCamera, {\n    style: styles.cameraPreview,\n    captureAudio: false,\n    onBarCodeRead: handleBarCodeRead,\n    barCodeTypes: [_RNCameraProvider.RNCamera.Constants.BarCodeType.qr],\n    type: _RNCameraProvider.RNCamera.Constants.Type.back,\n    flashMode: _RNCameraProvider.RNCamera.Constants.FlashMode.off,\n    androidCameraPermissionOptions: {\n      title: t('common.camera.title'),\n      message: t('common.camera.message'),\n      buttonPositive: t('common.camera.ok'),\n      buttonNegative: t('common.camera.cancel')\n    },\n    notAuthorizedView: _react.default.createElement(NotAuthorizedView, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 36\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(_reactNativeBarcodeMask.default, {\n    edgeColor: _colors.ORANGE,\n    animatedLineColor: _colors.ORANGE,\n    width: _deviceConstants.DEVICE_LARGE ? 230 : 190,\n    height: _deviceConstants.DEVICE_LARGE ? 230 : 190,\n    edgeRadius: 5,\n    edgeBorderWidth: _deviceConstants.DEVICE_LARGE ? 3 : 2,\n    edgeHeight: _deviceConstants.DEVICE_LARGE ? 30 : 25,\n    edgeWidth: _deviceConstants.DEVICE_LARGE ? 30 : 25,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  })))) : _react.default.createElement(_reactNative.View, {\n    style: styles.cameraContainer,\n    testID: \"CameraContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.downloadingDataContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  }, t('qrcode.text.downloadingConnectionData')), _react.default.createElement(_reactNativeSpinkit.default, {\n    isVisible: true,\n    size: _deviceConstants.DEVICE_LARGE ? 65 : 52,\n    type: \"ThreeBounce\",\n    color: _colors.ORANGE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  }))), _react.default.createElement(_reactNative.View, {\n    style: styles.bottomContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, pendingConnectionSizeForChannel < 1 ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {\n    style: styles.infoBottomText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 15\n    }\n  }, t('qrcode.text.canAlso')), _react.default.createElement(_reactNative.TouchableOpacity, {\n    testID: \"ScanCodeToMyCodeBtn\",\n    style: styles.showQrButton,\n    onPress: function onPress() {\n      navigation.navigate('MyCode');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"qrcode\",\n    size: _deviceConstants.DEVICE_LARGE ? 22 : 20,\n    color: _colors.WHITE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: styles.showQrText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, t('qrcode.button.showCode')))) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {\n    style: styles.infoBottomText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 15\n    }\n  }, t('qrcode.text.pendingConnections', {\n    count: pendingConnectionSizeForChannel\n  })), _react.default.createElement(_reactNative.TouchableOpacity, {\n    testID: \"ScanCodeToPendingConnectionsBtn\",\n    style: styles.verifyConnectionsButton,\n    onPress: function onPress() {\n      navigation.navigate('PendingConnections');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"account-multiple-plus-outline\",\n    size: _deviceConstants.DEVICE_LARGE ? 32 : 26,\n    color: _colors.ORANGE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: styles.verifyConnectionsText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, t('qrcode.text.confirmConnections')))))));\n};\n\nexports.ScanCodeScreen = ScanCodeScreen;\n\nvar styles = _reactNative.StyleSheet.create({\n  orangeTop: {\n    backgroundColor: _colors.ORANGE,\n    height: _deviceConstants.DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: _colors.WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    zIndex: 10,\n    marginTop: -58\n  },\n  infoTopContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    flexGrow: 0.6,\n    paddingTop: _deviceConstants.DEVICE_LARGE ? 40 : 25\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    textAlign: 'center',\n    color: _colors.LIGHT_BLACK\n  },\n  cameraContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%'\n  },\n  cameraPreview: {\n    flex: 0,\n    overflow: 'hidden',\n    width: _deviceConstants.DEVICE_LARGE ? 280 : 230,\n    height: _deviceConstants.DEVICE_LARGE ? 280 : 230,\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[12],\n    marginBottom: 10\n  },\n  showQrButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: _deviceConstants.DEVICE_LARGE ? 42 : 36,\n    backgroundColor: _colors.ORANGE,\n    borderRadius: 60,\n    width: _deviceConstants.DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10\n  },\n  showQrText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[14],\n    color: _colors.WHITE,\n    marginLeft: 10\n  },\n  cameraIcon: {\n    marginTop: 2,\n    marginRight: 4\n  },\n  verifyConnectionsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: _deviceConstants.DEVICE_LARGE ? 42 : 36,\n    backgroundColor: _colors.WHITE,\n    borderRadius: 60,\n    width: _deviceConstants.DEVICE_LARGE ? 240 : 200,\n    marginBottom: 36,\n    borderWidth: 2,\n    borderColor: _colors.ORANGE\n  },\n  verifyConnectionsText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[14],\n    color: _colors.ORANGE,\n    marginLeft: 10\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100\n  },\n  waitingText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    color: _colors.LIGHT_BLACK\n  },\n  downloadingDataContainer: {\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nvar _default = ScanCodeScreen;\nexports.default = _default;","map":{"version":3,"names":["validQrString","qrString","length","NotAuthorizedView","styles","cameraPreview","fontFamily","color","GREY","ScanCodeScreen","route","useRoute","navigation","useNavigation","dispatch","useDispatch","useState","channel","setChannel","undefined","qrData","setQrData","name","useSelector","state","user","useTranslation","t","api","useContext","NodeApiContext","pendingConnectionSizeForChannel","selectAllUnconfirmedConnectionsByChannelIds","id","useFocusEffect","useCallback","setActiveNotification","useEffect","isFocused","type","channel_types","SINGLE","STAR","navigate","closeChannel","channelId","background","GROUP","params","qrcode","console","log","decodeURIComponent","handleQrData","startsWith","Linking","openURL","channelURL","URL","urlType","searchParams","get","delete","qrCodeURL_types","RECOVERY","SYNC","IMPORT","CONNECTION","aesKey","hash","href","setRecoveryAesKey","setRecoveryChannel","url","syncing","asScanner","parseChannelQrURL","joinChannel","Error","message","Alert","alert","i18next","handleBarCodeRead","data","ORANGE","orangeTop","container","infoTopContainer","text","infoTopText","cameraContainer","RNCamera","Constants","BarCodeType","qr","Type","back","FlashMode","off","title","buttonPositive","buttonNegative","DEVICE_LARGE","downloadingDataContainer","waitingText","bottomContainer","infoBottomText","showQrButton","WHITE","showQrText","count","verifyConnectionsButton","verifyConnectionsText","StyleSheet","create","backgroundColor","height","width","zIndex","flex","alignItems","justifyContent","flexDirection","borderTopLeftRadius","borderTopRightRadius","marginTop","flexGrow","paddingTop","fontSize","textAlign","LIGHT_BLACK","overflow","aspectRatio","marginBottom","borderRadius","marginLeft","cameraIcon","marginRight","borderWidth","borderColor","minHeight"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/ScanCodeScreen.tsx"],"sourcesContent":["import React, { useCallback, useState, useEffect, useContext } from 'react';\nimport {\n  Linking,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  StatusBar,\n  Alert,\n} from 'react-native';\nimport {\n  useFocusEffect,\n  useRoute,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Trans, useTranslation } from 'react-i18next';\nimport BarcodeMask from 'react-native-barcode-mask';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport i18next from 'i18next';\nimport { BarCodeReadEvent } from 'react-native-camera';\nimport { useDispatch, useSelector } from '@/store';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { ORANGE, WHITE, LIGHT_BLACK, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  channel_types,\n  closeChannel,\n} from '@/components/PendingConnections/channelSlice';\nimport { selectAllUnconfirmedConnectionsByChannelIds } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { parseChannelQrURL } from '@/utils/channels';\nimport { joinChannel } from '@/components/PendingConnections/actions/channelThunks';\nimport { setActiveNotification } from '@/actions';\nimport { hash } from '@/utils/encoding';\nimport { qrCodeURL_types } from '@/utils/constants';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { RNCamera } from './RNCameraProvider';\nimport {\n  setRecoveryAesKey,\n  setRecoveryChannel,\n} from '@/components/Onboarding/RecoveryFlow/recoveryDataSlice';\n\n/**\n * Returns whether the string is a valid QR identifier\n * @param {*} qrString\n */\nfunction validQrString(qrString: string) {\n  return qrString.length >= 42;\n}\n\n/**\n * Scan code screen of BrightID\n * ==================================================================\n * displays a react-native-camera view\n * after scanning qrcode - the rtc id is set\n *\n */\nconst NotAuthorizedView = () => (\n  <View style={styles.cameraPreview}>\n    <Text style={{ fontFamily: 'Poppins-Medium', color: GREY }}>\n      Camera not Authorized\n    </Text>\n  </View>\n);\n\nexport const ScanCodeScreen = () => {\n  const route: { params?: { qrcode: string } } = useRoute() as {\n    params?: { qrcode: string };\n  };\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const [channel, setChannel] = useState(null);\n  const [qrData, setQrData] = useState(undefined);\n  const name = useSelector((state: State) => state.user.name);\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const pendingConnectionSizeForChannel = useSelector((state: State) => {\n    if (channel) {\n      return selectAllUnconfirmedConnectionsByChannelIds(state, [channel.id])\n        .length;\n    } else {\n      return 0;\n    }\n  });\n\n  // always show scanner when navigating to this page\n  useFocusEffect(\n    useCallback(() => {\n      setQrData(undefined);\n      setChannel(null);\n      dispatch(setActiveNotification(null));\n    }, [dispatch]),\n  );\n\n  // navigate to next page if channel has pending connections\n  useEffect(() => {\n    if (\n      channel &&\n      pendingConnectionSizeForChannel > 0 &&\n      navigation.isFocused()\n    ) {\n      switch (channel.type) {\n        case channel_types.SINGLE:\n        case channel_types.STAR:\n          // only one peer connection expected\n          navigation.navigate('PendingConnections');\n          // close single channels to prevent navigation loop\n          dispatch(closeChannel({ channelId: channel.id, background: true }));\n          break;\n        case channel_types.GROUP:\n          // Expect multiple peers, so show group connection screen\n          navigation.navigate('GroupConnection', { channel });\n          break;\n      }\n    }\n  }, [channel, pendingConnectionSizeForChannel, navigation, dispatch]);\n\n  // handle deep links\n  useEffect(() => {\n    if (route.params?.qrcode) {\n      console.log(`Got qrcode ${route.params.qrcode} from Deeplink`);\n      setQrData(decodeURIComponent(route.params.qrcode));\n    }\n  }, [route.params, setQrData]);\n\n  // handle qrcode data\n  useEffect(() => {\n    const handleQrData = async (qrData) => {\n      try {\n        if (qrData.startsWith('brightid://')) {\n          console.log(`handleQrData: calling Linking.openURL() with ${qrData}`);\n          await Linking.openURL(qrData);\n        } else if (validQrString(qrData)) {\n          const channelURL = new URL(qrData);\n          // Pop 'type' parameter from url if it is included\n          const urlType = channelURL.searchParams.get('t');\n          if (urlType) channelURL.searchParams.delete('t');\n\n          switch (urlType) {\n            case qrCodeURL_types.RECOVERY:\n            case qrCodeURL_types.SYNC:\n            case qrCodeURL_types.IMPORT: {\n              // Pop 'aes' parameter from url\n              const aesKey = channelURL.searchParams.get('aes');\n              channelURL.searchParams.delete('aes');\n\n              const channelId = hash(aesKey);\n              console.log(\n                `handleQrData: Got type ${urlType} recovery channel ${channelId} at ${channelURL.href}`,\n              );\n\n              dispatch(setRecoveryAesKey(aesKey));\n              dispatch(\n                setRecoveryChannel({\n                  channelId,\n                  url: channelURL,\n                }),\n              );\n              if (urlType === qrCodeURL_types.RECOVERY) {\n                navigation.navigate('RecoveringConnection');\n              } else if (urlType === qrCodeURL_types.SYNC) {\n                navigation.navigate('Devices', {\n                  syncing: true,\n                  asScanner: true,\n                });\n              } else if (urlType === qrCodeURL_types.IMPORT) {\n                navigation.navigate('Add Device');\n              }\n              break;\n            }\n            case qrCodeURL_types.CONNECTION:\n            default: {\n              // Currently assuming qrcodes without type parameter are connection channels created by previous app\n              // versions. Change this in one of the next releases:\n              // -> Add type parameter 't' to connection channel qrcode\n              // -> Throw an error if no/unknown type is found in qrcode\n              console.log(\n                `handleQrData: Got connection channel at ${channelURL.href}`,\n              );\n              const channel = await parseChannelQrURL(channelURL);\n              setChannel(channel);\n              await dispatch(joinChannel(channel, api));\n              break;\n            }\n          }\n        } else {\n          throw Error(`Can not parse QRData ${qrData}`);\n        }\n      } catch (err) {\n        console.log(err.message);\n        Alert.alert(\n          i18next.t('common.alert.error'),\n          i18next.t('pendingConnection.alert.text.errorJoinChannel', {\n            message: `${err.message}`,\n          }),\n        );\n        setQrData(undefined);\n      }\n    };\n    if (qrData) {\n      handleQrData(qrData);\n    }\n  }, [api, dispatch, navigation, qrData]);\n\n  const handleBarCodeRead = ({ data }: BarCodeReadEvent) => {\n    console.log(`Scanned QRCode: ${data}`);\n    setQrData(data);\n  };\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        {!qrData ? (\n          <>\n            <View style={styles.infoTopContainer}>\n              <Trans\n                i18nKey=\"qrcode.text.scanCode\"\n                components={{ text: <Text style={styles.infoTopText} /> }}\n                values={{ name }}\n              />\n            </View>\n            <View style={styles.cameraContainer} testID=\"CameraContainer\">\n              <RNCamera\n                style={styles.cameraPreview}\n                captureAudio={false}\n                onBarCodeRead={handleBarCodeRead}\n                barCodeTypes={[RNCamera.Constants.BarCodeType.qr]}\n                type={RNCamera.Constants.Type.back}\n                flashMode={RNCamera.Constants.FlashMode.off}\n                androidCameraPermissionOptions={{\n                  title: t('common.camera.title'),\n                  message: t('common.camera.message'),\n                  buttonPositive: t('common.camera.ok'),\n                  buttonNegative: t('common.camera.cancel'),\n                }}\n                notAuthorizedView={<NotAuthorizedView />}\n              >\n                <BarcodeMask\n                  edgeColor={ORANGE}\n                  animatedLineColor={ORANGE}\n                  width={DEVICE_LARGE ? 230 : 190}\n                  height={DEVICE_LARGE ? 230 : 190}\n                  edgeRadius={5}\n                  edgeBorderWidth={DEVICE_LARGE ? 3 : 2}\n                  edgeHeight={DEVICE_LARGE ? 30 : 25}\n                  edgeWidth={DEVICE_LARGE ? 30 : 25}\n                />\n              </RNCamera>\n            </View>\n          </>\n        ) : (\n          <View style={styles.cameraContainer} testID=\"CameraContainer\">\n            <View style={styles.downloadingDataContainer}>\n              <Text style={styles.waitingText}>\n                {t('qrcode.text.downloadingConnectionData')}\n              </Text>\n              <Spinner\n                isVisible={true}\n                size={DEVICE_LARGE ? 65 : 52}\n                type=\"ThreeBounce\"\n                color={ORANGE}\n              />\n            </View>\n          </View>\n        )}\n\n        <View style={styles.bottomContainer}>\n          {pendingConnectionSizeForChannel < 1 ? (\n            <>\n              <Text style={styles.infoBottomText}>\n                {t('qrcode.text.canAlso')}\n              </Text>\n              <TouchableOpacity\n                testID=\"ScanCodeToMyCodeBtn\"\n                style={styles.showQrButton}\n                onPress={() => {\n                  navigation.navigate('MyCode');\n                }}\n              >\n                <Material\n                  name=\"qrcode\"\n                  size={DEVICE_LARGE ? 22 : 20}\n                  color={WHITE}\n                />\n\n                <Text style={styles.showQrText}>\n                  {t('qrcode.button.showCode')}\n                </Text>\n              </TouchableOpacity>\n            </>\n          ) : (\n            <>\n              <Text style={styles.infoBottomText}>\n                {t('qrcode.text.pendingConnections', {\n                  count: pendingConnectionSizeForChannel,\n                })}\n              </Text>\n              <TouchableOpacity\n                testID=\"ScanCodeToPendingConnectionsBtn\"\n                style={styles.verifyConnectionsButton}\n                onPress={() => {\n                  navigation.navigate('PendingConnections');\n                }}\n              >\n                <Material\n                  name=\"account-multiple-plus-outline\"\n                  size={DEVICE_LARGE ? 32 : 26}\n                  color={ORANGE}\n                />\n                <Text style={styles.verifyConnectionsText}>\n                  {t('qrcode.text.confirmConnections')}\n                </Text>\n              </TouchableOpacity>\n            </>\n          )}\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    zIndex: 10,\n    marginTop: -58,\n  },\n  infoTopContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    flexGrow: 0.6,\n    paddingTop: DEVICE_LARGE ? 40 : 25,\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  cameraContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n  },\n  cameraPreview: {\n    flex: 0,\n    overflow: 'hidden',\n    width: DEVICE_LARGE ? 280 : 230,\n    height: DEVICE_LARGE ? 280 : 230,\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10,\n  },\n  showQrButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10,\n  },\n  showQrText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10,\n  },\n  cameraIcon: {\n    marginTop: 2,\n    marginRight: 4,\n  },\n  verifyConnectionsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: WHITE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 36,\n    borderWidth: 2,\n    borderColor: ORANGE,\n  },\n  verifyConnectionsText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n    marginLeft: 10,\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100,\n  },\n  waitingText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  downloadingDataContainer: {\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default ScanCodeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}