{"ast":null,"code":"'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport AnimatedValue from \"../nodes/AnimatedValue\";\nimport AnimatedValueXY from \"../nodes/AnimatedValueXY\";\nimport AnimatedInterpolation from \"../nodes/AnimatedInterpolation\";\nimport Animation from \"./Animation\";\nimport SpringConfig from \"../SpringConfig\";\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from \"../NativeAnimatedHelper\";\n\nvar SpringAnimation = function (_Animation) {\n  _inheritsLoose(SpringAnimation, _Animation);\n\n  function SpringAnimation(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    var _this;\n\n    _this = _Animation.call(this) || this;\n    _this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    _this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    _this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    _this._toValue = config.toValue;\n    _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    _this._useNativeDriver = shouldUseNativeDriver(config);\n    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;\n    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      _this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      _this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      _this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n\n    invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(_this._damping > 0, 'Damping value must be greater than 0');\n    invariant(_this._mass > 0, 'Mass value must be greater than 0');\n    return _this;\n  }\n\n  var _proto = SpringAnimation.prototype;\n\n  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  };\n\n  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    var _this2 = this;\n\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = function start() {\n      if (_this2._useNativeDriver) {\n        _this2.__startNativeAnimation(animatedValue);\n      } else {\n        _this2.onUpdate();\n      }\n    };\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  };\n\n  _proto.getInternalState = function getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  };\n\n  _proto.onUpdate = function onUpdate() {\n    var MAX_STEPS = 64;\n    var now = Date.now();\n\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m));\n    var omega0 = Math.sqrt(k / m);\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);\n    var x0 = this._toValue - this._startPosition;\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n\n    if (zeta < 1) {\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      var _envelope = Math.exp(-omega0 * t);\n\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n\n    if (!this.__active) {\n      return;\n    }\n\n    var isOvershooting = false;\n\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n    var isDisplacement = true;\n\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({\n        finished: true\n      });\n\n      return;\n    }\n\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  };\n\n  _proto.stop = function stop() {\n    _Animation.prototype.stop.call(this);\n\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  };\n\n  return SpringAnimation;\n}(Animation);\n\nexport default SpringAnimation;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/SpringAnimation.js"],"names":["subClass","Object","superClass","_setPrototypeOf","o","SpringAnimation","_inheritsLoose","_this","_Animation","_config$overshootClam","config","_config$restDisplacem","_config$restSpeedThre","_config$velocity","_config$velocity2","_config$delay","shouldUseNativeDriver","_config$isInteraction","_config$iterations","invariant","_config$stiffness","_config$damping","_config$mass","springConfig","SpringConfig","_config$bounciness","_config$speed","_springConfig","_config$tension","_config$friction","_proto","type","overshootClamping","restDisplacementThreshold","restSpeedThreshold","stiffness","damping","mass","initialVelocity","_this$_initialVelocit","toValue","iterations","_this2","Date","previousAnimation","internalState","start","setTimeout","lastPosition","lastVelocity","lastTime","MAX_STEPS","now","deltaTime","c","m","k","v0","zeta","Math","omega0","omega1","x0","position","velocity","t","envelope","_envelope","isOvershooting","isVelocity","isDisplacement","finished","requestAnimationFrame","clearTimeout","global"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport AnimatedValue from '../nodes/AnimatedValue';\nimport AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from '../NativeAnimatedHelper';\n\nvar SpringAnimation = /*#__PURE__*/function (_Animation) {\n  _inheritsLoose(SpringAnimation, _Animation);\n\n  function SpringAnimation(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    var _this;\n\n    _this = _Animation.call(this) || this;\n    _this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    _this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    _this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    _this._toValue = config.toValue;\n    _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    _this._useNativeDriver = shouldUseNativeDriver(config);\n    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;\n    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      _this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      _this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      _this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n\n    invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(_this._damping > 0, 'Damping value must be greater than 0');\n    invariant(_this._mass > 0, 'Mass value must be greater than 0');\n    return _this;\n  }\n\n  var _proto = SpringAnimation.prototype;\n\n  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  };\n\n  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    var _this2 = this;\n\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity; // Set the initial velocity to the last velocity\n\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = function start() {\n      if (_this2._useNativeDriver) {\n        _this2.__startNativeAnimation(animatedValue);\n      } else {\n        _this2.onUpdate();\n      }\n    }; //  If this._delay is more than 0, we start after the timeout.\n\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  };\n\n  _proto.getInternalState = function getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  ;\n\n  _proto.onUpdate = function onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)); // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    } // Conditions for stopping the spring animation\n\n\n    var isOvershooting = false;\n\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n    var isDisplacement = true;\n\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({\n        finished: true\n      });\n\n      return;\n    }\n\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  };\n\n  _proto.stop = function stop() {\n    _Animation.prototype.stop.call(this);\n\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  };\n\n  return SpringAnimation;\n}(Animation);\n\nexport default SpringAnimation;"]},"metadata":{},"sourceType":"module"}