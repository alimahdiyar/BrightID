{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport i18next from 'i18next';\nimport { dangerouslyDeleteStorage } from \"./utils/dev\";\nimport { store } from \"./store\";\nimport { checkTasks, syncStoreTasks } from \"./components/Tasks/TasksSlice\";\nimport { scrubOps } from \"./reducer/operationsSlice\";\nexport var bootstrap = function _callee() {\n  var _store$getState, id;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _store$getState = store.getState(), id = _store$getState.user.id;\n          store.dispatch(syncStoreTasks());\n          store.dispatch(checkTasks());\n          store.dispatch(scrubOps());\n          _context.prev = 4;\n\n          if (!(id === 'empty')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(dangerouslyDeleteStorage());\n\n        case 8:\n          Alert.alert(i18next.t('common.alert.title.lostKeys'), i18next.t('common.alert.text.lostKeys'));\n          throw new Error('id is empty');\n\n        case 10:\n          _context.next = 15;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](4);\n          console.error(_context.t0);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 12]], Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/bootstrap.ts"],"names":["bootstrap","id","store","syncStoreTasks","checkTasks","scrubOps","dangerouslyDeleteStorage","Alert","i18next","console"],"mappings":";;AACA,OAAA,OAAA,MAAA,SAAA;AACA,SAAA,wBAAA;AACA,SAAA,KAAA;AACA,SAAA,UAAA,EAAA,cAAA;AACA,SAAA,QAAA;AAIA,OAAO,IAAMA,SAAS,GAAG,SAAA,OAAA,GAAA;EAAA,IAAA,eAAA,EAAA,EAAA;;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAA,eAAA,GAGnBE,KAAK,CAHc,QAGnBA,EAHmB,EAEbD,EAFa,GAAA,eAAA,CAAA,IAAA,CAAA,EAAA;UAMvBC,KAAK,CAALA,QAAAA,CAAeC,cAAfD,EAAAA;UAEAA,KAAK,CAALA,QAAAA,CAAeE,UAAfF,EAAAA;UAEAA,KAAK,CAALA,QAAAA,CAAeG,QAAfH,EAAAA;UAVuB,QAAA,CAAA,IAAA,GAAA,CAAA;;UAAA,IAAA,EAcjBD,EAAE,KAde,OAAA,CAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA;;UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAebK,wBAfa,EAAA,CAAA;;QAAA,KAAA,CAAA;UAgBnBC,KAAK,CAALA,KAAAA,CACEC,OAAO,CAAPA,CAAAA,CADFD,6BACEC,CADFD,EAEEC,OAAO,CAAPA,CAAAA,CAFFD,4BAEEC,CAFFD;UAhBmB,MAoBb,IAAA,KAAA,CApBa,aAoBb,CApBa;;QAAA,KAAA,EAAA;UAAA,QAAA,CAAA,IAAA,GAAA,EAAA;UAAA;;QAAA,KAAA,EAAA;UAAA,QAAA,CAAA,IAAA,GAAA,EAAA;UAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;UAuBrBE,OAAO,CAAPA,KAAAA,CAAAA,QAAAA,CAAAA,EAAAA;;QAvBqB,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,QAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AAAlB,CAAA","sourcesContent":["import { Alert } from 'react-native';\nimport i18next from 'i18next';\nimport { dangerouslyDeleteStorage } from '@/utils/dev';\nimport { store } from './store';\nimport { checkTasks, syncStoreTasks } from './components/Tasks/TasksSlice';\nimport { scrubOps } from '@/reducer/operationsSlice';\n\n// happens inside of the loading screen\n\nexport const bootstrap = async () => {\n  const {\n    user: { id },\n  } = store.getState();\n\n  // update available usertasks\n  store.dispatch(syncStoreTasks());\n  // Initial check for completed tasks\n  store.dispatch(checkTasks());\n  // scrub outdated operations from state\n  store.dispatch(scrubOps());\n\n  try {\n    // delete all storage if brightid is empty\n    if (id === 'empty') {\n      await dangerouslyDeleteStorage();\n      Alert.alert(\n        i18next.t('common.alert.title.lostKeys'),\n        i18next.t('common.alert.text.lostKeys'),\n      );\n      throw new Error('id is empty');\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}