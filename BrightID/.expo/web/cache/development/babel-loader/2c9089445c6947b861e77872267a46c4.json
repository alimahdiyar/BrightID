{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _levelsWithoutRecover;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport i18next from 'i18next';\nimport Slider from '@react-native-community/slider';\nimport { connection_levels } from \"../../utils/constants\";\nimport { WIDTH, DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { ORANGE, BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { connectionLevelColors, connectionLevelStrings } from \"../../utils/connectionLevelStrings\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar levelsWithoutRecovery = (_levelsWithoutRecover = {}, _defineProperty(_levelsWithoutRecover, connection_levels.SUSPICIOUS, {\n  description: i18next.t('connectionDetails.text.levelSuspicious')\n}), _defineProperty(_levelsWithoutRecover, connection_levels.JUST_MET, {\n  description: i18next.t('connectionDetails.text.levelJustMet')\n}), _defineProperty(_levelsWithoutRecover, connection_levels.ALREADY_KNOWN, {\n  description: i18next.t('connectionDetails.text.levelAlreadyKnown')\n}), _levelsWithoutRecover);\n\nvar levelsWithRecovery = _objectSpread(_objectSpread({}, levelsWithoutRecovery), {}, _defineProperty({}, connection_levels.RECOVERY, {\n  description: i18next.t('connectionDetails.text.levelRecovery')\n}));\n\nvar TrustlevelSlider = function TrustlevelSlider(_ref) {\n  var currentLevel = _ref.currentLevel,\n      incomingLevel = _ref.incomingLevel,\n      changeLevelHandler = _ref.changeLevelHandler,\n      verbose = _ref.verbose;\n  var includeRecovery = Array(connection_levels.ALREADY_KNOWN, connection_levels.RECOVERY).includes(incomingLevel);\n  var trustLevelDetails = includeRecovery ? levelsWithRecovery : levelsWithoutRecovery;\n  var minValue = 0;\n  var maxValue = Object.keys(trustLevelDetails).length - 1;\n\n  if (currentLevel === connection_levels.REPORTED) {\n    currentLevel = connection_levels.SUSPICIOUS;\n  }\n\n  var initialValue = Object.keys(trustLevelDetails).indexOf(currentLevel);\n\n  var valueChangeHandler = function valueChangeHandler(value) {\n    console.log(\"Slider value: \" + value);\n    changeLevelHandler(Object.keys(trustLevelDetails)[value]);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    testID: \"ConnectionLevelSliderPopup\",\n    children: [_jsx(View, {\n      style: styles.label,\n      children: _jsx(Text, {\n        testID: \"ConnectionLevelSliderText\",\n        style: [styles.labelText, {\n          color: connectionLevelColors[currentLevel]\n        }],\n        children: connectionLevelStrings[currentLevel]\n      })\n    }), verbose && _jsx(View, {\n      style: styles.description,\n      children: _jsxs(Text, {\n        style: styles.descriptionText,\n        children: [\"\\\"\", trustLevelDetails[currentLevel].description, \"\\\"\"]\n      })\n    }), _jsx(Slider, {\n      testID: \"ConnectionLevelSlider\",\n      style: styles.slider,\n      value: initialValue,\n      minimumValue: minValue,\n      maximumValue: maxValue,\n      step: 1,\n      minimumTrackTintColor: connectionLevelColors[connection_levels.RECOVERY],\n      maximumTrackTintColor: connectionLevelColors[connection_levels.REPORTED],\n      thumbTintColor: ORANGE,\n      onValueChange: valueChangeHandler\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  label: {\n    marginBottom: DEVICE_LARGE ? 10 : 8\n  },\n  labelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[17],\n    color: BLACK\n  },\n  description: {\n    minHeight: 50,\n    marginBottom: DEVICE_LARGE ? 10 : 5\n  },\n  descriptionText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n    textAlign: 'center'\n  },\n  slider: {\n    marginBottom: DEVICE_LARGE ? 13 : 11,\n    width: WIDTH * 0.9 * 0.8,\n    height: DEVICE_LARGE ? 50 : 45\n  }\n});\nexport default TrustlevelSlider;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustlevelSlider.tsx"],"names":["levelsWithoutRecovery","connection_levels","description","i18next","levelsWithRecovery","TrustlevelSlider","currentLevel","incomingLevel","changeLevelHandler","verbose","includeRecovery","Array","trustLevelDetails","minValue","maxValue","Object","initialValue","valueChangeHandler","console","styles","color","connectionLevelColors","connectionLevelStrings","StyleSheet","container","flexDirection","justifyContent","alignItems","label","marginBottom","DEVICE_LARGE","labelText","fontFamily","fontSize","minHeight","descriptionText","textAlign","slider","width","WIDTH","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport i18next from 'i18next';\nimport Slider from '@react-native-community/slider';\nimport { connection_levels } from '@/utils/constants';\nimport { WIDTH, DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { ORANGE, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  connectionLevelColors,\n  connectionLevelStrings,\n} from '@/utils/connectionLevelStrings';\n\nconst levelsWithoutRecovery = {\n  [connection_levels.SUSPICIOUS]: {\n    description: i18next.t('connectionDetails.text.levelSuspicious'),\n  },\n  [connection_levels.JUST_MET]: {\n    description: i18next.t('connectionDetails.text.levelJustMet'),\n  },\n  [connection_levels.ALREADY_KNOWN]: {\n    description: i18next.t('connectionDetails.text.levelAlreadyKnown'),\n  },\n};\n\nconst levelsWithRecovery = {\n  ...levelsWithoutRecovery,\n  [connection_levels.RECOVERY]: {\n    description: i18next.t('connectionDetails.text.levelRecovery'),\n  },\n};\n\ntype TrustlevelSliderProps = {\n  currentLevel: ConnectionLevel;\n  incomingLevel: ConnectionLevel;\n  changeLevelHandler: (newLevel: ConnectionLevel) => any;\n  verbose: boolean;\n};\n\nconst TrustlevelSlider = ({\n  currentLevel,\n  incomingLevel,\n  changeLevelHandler,\n  verbose,\n}: TrustlevelSliderProps) => {\n  const includeRecovery = Array<ConnectionLevel>(\n    connection_levels.ALREADY_KNOWN,\n    connection_levels.RECOVERY,\n  ).includes(incomingLevel);\n  const trustLevelDetails = includeRecovery\n    ? levelsWithRecovery\n    : levelsWithoutRecovery;\n  const minValue = 0;\n  const maxValue = Object.keys(trustLevelDetails).length - 1;\n\n  // TODO - Quick workaround to catch connections that just changed from \"REPORTED\" to something else, but are not\n  // confirmed on the backend yet. This can happen when you report someone and later reconnect. Proper solution is\n  // to not allow changing level again until the last operation actually confirmed.\n  // RESPONSE: The connection slider will not be avail for users who are marked as REPORTED, because we are no longer deleting reported connections, but I will keep this here in case we run into this issue in the future\n  if (currentLevel === connection_levels.REPORTED) {\n    currentLevel = connection_levels.SUSPICIOUS;\n  }\n\n  // map connectionLevel to index value\n  const initialValue = Object.keys(trustLevelDetails).indexOf(currentLevel);\n  const valueChangeHandler = (value: number) => {\n    console.log(`Slider value: ${value}`);\n    // map index value back to connectionLevel\n    changeLevelHandler(\n      Object.keys(trustLevelDetails)[value] as ConnectionLevel,\n    );\n  };\n\n  return (\n    <View style={styles.container} testID=\"ConnectionLevelSliderPopup\">\n      <View style={styles.label}>\n        <Text\n          testID=\"ConnectionLevelSliderText\"\n          style={[\n            styles.labelText,\n            { color: connectionLevelColors[currentLevel] },\n          ]}\n        >\n          {connectionLevelStrings[currentLevel]}\n        </Text>\n      </View>\n      {verbose && (\n        <View style={styles.description}>\n          <Text style={styles.descriptionText}>\n            \"{trustLevelDetails[currentLevel].description}\"\n          </Text>\n        </View>\n      )}\n      <Slider\n        testID=\"ConnectionLevelSlider\"\n        style={styles.slider}\n        value={initialValue}\n        minimumValue={minValue}\n        maximumValue={maxValue}\n        step={1}\n        minimumTrackTintColor={\n          connectionLevelColors[connection_levels.RECOVERY]\n        }\n        maximumTrackTintColor={\n          connectionLevelColors[connection_levels.REPORTED]\n        }\n        thumbTintColor={ORANGE}\n        onValueChange={valueChangeHandler}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  label: {\n    marginBottom: DEVICE_LARGE ? 10 : 8,\n  },\n  labelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[17],\n    color: BLACK,\n  },\n  description: {\n    // set minimum height so the slider does not jump when the description\n    // text changes between 1 and 2 lines\n    minHeight: 50,\n    marginBottom: DEVICE_LARGE ? 10 : 5,\n  },\n  descriptionText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n    textAlign: 'center',\n  },\n  slider: {\n    marginBottom: DEVICE_LARGE ? 13 : 11,\n    // slider only supports absolute width, so have to calculate manually:\n    // width = deviceWidth * modalWidth (90%) * sliderWidth (80% of modal width)\n    width: WIDTH * 0.9 * 0.8,\n    height: DEVICE_LARGE ? 50 : 45,\n  },\n});\n\nexport default TrustlevelSlider;\n"]},"metadata":{},"sourceType":"module"}