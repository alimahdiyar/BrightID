{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.compareVersions = factory();\n  }\n})(this, function () {\n  var semver = /^v?(?:\\d+)(\\.(?:[x*]|\\d+)(\\.(?:[x*]|\\d+)(\\.(?:[x*]|\\d+))?(?:-[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\n  function indexOrEnd(str, q) {\n    return str.indexOf(q) === -1 ? str.length : str.indexOf(q);\n  }\n\n  function split(v) {\n    var c = v.replace(/^v/, '').replace(/\\+.*$/, '');\n    var patchIndex = indexOrEnd(c, '-');\n    var arr = c.substring(0, patchIndex).split('.');\n    arr.push(c.substring(patchIndex + 1));\n    return arr;\n  }\n\n  function tryParse(v) {\n    return isNaN(Number(v)) ? v : Number(v);\n  }\n\n  function validate(version) {\n    if (typeof version !== 'string') {\n      throw new TypeError('Invalid argument expected string');\n    }\n\n    if (!semver.test(version)) {\n      throw new Error('Invalid argument not valid semver (\\'' + version + '\\' received)');\n    }\n  }\n\n  function compareVersions(v1, v2) {\n    [v1, v2].forEach(validate);\n    var s1 = split(v1);\n    var s2 = split(v2);\n\n    for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {\n      var n1 = parseInt(s1[i] || 0, 10);\n      var n2 = parseInt(s2[i] || 0, 10);\n      if (n1 > n2) return 1;\n      if (n2 > n1) return -1;\n    }\n\n    var sp1 = s1[s1.length - 1];\n    var sp2 = s2[s2.length - 1];\n\n    if (sp1 && sp2) {\n      var p1 = sp1.split('.').map(tryParse);\n      var p2 = sp2.split('.').map(tryParse);\n\n      for (i = 0; i < Math.max(p1.length, p2.length); i++) {\n        if (p1[i] === undefined || typeof p2[i] === 'string' && typeof p1[i] === 'number') return -1;\n        if (p2[i] === undefined || typeof p1[i] === 'string' && typeof p2[i] === 'number') return 1;\n        if (p1[i] > p2[i]) return 1;\n        if (p2[i] > p1[i]) return -1;\n      }\n    } else if (sp1 || sp2) {\n      return sp1 ? -1 : 1;\n    }\n\n    return 0;\n  }\n\n  ;\n  var allowedOperators = ['>', '>=', '=', '<', '<='];\n  var operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1]\n  };\n\n  function validateOperator(op) {\n    if (typeof op !== 'string') {\n      throw new TypeError('Invalid operator type, expected string but got ' + typeof op);\n    }\n\n    if (allowedOperators.indexOf(op) === -1) {\n      throw new TypeError('Invalid operator, expected one of ' + allowedOperators.join('|'));\n    }\n  }\n\n  compareVersions.validate = function (version) {\n    return typeof version === 'string' && semver.test(version);\n  };\n\n  compareVersions.compare = function (v1, v2, operator) {\n    validateOperator(operator);\n    var res = compareVersions(v1, v2);\n    return operatorResMap[operator].indexOf(res) > -1;\n  };\n\n  return compareVersions;\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/expo-modules-core/node_modules/compare-versions/index.js"],"names":["define","module","factory","root","semver","str","c","v","patchIndex","indexOrEnd","arr","isNaN","Number","s1","split","s2","i","Math","n1","parseInt","n2","sp1","sp2","p1","p2","allowedOperators","operatorResMap","compareVersions","validateOperator","res"],"mappings":"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","sourcesContent":["/* global define */\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.compareVersions = factory();\n  }\n}(this, function () {\n\n  var semver = /^v?(?:\\d+)(\\.(?:[x*]|\\d+)(\\.(?:[x*]|\\d+)(\\.(?:[x*]|\\d+))?(?:-[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\n  function indexOrEnd(str, q) {\n    return str.indexOf(q) === -1 ? str.length : str.indexOf(q);\n  }\n\n  function split(v) {\n    var c = v.replace(/^v/, '').replace(/\\+.*$/, '');\n    var patchIndex = indexOrEnd(c, '-');\n    var arr = c.substring(0, patchIndex).split('.');\n    arr.push(c.substring(patchIndex + 1));\n    return arr;\n  }\n\n  function tryParse(v) {\n    return isNaN(Number(v)) ? v : Number(v);\n  }\n\n  function validate(version) {\n    if (typeof version !== 'string') {\n      throw new TypeError('Invalid argument expected string');\n    }\n    if (!semver.test(version)) {\n      throw new Error('Invalid argument not valid semver (\\''+version+'\\' received)');\n    }\n  }\n\n  function compareVersions(v1, v2) {\n    [v1, v2].forEach(validate);\n\n    var s1 = split(v1);\n    var s2 = split(v2);\n\n    for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {\n      var n1 = parseInt(s1[i] || 0, 10);\n      var n2 = parseInt(s2[i] || 0, 10);\n\n      if (n1 > n2) return 1;\n      if (n2 > n1) return -1;\n    }\n\n    var sp1 = s1[s1.length - 1];\n    var sp2 = s2[s2.length - 1];\n\n    if (sp1 && sp2) {\n      var p1 = sp1.split('.').map(tryParse);\n      var p2 = sp2.split('.').map(tryParse);\n\n      for (i = 0; i < Math.max(p1.length, p2.length); i++) {\n        if (p1[i] === undefined || typeof p2[i] === 'string' && typeof p1[i] === 'number') return -1;\n        if (p2[i] === undefined || typeof p1[i] === 'string' && typeof p2[i] === 'number') return 1;\n\n        if (p1[i] > p2[i]) return 1;\n        if (p2[i] > p1[i]) return -1;\n      }\n    } else if (sp1 || sp2) {\n      return sp1 ? -1 : 1;\n    }\n\n    return 0;\n  };\n\n  var allowedOperators = [\n    '>',\n    '>=',\n    '=',\n    '<',\n    '<='\n  ];\n\n  var operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1]\n  };\n\n  function validateOperator(op) {\n    if (typeof op !== 'string') {\n      throw new TypeError('Invalid operator type, expected string but got ' + typeof op);\n    }\n    if (allowedOperators.indexOf(op) === -1) {\n      throw new TypeError('Invalid operator, expected one of ' + allowedOperators.join('|'));\n    }\n  }\n\n  compareVersions.validate = function(version) {\n    return typeof version === 'string' && semver.test(version);\n  }\n\n  compareVersions.compare = function (v1, v2, operator) {\n    // Validate operator\n    validateOperator(operator);\n\n    // since result of compareVersions can only be -1 or 0 or 1\n    // a simple map can be used to replace switch\n    var res = compareVersions(v1, v2);\n    return operatorResMap[operator].indexOf(res) > -1;\n  }\n\n  return compareVersions;\n}));\n"]},"metadata":{},"sourceType":"script"}