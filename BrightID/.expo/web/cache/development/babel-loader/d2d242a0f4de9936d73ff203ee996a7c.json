{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var onMoveShouldSetResponder = config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/useResponderEvents/index.js"],"names":["emptyObject","idCounter","ref","React","getInitialValue","config","id","useStable","isAttachedRef","ResponderSystem","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","hostRef","isResponder"],"mappings":"AAqBA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,eAAA;AAEA,IAAMA,WAAW,GAAjB,EAAA;AACA,IAAIC,SAAS,GAAb,CAAA;;AAEA,SAAA,SAAA,CAAA,eAAA,EAAmD;EACjD,IAAMC,GAAG,GAAGC,KAAK,CAALA,MAAAA,CAAZ,IAAYA,CAAZ;;EACA,IAAID,GAAG,CAAHA,OAAAA,IAAJ,IAAA,EAAyB;IACvBA,GAAG,CAAHA,OAAAA,GAAcE,eAAdF,EAAAA;EAEF;;EAAA,OAAOA,GAAG,CAAV,OAAA;AAGF;;AAAA,eAAe,SAAA,kBAAA,CAAA,OAAA,EAAiF;EAAvCG,IAAAA,MAAuC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAbL,WAA1BK;EACvD,IAAMC,EAAE,GAAGC,SAAS,CAAC,YAAA;IAAA,OAAMN,SAAN,EAAA;EAArB,CAAoB,CAApB;EACA,IAAMO,aAAa,GAAGL,KAAK,CAALA,MAAAA,CAAtB,KAAsBA,CAAtB;EAKAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBM,eAAe,CAAfA,eAAAA;IACA,OAAO,YAAM;MACXA,eAAe,CAAfA,UAAAA,CAAAA,EAAAA;IADF,CAAA;EAFFN,CAAAA,EAKG,CALHA,EAKG,CALHA;EAQAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IACEO,wBADF,GASIL,MATJ,CAAA,wBAAA;IAAA,IAEEM,+BAFF,GASIN,MATJ,CAAA,+BAAA;IAAA,IAGEO,0BAHF,GASIP,MATJ,CAAA,0BAAA;IAAA,IAIEQ,iCAJF,GASIR,MATJ,CAAA,iCAAA;IAAA,IAKES,mCALF,GASIT,MATJ,CAAA,mCAAA;IAAA,IAMEU,0CANF,GASIV,MATJ,CAAA,0CAAA;IAAA,IAOEW,yBAPF,GASIX,MATJ,CAAA,yBAAA;IAAA,IAQEY,gCARF,GASIZ,MATJ,CAAA,gCAAA;IAWA,IAAMa,uBAAuB,GAC3BR,wBAAwB,IAAxBA,IAAAA,IACAC,+BAA+B,IAD/BD,IAAAA,IAEAE,0BAA0B,IAF1BF,IAAAA,IAGAG,iCAAiC,IAHjCH,IAAAA,IAIAI,mCAAmC,IAJnCJ,IAAAA,IAKAK,0CAA0C,IAL1CL,IAAAA,IAMAM,yBAAyB,IANzBN,IAAAA,IAOAO,gCAAgC,IARlC,IAAA;IAUA,IAAME,IAAI,GAAGC,OAAO,CAApB,OAAA;;IAEA,IAAA,uBAAA,EAA6B;MAC3BX,eAAe,CAAfA,OAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,MAAAA;MACAD,aAAa,CAAbA,OAAAA,GAAAA,IAAAA;IAFF,CAAA,MAGO,IAAIA,aAAa,CAAjB,OAAA,EAA2B;MAChCC,eAAe,CAAfA,UAAAA,CAAAA,EAAAA;MACAD,aAAa,CAAbA,OAAAA,GAAAA,KAAAA;IAEH;EA/BDL,CAAAA,EA+BG,CAAA,MAAA,EAAA,OAAA,EA/BHA,EA+BG,CA/BHA;EAiCAA,KAAK,CAALA,aAAAA,CAAoB;IAAEkB,WAAW,EAAED,OAAO,CAAPA,OAAAA,KAAoBX,eAAe,CAAtEN,gBAAuDM;EAAnC,CAApBN;EACAA,KAAK,CAALA,aAAAA,CAAAA,MAAAA;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\n\nimport type { ResponderConfig } from './ResponderSystem';\n\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\n\nconst emptyObject = {};\nlet idCounter = 0;\n\nfunction useStable<T>(getInitialValue: () => T): T {\n  const ref = React.useRef<T | null>(null);\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef: any, config: ResponderConfig = emptyObject) {\n  const id = useStable(() => idCounter++);\n  const isAttachedRef = React.useRef(false);\n\n  // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n  React.useEffect(() => {\n    ResponderSystem.attachListeners();\n    return () => {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n\n  // Register and unregister with the Responder System as necessary\n  React.useEffect(() => {\n    const {\n      onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture,\n      onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture,\n      onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder,\n      onStartShouldSetResponderCapture\n    } = config;\n\n    const requiresResponderSystem =\n      onMoveShouldSetResponder != null ||\n      onMoveShouldSetResponderCapture != null ||\n      onScrollShouldSetResponder != null ||\n      onScrollShouldSetResponderCapture != null ||\n      onSelectionChangeShouldSetResponder != null ||\n      onSelectionChangeShouldSetResponderCapture != null ||\n      onStartShouldSetResponder != null ||\n      onStartShouldSetResponderCapture != null;\n\n    const node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n\n  React.useDebugValue({ isResponder: hostRef.current === ResponderSystem.getResponderNode() });\n  React.useDebugValue(config);\n}\n"]},"metadata":{},"sourceType":"module"}