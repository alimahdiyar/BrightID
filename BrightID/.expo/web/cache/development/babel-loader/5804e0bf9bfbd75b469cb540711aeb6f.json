{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport invariant from 'invariant';\nvar RNCPushNotificationIOS = NativeModules.RNCPushNotificationIOS;\nvar PushNotificationEmitter = new NativeEventEmitter(RNCPushNotificationIOS);\n\nvar _notifHandlers = new Map();\n\nvar DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nvar NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nvar NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nvar DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nvar PushNotificationIOS = function () {\n  function PushNotificationIOS(nativeNotif) {\n    var _this = this;\n\n    _classCallCheck(this, PushNotificationIOS);\n\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    this._actionIdentifier = nativeNotif.actionIdentifier;\n    this._userText = nativeNotif.userText;\n\n    if (nativeNotif.remote) {\n      Object.keys(nativeNotif).forEach(function (notifKey) {\n        var notifVal = nativeNotif[notifKey];\n\n        if (notifKey === 'aps') {\n          _this._alert = notifVal.alert;\n          _this._title = notifVal == null ? void 0 : notifVal.alertTitle;\n          _this._subtitle = notifVal == null ? void 0 : notifVal.subtitle;\n          _this._sound = notifVal.sound;\n          _this._badgeCount = notifVal.badge;\n          _this._category = notifVal.category;\n          _this._contentAvailable = notifVal['content-available'];\n          _this._threadID = notifVal['thread-id'];\n          _this._fireDate = notifVal.fireDate;\n        } else {\n          _this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      this._badgeCount = nativeNotif.badge || nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.sound || nativeNotif.soundName;\n      this._alert = nativeNotif.body;\n      this._title = nativeNotif == null ? void 0 : nativeNotif.title;\n      this._subtitle = nativeNotif == null ? void 0 : nativeNotif.subtitle;\n      this._threadID = nativeNotif['thread-id'];\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n      this._fireDate = nativeNotif.fireDate;\n    }\n  }\n\n  _createClass(PushNotificationIOS, [{\n    key: \"finish\",\n    value: function finish(fetchResult) {\n      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {\n        return;\n      }\n\n      this._remoteNotificationCompleteCallbackCalled = true;\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.onFinishRemoteNotification(this._notificationId, fetchResult);\n    }\n  }, {\n    key: \"getMessage\",\n    value: function getMessage() {\n      if (typeof this._alert === 'object') {\n        var _this$_alert;\n\n        return (_this$_alert = this._alert) == null ? void 0 : _this$_alert.body;\n      }\n\n      return this._alert;\n    }\n  }, {\n    key: \"getSound\",\n    value: function getSound() {\n      return this._sound;\n    }\n  }, {\n    key: \"getCategory\",\n    value: function getCategory() {\n      return this._category;\n    }\n  }, {\n    key: \"getAlert\",\n    value: function getAlert() {\n      return this._alert;\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      if (typeof this._alert === 'object') {\n        var _this$_alert2;\n\n        return (_this$_alert2 = this._alert) == null ? void 0 : _this$_alert2.title;\n      }\n\n      return this._title;\n    }\n  }, {\n    key: \"getSubtitle\",\n    value: function getSubtitle() {\n      if (typeof this._alert === 'object') {\n        var _this$_alert3;\n\n        return (_this$_alert3 = this._alert) == null ? void 0 : _this$_alert3.subtitle;\n      }\n\n      return this._subtitle;\n    }\n  }, {\n    key: \"getContentAvailable\",\n    value: function getContentAvailable() {\n      return this._contentAvailable;\n    }\n  }, {\n    key: \"getBadgeCount\",\n    value: function getBadgeCount() {\n      return this._badgeCount;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n  }, {\n    key: \"getThreadID\",\n    value: function getThreadID() {\n      return this._threadID;\n    }\n  }, {\n    key: \"getActionIdentifier\",\n    value: function getActionIdentifier() {\n      return this._actionIdentifier;\n    }\n  }, {\n    key: \"getUserText\",\n    value: function getUserText() {\n      return this._userText;\n    }\n  }], [{\n    key: \"presentLocalNotification\",\n    value: function presentLocalNotification(details) {\n      RNCPushNotificationIOS.presentLocalNotification(details);\n    }\n  }, {\n    key: \"scheduleLocalNotification\",\n    value: function scheduleLocalNotification(details) {\n      RNCPushNotificationIOS.scheduleLocalNotification(details);\n    }\n  }, {\n    key: \"addNotificationRequest\",\n    value: function addNotificationRequest(request) {\n      var handledRequest = request.fireDate instanceof Date ? _objectSpread(_objectSpread({}, request), {}, {\n        fireDate: request.fireDate.toISOString()\n      }) : request;\n\n      var finalRequest = _objectSpread(_objectSpread({}, handledRequest), {}, {\n        repeatsComponent: request.repeatsComponent || {}\n      });\n\n      RNCPushNotificationIOS.addNotificationRequest(finalRequest);\n    }\n  }, {\n    key: \"setNotificationCategories\",\n    value: function setNotificationCategories(categories) {\n      RNCPushNotificationIOS.setNotificationCategories(categories);\n    }\n  }, {\n    key: \"cancelAllLocalNotifications\",\n    value: function cancelAllLocalNotifications() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.cancelAllLocalNotifications();\n    }\n  }, {\n    key: \"removeAllPendingNotificationRequests\",\n    value: function removeAllPendingNotificationRequests() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removeAllPendingNotificationRequests();\n    }\n  }, {\n    key: \"removePendingNotificationRequests\",\n    value: function removePendingNotificationRequests(identifiers) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removePendingNotificationRequests(identifiers);\n    }\n  }, {\n    key: \"removeAllDeliveredNotifications\",\n    value: function removeAllDeliveredNotifications() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removeAllDeliveredNotifications();\n    }\n  }, {\n    key: \"getDeliveredNotifications\",\n    value: function getDeliveredNotifications(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getDeliveredNotifications(callback);\n    }\n  }, {\n    key: \"removeDeliveredNotifications\",\n    value: function removeDeliveredNotifications(identifiers) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removeDeliveredNotifications(identifiers);\n    }\n  }, {\n    key: \"setApplicationIconBadgeNumber\",\n    value: function setApplicationIconBadgeNumber(number) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.setApplicationIconBadgeNumber(number);\n    }\n  }, {\n    key: \"getApplicationIconBadgeNumber\",\n    value: function getApplicationIconBadgeNumber(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getApplicationIconBadgeNumber(callback);\n    }\n  }, {\n    key: \"cancelLocalNotifications\",\n    value: function cancelLocalNotifications(userInfo) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.cancelLocalNotifications(userInfo);\n    }\n  }, {\n    key: \"getScheduledLocalNotifications\",\n    value: function getScheduledLocalNotifications(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getScheduledLocalNotifications(callback);\n    }\n  }, {\n    key: \"getPendingNotificationRequests\",\n    value: function getPendingNotificationRequests(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getPendingNotificationRequests(callback);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');\n      var listener;\n\n      if (type === 'notification') {\n        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {\n          handler(new PushNotificationIOS(notifData));\n        });\n      } else if (type === 'localNotification') {\n        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {\n          handler(new PushNotificationIOS(notifData));\n        });\n      } else if (type === 'register') {\n        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {\n          handler(registrationInfo.deviceToken);\n        });\n      } else if (type === 'registrationError') {\n        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {\n          handler(errorInfo);\n        });\n      }\n\n      _notifHandlers.set(type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type) {\n      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');\n\n      var listener = _notifHandlers.get(type);\n\n      if (!listener) {\n        return;\n      }\n\n      listener.remove();\n\n      _notifHandlers.delete(type);\n    }\n  }, {\n    key: \"requestPermissions\",\n    value: function requestPermissions(permissions) {\n      var requestedPermissions = {\n        alert: true,\n        badge: true,\n        sound: true\n      };\n\n      if (permissions) {\n        requestedPermissions = {\n          alert: !!permissions.alert,\n          badge: !!permissions.badge,\n          sound: !!permissions.sound,\n          critical: !!permissions.critical\n        };\n      }\n\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      return RNCPushNotificationIOS.requestPermissions(requestedPermissions);\n    }\n  }, {\n    key: \"abandonPermissions\",\n    value: function abandonPermissions() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.abandonPermissions();\n    }\n  }, {\n    key: \"checkPermissions\",\n    value: function checkPermissions(callback) {\n      invariant(typeof callback === 'function', 'Must provide a valid callback');\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.checkPermissions(callback);\n    }\n  }, {\n    key: \"getInitialNotification\",\n    value: function getInitialNotification() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      return RNCPushNotificationIOS.getInitialNotification().then(function (notification) {\n        return notification && new PushNotificationIOS(notification);\n      });\n    }\n  }]);\n\n  return PushNotificationIOS;\n}();\n\nPushNotificationIOS.FetchResult = {\n  NewData: 'UIBackgroundFetchResultNewData',\n  NoData: 'UIBackgroundFetchResultNoData',\n  ResultFailed: 'UIBackgroundFetchResultFailed'\n};\nPushNotificationIOS.AuthorizationStatus = {\n  UNAuthorizationStatusNotDetermined: 0,\n  UNAuthorizationStatusDenied: 1,\n  UNAuthorizationStatusAuthorized: 2,\n  UNAuthorizationStatusProvisional: 3\n};\nexport default PushNotificationIOS;","map":{"version":3,"names":["invariant","RNCPushNotificationIOS","NativeModules","PushNotificationEmitter","NativeEventEmitter","_notifHandlers","Map","DEVICE_NOTIF_EVENT","NOTIF_REGISTER_EVENT","NOTIF_REGISTRATION_ERROR_EVENT","DEVICE_LOCAL_NOTIF_EVENT","PushNotificationIOS","nativeNotif","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","_actionIdentifier","actionIdentifier","_userText","userText","Object","keys","forEach","notifKey","notifVal","_alert","alert","_title","alertTitle","_subtitle","subtitle","_sound","sound","_badgeCount","badge","_category","category","_contentAvailable","_threadID","_fireDate","fireDate","applicationIconBadgeNumber","soundName","body","title","userInfo","fetchResult","onFinishRemoteNotification","details","presentLocalNotification","scheduleLocalNotification","request","handledRequest","Date","toISOString","finalRequest","repeatsComponent","addNotificationRequest","categories","setNotificationCategories","cancelAllLocalNotifications","removeAllPendingNotificationRequests","identifiers","removePendingNotificationRequests","removeAllDeliveredNotifications","callback","getDeliveredNotifications","removeDeliveredNotifications","number","setApplicationIconBadgeNumber","getApplicationIconBadgeNumber","cancelLocalNotifications","getScheduledLocalNotifications","getPendingNotificationRequests","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","get","remove","delete","permissions","requestedPermissions","critical","requestPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","FetchResult","NewData","NoData","ResultFailed","AuthorizationStatus","UNAuthorizationStatusNotDetermined","UNAuthorizationStatusDenied","UNAuthorizationStatusAuthorized","UNAuthorizationStatusProvisional"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/@react-native-community/push-notification-ios/js/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport {NativeEventEmitter, NativeModules} from 'react-native';\nimport invariant from 'invariant';\nimport type {\n  NotificationAlert,\n  NotificationRequest,\n  NotificationCategory,\n  NotificationAction,\n} from './types';\nconst {RNCPushNotificationIOS} = NativeModules;\n\nconst PushNotificationEmitter = new NativeEventEmitter(RNCPushNotificationIOS);\n\nconst _notifHandlers = new Map();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type {\n  NotificationAlert,\n  NotificationRequest,\n  NotificationCategory,\n  NotificationAction,\n};\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n};\n\nexport type AuthorizationStatus = {\n  UNAuthorizationStatusNotDetermined: 0,\n  UNAuthorizationStatusDenied: 1,\n  UNAuthorizationStatusAuthorized: 2,\n  UNAuthorizationStatusProvisional: 3,\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Keys<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n}>;\n\n/**\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * See https://reactnative.dev/docs/pushnotificationios.html\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | NotificationAlert;\n  _title: string;\n  _subtitle: string;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  /**\n   * The id of action the user has taken taken.\n   */\n  _actionIdentifier: ?string;\n  /**\n   * The text user has input if user responded with a text action.\n   */\n  _userText: ?string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n  _fireDate: string | Date;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  static AuthorizationStatus: AuthorizationStatus = {\n    UNAuthorizationStatusNotDetermined: 0,\n    UNAuthorizationStatusDenied: 1,\n    UNAuthorizationStatusAuthorized: 2,\n    UNAuthorizationStatusProvisional: 3,\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   * @deprecated use `addNotificationRequest` instead\n   */\n  static presentLocalNotification(details: Object) {\n    RNCPushNotificationIOS.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   * @deprecated use `addNotificationRequest` instead\n   */\n  static scheduleLocalNotification(details: Object) {\n    RNCPushNotificationIOS.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Sends notificationRequest to notification center at specified firedate.\n   * Fires immediately if firedate is not set.\n   */\n  static addNotificationRequest(request: NotificationRequest) {\n    const handledRequest =\n      request.fireDate instanceof Date\n        ? {...request, fireDate: request.fireDate.toISOString()}\n        : request;\n    const finalRequest = {\n      ...handledRequest,\n      repeatsComponent: request.repeatsComponent || {},\n    };\n\n    RNCPushNotificationIOS.addNotificationRequest(finalRequest);\n  }\n\n  /**\n   * Sets notification category to notification center.\n   * Used to set specific actions for notifications that contains specified category\n   */\n  static setNotificationCategories(categories: NotificationCategory[]) {\n    RNCPushNotificationIOS.setNotificationCategories(categories);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications.\n   * @deprecated use `removeAllPendingNotificationRequests` instead\n   * - This method is deprecated in iOS 10 and will be removed from future release\n   */\n  static cancelAllLocalNotifications() {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Removes all pending notifications\n   */\n  static removeAllPendingNotificationRequests() {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removeAllPendingNotificationRequests();\n  }\n\n  /**\n   * Removes pending notifications with given identifier strings.\n   */\n  static removePendingNotificationRequests(identifiers: string[]) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removePendingNotificationRequests(identifiers);\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the app’s notifications that are still displayed in Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   * @deprecated - use `removePendingNotifications`\n   * See https://reactnative.dev/docs/pushnotificationios.html#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   * @deprecated - use `getPendingNotificationRequests`\n   */\n  static getScheduledLocalNotifications(callback: Function) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Gets the pending local notification requests.\n   */\n  static getPendingNotificationRequests(\n    callback: (requests: NotificationRequest[]) => void,\n  ) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getPendingNotificationRequests(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app\n   * is running in the foreground or the background.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#addeventlistener\n   */\n  static addEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        (notifData) => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        (notifData) => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        (registrationInfo) => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        (errorInfo) => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removeeventlistener\n   */\n  static removeEventListener(type: PushNotificationEventName) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n    critical?: boolean,\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n    critical: boolean,\n  }> {\n    let requestedPermissions = {\n      alert: true,\n      badge: true,\n      sound: true,\n    };\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n        critical: !!permissions.critical,\n      };\n    }\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    return RNCPushNotificationIOS.requestPermissions(requestedPermissions);\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#abandonpermissions\n   */\n  static abandonPermissions() {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#checkpermissions\n   */\n  static checkPermissions(callback: Function) {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    return RNCPushNotificationIOS.getInitialNotification().then(\n      (notification) => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    this._actionIdentifier = nativeNotif.actionIdentifier;\n    this._userText = nativeNotif.userText;\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html\n      Object.keys(nativeNotif).forEach((notifKey) => {\n        const notifVal = nativeNotif[notifKey];\n\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._title = notifVal?.alertTitle;\n          this._subtitle = notifVal?.subtitle;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n          this._fireDate = notifVal.fireDate;\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      // TODO: remove applicationIconBadgeNumber on next major version\n      this._badgeCount =\n        nativeNotif.badge || nativeNotif.applicationIconBadgeNumber;\n      // TODO: remove soundName on next major version\n      this._sound = nativeNotif.sound || nativeNotif.soundName;\n      this._alert = nativeNotif.body;\n      this._title = nativeNotif?.title;\n      this._subtitle = nativeNotif?.subtitle;\n      this._threadID = nativeNotif['thread-id'];\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n      this._fireDate = nativeNotif.fireDate;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#finish\n   */\n  finish(fetchResult: string) {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    if (typeof this._alert === 'object') {\n      return this._alert?.body;\n    }\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the notification's title from the `aps` object\n   *\n   */\n  getTitle(): ?string | ?Object {\n    if (typeof this._alert === 'object') {\n      return this._alert?.title;\n    }\n    return this._title;\n  }\n\n  /**\n   * Gets the notification's subtitle from the `aps` object\n   *\n   */\n  getSubtitle(): ?string | ?Object {\n    if (typeof this._alert === 'object') {\n      return this._alert?.subtitle;\n    }\n    return this._subtitle;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n\n  /**\n   * Get's the action id of the notification action user has taken.\n   */\n  getActionIdentifier(): ?string {\n    return this._actionIdentifier;\n  }\n\n  /**\n   * Gets the text user has inputed if user has taken the text action response.\n   */\n  getUserText(): ?string {\n    return this._userText;\n  }\n}\n\nexport default PushNotificationIOS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}