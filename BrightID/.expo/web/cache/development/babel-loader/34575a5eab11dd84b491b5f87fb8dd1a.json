{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _store = require(\"../../store\");\n\nvar _TaskCard = _interopRequireDefault(require(\"./TaskCard\"));\n\nvar _UserTasks = require(\"./UserTasks\");\n\nvar _TasksSlice = require(\"./TasksSlice\");\n\nvar _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TaskCardController.tsx\";\n\nfunction TaskCardController(_ref) {\n  var taskId = _ref.taskId;\n  var dispatch = (0, _store.useDispatch)();\n  var storeTask = (0, _store.useSelector)(function (state) {\n    return state.tasks[taskId];\n  });\n  var extendedTask = (0, _extends2.default)({}, storeTask, _UserTasks.UserTasks[taskId]);\n\n  var reset = function reset() {\n    dispatch((0, _TasksSlice.resetTask)(taskId));\n  };\n\n  return _react.default.createElement(_TaskCard.default, {\n    description: extendedTask.description,\n    fulfilled: extendedTask.completed,\n    id: extendedTask.id,\n    title: extendedTask.title,\n    url: extendedTask.url,\n    navigationTarget: extendedTask.navigationTarget,\n    onClick: __DEV__ ? reset : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  });\n}\n\nvar _default = TaskCardController;\nexports.default = _default;","map":{"version":3,"names":["TaskCardController","taskId","dispatch","useDispatch","storeTask","useSelector","state","tasks","extendedTask","UserTasks","reset","resetTask","description","completed","id","title","url","navigationTarget","__DEV__"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TaskCardController.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from '@/store';\nimport TaskCard from './TaskCard';\nimport { UserTasks } from './UserTasks';\nimport { resetTask } from './TasksSlice';\n\n/*\n  Purpose: Setup required data for rendering TaskCard by\n  combining static Task descriptions with current Task state from Redux\n */\ntype TaskCardControllerProps = {\n  taskId: string;\n};\n\nfunction TaskCardController({ taskId }: TaskCardControllerProps) {\n  const dispatch = useDispatch();\n  const storeTask = useSelector((state: State) => state.tasks[taskId]);\n  const extendedTask = {\n    ...storeTask,\n    ...UserTasks[taskId],\n  };\n\n  const reset = () => {\n    dispatch(resetTask(taskId));\n  };\n\n  return (\n    <TaskCard\n      description={extendedTask.description}\n      fulfilled={extendedTask.completed}\n      id={extendedTask.id}\n      title={extendedTask.title}\n      url={extendedTask.url}\n      navigationTarget={extendedTask.navigationTarget}\n      onClick={__DEV__ ? reset : null}\n    />\n  );\n}\n\nexport default TaskCardController;\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAUA,SAASA,kBAAT,OAAiE;EAAA,IAAnCC,MAAmC,QAAnCA,MAAmC;EAC/D,IAAMC,QAAQ,GAAG,IAAAC,kBAAA,GAAjB;EACA,IAAMC,SAAS,GAAG,IAAAC,kBAAA,EAAY,UAACC,KAAD;IAAA,OAAkBA,KAAK,CAACC,KAAN,CAAYN,MAAZ,CAAlB;EAAA,CAAZ,CAAlB;EACA,IAAMO,YAAY,8BACbJ,SADa,EAEbK,oBAAA,CAAUR,MAAV,CAFa,CAAlB;;EAKA,IAAMS,KAAK,GAAG,SAARA,KAAQ,GAAM;IAClBR,QAAQ,CAAC,IAAAS,qBAAA,EAAUV,MAAV,CAAD,CAAR;EACD,CAFD;;EAIA,OACE,6BAAC,iBAAD;IACE,WAAW,EAAEO,YAAY,CAACI,WAD5B;IAEE,SAAS,EAAEJ,YAAY,CAACK,SAF1B;IAGE,EAAE,EAAEL,YAAY,CAACM,EAHnB;IAIE,KAAK,EAAEN,YAAY,CAACO,KAJtB;IAKE,GAAG,EAAEP,YAAY,CAACQ,GALpB;IAME,gBAAgB,EAAER,YAAY,CAACS,gBANjC;IAOE,OAAO,EAAEC,OAAO,GAAGR,KAAH,GAAW,IAP7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF;AAWD;;eAEcV,kB"},"metadata":{},"sourceType":"script"}