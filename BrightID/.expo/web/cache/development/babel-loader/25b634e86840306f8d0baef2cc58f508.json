{"ast":null,"code":"export var INVITE_ACTIVE = 'active';\nexport var INVITE_REJECTED = 'rejected';\nexport var INVITE_ACCEPTED = 'accepted';\nexport var BACKUP_URL = 'https://explorer.brightid.org';\nexport var OPERATION_TRACE_TIME = 2 * 60 * 1000;\nexport var LOCAL_OPERATION_KEEP_THRESHOLD = 60 * 60 * 24 * 7 * 1000;\nexport var operation_states = {\n  UNKNOWN: 'unknown',\n  INIT: 'init',\n  SENT: 'sent',\n  APPLIED: 'applied',\n  FAILED: 'failed',\n  EXPIRED: 'expired'\n};\nexport var CHANNEL_TTL = 900000;\nexport var CHANNEL_CONNECTION_LIMIT = 30;\nexport var MIN_CHANNEL_JOIN_TTL = 5000;\nexport var PROFILE_POLL_INTERVAL = 2000;\nexport var RECOVERY_COOLDOWN_DURATION = 7 * 24 * 60 * 60 * 1000;\nexport var RECOVERY_COOLDOWN_EXEMPTION = 24 * 60 * 60 * 1000;\nexport var PROFILE_VERSION = 1;\nexport var POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE = 0.6;\nexport var MAX_DISPLAY_CONNECTIONS = 200;\nexport var MAX_CONNECTIONS_DUPLICATE_SEARCH = 1000;\nexport var CONNECTION_STALE_AGE = 60 * 15 * 1000;\nexport var CHANNEL_INFO_NAME = 'channelInfo.json';\nexport var CHANNEL_INFO_VERSION_1 = 1;\nexport var CHANNEL_INFO_VERSION_2 = 2;\nexport var MIN_CHANNEL_INFO_VERSION = CHANNEL_INFO_VERSION_1;\nexport var MAX_CHANNEL_INFO_VERSION = CHANNEL_INFO_VERSION_2;\nexport var IMPORT_PREFIX = 'sig_';\nexport var CHANNEL_UPLOAD_RETRY_COUNT = 5;\nexport var CHANNEL_UPLOAD_RETRY_INTERVAL = 5000;\nexport var RECOVERY_CHANNEL_TTL = 60 * 60 * 24 * 1000;\nexport var ORANGE = '#ED7A5D';\nexport var LIGHTBLUE = '#4A90E2';\nexport var DARK_ORANGE = '#B64B32';\nexport var NODE_CHOOSER_TIMEOUT_MS = 20 * 1000;\nexport var requiredSemVer = '^6.9.0';\nexport var CONNECTIONS_TYPE = 'connections';\nexport var GROUPS_TYPE = 'groups';\nexport var MISC_TYPE = 'misc';\nexport var NONE_TYPE = 'none';\nexport var MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION = 3;\nexport var MIN_RECOVERY_CONNECTIONS = 3;\nexport var connection_levels = {\n  REPORTED: 'reported',\n  SUSPICIOUS: 'suspicious',\n  JUST_MET: 'just met',\n  ALREADY_KNOWN: 'already known',\n  RECOVERY: 'recovery'\n};\nexport var report_reasons = {\n  FAKE: 'fake',\n  DUPLICATE: 'duplicate',\n  SPAMMER: 'spammer',\n  DECEASED: 'deceased',\n  REPLACED: 'replaced',\n  OTHER: 'other'\n};\nexport var qrCodeURL_types;\n\n(function (qrCodeURL_types) {\n  qrCodeURL_types[\"CONNECTION\"] = \"1\";\n  qrCodeURL_types[\"RECOVERY\"] = \"2\";\n  qrCodeURL_types[\"IMPORT\"] = \"3\";\n  qrCodeURL_types[\"SYNC\"] = \"4\";\n})(qrCodeURL_types || (qrCodeURL_types = {}));\n\nexport var report_sources;\n\n(function (report_sources) {\n  report_sources[\"PREVIEW\"] = \"preview\";\n  report_sources[\"RECONNECT\"] = \"reconnect\";\n  report_sources[\"PROFILE\"] = \"profile\";\n})(report_sources || (report_sources = {}));\n\nexport var SOCIAL_MEDIA_SIG_WAIT_TIME = 86400000;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/constants.ts"],"names":["INVITE_ACTIVE","INVITE_REJECTED","INVITE_ACCEPTED","BACKUP_URL","OPERATION_TRACE_TIME","LOCAL_OPERATION_KEEP_THRESHOLD","operation_states","UNKNOWN","INIT","SENT","APPLIED","FAILED","EXPIRED","CHANNEL_TTL","CHANNEL_CONNECTION_LIMIT","MIN_CHANNEL_JOIN_TTL","PROFILE_POLL_INTERVAL","RECOVERY_COOLDOWN_DURATION","RECOVERY_COOLDOWN_EXEMPTION","PROFILE_VERSION","POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE","MAX_DISPLAY_CONNECTIONS","MAX_CONNECTIONS_DUPLICATE_SEARCH","CONNECTION_STALE_AGE","CHANNEL_INFO_NAME","CHANNEL_INFO_VERSION_1","CHANNEL_INFO_VERSION_2","MIN_CHANNEL_INFO_VERSION","MAX_CHANNEL_INFO_VERSION","IMPORT_PREFIX","CHANNEL_UPLOAD_RETRY_COUNT","CHANNEL_UPLOAD_RETRY_INTERVAL","RECOVERY_CHANNEL_TTL","ORANGE","LIGHTBLUE","DARK_ORANGE","NODE_CHOOSER_TIMEOUT_MS","requiredSemVer","CONNECTIONS_TYPE","GROUPS_TYPE","MISC_TYPE","NONE_TYPE","MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION","MIN_RECOVERY_CONNECTIONS","connection_levels","REPORTED","SUSPICIOUS","JUST_MET","ALREADY_KNOWN","RECOVERY","report_reasons","FAKE","DUPLICATE","SPAMMER","DECEASED","REPLACED","OTHER","qrCodeURL_types","report_sources","SOCIAL_MEDIA_SIG_WAIT_TIME"],"mappings":"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","sourcesContent":["/** ** INVITE CONSTANTS  *** */\n\nexport const INVITE_ACTIVE = 'active';\nexport const INVITE_REJECTED = 'rejected';\nexport const INVITE_ACCEPTED = 'accepted';\n\nexport const BACKUP_URL = 'https://explorer.brightid.org';\n\n// Operation & API constants\n// Max. time to wait for operation result\nexport const OPERATION_TRACE_TIME = 2 * 60 * 1000; // 2 minutes\n// How long to keep \"done\" operations (success, failed or expired) in local redux store\nexport const LOCAL_OPERATION_KEEP_THRESHOLD = 60 * 60 * 24 * 7 * 1000; // 1 week\nexport const operation_states = {\n  UNKNOWN: 'unknown',\n  INIT: 'init',\n  SENT: 'sent',\n  APPLIED: 'applied',\n  FAILED: 'failed',\n  EXPIRED: 'expired',\n};\n\n// CONNECTION CONSTANTS\nexport const CHANNEL_TTL = 900000; // 15 minutes\nexport const CHANNEL_CONNECTION_LIMIT = 30; // maximum number of connections allowed in channel.\nexport const MIN_CHANNEL_JOIN_TTL = 5000;\nexport const PROFILE_POLL_INTERVAL = 2000;\nexport const RECOVERY_COOLDOWN_DURATION = 7 * 24 * 60 * 60 * 1000; // 1 week\nexport const RECOVERY_COOLDOWN_EXEMPTION = 24 * 60 * 60 * 1000; // 24 hours\nexport const PROFILE_VERSION = 1;\nexport const POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE = 0.6;\nexport const MAX_DISPLAY_CONNECTIONS = 200;\nexport const MAX_CONNECTIONS_DUPLICATE_SEARCH = 1000;\nexport const CONNECTION_STALE_AGE = 60 * 15 * 1000;\n\n// Channel info\nexport const CHANNEL_INFO_NAME = 'channelInfo.json';\nexport const CHANNEL_INFO_VERSION_1 = 1; // Initial channel info format\nexport const CHANNEL_INFO_VERSION_2 = 2; // Adds STAR channel type\n// the oldest channel info format the client understands.\nexport const MIN_CHANNEL_INFO_VERSION = CHANNEL_INFO_VERSION_1;\n// the newest channel info format the client understands.\nexport const MAX_CHANNEL_INFO_VERSION = CHANNEL_INFO_VERSION_2;\n// TODO: Set dedicated prefix for importing once node backends are updated\nexport const IMPORT_PREFIX = 'sig_';\nexport const CHANNEL_UPLOAD_RETRY_COUNT = 5; // max number of upload retries when upload failed\nexport const CHANNEL_UPLOAD_RETRY_INTERVAL = 5000; // ms to wait between retries\nexport const RECOVERY_CHANNEL_TTL = 60 * 60 * 24 * 1000; // 24 hours\n\n//* * ** THEME CONSTANTS  *** */\nexport const ORANGE = '#ED7A5D';\nexport const LIGHTBLUE = '#4A90E2';\nexport const DARK_ORANGE = '#B64B32';\n\n/** Nodechooser constants * */\nexport const NODE_CHOOSER_TIMEOUT_MS = 20 * 1000; // Fail if no valid node found within timeout\nexport const requiredSemVer = '^6.9.0'; // client requires this node version\n\n/** ** NOTIFICATION CONSTANTS  *** */\nexport const CONNECTIONS_TYPE = 'connections';\nexport const GROUPS_TYPE = 'groups';\nexport const MISC_TYPE = 'misc';\nexport const NONE_TYPE = 'none';\nexport const MIN_CONNECTIONS_FOR_RECOVERY_NOTIFICATION = 3;\nexport const MIN_RECOVERY_CONNECTIONS = 3;\n\n/** ** CONNECTION CONFIDENCE LEVELS *** */\n\nexport const connection_levels = {\n  REPORTED: 'reported',\n  SUSPICIOUS: 'suspicious',\n  JUST_MET: 'just met',\n  ALREADY_KNOWN: 'already known',\n  RECOVERY: 'recovery',\n} as const;\n\nexport const report_reasons = {\n  FAKE: 'fake',\n  DUPLICATE: 'duplicate',\n  SPAMMER: 'spammer',\n  DECEASED: 'deceased',\n  REPLACED: 'replaced',\n  OTHER: 'other',\n};\n\nexport enum qrCodeURL_types {\n  CONNECTION = '1', // qrcode url is for connection channel\n  RECOVERY = '2', // qrcode url is for recovery channel\n  IMPORT = '3', // qrcode url is for import channel\n  SYNC = '4', // qrcode url is for syncing devices channel\n}\n\nexport enum report_sources {\n  PREVIEW = 'preview',\n  RECONNECT = 'reconnect',\n  PROFILE = 'profile',\n}\n\nexport const SOCIAL_MEDIA_SIG_WAIT_TIME = 86400000;\n"]},"metadata":{},"sourceType":"module"}