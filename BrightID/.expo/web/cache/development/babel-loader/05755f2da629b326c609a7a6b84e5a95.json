{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font\";\n\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset) {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\nexport function getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri,\n    display: display\n  };\n}\n\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \" + type);\n}\n\nexport function loadSingleFontAsync(name, input) {\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n            throwInvalidSourceError(input);\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name, input));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":["asset","FontDisplay","uri","uriFromFontSource","display","displayFromFontSource","throwInvalidSourceError","type","JSON","input","ExpoFontLoader"],"mappings":";AACA,SAAA,UAAA,QAAA,mBAAA;AAEA,OAAA,cAAA;AACA,SAAA,WAAA;;AAGA,SAAA,iBAAA,CAAA,KAAA,EAAqC;EACnC,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;IAC7B,OAAOA,KAAK,IAAZ,IAAA;EADF,CAAA,MAEO,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;IACpC,OAAOA,KAAK,CAALA,GAAAA,IAAaA,KAAK,CAAlBA,QAAAA,IAAP,IAAA;EAEF;;EAAA,OAAA,IAAA;AAGF;;AAAA,SAAA,qBAAA,CAAA,KAAA,EAAyC;EACvC,OAAOA,KAAK,CAALA,OAAAA,IAAiBC,WAAW,CAAnC,IAAA;AAGF;;AAAA,OAAM,SAAA,sBAAA,CAAA,IAAA,EAA6C;EACjD,OAAA,KAAA;AAGF;AAAA,OAAM,SAAA,iBAAA,CAAA,MAAA,EAA8C;EAClD,IAAMC,GAAG,GAAGC,iBAAiB,CAA7B,MAA6B,CAA7B;EACA,IAAMC,OAAO,GAAGC,qBAAqB,CAArC,MAAqC,CAArC;;EAEA,IAAI,CAAA,GAAA,IAAQ,OAAA,GAAA,KAAZ,QAAA,EAAqC;IACnCC,uBAAuB,CAAvBA,GAAuB,CAAvBA;EAGF;;EAAA,OAAO;IACLJ,GAAG,EADE,GAAA;IAELE,OAAO,EAFT;EAAO,CAAP;AAMF;;AAAA,SAAA,uBAAA,CAAA,MAAA,EAA4C;EAC1C,IAAIG,IAAI,GAAW,OAAnB,MAAA;EACA,IAAIA,IAAI,KAAR,QAAA,EAAuBA,IAAI,GAAGC,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAPD,CAAOC,CAAPD;EACvB,MAAM,IAAA,UAAA,CAAA,iBAAA,EAAA,+GAAN,IAAM,CAAN;AAMF;;AAAA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,oBAAA,CAAA,QAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAIL,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6B,OAAOE,KAAK,CAAZ,GAAA,KAA7B,QAAA,IAA+DA,KAAa,CAAhF,aAAA,EAAgG;YAC9FH,uBAAuB,CAAvBA,KAAuB,CAAvBA;UALG;;UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAQCI,cAAc,CAAdA,SAAAA,CAAAA,IAAAA,EARD,KAQCA,CARD,CAAA;;QAAA,KAAA,CAAA;QAAA,KAAA,KAAA;UAAA,OAAA,QAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAWP;AAAA,OAAM,SAAA,iBAAA,CAAA,IAAA,EAAwC;EAC5C,OAAA,IAAA;AACD","sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}