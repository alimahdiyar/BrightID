{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _slider = _interopRequireDefault(require(\"@react-native-community/slider\"));\n\nvar _constants = require(\"../../utils/constants\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _connectionLevelStrings = require(\"../../utils/connectionLevelStrings\");\n\nvar _levelsWithoutRecover,\n    _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustlevelSlider.tsx\";\n\nvar levelsWithoutRecovery = (_levelsWithoutRecover = {}, (0, _defineProperty2.default)(_levelsWithoutRecover, _constants.connection_levels.SUSPICIOUS, {\n  description: _i18next.default.t('connectionDetails.text.levelSuspicious')\n}), (0, _defineProperty2.default)(_levelsWithoutRecover, _constants.connection_levels.JUST_MET, {\n  description: _i18next.default.t('connectionDetails.text.levelJustMet')\n}), (0, _defineProperty2.default)(_levelsWithoutRecover, _constants.connection_levels.ALREADY_KNOWN, {\n  description: _i18next.default.t('connectionDetails.text.levelAlreadyKnown')\n}), _levelsWithoutRecover);\nvar levelsWithRecovery = (0, _extends3.default)({}, levelsWithoutRecovery, (0, _defineProperty2.default)({}, _constants.connection_levels.RECOVERY, {\n  description: _i18next.default.t('connectionDetails.text.levelRecovery')\n}));\n\nvar TrustlevelSlider = function TrustlevelSlider(_ref) {\n  var currentLevel = _ref.currentLevel,\n      incomingLevel = _ref.incomingLevel,\n      changeLevelHandler = _ref.changeLevelHandler,\n      verbose = _ref.verbose;\n  var includeRecovery = Array(_constants.connection_levels.ALREADY_KNOWN, _constants.connection_levels.RECOVERY).includes(incomingLevel);\n  var trustLevelDetails = includeRecovery ? levelsWithRecovery : levelsWithoutRecovery;\n  var minValue = 0;\n  var maxValue = Object.keys(trustLevelDetails).length - 1;\n\n  if (currentLevel === _constants.connection_levels.REPORTED) {\n    currentLevel = _constants.connection_levels.SUSPICIOUS;\n  }\n\n  var initialValue = Object.keys(trustLevelDetails).indexOf(currentLevel);\n\n  var valueChangeHandler = function valueChangeHandler(value) {\n    console.log(\"Slider value: \" + value);\n    changeLevelHandler(Object.keys(trustLevelDetails)[value]);\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    testID: \"ConnectionLevelSliderPopup\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.label,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    testID: \"ConnectionLevelSliderText\",\n    style: [styles.labelText, {\n      color: _connectionLevelStrings.connectionLevelColors[currentLevel]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, _connectionLevelStrings.connectionLevelStrings[currentLevel])), verbose && _react.default.createElement(_reactNative.View, {\n    style: styles.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.descriptionText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"\\\"\", trustLevelDetails[currentLevel].description, \"\\\"\")), _react.default.createElement(_slider.default, {\n    testID: \"ConnectionLevelSlider\",\n    style: styles.slider,\n    value: initialValue,\n    minimumValue: minValue,\n    maximumValue: maxValue,\n    step: 1,\n    minimumTrackTintColor: _connectionLevelStrings.connectionLevelColors[_constants.connection_levels.RECOVERY],\n    maximumTrackTintColor: _connectionLevelStrings.connectionLevelColors[_constants.connection_levels.REPORTED],\n    thumbTintColor: _colors.ORANGE,\n    onValueChange: valueChangeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  label: {\n    marginBottom: _deviceConstants.DEVICE_LARGE ? 10 : 8\n  },\n  labelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[17],\n    color: _colors.BLACK\n  },\n  description: {\n    minHeight: 50,\n    marginBottom: _deviceConstants.DEVICE_LARGE ? 10 : 5\n  },\n  descriptionText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    color: _colors.BLACK,\n    textAlign: 'center'\n  },\n  slider: {\n    marginBottom: _deviceConstants.DEVICE_LARGE ? 13 : 11,\n    width: _deviceConstants.WIDTH * 0.9 * 0.8,\n    height: _deviceConstants.DEVICE_LARGE ? 50 : 45\n  }\n});\n\nvar _default = TrustlevelSlider;\nexports.default = _default;","map":{"version":3,"names":["levelsWithoutRecovery","connection_levels","SUSPICIOUS","description","i18next","t","JUST_MET","ALREADY_KNOWN","levelsWithRecovery","RECOVERY","TrustlevelSlider","currentLevel","incomingLevel","changeLevelHandler","verbose","includeRecovery","Array","includes","trustLevelDetails","minValue","maxValue","Object","keys","length","REPORTED","initialValue","indexOf","valueChangeHandler","value","console","log","styles","container","label","labelText","color","connectionLevelColors","connectionLevelStrings","descriptionText","slider","ORANGE","StyleSheet","create","flexDirection","justifyContent","alignItems","marginBottom","DEVICE_LARGE","fontFamily","fontSize","BLACK","minHeight","textAlign","width","WIDTH","height"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustlevelSlider.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport i18next from 'i18next';\nimport Slider from '@react-native-community/slider';\nimport { connection_levels } from '@/utils/constants';\nimport { WIDTH, DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { ORANGE, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  connectionLevelColors,\n  connectionLevelStrings,\n} from '@/utils/connectionLevelStrings';\n\nconst levelsWithoutRecovery = {\n  [connection_levels.SUSPICIOUS]: {\n    description: i18next.t('connectionDetails.text.levelSuspicious'),\n  },\n  [connection_levels.JUST_MET]: {\n    description: i18next.t('connectionDetails.text.levelJustMet'),\n  },\n  [connection_levels.ALREADY_KNOWN]: {\n    description: i18next.t('connectionDetails.text.levelAlreadyKnown'),\n  },\n};\n\nconst levelsWithRecovery = {\n  ...levelsWithoutRecovery,\n  [connection_levels.RECOVERY]: {\n    description: i18next.t('connectionDetails.text.levelRecovery'),\n  },\n};\n\ntype TrustlevelSliderProps = {\n  currentLevel: ConnectionLevel;\n  incomingLevel: ConnectionLevel;\n  changeLevelHandler: (newLevel: ConnectionLevel) => any;\n  verbose: boolean;\n};\n\nconst TrustlevelSlider = ({\n  currentLevel,\n  incomingLevel,\n  changeLevelHandler,\n  verbose,\n}: TrustlevelSliderProps) => {\n  const includeRecovery = Array<ConnectionLevel>(\n    connection_levels.ALREADY_KNOWN,\n    connection_levels.RECOVERY,\n  ).includes(incomingLevel);\n  const trustLevelDetails = includeRecovery\n    ? levelsWithRecovery\n    : levelsWithoutRecovery;\n  const minValue = 0;\n  const maxValue = Object.keys(trustLevelDetails).length - 1;\n\n  // TODO - Quick workaround to catch connections that just changed from \"REPORTED\" to something else, but are not\n  // confirmed on the backend yet. This can happen when you report someone and later reconnect. Proper solution is\n  // to not allow changing level again until the last operation actually confirmed.\n  // RESPONSE: The connection slider will not be avail for users who are marked as REPORTED, because we are no longer deleting reported connections, but I will keep this here in case we run into this issue in the future\n  if (currentLevel === connection_levels.REPORTED) {\n    currentLevel = connection_levels.SUSPICIOUS;\n  }\n\n  // map connectionLevel to index value\n  const initialValue = Object.keys(trustLevelDetails).indexOf(currentLevel);\n  const valueChangeHandler = (value: number) => {\n    console.log(`Slider value: ${value}`);\n    // map index value back to connectionLevel\n    changeLevelHandler(\n      Object.keys(trustLevelDetails)[value] as ConnectionLevel,\n    );\n  };\n\n  return (\n    <View style={styles.container} testID=\"ConnectionLevelSliderPopup\">\n      <View style={styles.label}>\n        <Text\n          testID=\"ConnectionLevelSliderText\"\n          style={[\n            styles.labelText,\n            { color: connectionLevelColors[currentLevel] },\n          ]}\n        >\n          {connectionLevelStrings[currentLevel]}\n        </Text>\n      </View>\n      {verbose && (\n        <View style={styles.description}>\n          <Text style={styles.descriptionText}>\n            \"{trustLevelDetails[currentLevel].description}\"\n          </Text>\n        </View>\n      )}\n      <Slider\n        testID=\"ConnectionLevelSlider\"\n        style={styles.slider}\n        value={initialValue}\n        minimumValue={minValue}\n        maximumValue={maxValue}\n        step={1}\n        minimumTrackTintColor={\n          connectionLevelColors[connection_levels.RECOVERY]\n        }\n        maximumTrackTintColor={\n          connectionLevelColors[connection_levels.REPORTED]\n        }\n        thumbTintColor={ORANGE}\n        onValueChange={valueChangeHandler}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  label: {\n    marginBottom: DEVICE_LARGE ? 10 : 8,\n  },\n  labelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[17],\n    color: BLACK,\n  },\n  description: {\n    // set minimum height so the slider does not jump when the description\n    // text changes between 1 and 2 lines\n    minHeight: 50,\n    marginBottom: DEVICE_LARGE ? 10 : 5,\n  },\n  descriptionText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n    textAlign: 'center',\n  },\n  slider: {\n    marginBottom: DEVICE_LARGE ? 13 : 11,\n    // slider only supports absolute width, so have to calculate manually:\n    // width = deviceWidth * modalWidth (90%) * sliderWidth (80% of modal width)\n    width: WIDTH * 0.9 * 0.8,\n    height: DEVICE_LARGE ? 50 : 45,\n  },\n});\n\nexport default TrustlevelSlider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}