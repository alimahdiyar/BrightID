{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from 'apisauce';\nimport { b64ToUrlSafeB64 } from \"../utils/encoding\";\nvar recoveryUrl = 'https://recovery.brightid.org';\n\nvar BackupService = function () {\n  function BackupService() {\n    _classCallCheck(this, BackupService);\n\n    this.recoveryApi = create({\n      baseURL: recoveryUrl\n    });\n  }\n\n  _createClass(BackupService, [{\n    key: \"getRecovery\",\n    value: function getRecovery(key1, key2) {\n      var res;\n      return _regeneratorRuntime.async(function getRecovery$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.recoveryApi.get(\"/backups/\" + b64ToUrlSafeB64(key1) + \"/\" + b64ToUrlSafeB64(key2)));\n\n            case 2:\n              res = _context.sent;\n              BackupService.throwOnError(res);\n              return _context.abrupt(\"return\", res);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"putRecovery\",\n    value: function putRecovery(key1, key2, data) {\n      var res;\n      return _regeneratorRuntime.async(function putRecovery$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.recoveryApi.put(\"/backups/\" + b64ToUrlSafeB64(key1) + \"/\" + b64ToUrlSafeB64(key2), {\n                data: data\n              }));\n\n            case 2:\n              res = _context2.sent;\n              BackupService.throwOnError(res);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }], [{\n    key: \"throwOnError\",\n    value: function throwOnError(response) {\n      if (response.ok) {\n        return;\n      }\n\n      if (response.data && response.data.errorMessage) {\n        throw new Error(response.data.errorMessage);\n      }\n\n      console.log(\"backupApi response error: \" + response.status + \" - \" + response.problem);\n      throw new Error(response.problem);\n    }\n  }]);\n\n  return BackupService;\n}();\n\nvar backupService = new BackupService();\nexport default backupService;","map":{"version":3,"names":["create","b64ToUrlSafeB64","recoveryUrl","BackupService","recoveryApi","baseURL","key1","key2","get","res","throwOnError","data","put","response","ok","errorMessage","Error","console","log","status","problem","backupService"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/api/backupService.ts"],"sourcesContent":["import { create, ApisauceInstance, ApiResponse } from 'apisauce';\nimport { b64ToUrlSafeB64 } from '@/utils/encoding';\n\nconst recoveryUrl = 'https://recovery.brightid.org';\n\nclass BackupService {\n  recoveryApi: ApisauceInstance;\n\n  constructor() {\n    this.recoveryApi = create({\n      baseURL: recoveryUrl,\n    });\n  }\n\n  static throwOnError(response: ApiResponse<any>) {\n    if (response.ok) {\n      return;\n    }\n    if (response.data && response.data.errorMessage) {\n      throw new Error(response.data.errorMessage);\n    }\n    console.log(\n      `backupApi response error: ${response.status} - ${response.problem}`,\n    );\n    throw new Error(response.problem);\n  }\n\n  async getRecovery(key1: string, key2: string) {\n    const res = await this.recoveryApi.get<GetRecoveryRes, ErrRes>(\n      `/backups/${b64ToUrlSafeB64(key1)}/${b64ToUrlSafeB64(key2)}`,\n    );\n    BackupService.throwOnError(res);\n    return res as unknown as GetRecoveryRes;\n  }\n\n  async putRecovery(key1: string, key2: string, data: string) {\n    const res = await this.recoveryApi.put(\n      `/backups/${b64ToUrlSafeB64(key1)}/${b64ToUrlSafeB64(key2)}`,\n      {\n        data,\n      },\n    );\n    BackupService.throwOnError(res);\n  }\n}\n\nconst backupService = new BackupService();\n\nexport default backupService;\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAsD,UAAtD;AACA,SAASC,eAAT;AAEA,IAAMC,WAAW,GAAG,+BAApB;;IAEMC,a;EAGJ,yBAAc;IAAA;;IACZ,KAAKC,WAAL,GAAmBJ,MAAM,CAAC;MACxBK,OAAO,EAAEH;IADe,CAAD,CAAzB;EAGD;;;;WAeD,qBAAkBI,IAAlB,EAAgCC,IAAhC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACoB,KAAKH,WAAL,CAAiBI,GAAjB,eACJP,eAAe,CAACK,IAAD,CADX,SACqBL,eAAe,CAACM,IAAD,CADpC,CADpB;;YAAA;cACQE,GADR;cAIEN,aAAa,CAACO,YAAd,CAA2BD,GAA3B;cAJF,iCAKSA,GALT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAQA,qBAAkBH,IAAlB,EAAgCC,IAAhC,EAA8CI,IAA9C;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACoB,KAAKP,WAAL,CAAiBQ,GAAjB,eACJX,eAAe,CAACK,IAAD,CADX,SACqBL,eAAe,CAACM,IAAD,CADpC,EAEhB;gBACEI,IAAI,EAAJA;cADF,CAFgB,CADpB;;YAAA;cACQF,GADR;cAOEN,aAAa,CAACO,YAAd,CAA2BD,GAA3B;;YAPF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WArBA,sBAAoBI,QAApB,EAAgD;MAC9C,IAAIA,QAAQ,CAACC,EAAb,EAAiB;QACf;MACD;;MACD,IAAID,QAAQ,CAACF,IAAT,IAAiBE,QAAQ,CAACF,IAAT,CAAcI,YAAnC,EAAiD;QAC/C,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACF,IAAT,CAAcI,YAAxB,CAAN;MACD;;MACDE,OAAO,CAACC,GAAR,gCAC+BL,QAAQ,CAACM,MADxC,WACoDN,QAAQ,CAACO,OAD7D;MAGA,MAAM,IAAIJ,KAAJ,CAAUH,QAAQ,CAACO,OAAnB,CAAN;IACD;;;;;;AAqBH,IAAMC,aAAa,GAAG,IAAIlB,aAAJ,EAAtB;AAEA,eAAekB,aAAf"},"metadata":{},"sourceType":"module"}