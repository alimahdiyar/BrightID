{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport GestureHandler from \"./GestureHandler\";\nimport { TEST_MAX_IF_NOT_NAN } from \"./utils\";\n\nvar DiscreteGestureHandler = function (_GestureHandler) {\n  _inherits(DiscreteGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(DiscreteGestureHandler);\n\n  function DiscreteGestureHandler() {\n    _classCallCheck(this, DiscreteGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiscreteGestureHandler, [{\n    key: \"isDiscrete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, _ref2) {\n      var x = _ref.x,\n          y = _ref.y,\n          deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var maxDeltaX = _ref2.maxDeltaX,\n          maxDeltaY = _ref2.maxDeltaY,\n          maxDistSq = _ref2.maxDistSq,\n          shouldCancelWhenOutside = _ref2.shouldCancelWhenOutside;\n\n      if (shouldCancelWhenOutside) {\n        if (!this.isPointInView({\n          x: x,\n          y: y\n        })) {\n          return true;\n        }\n      }\n\n      return TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref3) {\n      var _ref3$center = _ref3.center,\n          x = _ref3$center.x,\n          y = _ref3$center.y;\n      var rect = this.view.getBoundingClientRect();\n      return {\n        absoluteX: x,\n        absoluteY: y,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref4, _recognizer, _ref5) {\n      var minPointers = _ref4.minPointers,\n          maxPointers = _ref4.maxPointers,\n          maxDeltaX = _ref4.maxDeltaX,\n          maxDeltaY = _ref4.maxDeltaY,\n          maxDistSq = _ref4.maxDistSq,\n          shouldCancelWhenOutside = _ref4.shouldCancelWhenOutside;\n      var pointerLength = _ref5.maxPointers,\n          center = _ref5.center,\n          deltaX = _ref5.deltaX,\n          deltaY = _ref5.deltaY;\n      var validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n\n      if (this.shouldFailUnderCustomCriteria(_objectSpread(_objectSpread({}, center), {}, {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }), {\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        maxDistSq: maxDistSq,\n        shouldCancelWhenOutside: shouldCancelWhenOutside\n      }) || !validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }]);\n\n  return DiscreteGestureHandler;\n}(GestureHandler);\n\nexport default DiscreteGestureHandler;","map":{"version":3,"sources":["DiscreteGestureHandler.ts"],"names":["DiscreteGestureHandler","GestureHandler","shouldFailUnderCustomCriteria","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","TEST_MAX_IF_NOT_NAN","Math","transformNativeEvent","center","rect","absoluteX","absoluteY","isGestureEnabledForEvent","minPointers","maxPointers","pointerLength","validPointerCount","failed","success"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}