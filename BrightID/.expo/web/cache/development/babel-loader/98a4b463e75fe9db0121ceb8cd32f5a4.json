{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"active\", \"style\"],\n    _excluded2 = [\"enabled\"],\n    _excluded3 = [\"enabled\", \"active\"];\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar _Screens;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nvar WebScreen = function (_React$Component) {\n  _inherits(WebScreen, _React$Component);\n\n  var _super = _createSuper(WebScreen);\n\n  function WebScreen() {\n    _classCallCheck(this, WebScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WebScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(View, _extends({\n        hidden: !active,\n        style: [style, {\n          display: active ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n  }]);\n\n  return WebScreen;\n}(React.Component);\n\nvar AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\nexport var shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, _excluded2);\n\n  var _Screens2;\n\n  if (enabled && Platform.OS !== 'web' && (_Screens2 = Screens) !== null && _Screens2 !== void 0 && _Screens2.screensEnabled()) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};\nexport var MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, _excluded3);\n\n  var _Screens3;\n\n  if (enabled && Platform.OS === 'web') {\n    return React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && (_Screens3 = Screens) !== null && _Screens3 !== void 0 && _Screens3.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        activityState: active\n      }, rest));\n    } else {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        active: active\n      }, rest));\n    }\n  }\n\n  return React.createElement(View, rest);\n};","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","WebScreen","React","Component","render","active","style","rest","hidden","display","AnimatedWebScreen","Animated","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","MaybeScreen","activityState"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}