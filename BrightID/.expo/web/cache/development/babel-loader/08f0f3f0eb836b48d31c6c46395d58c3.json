{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport CryptoJS from 'crypto-js';\nimport { eqProps } from 'ramda';\nimport nacl from 'tweetnacl';\nimport { convertPublicKey, convertSecretKey } from 'ed2curve';\nimport store from \"../store\";\nimport { b64ToUint8Array, randomKey, uInt8ArrayToB64 } from \"./encoding\";\nimport { selectConnectionById } from \"../reducer/connectionsSlice\";\nimport { saveImage } from \"./filesystem\";\nimport { INVITE_ACTIVE } from \"./constants\";\nexport var getInviteGroup = function _callee(inviteInfo, api) {\n  var _store$getState, secretKey, groups, existingGroup, conn, _await$api$getProfile, signingKeys, pub, msg, nonce, decryptedMessage, groupAesKey, group, res, data, infoString, info, groupObj, filename;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('getting invite group info', inviteInfo);\n          _store$getState = store.getState(), secretKey = _store$getState.keypair.secretKey, groups = _store$getState.groups.groups;\n          existingGroup = groups.find(function (g) {\n            return g.id === inviteInfo.group;\n          });\n\n          if (!(existingGroup && existingGroup.name && existingGroup.aesKey && existingGroup.aesKey !== '')) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", existingGroup);\n\n        case 6:\n          if (inviteInfo.data) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 8:\n          conn = selectConnectionById(store.getState(), inviteInfo.inviter);\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(api.getProfile(conn.id));\n\n        case 11:\n          _await$api$getProfile = _context.sent;\n          signingKeys = _await$api$getProfile.signingKeys;\n          pub = convertPublicKey(b64ToUint8Array(signingKeys[0]));\n          msg = b64ToUint8Array(inviteInfo.data.split('_')[0]);\n          nonce = b64ToUint8Array(inviteInfo.data.split('_')[1]);\n          decryptedMessage = nacl.box.open(msg, nonce, pub, convertSecretKey(secretKey));\n\n          if (decryptedMessage) {\n            _context.next = 19;\n            break;\n          }\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 19:\n          groupAesKey = uInt8ArrayToB64(decryptedMessage);\n\n          if (groupAesKey) {\n            _context.next = 22;\n            break;\n          }\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 22:\n          _context.next = 24;\n          return _regeneratorRuntime.awrap(api.getGroup(inviteInfo.group));\n\n        case 24:\n          group = _context.sent;\n          _context.next = 27;\n          return _regeneratorRuntime.awrap(fetch(group.url));\n\n        case 27:\n          res = _context.sent;\n          _context.next = 30;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 30:\n          data = _context.sent;\n\n          if (data) {\n            _context.next = 33;\n            break;\n          }\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 33:\n          infoString = CryptoJS.AES.decrypt(data, groupAesKey).toString(CryptoJS.enc.Utf8);\n          info = JSON.parse(infoString);\n          groupObj = _objectSpread(_objectSpread({}, info), group);\n          filename = '';\n\n          if (!groupObj.photo) {\n            _context.next = 41;\n            break;\n          }\n\n          _context.next = 40;\n          return _regeneratorRuntime.awrap(saveImage({\n            imageName: groupObj.id,\n            base64Image: groupObj.photo\n          }));\n\n        case 40:\n          filename = _context.sent;\n\n        case 41:\n          groupObj.photo = {\n            filename: filename\n          };\n          groupObj.aesKey = groupAesKey;\n          return _context.abrupt(\"return\", groupObj);\n\n        case 46:\n          _context.prev = 46;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"error in getting invite info \" + _context.t0.message);\n          return _context.abrupt(\"return\", undefined);\n\n        case 50:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 46]], Promise);\n};\nexport var getInvites = function _callee3(api) {\n  var _store$getState2, id, _store$getState2$grou, oldInvites, inviteInfos, invites;\n\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _store$getState2 = store.getState(), id = _store$getState2.user.id, _store$getState2$grou = _store$getState2.groups.invites, oldInvites = _store$getState2$grou === void 0 ? [] : _store$getState2$grou;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(api.getInvites(id));\n\n        case 4:\n          inviteInfos = _context3.sent;\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(Promise.all(inviteInfos.map(function _callee2(inviteInfo) {\n            var oldInvite;\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    oldInvite = oldInvites.find(eqProps('id', inviteInfo));\n\n                    if (!(oldInvite && (oldInvite.group.name || !oldInvite.data))) {\n                      _context2.next = 5;\n                      break;\n                    }\n\n                    return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, inviteInfo), {}, {\n                      group: oldInvite.group,\n                      state: oldInvite.state\n                    }));\n\n                  case 5:\n                    _context2.t0 = _objectSpread;\n                    _context2.t1 = _objectSpread({}, inviteInfo);\n                    _context2.t2 = {};\n                    _context2.next = 10;\n                    return _regeneratorRuntime.awrap(getInviteGroup(inviteInfo, api));\n\n                  case 10:\n                    _context2.t3 = _context2.sent;\n                    _context2.t4 = INVITE_ACTIVE;\n                    _context2.t5 = {\n                      group: _context2.t3,\n                      state: _context2.t4\n                    };\n                    return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t5));\n\n                  case 14:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 7:\n          invites = _context3.sent;\n          return _context3.abrupt(\"return\", invites.filter(function (invite) {\n            return invite.group;\n          }));\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(\"error in getting invite info \" + _context3.t0.message);\n          return _context3.abrupt(\"return\", []);\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\nexport var encryptAesKey = function _callee4(aesKey, signingKey) {\n  var secretKey, pub, msg, nonce;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          secretKey = store.getState().keypair.secretKey;\n          pub = convertPublicKey(b64ToUint8Array(signingKey));\n          msg = b64ToUint8Array(aesKey);\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(randomKey(24));\n\n        case 6:\n          nonce = _context4.sent;\n          return _context4.abrupt(\"return\", uInt8ArrayToB64(nacl.box(msg, b64ToUint8Array(nonce), pub, convertSecretKey(secretKey))) + \"_\" + nonce);\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0.message);\n          return _context4.abrupt(\"return\", '');\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/invites.ts"],"names":["getInviteGroup","console","secretKey","groups","store","existingGroup","g","inviteInfo","conn","selectConnectionById","signingKeys","api","pub","convertPublicKey","b64ToUint8Array","msg","nonce","decryptedMessage","nacl","convertSecretKey","groupAesKey","uInt8ArrayToB64","group","res","fetch","data","infoString","CryptoJS","info","JSON","groupObj","filename","saveImage","imageName","base64Image","getInvites","id","oldInvites","inviteInfos","invites","Promise","oldInvite","eqProps","state","invite","encryptAesKey","randomKey"],"mappings":"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","sourcesContent":["import CryptoJS from 'crypto-js';\nimport { eqProps } from 'ramda';\nimport nacl from 'tweetnacl';\nimport { convertPublicKey, convertSecretKey } from 'ed2curve';\nimport store from '@/store';\nimport { b64ToUint8Array, randomKey, uInt8ArrayToB64 } from '@/utils/encoding';\nimport { selectConnectionById } from '@/reducer/connectionsSlice';\nimport { saveImage } from './filesystem';\nimport { INVITE_ACTIVE } from './constants';\nimport { NodeApi } from '@/api/brightId';\n\nexport const getInviteGroup = async (inviteInfo: InviteInfo, api: NodeApi) => {\n  try {\n    console.log('getting invite group info', inviteInfo);\n\n    const {\n      keypair: { secretKey },\n      groups: { groups },\n    } = store.getState();\n\n    const existingGroup = groups.find((g) => g.id === inviteInfo.group);\n    if (\n      existingGroup &&\n      existingGroup.name &&\n      existingGroup.aesKey &&\n      existingGroup.aesKey !== ''\n    ) {\n      return existingGroup;\n    }\n\n    if (!inviteInfo.data) {\n      return undefined;\n    }\n\n    const conn = selectConnectionById(store.getState(), inviteInfo.inviter);\n    const { signingKeys } = await api.getProfile(conn.id);\n    const pub = convertPublicKey(b64ToUint8Array(signingKeys[0]));\n    const msg = b64ToUint8Array(inviteInfo.data.split('_')[0]);\n    const nonce = b64ToUint8Array(inviteInfo.data.split('_')[1]);\n    const decryptedMessage = nacl.box.open(\n      msg,\n      nonce,\n      pub,\n      convertSecretKey(secretKey),\n    );\n    if (!decryptedMessage) {\n      // can happen if the user recovered his account after the invitation was created\n      return undefined;\n    }\n    const groupAesKey = uInt8ArrayToB64(decryptedMessage);\n    if (!groupAesKey) {\n      return undefined;\n    }\n\n    // const uuidKey = invite.url.split('/').pop();\n    const group = await api.getGroup(inviteInfo.group);\n    const res = await fetch(group.url);\n    const data = await res.text();\n    if (!data) {\n      return undefined;\n    }\n\n    const infoString = CryptoJS.AES.decrypt(data, groupAesKey).toString(\n      CryptoJS.enc.Utf8,\n    );\n    const info = JSON.parse(infoString);\n    const groupObj = { ...info, ...group };\n    let filename = '';\n    if (groupObj.photo) {\n      filename = await saveImage({\n        imageName: groupObj.id,\n        base64Image: groupObj.photo,\n      });\n    }\n    groupObj.photo = { filename };\n    groupObj.aesKey = groupAesKey;\n    return groupObj;\n  } catch (err) {\n    console.log(`error in getting invite info ${err.message}`);\n    return undefined;\n  }\n};\n\nexport const getInvites = async (api: NodeApi) => {\n  try {\n    const {\n      user: { id },\n      groups: { invites: oldInvites = [] },\n    } = store.getState();\n    const inviteInfos = await api.getInvites(id);\n    const invites: Array<Invite> = await Promise.all(\n      inviteInfos.map(async (inviteInfo) => {\n        const oldInvite = oldInvites.find(eqProps('id', inviteInfo));\n        if (oldInvite && (oldInvite.group.name || !oldInvite.data)) {\n          return {\n            ...inviteInfo,\n            group: oldInvite.group,\n            state: oldInvite.state,\n          };\n        } else {\n          return {\n            ...inviteInfo,\n            group: await getInviteGroup(inviteInfo, api),\n            state: INVITE_ACTIVE,\n          };\n        }\n      }),\n    );\n    // exclude invites where group could not be determined\n    return invites.filter((invite) => invite.group);\n  } catch (err) {\n    console.log(`error in getting invite info ${err.message}`);\n    return [];\n  }\n};\n\n/**\n *\n * @param {string} aesKey\n * @param {string} signingKey\n * @returns string\n */\n\nexport const encryptAesKey = async (aesKey: string, signingKey: string) => {\n  try {\n    const { secretKey } = store.getState().keypair;\n\n    const pub = convertPublicKey(b64ToUint8Array(signingKey));\n    const msg = b64ToUint8Array(aesKey);\n    const nonce = await randomKey(24);\n    return `${uInt8ArrayToB64(\n      nacl.box(msg, b64ToUint8Array(nonce), pub, convertSecretKey(secretKey)),\n    )}_${nonce}`;\n  } catch (err) {\n    console.log(err.message);\n    return '';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}