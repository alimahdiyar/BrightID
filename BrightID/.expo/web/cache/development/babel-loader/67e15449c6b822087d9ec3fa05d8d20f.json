{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useEffect, useMemo, useState, useRef } from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport ViewPager from '@react-native-community/viewpager';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { selectAllUnconfirmedConnections } from \"./pendingConnectionSlice\";\nimport { DEVICE_LARGE, DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { WHITE, GREY, DARK_GREY, BLACK, ORANGE } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { setActiveNotification } from \"../../actions\";\nimport { PreviewConnectionController } from \"./PreviewConnectionController\";\nimport BackArrow from \"../Icons/BackArrow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar REFRESH_VIEWPAGER_TIMEOUT = 1000;\nexport var PendingConnectionsScreen = function PendingConnectionsScreen() {\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var viewPagerRef = useRef(null);\n  var pendingConnections = useSelector(function (state) {\n    return selectAllUnconfirmedConnections(state);\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pendingConnectionsToDisplay = _useState2[0],\n      setPendingConnectionsDisplay = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      activeIndex = _useState6[0],\n      setActiveIndex = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      onLastIndex = _useState8[0],\n      setOnLastIndex = _useState8[1];\n\n  var _useState9 = useState(pendingConnections.length),\n      _useState10 = _slicedToArray(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      confirmed = _useState12[0],\n      setConfirmed = _useState12[1];\n\n  var refreshDisplayConnections = useCallback(function () {\n    var connectionsToDisplay = pendingConnections;\n\n    if (DEVICE_ANDROID && pendingConnections.length > 17) {\n      connectionsToDisplay = pendingConnections.slice(0, 15);\n    }\n\n    if (!isEqual(pendingConnectionsToDisplay, connectionsToDisplay)) {\n      setPendingConnectionsDisplay(connectionsToDisplay);\n    }\n  }, [pendingConnections, pendingConnectionsToDisplay]);\n  useFocusEffect(useCallback(function () {\n    refreshDisplayConnections();\n    dispatch(setActiveNotification(null));\n  }, []));\n  useEffect(function () {\n    if (pendingConnections.length > total) {\n      setTotal(pendingConnections.length);\n    } else if (confirmed > total) {\n      setTotal(confirmed);\n    }\n  }, [pendingConnections, total, confirmed]);\n  useEffect(function () {\n    if (activeIndex === pendingConnectionsToDisplay.length - 1) {\n      setOnLastIndex(true);\n    } else if (onLastIndex) {\n      refreshDisplayConnections();\n      setOnLastIndex(false);\n    }\n  }, [refreshDisplayConnections, pendingConnectionsToDisplay.length, activeIndex, onLastIndex]);\n  useEffect(function () {\n    var goBack = function goBack() {\n      if (activeIndex > 0) {\n        var _viewPagerRef$current;\n\n        (_viewPagerRef$current = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current.setPage(activeIndex - 1);\n        return true;\n      }\n    };\n\n    BackHandler.addEventListener('hardwareBackPress', goBack);\n    return function () {\n      return BackHandler.removeEventListener('hardwareBackPress', goBack);\n    };\n  }, [viewPagerRef, activeIndex]);\n  useEffect(function () {\n    var timeout;\n\n    if (pendingConnections.length === 0) {\n      setLoading(true);\n      timeout = setTimeout(function () {\n        navigation.navigate('Connections');\n      }, REFRESH_VIEWPAGER_TIMEOUT);\n    } else {\n      setLoading(false);\n    }\n\n    return function () {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [pendingConnections.length, navigation]);\n  var PendingConnectionList = useMemo(function () {\n    var renderView = function renderView(item, index) {\n      var last = index === pendingConnectionsToDisplay.length - 1;\n\n      var moveToNext = function moveToNext() {\n        var _viewPagerRef$current2, _viewPagerRef$current3;\n\n        last ? (_viewPagerRef$current2 = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current2.setPage(0) : (_viewPagerRef$current3 = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current3.setPage(index + 1);\n        setConfirmed(function (c) {\n          return c + 1;\n        });\n      };\n\n      return _jsx(View, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        collapsable: false,\n        children: _jsx(PreviewConnectionController, {\n          pendingConnectionId: item.profileId,\n          moveToNext: moveToNext\n        })\n      }, index);\n    };\n\n    console.log('RE-RENDERING VIEWPAGER');\n    var Views = pendingConnectionsToDisplay.map(renderView);\n    return _jsx(ViewPager, {\n      ref: viewPagerRef,\n      style: {\n        flex: 1,\n        width: '100%'\n      },\n      initialPage: 0,\n      onPageSelected: function onPageSelected(e) {\n        setActiveIndex(e.nativeEvent.position);\n      },\n      orientation: \"horizontal\",\n      transitionStyle: \"scroll\",\n      showPageIndicator: false,\n      children: Views\n    });\n  }, [pendingConnectionsToDisplay]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      backgroundColor: WHITE,\n      animated: true\n    }), _jsx(SafeAreaView, {\n      style: styles.container,\n      children: loading ? _jsx(View, {\n        style: styles.loadingContainer,\n        children: _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 44 : 40,\n          type: \"FadingCircleAlt\",\n          color: GREY\n        })\n      }) : _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.titleContainer,\n          children: [_jsx(TouchableOpacity, {\n            testID: \"pendingConnectionsGoBack\",\n            style: styles.cancelButton,\n            onPress: function onPress() {\n              if (total > 1) {\n                navigation.goBack();\n              } else {\n                navigation.navigate('Home');\n              }\n            },\n            children: _jsx(BackArrow, {\n              height: DEVICE_LARGE ? 22 : 20,\n              color: DARK_GREY\n            })\n          }), _jsx(Text, {\n            style: styles.titleText,\n            children: t('pendingConnections.title.confirmationTotal', {\n              confirmed: confirmed,\n              total: total\n            })\n          })]\n        }), PendingConnectionList]\n      })\n    }), _jsx(View, {\n      style: styles.orangeBottom\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    height: 90,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: -80,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  titleContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    paddingVertical: DEVICE_LARGE ? 18 : 12\n  },\n  loadingContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  titleText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[20],\n    textAlign: 'center',\n    color: BLACK\n  },\n  cancelButton: {\n    position: 'absolute',\n    left: 0,\n    width: DEVICE_LARGE ? 60 : 50,\n    alignItems: 'center'\n  }\n});\nexport default PendingConnectionsScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PendingConnectionsScreen.tsx"],"names":["REFRESH_VIEWPAGER_TIMEOUT","PendingConnectionsScreen","navigation","useNavigation","dispatch","useDispatch","t","useTranslation","viewPagerRef","useRef","pendingConnections","useSelector","selectAllUnconfirmedConnections","pendingConnectionsToDisplay","setPendingConnectionsDisplay","useState","loading","setLoading","activeIndex","setActiveIndex","onLastIndex","setOnLastIndex","total","setTotal","confirmed","setConfirmed","refreshDisplayConnections","useCallback","connectionsToDisplay","DEVICE_ANDROID","isEqual","useFocusEffect","setActiveNotification","useEffect","goBack","BackHandler","timeout","setTimeout","clearTimeout","PendingConnectionList","useMemo","renderView","last","index","moveToNext","c","flex","width","item","console","Views","e","styles","DEVICE_LARGE","StyleSheet","orangeBottom","backgroundColor","height","zIndex","container","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","overflow","titleContainer","justifyContent","alignItems","paddingVertical","loadingContainer","titleText","fontFamily","fontSize","textAlign","color","cancelButton","position","left"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport {\n  BackHandler,\n  StyleSheet,\n  StatusBar,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport ViewPager from '@react-native-community/viewpager';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from '@/store';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DEVICE_LARGE, DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { WHITE, GREY, DARK_GREY, BLACK, ORANGE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { setActiveNotification } from '@/actions';\nimport { PreviewConnectionController } from './PreviewConnectionController';\nimport BackArrow from '../Icons/BackArrow';\n\n/**\n * Confirm / Preview Connection  Screen of BrightID\n *\n==================================================================\n *\n */\nconst REFRESH_VIEWPAGER_TIMEOUT = 1000;\n\nexport const PendingConnectionsScreen = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const viewPagerRef = useRef<ViewPager>(null);\n\n  const pendingConnections = useSelector((state: State) => {\n    return selectAllUnconfirmedConnections(state);\n  });\n  // pending connections to display\n  const [pendingConnectionsToDisplay, setPendingConnectionsDisplay] = useState<\n    Array<PendingConnection>\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [onLastIndex, setOnLastIndex] = useState(false);\n  const [total, setTotal] = useState(pendingConnections.length);\n  const [confirmed, setConfirmed] = useState(0);\n\n  const refreshDisplayConnections = useCallback(() => {\n    /**\n     * this will cause the Viewpager to re render\n     * for performance on android, we will limit the list to ~ 15 connections\n     * */\n\n    let connectionsToDisplay = pendingConnections;\n\n    if (DEVICE_ANDROID && pendingConnections.length > 17) {\n      connectionsToDisplay = pendingConnections.slice(0, 15);\n    }\n    // test peformance, alternative would be to map ids\n    if (!isEqual(pendingConnectionsToDisplay, connectionsToDisplay)) {\n      setPendingConnectionsDisplay(connectionsToDisplay);\n    }\n  }, [pendingConnections, pendingConnectionsToDisplay]);\n\n  useFocusEffect(\n    useCallback(() => {\n      refreshDisplayConnections();\n      dispatch(setActiveNotification(null));\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n  );\n\n  useEffect(() => {\n    // update total\n    if (pendingConnections.length > total) {\n      setTotal(pendingConnections.length);\n    } else if (confirmed > total) {\n      setTotal(confirmed);\n    }\n  }, [pendingConnections, total, confirmed]);\n\n  // NAVIGATION\n\n  useEffect(() => {\n    /**\n     * we will always refresh the display list\n     * when navigating away from the last page\n     * */\n    if (activeIndex === pendingConnectionsToDisplay.length - 1) {\n      setOnLastIndex(true);\n    } else if (onLastIndex) {\n      refreshDisplayConnections();\n      setOnLastIndex(false);\n    }\n  }, [\n    refreshDisplayConnections,\n    pendingConnectionsToDisplay.length,\n    activeIndex,\n    onLastIndex,\n  ]);\n\n  // back handling for android\n  useEffect(() => {\n    const goBack = () => {\n      if (activeIndex > 0) {\n        viewPagerRef.current?.setPage(activeIndex - 1);\n        return true;\n      }\n    };\n    BackHandler.addEventListener('hardwareBackPress', goBack);\n    return () => BackHandler.removeEventListener('hardwareBackPress', goBack);\n  }, [viewPagerRef, activeIndex]);\n\n  // leave page if zero pending connections\n  useEffect(() => {\n    let timeout;\n    if (pendingConnections.length === 0) {\n      setLoading(true);\n      timeout = setTimeout(() => {\n        navigation.navigate('Connections');\n      }, REFRESH_VIEWPAGER_TIMEOUT);\n    } else {\n      setLoading(false);\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [pendingConnections.length, navigation]);\n\n  /**\n    the list should only re render sparingly for performance and continuity\n  */\n  const PendingConnectionList = useMemo(() => {\n    const renderView = (item: PendingConnection, index: number) => {\n      const last = index === pendingConnectionsToDisplay.length - 1;\n      const moveToNext = () => {\n        /**\n        setting viewpager active index zero will trigger the list to re - render\n        */\n        last\n          ? viewPagerRef.current?.setPage(0)\n          : viewPagerRef.current?.setPage(index + 1);\n        setConfirmed((c) => c + 1);\n      };\n\n      return (\n        <View\n          style={{ flex: 1, width: '100%' }}\n          collapsable={false}\n          key={index}\n        >\n          <PreviewConnectionController\n            pendingConnectionId={item.profileId}\n            moveToNext={moveToNext}\n          />\n        </View>\n      );\n    };\n    console.log('RE-RENDERING VIEWPAGER');\n\n    const Views = pendingConnectionsToDisplay.map(renderView);\n\n    return (\n      <ViewPager\n        ref={viewPagerRef}\n        style={{ flex: 1, width: '100%' }}\n        initialPage={0}\n        onPageSelected={(e) => {\n          setActiveIndex(e.nativeEvent.position);\n        }}\n        orientation=\"horizontal\"\n        transitionStyle=\"scroll\"\n        showPageIndicator={false}\n      >\n        {Views}\n      </ViewPager>\n    );\n  }, [pendingConnectionsToDisplay]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        backgroundColor={WHITE}\n        animated={true}\n      />\n      <SafeAreaView style={styles.container}>\n        {loading ? (\n          <View style={styles.loadingContainer}>\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 44 : 40}\n              type=\"FadingCircleAlt\"\n              color={GREY}\n            />\n          </View>\n        ) : (\n          <>\n            <View style={styles.titleContainer}>\n              <TouchableOpacity\n                testID=\"pendingConnectionsGoBack\"\n                style={styles.cancelButton}\n                onPress={() => {\n                  if (total > 1) {\n                    // group connections navigate to MyCodeScreen or GroupConnectionScreen\n                    navigation.goBack();\n                  } else {\n                    // single connections navigate home to avoid loop\n                    navigation.navigate('Home');\n                  }\n                }}\n              >\n                <BackArrow height={DEVICE_LARGE ? 22 : 20} color={DARK_GREY} />\n              </TouchableOpacity>\n              <Text style={styles.titleText}>\n                {t('pendingConnections.title.confirmationTotal', {\n                  confirmed,\n                  total,\n                })}\n              </Text>\n            </View>\n            {PendingConnectionList}\n          </>\n        )}\n      </SafeAreaView>\n      <View style={styles.orangeBottom} />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    height: 90,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: -80,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  titleContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    paddingVertical: DEVICE_LARGE ? 18 : 12,\n  },\n  loadingContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  titleText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[20],\n    textAlign: 'center',\n    color: BLACK,\n  },\n  cancelButton: {\n    position: 'absolute',\n    left: 0,\n    width: DEVICE_LARGE ? 60 : 50,\n    alignItems: 'center',\n  },\n});\n\nexport default PendingConnectionsScreen;\n"]},"metadata":{},"sourceType":"module"}