{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createSelector, createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { difference } from 'ramda';\nimport { connection_levels } from \"../utils/constants\";\nimport { RESET_STORE } from \"../actions/resetStore\";\nvar connectionsAdapter = createEntityAdapter();\nvar initialState = {\n  connections: connectionsAdapter.getInitialState(),\n  connectionsSort: '',\n  searchParam: '',\n  searchOpen: false,\n  firstRecoveryTime: 0,\n  filters: [connection_levels.SUSPICIOUS, connection_levels.JUST_MET, connection_levels.ALREADY_KNOWN, connection_levels.RECOVERY]\n};\nvar connectionsSlice = createSlice({\n  name: 'connections',\n  initialState: initialState,\n  reducers: {\n    setConnections: function setConnections(state, action) {\n      state.connections = connectionsAdapter.setAll(state.connections, action);\n    },\n    setConnectionsSearch: function setConnectionsSearch(state, action) {\n      state.searchParam = action.payload;\n    },\n    setConnectionsSearchOpen: function setConnectionsSearchOpen(state, action) {\n      state.searchOpen = action.payload;\n    },\n    setConnectionsSort: function setConnectionsSort(state, action) {\n      state.connectionsSort = action.payload;\n    },\n    updateConnections: function updateConnections(state, action) {\n      console.log('updating connections state');\n\n      var _original = original(state.connections),\n          entities = _original.entities,\n          ids = _original.ids;\n\n      if (ids.length !== action.payload.length) {\n        var payloadIds = action.payload.map(function (conn) {\n          return conn.id;\n        });\n        var diff = difference(ids, payloadIds);\n        diff.forEach(function (id) {\n          if (entities[id].status === 'verified') {\n            state.connections = connectionsAdapter.updateOne(state.connections, {\n              id: id,\n              changes: {\n                status: 'deleted'\n              }\n            });\n          }\n        });\n      }\n\n      state.connections = connectionsAdapter.updateMany(state.connections, action.payload.map(function (conn) {\n        conn.status = 'verified';\n        return {\n          id: conn.id,\n          changes: conn\n        };\n      }));\n    },\n    deleteConnection: function deleteConnection(state, action) {\n      state.connections = connectionsAdapter.removeOne(state.connections, action);\n    },\n    addConnection: function addConnection(state, action) {\n      state.connections = connectionsAdapter.upsertOne(state.connections, action);\n    },\n    reportAndHideConnection: function reportAndHideConnection(state, action) {\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          reason = _action$payload.reason;\n      var update = {\n        id: id,\n        changes: {\n          level: connection_levels.REPORTED,\n          reportReason: reason\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    staleConnection: function staleConnection(state, action) {\n      var update = {\n        id: action.payload,\n        changes: {\n          status: 'stale'\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setConnectionLevel: function setConnectionLevel(state, action) {\n      var _action$payload2 = action.payload,\n          id = _action$payload2.id,\n          level = _action$payload2.level;\n      var update = {\n        id: id,\n        changes: {\n          level: level\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setReportReason: function setReportReason(state, action) {\n      var _action$payload3 = action.payload,\n          id = _action$payload3.id,\n          reason = _action$payload3.reason;\n      var update = {\n        id: id,\n        changes: {\n          reportReason: reason\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setConnectionVerifications: function setConnectionVerifications(state, action) {\n      var _action$payload4 = action.payload,\n          id = _action$payload4.id,\n          verifications = _action$payload4.verifications;\n      var update = {\n        id: id,\n        changes: {\n          verifications: verifications\n        }\n      };\n      state.connections = connectionsAdapter.updateOne(state.connections, update);\n    },\n    setFilters: function setFilters(state, action) {\n      state.filters = action.payload;\n    },\n    setFirstRecoveryTime: function setFirstRecoveryTime(state, action) {\n      state.firstRecoveryTime = action.payload;\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return initialState;\n  })\n});\nvar _connectionsSlice$act = connectionsSlice.actions,\n    setConnections = _connectionsSlice$act.setConnections,\n    setConnectionsSearch = _connectionsSlice$act.setConnectionsSearch,\n    setConnectionsSearchOpen = _connectionsSlice$act.setConnectionsSearchOpen,\n    setConnectionsSort = _connectionsSlice$act.setConnectionsSort,\n    updateConnections = _connectionsSlice$act.updateConnections,\n    deleteConnection = _connectionsSlice$act.deleteConnection,\n    addConnection = _connectionsSlice$act.addConnection,\n    reportAndHideConnection = _connectionsSlice$act.reportAndHideConnection,\n    staleConnection = _connectionsSlice$act.staleConnection,\n    setFilters = _connectionsSlice$act.setFilters,\n    setConnectionLevel = _connectionsSlice$act.setConnectionLevel,\n    setConnectionVerifications = _connectionsSlice$act.setConnectionVerifications,\n    setReportReason = _connectionsSlice$act.setReportReason,\n    setFirstRecoveryTime = _connectionsSlice$act.setFirstRecoveryTime;\nexport { setConnections, setConnectionsSearch, setConnectionsSearchOpen, setConnectionsSort, updateConnections, deleteConnection, addConnection, reportAndHideConnection, staleConnection, setFilters, setConnectionLevel, setConnectionVerifications, setReportReason, setFirstRecoveryTime };\n\nvar _connectionsAdapter$g = connectionsAdapter.getSelectors(function (state) {\n  return state.connections.connections;\n}),\n    selectConnectionById = _connectionsAdapter$g.selectById,\n    selectAllConnections = _connectionsAdapter$g.selectAll,\n    connectionTotal = _connectionsAdapter$g.selectTotal;\n\nexport { selectConnectionById, selectAllConnections, connectionTotal };\nexport var verifiedConnectionsSelector = createSelector(selectAllConnections, function (connections) {\n  return connections.filter(function (conn) {\n    return (conn == null ? void 0 : conn.status) === 'verified';\n  });\n});\nexport var recoveryConnectionsSelector = createSelector([verifiedConnectionsSelector], function (connections) {\n  return connections.filter(function (conn) {\n    return (conn == null ? void 0 : conn.level) === connection_levels.RECOVERY;\n  });\n});\nexport var firstRecoveryTimeSelector = function firstRecoveryTimeSelector(state) {\n  return state.connections.firstRecoveryTime;\n};\nexport default connectionsSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/connectionsSlice.ts"],"names":["connectionsAdapter","createEntityAdapter","initialState","connections","connectionsSort","searchParam","searchOpen","firstRecoveryTime","filters","connection_levels","connectionsSlice","createSlice","name","reducers","setConnections","state","setConnectionsSearch","action","setConnectionsSearchOpen","setConnectionsSort","updateConnections","console","entities","ids","original","payloadIds","conn","diff","difference","id","changes","status","deleteConnection","addConnection","reportAndHideConnection","reason","update","level","reportReason","staleConnection","setConnectionLevel","setReportReason","setConnectionVerifications","verifications","setFilters","setFirstRecoveryTime","extraReducers","selectConnectionById","selectAllConnections","connectionTotal","verifiedConnectionsSelector","createSelector","recoveryConnectionsSelector","firstRecoveryTimeSelector"],"mappings":"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","sourcesContent":["import {\n  createSelector,\n  createSlice,\n  createEntityAdapter,\n  PayloadAction,\n  Update,\n} from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { difference } from 'ramda';\nimport { connection_levels } from '@/utils/constants';\nimport { RESET_STORE } from '@/actions/resetStore';\n\n/* ******** INITIAL STATE ************** */\n\nconst connectionsAdapter = createEntityAdapter<Connection>();\n\nconst initialState: ConnectionsState = {\n  connections: connectionsAdapter.getInitialState(),\n  connectionsSort: '',\n  searchParam: '',\n  searchOpen: false,\n  firstRecoveryTime: 0,\n  filters: [\n    connection_levels.SUSPICIOUS,\n    connection_levels.JUST_MET,\n    connection_levels.ALREADY_KNOWN,\n    connection_levels.RECOVERY,\n  ],\n};\n\nconst connectionsSlice = createSlice({\n  name: 'connections',\n  initialState,\n  reducers: {\n    setConnections(state, action: PayloadAction<Connection[]>) {\n      state.connections = connectionsAdapter.setAll(state.connections, action);\n    },\n    setConnectionsSearch(state, action: PayloadAction<string>) {\n      state.searchParam = action.payload;\n    },\n    setConnectionsSearchOpen(state, action: PayloadAction<boolean>) {\n      state.searchOpen = action.payload;\n    },\n    setConnectionsSort(state, action: PayloadAction<string>) {\n      state.connectionsSort = action.payload;\n    },\n    updateConnections(state, action: PayloadAction<ConnectionInfo[]>) {\n      console.log('updating connections state');\n      const { entities, ids } = original(state.connections);\n\n      // check to see if any connections are deleted\n      if (ids.length !== action.payload.length) {\n        const payloadIds = action.payload.map((conn) => conn.id);\n        const diff = difference(ids, payloadIds);\n        diff.forEach((id) => {\n          if (entities[id].status === 'verified') {\n            state.connections = connectionsAdapter.updateOne(\n              state.connections,\n              {\n                id,\n                changes: {\n                  status: 'deleted',\n                },\n              },\n            );\n          }\n        });\n      }\n\n      state.connections = connectionsAdapter.updateMany(\n        state.connections,\n        action.payload.map((conn: Connection) => {\n          conn.status = 'verified';\n          return { id: conn.id, changes: conn };\n        }),\n      );\n    },\n    deleteConnection(state, action: PayloadAction<string>) {\n      state.connections = connectionsAdapter.removeOne(\n        state.connections,\n        action,\n      );\n    },\n    addConnection(state, action: PayloadAction<Connection>) {\n      state.connections = connectionsAdapter.upsertOne(\n        state.connections,\n        action,\n      );\n    },\n    reportAndHideConnection(\n      state,\n      action: PayloadAction<{ id: string; reason: string }>,\n    ) {\n      const { id, reason } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: {\n          level: connection_levels.REPORTED,\n          reportReason: reason,\n        },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    staleConnection(state, action: PayloadAction<string>) {\n      const update: Update<Connection> = {\n        id: action.payload,\n        changes: { status: 'stale' },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setConnectionLevel(\n      state,\n      action: PayloadAction<{ id: string; level: ConnectionLevel }>,\n    ) {\n      const { id, level } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: { level },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setReportReason(\n      state,\n      action: PayloadAction<{ id: string; reason: string | null }>,\n    ) {\n      const { id, reason } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: { reportReason: reason },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setConnectionVerifications(\n      state,\n      action: PayloadAction<{ id: string; verifications: Verification[] }>,\n    ) {\n      const { id, verifications } = action.payload;\n      const update: Update<Connection> = {\n        id,\n        changes: { verifications },\n      };\n      state.connections = connectionsAdapter.updateOne(\n        state.connections,\n        update,\n      );\n    },\n    setFilters(state, action: PayloadAction<ConnectionLevel[]>) {\n      state.filters = action.payload;\n    },\n    setFirstRecoveryTime(state, action) {\n      state.firstRecoveryTime = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\n// Export channel actions\nexport const {\n  setConnections,\n  setConnectionsSearch,\n  setConnectionsSearchOpen,\n  setConnectionsSort,\n  updateConnections,\n  deleteConnection,\n  addConnection,\n  reportAndHideConnection,\n  staleConnection,\n  setFilters,\n  setConnectionLevel,\n  setConnectionVerifications,\n  setReportReason,\n  setFirstRecoveryTime,\n} = connectionsSlice.actions;\n\nexport const {\n  selectById: selectConnectionById,\n  selectAll: selectAllConnections,\n  selectTotal: connectionTotal,\n} = connectionsAdapter.getSelectors(\n  (state: State) => state.connections.connections,\n);\n\nexport const verifiedConnectionsSelector = createSelector(\n  selectAllConnections,\n  (connections) => {\n    return connections.filter((conn) => conn?.status === 'verified');\n  },\n);\n\nexport const recoveryConnectionsSelector = createSelector(\n  [verifiedConnectionsSelector],\n  (connections) => {\n    return connections.filter(\n      (conn) => conn?.level === connection_levels.RECOVERY,\n    );\n  },\n);\n\nexport const firstRecoveryTimeSelector = (state: State) =>\n  state.connections.firstRecoveryTime;\n\n// Export reducer\nexport default connectionsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}