{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useNavigationState(selector) {\n  var navigation = useNavigation();\n\n  var _React$useState = React.useState(function () {\n    return selector(navigation.getState());\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      setResult = _React$useState2[1];\n\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","useNavigation","setResult","React","selector","selectorRef","unsubscribe","e"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,aAAA;AASA,eAAe,SAAA,kBAAA,CAAA,QAAA,EAAyD;EACtE,IAAMA,UAAU,GAAGC,aAAnB,EAAA;;EAIA,IAAA,eAAA,GAAsBE,KAAK,CAALA,QAAAA,CAAe,YAAA;IAAA,OAAMC,QAAQ,CAACJ,UAAU,CAAzB,QAAeA,EAAD,CAAd;EAArC,CAAsBG,CAAtB;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAASD,SAAT,GAAA,gBAAA,CAAA,CAAA,CAAA;;EAGA,IAAMG,WAAW,GAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB;EAEAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBE,WAAW,CAAXA,OAAAA,GADFF,QACEE;EADFF,CAAAA;EAIAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMG,WAAW,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAiCO,UAAD,CAACA,EAAM;MACzDL,SAAS,CAACG,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CADZP,KACRK,CAAD,CAATH;IADF,CAAoBF,CAApB;IAIA,OALFG,WAKE;EALFA,CAAAA,EAMG,CANHA,UAMG,CANHA;EAQA,OAAOC,QAAQ,CAACJ,UAAU,CAA1B,QAAgBA,EAAD,CAAf;AACD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]},"metadata":{},"sourceType":"module"}