{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar gestures = {};\nexport function getHandler(tag) {\n  if (tag in gestures) return gestures[tag];\n  throw new Error(\"No handler for tag \".concat(tag));\n}\nexport function createGestureHandler(handlerTag, handler) {\n  if (handlerTag in gestures) {\n    throw new Error(\"Handler with tag \".concat(handlerTag, \" already exists\"));\n  }\n\n  gestures[handlerTag] = handler;\n  gestures[handlerTag].handlerTag = handlerTag;\n}\nexport function dropGestureHandler(handlerTag) {\n  getHandler(handlerTag).destroy();\n  delete gestures[handlerTag];\n}\nexport function getNodes() {\n  return _objectSpread({}, gestures);\n}","map":{"version":3,"sources":["NodeManager.ts"],"names":["gestures","tag","handlerTag","getHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA,IAAMA,QAAgE,GAAtE,EAAA;AAEA,OAAO,SAAA,UAAA,CAAA,GAAA,EAAiC;EACtC,IAAIC,GAAG,IAAP,QAAA,EAAqB,OAAOD,QAAQ,CAAf,GAAe,CAAf;EAErB,MAAM,IAAA,KAAA,CAAA,sBAAA,MAAA,CAAN,GAAM,CAAA,CAAN;AAGF;AAAA,OAAO,SAAA,oBAAA,CAAA,UAAA,EAAA,OAAA,EAGL;EACA,IAAIE,UAAU,IAAd,QAAA,EAA4B;IAC1B,MAAM,IAAA,KAAA,CAAA,oBAAA,MAAA,CAAA,UAAA,EAAN,iBAAM,CAAA,CAAN;EAEFF;;EAAAA,QAAQ,CAARA,UAAQ,CAARA,GAAAA,OAAAA;EAEAA,QAAQ,CAARA,UAAQ,CAARA,CAAAA,UAAAA,GAAAA,UAAAA;AAGF;AAAA,OAAO,SAAA,kBAAA,CAAA,UAAA,EAAgD;EACrDG,UAAU,CAAVA,UAAU,CAAVA,CAAAA,OAAAA;EAEA,OAAOH,QAAQ,CAAf,UAAe,CAAf;AAGF;AAAA,OAAO,SAAA,QAAA,GAAoB;EACzB,OAAA,aAAA,CAAA,EAAA,EAAA,QAAA,CAAA;AACD","sourcesContent":["import { ValueOf } from '../typeUtils';\nimport { Gestures } from '../RNGestureHandlerModule.web';\n\nconst gestures: Record<number, InstanceType<ValueOf<typeof Gestures>>> = {};\n\nexport function getHandler(tag: number) {\n  if (tag in gestures) return gestures[tag];\n\n  throw new Error(`No handler for tag ${tag}`);\n}\n\nexport function createGestureHandler(\n  handlerTag: number,\n  handler: InstanceType<ValueOf<typeof Gestures>>\n) {\n  if (handlerTag in gestures) {\n    throw new Error(`Handler with tag ${handlerTag} already exists`);\n  }\n  gestures[handlerTag] = handler;\n  // @ts-ignore no types for web handlers yet\n  gestures[handlerTag].handlerTag = handlerTag;\n}\n\nexport function dropGestureHandler(handlerTag: number) {\n  getHandler(handlerTag).destroy();\n  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n  delete gestures[handlerTag];\n}\n\nexport function getNodes() {\n  return { ...gestures };\n}\n"]},"metadata":{},"sourceType":"module"}