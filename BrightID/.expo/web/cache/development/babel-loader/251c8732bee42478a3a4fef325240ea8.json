{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _ImportScreen = _interopRequireDefault(require(\"../components/Onboarding/ImportFlow/ImportScreen\"));\n\nvar _RecoveryCodeScreen = _interopRequireDefault(require(\"../components/Onboarding/RecoveryFlow/RecoveryCodeScreen\"));\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/routes/Import.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Stack = (0, _stack.createStackNavigator)();\n\nvar Import = function Import() {\n  return React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"ImportCode\",\n    component: _RecoveryCodeScreen.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Import\",\n    component: _ImportScreen.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar _default = Import;\nexports.default = _default;","map":{"version":3,"names":["Stack","createStackNavigator","Import","headerShown","RecoveryCodeScreen","ImportScreen"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/routes/Import.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n// import { useTranslation } from 'react-i18next';\nimport ImportScreen from '@/components/Onboarding/ImportFlow/ImportScreen';\nimport RecoveryCodeScreen from '@/components/Onboarding/RecoveryFlow/RecoveryCodeScreen';\n\n\nconst Stack = createStackNavigator();\n\nconst Import = () => {\n  // const { t } = useTranslation();\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"ImportCode\" component={RecoveryCodeScreen} />\n      <Stack.Screen name=\"Import\" component={ImportScreen} />\n    </Stack.Navigator>\n  );\n};\n\nexport default Import;\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;;AAGA,IAAMA,KAAK,GAAG,IAAAC,2BAAA,GAAd;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;EAEnB,OACE,oBAAC,KAAD,CAAO,SAAP;IAAiB,aAAa,EAAE;MAAEC,WAAW,EAAE;IAAf,CAAhC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,oBAAC,KAAD,CAAO,MAAP;IAAc,IAAI,EAAC,YAAnB;IAAgC,SAAS,EAAEC,2BAA3C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,EAEE,oBAAC,KAAD,CAAO,MAAP;IAAc,IAAI,EAAC,QAAnB;IAA4B,SAAS,EAAEC,qBAAvC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFF,CADF;AAMD,CARD;;eAUeH,M"},"metadata":{},"sourceType":"script"}