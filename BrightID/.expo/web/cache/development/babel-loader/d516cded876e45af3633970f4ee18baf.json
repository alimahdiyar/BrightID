{"ast":null,"code":"import createPrefixer from 'inline-style-prefixer/lib/createPrefixer';\nimport staticData from \"./static\";\nvar prefixAll = createPrefixer(staticData);\nexport var prefixInlineStyles = function prefixInlineStyles(style) {\n  var prefixedStyles = prefixAll(style);\n  Object.keys(prefixedStyles).forEach(function (prop) {\n    var value = prefixedStyles[prop];\n\n    if (Array.isArray(value)) {\n      prefixedStyles[prop] = value[value.length - 1];\n    }\n  });\n  return prefixedStyles;\n};\nexport default prefixAll;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/prefixStyles/index.js"],"names":["prefixAll","createPrefixer","prefixInlineStyles","prefixedStyles","Object","value","Array"],"mappings":"AASA,OAAA,cAAA,MAAA,0CAAA;AACA,OAAA,UAAA;AAIA,IAAMA,SAAwB,GAAGC,cAAc,CAA/C,UAA+C,CAA/C;AAEA,OAAO,IAAMC,kBAAiC,GAAjCA,SAAAA,kBAAAA,CAAoC,KAApCA,EAA+C;EAC1D,IAAMC,cAAc,GAAGH,SAAS,CAAhC,KAAgC,CAAhC;EAIAI,MAAM,CAANA,IAAAA,CAAAA,cAAAA,EAAAA,OAAAA,CAAoC,UAAA,IAAA,EAAU;IAC5C,IAAMC,KAAK,GAAGF,cAAc,CAA5B,IAA4B,CAA5B;;IACA,IAAIG,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;MACxBH,cAAc,CAAdA,IAAc,CAAdA,GAAuBE,KAAK,CAACA,KAAK,CAALA,MAAAA,GAA7BF,CAA4B,CAA5BA;IAEH;EALDC,CAAAA;EAOA,OAAA,cAAA;AAZK,CAAA;AAeP,eAAA,SAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport createPrefixer from 'inline-style-prefixer/lib/createPrefixer';\nimport staticData from './static';\n\ntype StyleModifier = (style: Object) => Object;\n\nconst prefixAll: StyleModifier = createPrefixer(staticData);\n\nexport const prefixInlineStyles: StyleModifier = (style) => {\n  const prefixedStyles = prefixAll(style);\n\n  // React@15 removed undocumented support for fallback values in\n  // inline-styles. Revert array values to the standard CSS value\n  Object.keys(prefixedStyles).forEach((prop) => {\n    const value = prefixedStyles[prop];\n    if (Array.isArray(value)) {\n      prefixedStyles[prop] = value[value.length - 1];\n    }\n  });\n\n  return prefixedStyles;\n};\n\nexport default prefixAll;\n"]},"metadata":{},"sourceType":"module"}