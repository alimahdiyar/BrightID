{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from \"./constants\";\nimport normalizeValueWithProperty from \"./normalizeValueWithProperty\";\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n\n  resolvedStyle.transform = transform;\n};\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop);\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'aspectRatio':\n        {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n\n      case 'flex':\n        {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/exports/StyleSheet/createReactDOMStyle.js"],"names":["emptyObject","supportsCSS3TextDecoration","window","mapTransform","type","Object","value","transform","normalizedValue","normalizeValueWithProperty","resolveTransform","style","Array","resolvedStyle","createReactDOMStyle","stack","longFormProperties","STYLE_SHORT_FORM_EXPANSIONS"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n/**\n * Transform\n */\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n// { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n\n  resolvedStyle.transform = transform;\n};\n/**\n * Reducer\n */\n\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop); // Ignore everything else with a null value\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      // Ignore some React Native styles\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'aspectRatio':\n        {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n      // TODO: remove once this issue is fixed\n      // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n      // The 'flex' property value in React Native must be a positive integer,\n      // 0, or -1.\n\n      case 'flex':\n        {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;"]},"metadata":{},"sourceType":"module"}