{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport isArrayEqual from \"./isArrayEqual\";\nexport default function useOnGetState(_ref) {\n  var getState = _ref.getState,\n      getStateListeners = _ref.getStateListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addKeyedListener = _React$useContext.addKeyedListener;\n\n  var route = React.useContext(NavigationRouteContext);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var _getStateListeners$ro;\n\n      var childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: childState\n      });\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      routes: routes\n    });\n  }, [getState, getStateListeners]);\n  React.useEffect(function () {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getState","getStateListeners","addKeyedListener","React","route","key","getRehydratedState","state","routes","childState","isArrayEqual"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA;AAGA,OAAA,sBAAA;AACA,OAAA,YAAA;AAOA,eAAe,SAAA,aAAA,CAAA,IAAA,EAGH;EAFVA,IAAAA,QAEU,GAAA,IAAA,CAFVA,QAAAA;EAAAA,IACAC,iBACU,GAAA,IAAA,CADVA,iBADAD;;EAGA,IAAA,iBAAA,GAA6BG,KAAK,CAALA,UAAAA,CAA7B,wBAA6BA,CAA7B;EAAA,IAAQD,gBAAR,GAAA,iBAAA,CAAA,gBAAA;;EACA,IAAME,KAAK,GAAGD,KAAK,CAALA,UAAAA,CAAd,sBAAcA,CAAd;EACA,IAAME,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;EAEA,IAAME,kBAAkB,GAAGH,KAAK,CAALA,WAAAA,CAAkB,YAAM;IACjD,IAAMI,KAAK,GAAGP,QAAd,EAAA;IAGA,IAAMQ,MAAM,GAAGD,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAAkBH,UAAD,KAACA,EAAU;MAAA,IAAA,qBAAA;;MACzC,IAAMK,UAAU,GAAA,CAAA,qBAAA,GAAGR,iBAAiB,CAACG,KAAK,CAA1B,GAAoB,CAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGH,qBAAAA,CAAAA,IAAAA,CAAnB,iBAAmBA,CAAnB;;MAEA,IAAIG,KAAK,CAALA,KAAAA,KAAJ,UAAA,EAAgC;QAC9B,OAAA,KAAA;MAGF;;MAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;QAAmBG,KAAK,EAPXA;MAOb,CAAA,CAAA;IAPF,CAAeA,CAAf;;IAUA,IAAIG,YAAY,CAACH,KAAK,CAAN,MAAA,EAAhB,MAAgB,CAAhB,EAAwC;MACtC,OAAA,KAAA;IAGF;;IAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;MAAmBC,MAAAA,EAlBML;IAkBzB,CAAA,CAAA;EAlByBA,CAAAA,EAmBxB,CAAA,QAAA,EAnBH,iBAmBG,CAnBwBA,CAA3B;EAqBAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,OAAOD,gBAAP,KAAA,IAAOA,IAAAA,gBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,gBAAgB,CAAA,UAAA,EAAA,GAAA,EADzBC,kBACyB,CAAvB;EADFA,CAAAA,EAEG,CAAA,gBAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}