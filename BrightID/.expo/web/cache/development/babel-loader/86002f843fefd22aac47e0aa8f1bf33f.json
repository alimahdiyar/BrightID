{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\nimport { RESET_STORE } from \"../actions/resetStore\";\nimport { LOCAL_OPERATION_KEEP_THRESHOLD, operation_states } from \"../utils/constants\";\nvar operationsAdapter = createEntityAdapter({\n  selectId: function selectId(op) {\n    return op.hash;\n  }\n});\nvar operationsSlice = createSlice({\n  name: 'operations',\n  initialState: operationsAdapter.getInitialState(),\n  reducers: {\n    addOperation: {\n      reducer: operationsAdapter.addOne,\n      prepare: function prepare(operation) {\n        return {\n          payload: _objectSpread(_objectSpread({}, operation), {}, {\n            state: operation_states.UNKNOWN\n          })\n        };\n      }\n    },\n    removeOperation: operationsAdapter.removeOne,\n    resetOperations: operationsAdapter.removeAll,\n    updateOperation: operationsAdapter.updateOne,\n    removeManyOperations: operationsAdapter.removeMany\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, operationsAdapter.removeAll)\n});\nvar _operationsSlice$acti = operationsSlice.actions,\n    addOperation = _operationsSlice$acti.addOperation,\n    updateOperation = _operationsSlice$acti.updateOperation,\n    removeManyOperations = _operationsSlice$acti.removeManyOperations;\nexport { addOperation, updateOperation, removeManyOperations };\n\nvar _operationsAdapter$ge = operationsAdapter.getSelectors(function (state) {\n  return state.operations;\n}),\n    selectOperationByHash = _operationsAdapter$ge.selectById,\n    selectAllOperations = _operationsAdapter$ge.selectAll,\n    selectOperationsTotal = _operationsAdapter$ge.selectTotal;\n\nexport { selectOperationByHash, selectAllOperations, selectOperationsTotal };\nvar pendingStates = [operation_states.UNKNOWN, operation_states.INIT, operation_states.SENT];\nexport var selectPendingOperations = createSelector(selectAllOperations, function (operations) {\n  return operations.filter(function (op) {\n    return pendingStates.includes(op.state);\n  });\n});\nvar outdatedStates = [operation_states.APPLIED, operation_states.FAILED, operation_states.EXPIRED];\nexport var selectOutdatedOperations = createSelector(selectAllOperations, function (operations) {\n  var now = Date.now();\n  return operations.filter(function (op) {\n    var timestamp = op.postTimestamp || op.timestamp;\n    return outdatedStates.includes(op.state) && now - timestamp > LOCAL_OPERATION_KEEP_THRESHOLD;\n  }).map(function (op) {\n    return op.hash;\n  });\n});\nexport var scrubOps = function scrubOps() {\n  return function (dispatch, getState) {\n    var removeOpIds = selectOutdatedOperations(getState());\n    console.log(\"Scrubbing \" + removeOpIds.length + \" outdated operations: \" + removeOpIds);\n    dispatch(removeManyOperations(removeOpIds));\n  };\n};\nexport default operationsSlice.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","createSelector","RESET_STORE","LOCAL_OPERATION_KEEP_THRESHOLD","operation_states","operationsAdapter","selectId","op","hash","operationsSlice","name","initialState","getInitialState","reducers","addOperation","reducer","addOne","prepare","operation","payload","state","UNKNOWN","removeOperation","removeOne","resetOperations","removeAll","updateOperation","updateOne","removeManyOperations","removeMany","extraReducers","actions","getSelectors","operations","selectOperationByHash","selectById","selectAllOperations","selectAll","selectOperationsTotal","selectTotal","pendingStates","INIT","SENT","selectPendingOperations","filter","includes","outdatedStates","APPLIED","FAILED","EXPIRED","selectOutdatedOperations","now","Date","timestamp","postTimestamp","map","scrubOps","dispatch","getState","removeOpIds","console","log","length"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/operationsSlice.ts"],"sourcesContent":["import {\n  createSlice,\n  createEntityAdapter,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\nimport {\n  LOCAL_OPERATION_KEEP_THRESHOLD,\n  operation_states,\n} from '@/utils/constants';\n\nexport type Operation = SubmittedOp & {\n  state: typeof operation_states[keyof typeof operation_states];\n};\n\nconst operationsAdapter = createEntityAdapter<Operation>({\n  selectId: (op) => op.hash,\n});\n\nconst operationsSlice = createSlice({\n  name: 'operations',\n  initialState: operationsAdapter.getInitialState(),\n  reducers: {\n    addOperation: {\n      reducer: operationsAdapter.addOne,\n      prepare: (operation: SubmittedOp) => {\n        return {\n          payload: {\n            ...operation,\n            state: operation_states.UNKNOWN,\n          },\n        };\n      },\n    },\n    removeOperation: operationsAdapter.removeOne,\n    resetOperations: operationsAdapter.removeAll,\n    updateOperation: operationsAdapter.updateOne,\n    removeManyOperations: operationsAdapter.removeMany,\n  },\n  extraReducers: {\n    [RESET_STORE]: operationsAdapter.removeAll,\n  },\n});\n\n// Export actions\nexport const {\n  addOperation,\n  updateOperation,\n  // removeOperation,\n  // resetOperations,\n  removeManyOperations,\n} = operationsSlice.actions;\n\n// export selectors\nexport const {\n  selectById: selectOperationByHash,\n  selectAll: selectAllOperations,\n  selectTotal: selectOperationsTotal,\n} = operationsAdapter.getSelectors((state: State) => state.operations);\n\nconst pendingStates = [\n  operation_states.UNKNOWN,\n  operation_states.INIT,\n  operation_states.SENT,\n];\n\nexport const selectPendingOperations = createSelector(\n  selectAllOperations,\n  (operations) => operations.filter((op) => pendingStates.includes(op.state)),\n);\n\nconst outdatedStates = [\n  operation_states.APPLIED,\n  operation_states.FAILED,\n  operation_states.EXPIRED,\n];\n\n/* Return IDs of operation entries that are outdated and can be removed from state */\nexport const selectOutdatedOperations = createSelector(\n  selectAllOperations,\n  (operations) => {\n    const now = Date.now();\n    return operations\n      .filter((op) => {\n        // prefer postTimestamp for calculation but use timestamp as fallback solution\n        const timestamp = op.postTimestamp || op.timestamp;\n        return (\n          outdatedStates.includes(op.state) &&\n          now - timestamp > LOCAL_OPERATION_KEEP_THRESHOLD\n        );\n      })\n      .map((op) => op.hash);\n  },\n);\n\nexport const scrubOps = () => (dispatch: dispatch, getState: getState) => {\n  const removeOpIds = selectOutdatedOperations(getState());\n  console.log(\n    `Scrubbing ${removeOpIds.length} outdated operations: ${removeOpIds}`,\n  );\n  dispatch(removeManyOperations(removeOpIds));\n};\n\n// Export reducer\nexport default operationsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}