{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { store } from \"../../../../store\";\nimport { b64ToUrlSafeB64 } from \"../../../../utils/encoding\";\nimport { encryptData } from \"../../../../utils/cryptoHelper\";\nimport { retrieveImage } from \"../../../../utils/filesystem\";\nimport { selectAllConnections } from \"../../../../reducer/connectionsSlice\";\nimport { selectAllLinkedContexts, selectAllSigs } from \"../../../../reducer/appsSlice\";\nimport ChannelAPI from \"../../../../api/channelService\";\nimport { uploadBlindSig, uploadConnection, uploadContextInfo, uploadGroup } from \"../../../../utils/channels\";\nimport { IMPORT_PREFIX, RECOVERY_CHANNEL_TTL } from \"../../../../utils/constants\";\nexport var uploadAllInfoAfter = function _callee(after) {\n  var _store$getState, user, signingKey, groups, _store$getState$recov, _store$getState$recov2, url, channelId, aesKey, isPrimaryDevice, channelApi, photo, data, encrypted, userDataId, connections, _iterator, _step, conn, _iterator2, _step2, group, linkedContexts, _iterator3, _step3, contextInfo, sigs, _iterator4, _step4, sig, completeDataId;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _store$getState = store.getState(), user = _store$getState.user, signingKey = _store$getState.keypair.publicKey, groups = _store$getState.groups.groups, _store$getState$recov = _store$getState.recoveryData, _store$getState$recov2 = _store$getState$recov.channel, url = _store$getState$recov2.url, channelId = _store$getState$recov2.channelId, aesKey = _store$getState$recov.aesKey, isPrimaryDevice = _store$getState.settings.isPrimaryDevice;\n          channelApi = new ChannelAPI(url.href);\n          console.log('uploading user info');\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(retrieveImage(user.photo.filename));\n\n        case 5:\n          photo = _context.sent;\n          data = {\n            id: user.id,\n            name: user.name,\n            photo: photo,\n            isSponsored: user.isSponsored,\n            isSponsoredv6: user.isSponsoredv6,\n            backupCompleted: user.backupCompleted,\n            password: user.password,\n            updateTimestamps: user.updateTimestamps\n          };\n          encrypted = encryptData(data, aesKey);\n          userDataId = IMPORT_PREFIX + \"userinfo_\" + user.id + \":\" + b64ToUrlSafeB64(signingKey);\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: channelId,\n            dataId: userDataId,\n            data: encrypted\n          }));\n\n        case 11:\n          console.log('uploading connections');\n          connections = selectAllConnections(store.getState()).filter(function (conn) {\n            return conn.timestamp > after;\n          });\n          _iterator = _createForOfIteratorHelperLoose(connections);\n\n        case 14:\n          if ((_step = _iterator()).done) {\n            _context.next = 20;\n            break;\n          }\n\n          conn = _step.value;\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(uploadConnection({\n            conn: conn,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey\n          }));\n\n        case 18:\n          _context.next = 14;\n          break;\n\n        case 20:\n          console.log('uploading groups');\n          _iterator2 = _createForOfIteratorHelperLoose(groups);\n\n        case 22:\n          if ((_step2 = _iterator2()).done) {\n            _context.next = 29;\n            break;\n          }\n\n          group = _step2.value;\n\n          if (!(group.joined > after)) {\n            _context.next = 27;\n            break;\n          }\n\n          _context.next = 27;\n          return _regeneratorRuntime.awrap(uploadGroup({\n            group: group,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey\n          }));\n\n        case 27:\n          _context.next = 22;\n          break;\n\n        case 29:\n          console.log('uploading linked contexts');\n          linkedContexts = selectAllLinkedContexts(store.getState()).filter(function (linkedContext) {\n            return linkedContext.dateAdded > after && linkedContext.state === 'applied';\n          });\n          _iterator3 = _createForOfIteratorHelperLoose(linkedContexts);\n\n        case 32:\n          if ((_step3 = _iterator3()).done) {\n            _context.next = 38;\n            break;\n          }\n\n          contextInfo = _step3.value;\n          _context.next = 36;\n          return _regeneratorRuntime.awrap(uploadContextInfo({\n            contextInfo: contextInfo,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey,\n            prefix: IMPORT_PREFIX\n          }));\n\n        case 36:\n          _context.next = 32;\n          break;\n\n        case 38:\n          console.log('uploading blind sigs');\n\n          if (!isPrimaryDevice) {\n            _context.next = 49;\n            break;\n          }\n\n          sigs = selectAllSigs(store.getState());\n          _iterator4 = _createForOfIteratorHelperLoose(sigs);\n\n        case 42:\n          if ((_step4 = _iterator4()).done) {\n            _context.next = 49;\n            break;\n          }\n\n          sig = _step4.value;\n\n          if (!(sig.signedTimestamp > after || sig.linkedTimestamp > after)) {\n            _context.next = 47;\n            break;\n          }\n\n          _context.next = 47;\n          return _regeneratorRuntime.awrap(uploadBlindSig({\n            sig: sig,\n            channelApi: channelApi,\n            aesKey: aesKey,\n            signingKey: signingKey,\n            prefix: IMPORT_PREFIX\n          }));\n\n        case 47:\n          _context.next = 42;\n          break;\n\n        case 49:\n          console.log('uploading completed flag');\n          completeDataId = IMPORT_PREFIX + \"completed_\" + user.id + \":\" + b64ToUrlSafeB64(signingKey);\n          _context.next = 53;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: channelId,\n            dataId: completeDataId,\n            data: 'completed'\n          }));\n\n        case 53:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var uploadDeviceInfo = function _callee2() {\n  var _store$getState2, _store$getState2$reco, _store$getState2$reco2, url, channelId, signingKey, _store$getState2$sett, lastSyncTime, isPrimaryDevice, dataObj, data, channelApi;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _store$getState2 = store.getState(), _store$getState2$reco = _store$getState2.recoveryData, _store$getState2$reco2 = _store$getState2$reco.channel, url = _store$getState2$reco2.url, channelId = _store$getState2$reco2.channelId, signingKey = _store$getState2$reco.publicKey, _store$getState2$sett = _store$getState2.settings, lastSyncTime = _store$getState2$sett.lastSyncTime, isPrimaryDevice = _store$getState2$sett.isPrimaryDevice;\n          dataObj = {\n            signingKey: signingKey,\n            lastSyncTime: lastSyncTime,\n            isPrimaryDevice: isPrimaryDevice\n          };\n          data = JSON.stringify(dataObj);\n          channelApi = new ChannelAPI(url.href);\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(channelApi.upload({\n            channelId: channelId,\n            data: data,\n            dataId: IMPORT_PREFIX + \"data\",\n            requestedTtl: RECOVERY_CHANNEL_TTL\n          }));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["store","b64ToUrlSafeB64","encryptData","retrieveImage","selectAllConnections","selectAllLinkedContexts","selectAllSigs","ChannelAPI","uploadBlindSig","uploadConnection","uploadContextInfo","uploadGroup","IMPORT_PREFIX","RECOVERY_CHANNEL_TTL","uploadAllInfoAfter","after","getState","user","signingKey","keypair","publicKey","groups","recoveryData","channel","url","channelId","aesKey","isPrimaryDevice","settings","channelApi","href","console","log","photo","filename","data","id","name","isSponsored","isSponsoredv6","backupCompleted","password","updateTimestamps","encrypted","userDataId","upload","dataId","connections","filter","conn","timestamp","group","joined","linkedContexts","linkedContext","dateAdded","state","contextInfo","prefix","sigs","sig","signedTimestamp","linkedTimestamp","completeDataId","uploadDeviceInfo","lastSyncTime","dataObj","JSON","stringify","requestedTtl"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/thunks/channelUploadThunks.ts"],"sourcesContent":["import { store } from '@/store';\nimport { b64ToUrlSafeB64 } from '@/utils/encoding';\nimport { encryptData } from '@/utils/cryptoHelper';\nimport { retrieveImage } from '@/utils/filesystem';\nimport { selectAllConnections } from '@/reducer/connectionsSlice';\nimport { selectAllLinkedContexts, selectAllSigs } from '@/reducer/appsSlice';\nimport ChannelAPI from '@/api/channelService';\nimport {\n  uploadBlindSig,\n  uploadConnection,\n  uploadContextInfo,\n  uploadGroup,\n} from '@/utils/channels';\nimport { IMPORT_PREFIX, RECOVERY_CHANNEL_TTL } from '@/utils/constants';\n\nexport const uploadAllInfoAfter = async (after) => {\n  const {\n    user,\n    keypair: { publicKey: signingKey },\n    groups: { groups },\n    recoveryData: {\n      channel: { url, channelId },\n      aesKey,\n    },\n    settings: { isPrimaryDevice },\n  } = store.getState();\n  // use keypair for sync and recovery for import\n  const channelApi = new ChannelAPI(url.href);\n\n  console.log('uploading user info');\n  const photo = await retrieveImage(user.photo.filename);\n  const data = {\n    id: user.id,\n    name: user.name,\n    photo,\n    isSponsored: user.isSponsored,\n    isSponsoredv6: user.isSponsoredv6,\n    backupCompleted: user.backupCompleted,\n    password: user.password,\n    updateTimestamps: user.updateTimestamps,\n  };\n\n  const encrypted = encryptData(data, aesKey);\n  const userDataId = `${IMPORT_PREFIX}userinfo_${user.id}:${b64ToUrlSafeB64(\n    signingKey,\n  )}`;\n  await channelApi.upload({\n    channelId,\n    dataId: userDataId,\n    data: encrypted,\n  });\n\n  console.log('uploading connections');\n  const connections = selectAllConnections(store.getState()).filter(\n    (conn) => conn.timestamp > after,\n  );\n  for (const conn of connections) {\n    await uploadConnection({\n      conn,\n      channelApi,\n      aesKey,\n      signingKey,\n    });\n  }\n\n  console.log('uploading groups');\n  for (const group of groups) {\n    if (group.joined > after) {\n      await uploadGroup({\n        group,\n        channelApi,\n        aesKey,\n        signingKey,\n      });\n    }\n  }\n\n  console.log('uploading linked contexts');\n  const linkedContexts = selectAllLinkedContexts(store.getState()).filter(\n    (linkedContext) =>\n      linkedContext.dateAdded > after && linkedContext.state === 'applied',\n  );\n  for (const contextInfo of linkedContexts) {\n    await uploadContextInfo({\n      contextInfo,\n      channelApi,\n      aesKey,\n      signingKey,\n      prefix: IMPORT_PREFIX,\n    });\n  }\n\n  console.log('uploading blind sigs');\n  if (isPrimaryDevice) {\n    const sigs = selectAllSigs(store.getState());\n    for (const sig of sigs) {\n      if (sig.signedTimestamp > after || sig.linkedTimestamp > after) {\n        await uploadBlindSig({\n          sig,\n          channelApi,\n          aesKey,\n          signingKey,\n          prefix: IMPORT_PREFIX,\n        });\n      }\n    }\n  }\n\n  console.log('uploading completed flag');\n  const completeDataId = `${IMPORT_PREFIX}completed_${\n    user.id\n  }:${b64ToUrlSafeB64(signingKey)}`;\n  await channelApi.upload({\n    channelId,\n    dataId: completeDataId,\n    data: 'completed',\n  });\n};\n\nexport const uploadDeviceInfo = async () => {\n  const {\n    recoveryData: {\n      channel: { url, channelId },\n      publicKey: signingKey,\n    },\n    settings: { lastSyncTime, isPrimaryDevice },\n  } = store.getState();\n  const dataObj: SyncDeviceInfo = { signingKey, lastSyncTime, isPrimaryDevice };\n  const data = JSON.stringify(dataObj);\n  const channelApi = new ChannelAPI(url.href);\n  await channelApi.upload({\n    channelId,\n    data,\n    dataId: `${IMPORT_PREFIX}data`,\n    requestedTtl: RECOVERY_CHANNEL_TTL,\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}