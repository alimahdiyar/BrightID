{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport default function NativeSafeAreaView(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      onInsetsChange = _ref.onInsetsChange;\n  React.useEffect(function () {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    var element = createContextElement();\n    document.body.appendChild(element);\n\n    var onEnd = function onEnd() {\n      var _window$getComputedSt = window.getComputedStyle(element),\n          paddingTop = _window$getComputedSt.paddingTop,\n          paddingBottom = _window$getComputedSt.paddingBottom,\n          paddingLeft = _window$getComputedSt.paddingLeft,\n          paddingRight = _window$getComputedSt.paddingRight;\n\n      var insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      var frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n      onInsetsChange({\n        nativeEvent: {\n          insets: insets,\n          frame: frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return function () {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return React.createElement(View, {\n    style: style\n  }, children);\n}\nvar _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n\n  var element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (var key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nvar _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  var _window = window,\n      CSS = _window.CSS;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return \"\".concat(getSupportedEnv(), \"(safe-area-inset-\").concat(side, \")\");\n}\n\nfunction createContextElement() {\n  var element = document.createElement('div');\n  var style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"sources":["NativeSafeAreaProvider.tsx"],"names":["CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","children","style","onInsetsChange","React","element","createContextElement","document","onEnd","paddingTop","paddingBottom","paddingLeft","paddingRight","window","insets","top","parseInt","bottom","left","right","frame","x","y","width","height","nativeEvent","getSupportedTransitionEvent","_supportedTransitionEvent","_supportedEnv","CSS","getSupportedEnv","getInset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { NativeSafeAreaProviderProps } from './SafeArea.types';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions: Record<string, string> = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd',\n};\n\nexport default function NativeSafeAreaView({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const {\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight,\n      } = window.getComputedStyle(element);\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0,\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight,\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({ nativeEvent: { insets, frame } });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n\n  return <View style={style}>{children}</View>;\n}\n\nlet _supportedTransitionEvent: string | null = null;\nfunction getSupportedTransitionEvent(): string {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key as keyof CSSStyleDeclaration] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\n\ntype CssEnv = 'constant' | 'env';\n\nlet _supportedEnv: CssEnv | null = null;\nfunction getSupportedEnv(): CssEnv {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const { CSS } = window;\n  if (\n    CSS &&\n    CSS.supports &&\n    CSS.supports('top: constant(safe-area-inset-top)')\n  ) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\n\nfunction getInset(side: string): string {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement(): HTMLElement {\n  const element = document.createElement('div');\n  const { style } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n"]},"metadata":{},"sourceType":"module"}