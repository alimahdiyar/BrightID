{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useCallback, useContext, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { useFocusEffect, useRoute } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { TabBar, TabView, SceneMap } from 'react-native-tab-view';\nimport { INVITE_ACTIVE, CONNECTIONS_TYPE, GROUPS_TYPE, MISC_TYPE } from \"../../utils/constants\";\nimport { ORANGE, WHITE, GREY, BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { createSelector } from '@reduxjs/toolkit';\nimport { selectAllUnconfirmedConnections } from \"../PendingConnections/pendingConnectionSlice\";\nimport EmptyList from \"../Helpers/EmptyList\";\nimport { photoDirectory } from \"../../utils/filesystem\";\nimport { updateNotifications } from \"../../actions\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport NotificationCard from \"./NotificationCard\";\nimport InviteCard from \"./InviteCard\";\nimport PendingConnectionCard from \"./PendingConnectionCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar thecount = 0;\nvar inviteSelector = createSelector(function (state) {\n  return state.groups.invites;\n}, function (invites) {\n  return invites.filter(function (_ref) {\n    var state = _ref.state;\n    return state === INVITE_ACTIVE;\n  });\n});\n\nvar useRefresh = function useRefresh() {\n  var dispatch = useDispatch();\n  var api = useContext(NodeApiContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    dispatch(updateNotifications(api)).then(function () {\n      setRefreshing(false);\n    }).catch(function (err) {\n      console.log(err.message);\n      setRefreshing(false);\n    });\n  };\n\n  return [refreshing, onRefresh];\n};\n\nvar ConnectionsList = function ConnectionsList() {\n  var _useRefresh = useRefresh(),\n      _useRefresh2 = _slicedToArray(_useRefresh, 2),\n      refreshing = _useRefresh2[0],\n      onRefresh = _useRefresh2[1];\n\n  var pendingConnections = useSelector(function (state) {\n    return selectAllUnconfirmedConnections(state);\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var data = pendingConnections.length > 0 ? [{\n    id: 'pendingList'\n  }] : [];\n  return _jsx(FlatList, {\n    contentContainerStyle: {\n      paddingBottom: 50,\n      flexGrow: 1\n    },\n    data: data,\n    keyExtractor: function keyExtractor(_ref2, index) {\n      var id = _ref2.id;\n      return id + index;\n    },\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    onRefresh: onRefresh,\n    refreshing: refreshing,\n    ListEmptyComponent: _jsx(EmptyList, {\n      title: t('notifications.text.noPendingConnections'),\n      iconType: \"account-off-outline\"\n    }),\n    renderItem: function renderItem() {\n      return _jsx(PendingConnectionCard, {\n        pendingConnections: pendingConnections\n      });\n    }\n  });\n};\n\nvar InviteList = function InviteList() {\n  var _useTranslation2 = useTranslation(),\n      t = _useTranslation2.t;\n\n  var _useRefresh3 = useRefresh(),\n      _useRefresh4 = _slicedToArray(_useRefresh3, 2),\n      refreshing = _useRefresh4[0],\n      onRefresh = _useRefresh4[1];\n\n  var invites = useSelector(function (state) {\n    return inviteSelector(state);\n  });\n  thecount++;\n  console.log('Rendering Invite List', thecount);\n  return _jsx(FlatList, {\n    contentContainerStyle: {\n      paddingBottom: 50,\n      flexGrow: 1\n    },\n    data: invites,\n    keyExtractor: function keyExtractor(_ref3, index) {\n      var id = _ref3.id;\n      return id + index;\n    },\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    onRefresh: onRefresh,\n    refreshing: refreshing,\n    ListEmptyComponent: _jsx(EmptyList, {\n      title: t('notifications.text.noGroupInvites'),\n      iconType: \"account-group-outline\"\n    }),\n    renderItem: function renderItem(_ref4) {\n      var item = _ref4.item;\n      return _jsx(InviteCard, {\n        invite: item\n      });\n    }\n  });\n};\n\nvar MiscList = function MiscList(_ref5) {\n  var route = _ref5.route;\n\n  var _useTranslation3 = useTranslation(),\n      t = _useTranslation3.t;\n\n  var photoFilename = useSelector(function (state) {\n    return state.user.photo.filename;\n  });\n\n  var _useRefresh5 = useRefresh(),\n      _useRefresh6 = _slicedToArray(_useRefresh5, 2),\n      refreshing = _useRefresh6[0],\n      onRefresh = _useRefresh6[1];\n\n  var data = [];\n\n  if (route.recoveryConnectionsPending) {\n    var imageSource = photoFilename ? {\n      uri: \"file://\" + photoDirectory() + \"/\" + photoFilename\n    } : require(\"../../static/default_profile.jpg\");\n    data.push({\n      title: t('notifications.item.title.socialRecovery'),\n      msg: t('notifications.item.msg.socialRecovery'),\n      imageSource: imageSource,\n      navigationTarget: 'Recovery Connections',\n      testID: 'SocialRecoveryNotifcation'\n    });\n  }\n\n  if (route.backupPending) {\n    var _imageSource = photoFilename ? {\n      uri: \"file://\" + photoDirectory() + \"/\" + photoFilename\n    } : require(\"../../static/default_profile.jpg\");\n\n    data.push({\n      title: t('notifications.item.title.backupBrightId'),\n      msg: t('notifications.item.msg.backupBrightId'),\n      imageSource: _imageSource,\n      navigationTarget: 'Edit Profile',\n      testID: 'BackupNotification'\n    });\n  }\n\n  return _jsx(FlatList, {\n    contentContainerStyle: {\n      paddingBottom: 50,\n      flexGrow: 1\n    },\n    data: data,\n    keyExtractor: function keyExtractor(_ref6, index) {\n      var msg = _ref6.msg;\n      return msg + index;\n    },\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    onRefresh: onRefresh,\n    refreshing: refreshing,\n    ListEmptyComponent: _jsx(EmptyList, {\n      title: t('notifications.text.noMiscellaneous'),\n      iconType: \"bell-off-outline\"\n    }),\n    renderItem: function renderItem(_ref7) {\n      var item = _ref7.item;\n      return _jsx(NotificationCard, {\n        title: item.title,\n        msg: item.msg,\n        imageSource: item.imageSource,\n        navigationTarget: item.navigationTarget,\n        testID: item.testID\n      });\n    }\n  });\n};\n\nvar initialLayout = {\n  width: Dimensions.get('window').width\n};\n\nvar renderTabBar = function renderTabBar(props) {\n  return _jsx(TabBar, _objectSpread(_objectSpread({}, props), {}, {\n    indicatorStyle: {\n      backgroundColor: ORANGE\n    },\n    style: styles.tabBar,\n    renderLabel: function renderLabel(_ref8) {\n      var route = _ref8.route,\n          color = _ref8.color;\n      return _jsxs(View, {\n        style: styles.tabContainer,\n        children: [route.badge && _jsx(View, {\n          style: styles.badge\n        }), _jsx(Text, {\n          style: [styles.tabText, {\n            color: color\n          }],\n          adjustsFontSizeToFit: true,\n          numberOfLines: 1,\n          children: route.title\n        })]\n      });\n    },\n    inactiveColor: GREY,\n    activeColor: BLACK\n  }));\n};\n\nexport var NotificationsScreen = function NotificationsScreen() {\n  var _route$params, _SceneMap;\n\n  var dispatch = useDispatch();\n  var route = useRoute();\n\n  var _useTranslation4 = useTranslation(),\n      t = _useTranslation4.t;\n\n  var api = useContext(NodeApiContext);\n  var pendingConnections = useSelector(function (state) {\n    var _selectAllUnconfirmed;\n\n    return (_selectAllUnconfirmed = selectAllUnconfirmedConnections(state)) == null ? void 0 : _selectAllUnconfirmed.length;\n  });\n  var invites = useSelector(function (state) {\n    var _inviteSelector;\n\n    return (_inviteSelector = inviteSelector(state)) == null ? void 0 : _inviteSelector.length;\n  });\n  var backupPending = useSelector(function (state) {\n    return state.notifications.backupPending;\n  });\n  var recoveryConnectionsPending = useSelector(function (state) {\n    return state.notifications.recoveryConnectionsPending;\n  });\n  var routes = [{\n    key: CONNECTIONS_TYPE,\n    title: t('notifications.tab.connections'),\n    badge: !!pendingConnections\n  }, {\n    key: GROUPS_TYPE,\n    title: t('notifications.tab.groups'),\n    badge: !!invites\n  }, {\n    key: MISC_TYPE,\n    title: t('notifications.tab.miscellaneous'),\n    badge: backupPending || recoveryConnectionsPending,\n    backupPending: backupPending,\n    recoveryConnectionsPending: recoveryConnectionsPending\n  }];\n  var displayRoute = (_route$params = route.params) != null && _route$params.type ? routes.findIndex(function (_ref9) {\n    var _route$params2;\n\n    var key = _ref9.key;\n    return key === ((_route$params2 = route.params) == null ? void 0 : _route$params2.type);\n  }) : routes.findIndex(function (_ref10) {\n    var badge = _ref10.badge;\n    return badge;\n  });\n\n  var _useState3 = useState(displayRoute),\n      _useState4 = _slicedToArray(_useState3, 2),\n      index = _useState4[0],\n      setIndex = _useState4[1];\n\n  var renderScene = SceneMap((_SceneMap = {}, _defineProperty(_SceneMap, CONNECTIONS_TYPE, ConnectionsList), _defineProperty(_SceneMap, GROUPS_TYPE, InviteList), _defineProperty(_SceneMap, MISC_TYPE, MiscList), _SceneMap));\n  useFocusEffect(useCallback(function () {\n    dispatch(updateNotifications(api));\n  }, [api, dispatch]));\n  console.log('Rendering Notification Screen');\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsx(View, {\n      style: styles.container,\n      testID: \"NotificationsScreen\",\n      children: _jsx(TabView, {\n        navigationState: {\n          index: index,\n          routes: routes\n        },\n        renderScene: renderScene,\n        renderTabBar: renderTabBar,\n        onIndexChange: setIndex,\n        initialLayout: initialLayout\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 62,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  badge: {\n    backgroundColor: ORANGE,\n    width: DEVICE_LARGE ? 8 : 6,\n    height: DEVICE_LARGE ? 8 : 6,\n    borderRadius: 4,\n    marginRight: DEVICE_LARGE ? 8 : 6\n  },\n  tabBar: {\n    backgroundColor: WHITE,\n    paddingLeft: DEVICE_LARGE ? 20 : 18\n  },\n  tabContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  tabText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12]\n  }\n});\nexport default NotificationsScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Notifications/NotificationsScreen.tsx"],"names":["thecount","inviteSelector","createSelector","state","invites","useRefresh","dispatch","useDispatch","api","useContext","refreshing","setRefreshing","useState","onRefresh","updateNotifications","console","err","ConnectionsList","pendingConnections","useSelector","selectAllUnconfirmedConnections","t","useTranslation","data","id","paddingBottom","flexGrow","InviteList","item","MiscList","route","photoFilename","imageSource","uri","photoDirectory","require","title","msg","navigationTarget","testID","initialLayout","width","Dimensions","renderTabBar","backgroundColor","styles","color","NotificationsScreen","useRoute","backupPending","recoveryConnectionsPending","routes","key","badge","displayRoute","index","setIndex","renderScene","SceneMap","useFocusEffect","useCallback","StyleSheet","orangeTop","height","DEVICE_LARGE","zIndex","container","flex","borderTopLeftRadius","marginTop","overflow","borderRadius","marginRight","tabBar","paddingLeft","tabContainer","flexDirection","alignItems","tabText","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useState } from 'react';\nimport {\n  Dimensions,\n  StyleSheet,\n  View,\n  FlatList,\n  Text,\n  StatusBar,\n} from 'react-native';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  useFocusEffect,\n  useNavigation,\n  useRoute,\n  RouteProp,\n} from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { TabBar, TabView, SceneMap } from 'react-native-tab-view';\nimport {\n  INVITE_ACTIVE,\n  CONNECTIONS_TYPE,\n  GROUPS_TYPE,\n  MISC_TYPE,\n} from '@/utils/constants';\nimport { ORANGE, WHITE, GREY, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport EmptyList from '@/components/Helpers/EmptyList';\nimport { photoDirectory } from '@/utils/filesystem';\nimport { updateNotifications } from '@/actions/index';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport NotificationCard from './NotificationCard';\nimport InviteCard from './InviteCard';\nimport PendingConnectionCard from './PendingConnectionCard';\n\nlet thecount = 0;\n\n/** SELECTORS */\n\nconst inviteSelector = createSelector(\n  (state: State) => state.groups.invites,\n  (invites) => invites.filter(({ state }) => state === INVITE_ACTIVE),\n);\n\n/** HOOKS */\n\nconst useRefresh: () => [boolean, () => void] = () => {\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n  const [refreshing, setRefreshing] = useState(false);\n  const onRefresh = () => {\n    setRefreshing(true);\n    dispatch(updateNotifications(api))\n      .then(() => {\n        setRefreshing(false);\n      })\n      .catch((err) => {\n        console.log(err.message);\n        setRefreshing(false);\n      });\n  };\n  return [refreshing, onRefresh];\n};\n\n/** TYPES */\n\ntype Route = {\n  badge: boolean;\n  backupPending?: boolean;\n  recoveryConnectionsPending?: boolean;\n  title?: string;\n};\n/** COMPONENTS  */\n\nconst ConnectionsList = () => {\n  const [refreshing, onRefresh] = useRefresh();\n  const pendingConnections = useSelector((state) =>\n    selectAllUnconfirmedConnections(state),\n  );\n  const { t } = useTranslation();\n  // only display one notification for all pending connections\n  const data = pendingConnections.length > 0 ? [{ id: 'pendingList' }] : [];\n\n  return (\n    <FlatList\n      contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n      data={data}\n      keyExtractor={({ id }, index) => id + index}\n      showsHorizontalScrollIndicator={false}\n      showsVerticalScrollIndicator={false}\n      onRefresh={onRefresh}\n      refreshing={refreshing}\n      ListEmptyComponent={\n        <EmptyList\n          title={t('notifications.text.noPendingConnections')}\n          iconType=\"account-off-outline\"\n        />\n      }\n      renderItem={() => (\n        <PendingConnectionCard pendingConnections={pendingConnections} />\n      )}\n    />\n  );\n};\n\nconst InviteList = () => {\n  const { t } = useTranslation();\n  const [refreshing, onRefresh] = useRefresh();\n  const invites = useSelector((state) => inviteSelector(state));\n  thecount++;\n  console.log('Rendering Invite List', thecount);\n\n  return (\n    <FlatList\n      contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n      data={invites}\n      keyExtractor={({ id }, index) => id + index}\n      showsHorizontalScrollIndicator={false}\n      showsVerticalScrollIndicator={false}\n      onRefresh={onRefresh}\n      refreshing={refreshing}\n      ListEmptyComponent={\n        <EmptyList\n          title={t('notifications.text.noGroupInvites')}\n          iconType=\"account-group-outline\"\n        />\n      }\n      renderItem={({ item }) => <InviteCard invite={item} />}\n    />\n  );\n};\n\nconst MiscList = ({ route }: { route: Route }) => {\n  const { t } = useTranslation();\n  const photoFilename = useSelector((state) => state.user.photo.filename);\n  const [refreshing, onRefresh] = useRefresh();\n  const data = [];\n\n  if (route.recoveryConnectionsPending) {\n    // TODO: Set better image\n    const imageSource = photoFilename\n      ? { uri: `file://${photoDirectory()}/${photoFilename}` }\n      : require('@/static/default_profile.jpg');\n    data.push({\n      title: t('notifications.item.title.socialRecovery'),\n      msg: t('notifications.item.msg.socialRecovery'),\n      imageSource,\n      navigationTarget: 'Recovery Connections',\n      testID: 'SocialRecoveryNotifcation',\n    });\n  }\n\n  if (route.backupPending) {\n    // TODO: Set appropriate image\n    const imageSource = photoFilename\n      ? { uri: `file://${photoDirectory()}/${photoFilename}` }\n      : require('@/static/default_profile.jpg');\n    data.push({\n      title: t('notifications.item.title.backupBrightId'),\n      msg: t('notifications.item.msg.backupBrightId'),\n      imageSource,\n      navigationTarget: 'Edit Profile',\n      testID: 'BackupNotification',\n    });\n  }\n\n  return (\n    <FlatList\n      contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n      data={data}\n      keyExtractor={({ msg }, index) => msg + index}\n      showsHorizontalScrollIndicator={false}\n      showsVerticalScrollIndicator={false}\n      onRefresh={onRefresh}\n      refreshing={refreshing}\n      ListEmptyComponent={\n        <EmptyList\n          title={t('notifications.text.noMiscellaneous')}\n          iconType=\"bell-off-outline\"\n        />\n      }\n      renderItem={({ item }) => (\n        <NotificationCard\n          title={item.title}\n          msg={item.msg}\n          imageSource={item.imageSource}\n          navigationTarget={item.navigationTarget}\n          testID={item.testID}\n        />\n      )}\n    />\n  );\n};\n\nconst initialLayout = { width: Dimensions.get('window').width };\n\nconst renderTabBar = (props) => (\n  <TabBar\n    {...props}\n    indicatorStyle={{ backgroundColor: ORANGE }}\n    style={styles.tabBar}\n    renderLabel={({ route, color }: { route: Route; color: string }) => (\n      <View style={styles.tabContainer}>\n        {route.badge && <View style={styles.badge} />}\n        <Text\n          style={[styles.tabText, { color }]}\n          adjustsFontSizeToFit={true}\n          numberOfLines={1}\n        >\n          {route.title}\n        </Text>\n      </View>\n    )}\n    inactiveColor={GREY}\n    activeColor={BLACK}\n  />\n);\n\ntype NotificationsRoute = RouteProp<\n  {\n    Notifications: {\n      type?: typeof CONNECTIONS_TYPE | typeof GROUPS_TYPE | typeof MISC_TYPE;\n    };\n  },\n  'Notifications'\n>;\n\nexport const NotificationsScreen = () => {\n  const dispatch = useDispatch();\n  const route = useRoute<NotificationsRoute>();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const pendingConnections = useSelector(\n    (state) => selectAllUnconfirmedConnections(state)?.length,\n  );\n\n  const invites = useSelector((state) => inviteSelector(state)?.length);\n\n  const backupPending = useSelector(\n    (state) => state.notifications.backupPending,\n  );\n\n  const recoveryConnectionsPending = useSelector(\n    (state) => state.notifications.recoveryConnectionsPending,\n  );\n\n  const routes = [\n    {\n      key: CONNECTIONS_TYPE,\n      title: t('notifications.tab.connections'),\n      badge: !!pendingConnections,\n    },\n    {\n      key: GROUPS_TYPE,\n      title: t('notifications.tab.groups'),\n      badge: !!invites,\n    },\n    {\n      key: MISC_TYPE,\n      title: t('notifications.tab.miscellaneous'),\n      badge: backupPending || recoveryConnectionsPending,\n      backupPending,\n      recoveryConnectionsPending,\n    },\n  ];\n  // if we navigate here from the banner, go to the section from the banner\n  // if we navigate here normally, go to the first route with content, if any\n\n  const displayRoute = route.params?.type\n    ? routes.findIndex(({ key }) => key === route.params?.type)\n    : routes.findIndex(({ badge }) => badge);\n\n  const [index, setIndex] = useState(displayRoute);\n\n  const renderScene = SceneMap({\n    [CONNECTIONS_TYPE]: ConnectionsList,\n    [GROUPS_TYPE]: InviteList,\n    [MISC_TYPE]: MiscList,\n  });\n\n  useFocusEffect(\n    useCallback(() => {\n      dispatch(updateNotifications(api));\n    }, [api, dispatch]),\n  );\n\n  console.log('Rendering Notification Screen');\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"NotificationsScreen\">\n        <TabView\n          navigationState={{ index, routes }}\n          renderScene={renderScene}\n          renderTabBar={renderTabBar}\n          onIndexChange={setIndex}\n          initialLayout={initialLayout}\n        />\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 62,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  badge: {\n    backgroundColor: ORANGE,\n    width: DEVICE_LARGE ? 8 : 6,\n    height: DEVICE_LARGE ? 8 : 6,\n    borderRadius: 4,\n    marginRight: DEVICE_LARGE ? 8 : 6,\n  },\n  tabBar: { backgroundColor: WHITE, paddingLeft: DEVICE_LARGE ? 20 : 18 },\n  tabContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  tabText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n  },\n});\n\nexport default NotificationsScreen;\n"]},"metadata":{},"sourceType":"module"}