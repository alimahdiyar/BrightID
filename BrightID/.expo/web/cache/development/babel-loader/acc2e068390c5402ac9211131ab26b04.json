{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { RESET_STORE } from \"../actions/resetStore\";\nvar ProdCandidates = ['http://node.brightid.org', 'http://brightid.idealmoney.io', 'http://brightid2.idealmoney.io', 'https://brightid.59836e71dd6e5898.dyndns.dappnode.io', 'http://bright.daosquare.io'];\nvar TestCandidates = ['http://test.brightid.org'];\nvar initialState = {\n  syncSocialMediaEnabled: false,\n  baseUrl: null,\n  nodeUrls: __DEV__ ? TestCandidates : ProdCandidates,\n  isPrimaryDevice: true,\n  lastSyncTime: 0\n};\nexport var settingsSlice = createSlice({\n  name: 'settings',\n  initialState: initialState,\n  reducers: {\n    setSyncSocialMediaEnabled: function setSyncSocialMediaEnabled(state, action) {\n      state.syncSocialMediaEnabled = action.payload;\n    },\n    setBaseUrl: function setBaseUrl(state, action) {\n      state.baseUrl = action.payload;\n    },\n    clearBaseUrl: function clearBaseUrl(state) {\n      state.baseUrl = null;\n    },\n    resetSettings: function resetSettings(state) {\n      state = initialState;\n    },\n    addNodeUrl: function addNodeUrl(state, action) {\n      var newNodeUrl = action.payload.toLowerCase();\n      if (!state.nodeUrls.includes(newNodeUrl)) state.nodeUrls.push(action.payload);\n    },\n    removeNodeUrl: function removeNodeUrl(state, action) {\n      var removeUrl = action.payload.toLowerCase();\n      state.nodeUrls = state.nodeUrls.filter(function (url) {\n        return url.toLowerCase() !== removeUrl;\n      });\n\n      if (state.baseUrl.toLowerCase() === removeUrl) {\n        state.baseUrl = null;\n      }\n    },\n    removeCurrentNodeUrl: function removeCurrentNodeUrl(state) {\n      if (state.baseUrl) {\n        console.log(\"Removing active node \" + state.baseUrl);\n        state.nodeUrls = state.nodeUrls.filter(function (url) {\n          return url.toLowerCase() !== state.baseUrl;\n        });\n        state.baseUrl = null;\n      } else {\n        console.log(\"No active node to remove\");\n      }\n    },\n    resetNodeUrls: function resetNodeUrls(state) {\n      console.log(\"Resetting node urls\");\n      state.nodeUrls = initialState.nodeUrls;\n\n      if (state.baseUrl && !state.nodeUrls.includes(state.baseUrl)) {\n        console.log(\"current baseUrl removed from nodeList. Clearing baseUrl.\");\n        state.baseUrl = initialState.baseUrl;\n      }\n    },\n    setPrimaryDevice: function setPrimaryDevice(state, action) {\n      state.isPrimaryDevice = action.payload;\n    },\n    setLastSyncTime: function setLastSyncTime(state, action) {\n      state.lastSyncTime = action.payload;\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return initialState;\n  })\n});\nvar _settingsSlice$action = settingsSlice.actions,\n    setSyncSocialMediaEnabled = _settingsSlice$action.setSyncSocialMediaEnabled,\n    setBaseUrl = _settingsSlice$action.setBaseUrl,\n    clearBaseUrl = _settingsSlice$action.clearBaseUrl,\n    resetSettings = _settingsSlice$action.resetSettings,\n    addNodeUrl = _settingsSlice$action.addNodeUrl,\n    removeNodeUrl = _settingsSlice$action.removeNodeUrl,\n    removeCurrentNodeUrl = _settingsSlice$action.removeCurrentNodeUrl,\n    resetNodeUrls = _settingsSlice$action.resetNodeUrls,\n    setPrimaryDevice = _settingsSlice$action.setPrimaryDevice,\n    setLastSyncTime = _settingsSlice$action.setLastSyncTime;\nexport { setSyncSocialMediaEnabled, setBaseUrl, clearBaseUrl, resetSettings, addNodeUrl, removeNodeUrl, removeCurrentNodeUrl, resetNodeUrls, setPrimaryDevice, setLastSyncTime };\nexport var selectSyncSocialMediaEnabled = function selectSyncSocialMediaEnabled(state) {\n  return state.settings.syncSocialMediaEnabled;\n};\nexport var selectBaseUrl = function selectBaseUrl(state) {\n  return state.settings.baseUrl;\n};\nexport var selectAllNodeUrls = function selectAllNodeUrls(state) {\n  return state.settings.nodeUrls;\n};\nexport var selectDefaultNodeUrls = function selectDefaultNodeUrls(_) {\n  return initialState.nodeUrls;\n};\nexport var selectIsPrimaryDevice = function selectIsPrimaryDevice(state) {\n  return state.settings.isPrimaryDevice;\n};\nexport var selectLastSyncTime = function selectLastSyncTime(state) {\n  return state.settings.lastSyncTime;\n};\nexport default settingsSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/settingsSlice.ts"],"names":["ProdCandidates","TestCandidates","initialState","syncSocialMediaEnabled","baseUrl","nodeUrls","__DEV__","isPrimaryDevice","lastSyncTime","settingsSlice","createSlice","name","reducers","setSyncSocialMediaEnabled","state","action","setBaseUrl","clearBaseUrl","resetSettings","addNodeUrl","newNodeUrl","removeNodeUrl","removeUrl","url","removeCurrentNodeUrl","console","resetNodeUrls","setPrimaryDevice","setLastSyncTime","extraReducers","selectSyncSocialMediaEnabled","selectBaseUrl","selectAllNodeUrls","selectDefaultNodeUrls","selectIsPrimaryDevice","selectLastSyncTime"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\n\nconst ProdCandidates = [\n  'http://node.brightid.org',\n  'http://brightid.idealmoney.io',\n  'http://brightid2.idealmoney.io',\n  'https://brightid.59836e71dd6e5898.dyndns.dappnode.io',\n  'http://bright.daosquare.io',\n  // Following nodes exist, but currently fail the NodeChooser tests\n  //  'http://brightid.onehive.org',\n  //  'http://node.topupgifter.com',\n  //  'http://node.lumos.services',\n];\nconst TestCandidates = ['http://test.brightid.org'];\n\ninterface SettingsSlice {\n  syncSocialMediaEnabled: boolean;\n  baseUrl: string | null;\n  nodeUrls: Array<string>;\n  isPrimaryDevice: boolean;\n  lastSyncTime: number;\n}\n\nconst initialState: SettingsSlice = {\n  syncSocialMediaEnabled: false,\n  baseUrl: null,\n  nodeUrls: __DEV__ ? TestCandidates : ProdCandidates,\n  isPrimaryDevice: true,\n  lastSyncTime: 0,\n};\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState,\n  reducers: {\n    setSyncSocialMediaEnabled: (state, action: PayloadAction<boolean>) => {\n      state.syncSocialMediaEnabled = action.payload;\n    },\n    setBaseUrl: (state, action: PayloadAction<string>) => {\n      state.baseUrl = action.payload;\n    },\n    clearBaseUrl: (state) => {\n      state.baseUrl = null;\n    },\n    resetSettings: (state) => {\n      state = initialState;\n    },\n    addNodeUrl: (state, action: PayloadAction<string>) => {\n      const newNodeUrl = action.payload.toLowerCase();\n      if (!state.nodeUrls.includes(newNodeUrl))\n        state.nodeUrls.push(action.payload);\n    },\n    removeNodeUrl: (state, action: PayloadAction<string>) => {\n      const removeUrl = action.payload.toLowerCase();\n      state.nodeUrls = state.nodeUrls.filter(\n        (url) => url.toLowerCase() !== removeUrl,\n      );\n      if (state.baseUrl.toLowerCase() === removeUrl) {\n        state.baseUrl = null;\n      }\n    },\n    removeCurrentNodeUrl: (state) => {\n      if (state.baseUrl) {\n        console.log(`Removing active node ${state.baseUrl}`);\n        state.nodeUrls = state.nodeUrls.filter(\n          (url) => url.toLowerCase() !== state.baseUrl,\n        );\n        state.baseUrl = null;\n      } else {\n        console.log(`No active node to remove`);\n      }\n    },\n    resetNodeUrls: (state) => {\n      console.log(`Resetting node urls`);\n      state.nodeUrls = initialState.nodeUrls;\n      if (state.baseUrl && !state.nodeUrls.includes(state.baseUrl)) {\n        console.log(`current baseUrl removed from nodeList. Clearing baseUrl.`);\n        state.baseUrl = initialState.baseUrl;\n      }\n    },\n    setPrimaryDevice: (state, action: PayloadAction<boolean>) => {\n      state.isPrimaryDevice = action.payload;\n    },\n    setLastSyncTime: (state, action: PayloadAction<number>) => {\n      state.lastSyncTime = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  setSyncSocialMediaEnabled,\n  setBaseUrl,\n  clearBaseUrl,\n  resetSettings,\n  addNodeUrl,\n  removeNodeUrl,\n  removeCurrentNodeUrl,\n  resetNodeUrls,\n  setPrimaryDevice,\n  setLastSyncTime,\n} = settingsSlice.actions;\n\nexport const selectSyncSocialMediaEnabled = (state: State) =>\n  state.settings.syncSocialMediaEnabled;\nexport const selectBaseUrl = (state: State) => state.settings.baseUrl;\nexport const selectAllNodeUrls = (state: State) => state.settings.nodeUrls;\nexport const selectDefaultNodeUrls = (_: State) => initialState.nodeUrls;\nexport const selectIsPrimaryDevice = (state: State) =>\n  state.settings.isPrimaryDevice;\nexport const selectLastSyncTime = (state: State) => state.settings.lastSyncTime;\n\nexport default settingsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}