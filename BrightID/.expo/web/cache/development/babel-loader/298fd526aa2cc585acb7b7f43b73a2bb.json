{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { asyncCreateMigrate } from \"./asyncCreateMigrate\";\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from '@/utils/constants';\n\nvar findId = function findId(conn) {\n  return conn.id;\n};\n\nvar connectionsMigrations = {\n  11: function _(state) {\n    var _state$connections, recoveryConnections;\n\n    return _regeneratorRuntime.async(function _$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!state.firstRecoveryTime) {\n              if (state != null && (_state$connections = state.connections) != null && _state$connections.entities) {\n                recoveryConnections = Object.values(state.connections.entities).filter(function (conn) {\n                  return conn.level === connection_levels.RECOVERY;\n                });\n\n                if (recoveryConnections.length) {\n                  state.firstRecoveryTime = Date.now() - (RECOVERY_COOLDOWN_EXEMPTION + 60 * 1000);\n                }\n              }\n            }\n\n            return _context.abrupt(\"return\", state);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  10: function _(state) {\n    var filteredConnections, ids, entities;\n    return _regeneratorRuntime.async(function _$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (Array.isArray(state.connections)) {\n              filteredConnections = state.connections.filter(findId);\n              ids = filteredConnections.map(findId);\n              entities = {};\n              filteredConnections.forEach(function (conn) {\n                entities[findId(conn)] = conn;\n              });\n              state.connections = {\n                ids: ids,\n                entities: entities\n              };\n            }\n\n            return _context2.abrupt(\"return\", state);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport var connectionsMigrate = asyncCreateMigrate(connectionsMigrations, {\n  debug: __DEV__\n});","map":{"version":3,"names":["asyncCreateMigrate","connection_levels","RECOVERY_COOLDOWN_EXEMPTION","findId","conn","id","connectionsMigrations","state","firstRecoveryTime","connections","entities","recoveryConnections","Object","values","filter","level","RECOVERY","length","Date","now","Array","isArray","filteredConnections","ids","map","forEach","connectionsMigrate","debug","__DEV__"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/migrations/connections.ts"],"sourcesContent":["import { PersistedState } from 'redux-persist';\nimport { asyncCreateMigrate, MigrationManifest } from './asyncCreateMigrate';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\n\nconst findId = (conn: Connection) => conn.id;\n\ntype V9State = {\n  connections: Connection[];\n  connectionsSort: string;\n  searchParam: string;\n  searchOpen: boolean;\n  filters: ConnectionLevel[];\n} & PersistedState;\n\ntype V10State = ConnectionsState & PersistedState;\n\nconst connectionsMigrations: MigrationManifest = {\n  11: async (state: ConnectionsState & PersistedState) => {\n    // Set first recovery time if not yet set and user has existing RECOVERY connections\n    if (!state.firstRecoveryTime) {\n      if (state?.connections?.entities) {\n        const recoveryConnections = Object.values(\n          state.connections.entities,\n        ).filter((conn) => conn.level === connection_levels.RECOVERY);\n        if (recoveryConnections.length) {\n          // assume existing connection was made longer ago than cooldown exception duration\n          state.firstRecoveryTime =\n            Date.now() - (RECOVERY_COOLDOWN_EXEMPTION + 60 * 1000);\n        }\n      }\n    }\n    return state;\n  },\n  10: async (state: V9State | V10State) => {\n    // migrate connections to entity adapter\n    if (Array.isArray(state.connections)) {\n      const filteredConnections = state.connections.filter(findId);\n\n      const ids = filteredConnections.map(findId);\n\n      const entities = {};\n\n      filteredConnections.forEach((conn) => {\n        entities[findId(conn)] = conn;\n      });\n\n      state.connections = { ids, entities };\n    }\n    return state;\n  },\n};\n\nexport const connectionsMigrate = asyncCreateMigrate(connectionsMigrations, {\n  debug: __DEV__,\n});\n"],"mappings":";AACA,SAASA,kBAAT;AACA,SACEC,iBADF,EAEEC,2BAFF,QAGO,mBAHP;;AAKA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD;EAAA,OAAsBA,IAAI,CAACC,EAA3B;AAAA,CAAf;;AAYA,IAAMC,qBAAwC,GAAG;EAC/C,IAAI,WAAOC,KAAP;IAAA;;IAAA;MAAA;QAAA;UAAA;YAEF,IAAI,CAACA,KAAK,CAACC,iBAAX,EAA8B;cAC5B,IAAID,KAAJ,kCAAIA,KAAK,CAAEE,WAAX,aAAI,mBAAoBC,QAAxB,EAAkC;gBAC1BC,mBAD0B,GACJC,MAAM,CAACC,MAAP,CAC1BN,KAAK,CAACE,WAAN,CAAkBC,QADQ,EAE1BI,MAF0B,CAEnB,UAACV,IAAD;kBAAA,OAAUA,IAAI,CAACW,KAAL,KAAed,iBAAiB,CAACe,QAA3C;gBAAA,CAFmB,CADI;;gBAIhC,IAAIL,mBAAmB,CAACM,MAAxB,EAAgC;kBAE9BV,KAAK,CAACC,iBAAN,GACEU,IAAI,CAACC,GAAL,MAAcjB,2BAA2B,GAAG,KAAK,IAAjD,CADF;gBAED;cACF;YACF;;YAbC,iCAcKK,KAdL;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAD2C;EAiB/C,IAAI,WAAOA,KAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YAEF,IAAIa,KAAK,CAACC,OAAN,CAAcd,KAAK,CAACE,WAApB,CAAJ,EAAsC;cAC9Ba,mBAD8B,GACRf,KAAK,CAACE,WAAN,CAAkBK,MAAlB,CAAyBX,MAAzB,CADQ;cAG9BoB,GAH8B,GAGxBD,mBAAmB,CAACE,GAApB,CAAwBrB,MAAxB,CAHwB;cAK9BO,QAL8B,GAKnB,EALmB;cAOpCY,mBAAmB,CAACG,OAApB,CAA4B,UAACrB,IAAD,EAAU;gBACpCM,QAAQ,CAACP,MAAM,CAACC,IAAD,CAAP,CAAR,GAAyBA,IAAzB;cACD,CAFD;cAIAG,KAAK,CAACE,WAAN,GAAoB;gBAAEc,GAAG,EAAHA,GAAF;gBAAOb,QAAQ,EAARA;cAAP,CAApB;YACD;;YAdC,kCAeKH,KAfL;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAjB2C,CAAjD;AAoCA,OAAO,IAAMmB,kBAAkB,GAAG1B,kBAAkB,CAACM,qBAAD,EAAwB;EAC1EqB,KAAK,EAAEC;AADmE,CAAxB,CAA7C"},"metadata":{},"sourceType":"module"}