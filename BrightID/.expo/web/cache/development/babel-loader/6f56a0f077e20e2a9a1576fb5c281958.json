{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport i18next from 'i18next';\nimport { dangerouslyDeleteStorage } from \"./utils/dev\";\nimport { store } from \"./store\";\nimport { checkTasks, syncStoreTasks } from \"./components/Tasks/TasksSlice\";\nimport { scrubOps } from \"./reducer/operationsSlice\";\nexport var bootstrap = function _callee() {\n  var _store$getState, id;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _store$getState = store.getState(), id = _store$getState.user.id;\n          store.dispatch(syncStoreTasks());\n          store.dispatch(checkTasks());\n          store.dispatch(scrubOps());\n          _context.prev = 4;\n\n          if (!(id === 'empty')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(dangerouslyDeleteStorage());\n\n        case 8:\n          Alert.alert(i18next.t('common.alert.title.lostKeys'), i18next.t('common.alert.text.lostKeys'));\n          throw new Error('id is empty');\n\n        case 10:\n          _context.next = 15;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](4);\n          console.error(_context.t0);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 12]], Promise);\n};","map":{"version":3,"names":["i18next","dangerouslyDeleteStorage","store","checkTasks","syncStoreTasks","scrubOps","bootstrap","getState","id","user","dispatch","Alert","alert","t","Error","console","error"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/bootstrap.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport i18next from 'i18next';\nimport { dangerouslyDeleteStorage } from '@/utils/dev';\nimport { store } from './store';\nimport { checkTasks, syncStoreTasks } from './components/Tasks/TasksSlice';\nimport { scrubOps } from '@/reducer/operationsSlice';\n\n// happens inside of the loading screen\n\nexport const bootstrap = async () => {\n  const {\n    user: { id },\n  } = store.getState();\n\n  // update available usertasks\n  store.dispatch(syncStoreTasks());\n  // Initial check for completed tasks\n  store.dispatch(checkTasks());\n  // scrub outdated operations from state\n  store.dispatch(scrubOps());\n\n  try {\n    // delete all storage if brightid is empty\n    if (id === 'empty') {\n      await dangerouslyDeleteStorage();\n      Alert.alert(\n        i18next.t('common.alert.title.lostKeys'),\n        i18next.t('common.alert.text.lostKeys'),\n      );\n      throw new Error('id is empty');\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n"],"mappings":";;AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,wBAAT;AACA,SAASC,KAAT;AACA,SAASC,UAAT,EAAqBC,cAArB;AACA,SAASC,QAAT;AAIA,OAAO,IAAMC,SAAS,GAAG;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,kBAGnBJ,KAAK,CAACK,QAAN,EAHmB,EAEbC,EAFa,mBAErBC,IAFqB,CAEbD,EAFa;UAMvBN,KAAK,CAACQ,QAAN,CAAeN,cAAc,EAA7B;UAEAF,KAAK,CAACQ,QAAN,CAAeP,UAAU,EAAzB;UAEAD,KAAK,CAACQ,QAAN,CAAeL,QAAQ,EAAvB;UAVuB;;UAAA,MAcjBG,EAAE,KAAK,OAdU;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAebP,wBAAwB,EAfX;;QAAA;UAgBnBU,KAAK,CAACC,KAAN,CACEZ,OAAO,CAACa,CAAR,CAAU,6BAAV,CADF,EAEEb,OAAO,CAACa,CAAR,CAAU,4BAAV,CAFF;UAhBmB,MAoBb,IAAIC,KAAJ,CAAU,aAAV,CApBa;;QAAA;UAAA;UAAA;;QAAA;UAAA;UAAA;UAuBrBC,OAAO,CAACC,KAAR;;QAvBqB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAlB"},"metadata":{},"sourceType":"module"}