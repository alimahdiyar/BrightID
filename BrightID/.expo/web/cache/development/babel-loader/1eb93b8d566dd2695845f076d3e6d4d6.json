{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar VERSION = 11;\nexport function asyncCreateMigrate(migrations, config) {\n  var _ref = config || {},\n      debug = _ref.debug;\n\n  return function (state, currentVersion) {\n    var _state$_persist$versi, _state$_persist;\n\n    if (!state) {\n      if (debug) console.log('redux-persist: no inbound state, skipping migration');\n      return Promise.resolve(undefined);\n    }\n\n    var inboundVersion = (_state$_persist$versi = state == null ? void 0 : (_state$_persist = state._persist) == null ? void 0 : _state$_persist.version) != null ? _state$_persist$versi : VERSION - 1;\n\n    if (inboundVersion === currentVersion) {\n      if (debug) console.log('redux-persist: versions match, noop migration');\n      return Promise.resolve(state);\n    }\n\n    if (inboundVersion > currentVersion) {\n      if (debug) console.log('redux-persist: downgrading version is not supported');\n      return Promise.resolve(state);\n    }\n\n    var migrationKeys = Object.keys(migrations).map(function (ver) {\n      return parseInt(ver, 10);\n    }).filter(function (key) {\n      return currentVersion >= key && key > inboundVersion;\n    }).sort(function (a, b) {\n      return a - b;\n    });\n    if (debug) console.log('redux-persist: migrationKeys', migrationKeys);\n\n    try {\n      var migratedState = migrationKeys.reduce(function _callee(stateP, versionKey) {\n        var state;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (debug) console.log('redux-persist: running migration for versionKey', versionKey);\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(stateP);\n\n              case 3:\n                state = _context.sent;\n                return _context.abrupt(\"return\", migrations[versionKey](state));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }, Promise.resolve(state));\n      return Promise.resolve(migratedState);\n    } catch (err) {\n      console.error(err);\n      return Promise.reject(err);\n    }\n  };\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/migrations/asyncCreateMigrate.ts"],"names":["VERSION","debug","config","console","Promise","inboundVersion","state","migrationKeys","Object","parseInt","currentVersion","key","a","migratedState","migrations"],"mappings":";AAMA,IAAMA,OAAO,GAAb,EAAA;AAEA,OAAO,SAAA,kBAAA,CAAA,UAAA,EAAA,MAAA,EAGL;EACA,IAAA,IAAA,GAAkBE,MAAM,IAAxB,EAAA;EAAA,IAAQD,KAAR,GAAA,IAAA,CAAA,KAAA;;EACA,OAAO,UAAA,KAAA,EAAA,cAAA,EAGoB;IAAA,IAAA,qBAAA,EAAA,eAAA;;IACzB,IAAI,CAAJ,KAAA,EAAY;MACV,IAAA,KAAA,EACEE,OAAO,CAAPA,GAAAA,CAAAA,qDAAAA;MACF,OAAOC,OAAO,CAAPA,OAAAA,CAAP,SAAOA,CAAP;IAGF;;IAAA,IAAMC,cAAsB,GAAA,CAAA,qBAAA,GAAGC,KAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,eAAA,GAAGA,KAAK,CAAR,QAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,eAAAA,CAAH,OAAA,KAAA,IAAA,GAAA,qBAAA,GAA+BN,OAAO,GAAlE,CAAA;;IAEA,IAAIK,cAAc,KAAlB,cAAA,EAAuC;MACrC,IAAA,KAAA,EAAWF,OAAO,CAAPA,GAAAA,CAAAA,+CAAAA;MACX,OAAOC,OAAO,CAAPA,OAAAA,CAAP,KAAOA,CAAP;IAEF;;IAAA,IAAIC,cAAc,GAAlB,cAAA,EAAqC;MACnC,IAAA,KAAA,EACEF,OAAO,CAAPA,GAAAA,CAAAA,qDAAAA;MACF,OAAOC,OAAO,CAAPA,OAAAA,CAAP,KAAOA,CAAP;IAGF;;IAAA,IAAMG,aAAa,GAAGC,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,GAAAA,CACf,UAAA,GAAA,EAAA;MAAA,OAASC,QAAQ,CAAA,GAAA,EAAjB,EAAiB,CAAjB;IADeD,CAAAA,EAAAA,MAAAA,CAEZ,UAAA,GAAA,EAAA;MAAA,OAASE,cAAc,IAAdA,GAAAA,IAAyBC,GAAG,GAArC,cAAA;IAFYH,CAAAA,EAAAA,IAAAA,CAGd,UAAA,CAAA,EAAA,CAAA,EAAA;MAAA,OAAUI,CAAC,GAAX,CAAA;IAHR,CAAsBJ,CAAtB;IAKA,IAAA,KAAA,EAAWL,OAAO,CAAPA,GAAAA,CAAAA,8BAAAA,EAAAA,aAAAA;;IACX,IAAI;MACF,IAAMU,aAAa,GAAGN,aAAa,CAAbA,MAAAA,CAAqB,SAAA,OAAA,CAAA,MAAA,EAAA,UAAA,EAAA;QAAA,IAAA,KAAA;QAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;UAAA,OAAA,CAAA,EAAA;YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;cAAA,KAAA,CAAA;gBACzC,IAAA,KAAA,EACEJ,OAAO,CAAPA,GAAAA,CAAAA,iDAAAA,EAAAA,UAAAA;gBAFuC,QAAA,CAAA,IAAA,GAAA,CAAA;gBAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,MAAA,CAAA;;cAAA,KAAA,CAAA;gBAMnCG,KANmC,GAAA,QAAA,CAAA,IAMnCA;gBANmC,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAOlCQ,UAAU,CAAVA,UAAU,CAAVA,CAPkC,KAOlCA,CAPkC,CAAA;;cAAA,KAAA,CAAA;cAAA,KAAA,KAAA;gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA;YAAA;UAAA;QAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;MAArBP,CAAAA,EAQnBH,OAAO,CAAPA,OAAAA,CARH,KAQGA,CARmBG,CAAtB;MASA,OAAOH,OAAO,CAAPA,OAAAA,CAAP,aAAOA,CAAP;IACA,CAXF,CAWE,OAAA,GAAA,EAAY;MACZD,OAAO,CAAPA,KAAAA,CAAAA,GAAAA;MACA,OAAOC,OAAO,CAAPA,MAAAA,CAAP,GAAOA,CAAP;IAEH;EA3CD,CAAA;AA4CD","sourcesContent":["import { PersistedState } from 'redux-persist';\n\nexport type MigrationManifest = {\n  [key: string]: (state: PersistedState) => Promise<PersistedState>;\n};\n\nconst VERSION = 11;\n\nexport function asyncCreateMigrate(\n  migrations: MigrationManifest,\n  config?: { debug: boolean },\n) {\n  const { debug } = config || {};\n  return function (\n    state: PersistedState,\n    currentVersion: number,\n  ): Promise<PersistedState> {\n    if (!state) {\n      if (debug)\n        console.log('redux-persist: no inbound state, skipping migration');\n      return Promise.resolve(undefined);\n    }\n\n    const inboundVersion: number = state?._persist?.version ?? VERSION - 1;\n\n    if (inboundVersion === currentVersion) {\n      if (debug) console.log('redux-persist: versions match, noop migration');\n      return Promise.resolve(state);\n    }\n    if (inboundVersion > currentVersion) {\n      if (debug)\n        console.log('redux-persist: downgrading version is not supported');\n      return Promise.resolve(state);\n    }\n\n    const migrationKeys = Object.keys(migrations)\n      .map((ver) => parseInt(ver, 10))\n      .filter((key) => currentVersion >= key && key > inboundVersion)\n      .sort((a, b) => a - b);\n\n    if (debug) console.log('redux-persist: migrationKeys', migrationKeys);\n    try {\n      const migratedState = migrationKeys.reduce(async (stateP, versionKey) => {\n        if (debug)\n          console.log(\n            'redux-persist: running migration for versionKey',\n            versionKey,\n          );\n        const state = await stateP;\n        return migrations[versionKey](state);\n      }, Promise.resolve(state));\n      return Promise.resolve(migratedState);\n    } catch (err) {\n      console.error(err);\n      return Promise.reject(err);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}