{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, UnavailabilityError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font.types\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\" + getNativeFontName(fontFamily);\n}\nexport function isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport function loadAsync(fontFamilyOrFontMap, source) {\n  var fontMap, names;\n  return _regeneratorRuntime.async(function loadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof fontFamilyOrFontMap === 'object')) {\n            _context.next = 8;\n            break;\n          }\n\n          if (!source) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n\n        case 3:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return loadFontInNamespaceAsync(name, fontMap[name]);\n          })));\n\n        case 7:\n          return _context.abrupt(\"return\");\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loadFontInNamespaceAsync(fontFamily, source) {\n  var asset;\n  return _regeneratorRuntime.async(function loadFontInNamespaceAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (source) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n\n        case 2:\n          if (!loaded[fontFamily]) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 4:\n          if (!loadPromises.hasOwnProperty(fontFamily)) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n\n        case 6:\n          asset = getAssetForSource(source);\n\n          loadPromises[fontFamily] = function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return _regeneratorRuntime.awrap(loadSingleFontAsync(fontFamily, asset));\n\n                  case 3:\n                    loaded[fontFamily] = true;\n\n                  case 4:\n                    _context2.prev = 4;\n                    delete loadPromises[fontFamily];\n                    return _context2.finish(4);\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[0,, 4, 7]], Promise);\n          }();\n\n          _context3.next = 10;\n          return _regeneratorRuntime.awrap(loadPromises[fontFamily]);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function unloadAllAsync() {\n  var _i, _Object$keys, fontFamily;\n\n  return _regeneratorRuntime.async(function unloadAllAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoFontLoader.unloadAllAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n\n        case 2:\n          if (!Object.keys(loadPromises).length) {\n            _context4.next = 4;\n            break;\n          }\n\n          throw new CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n\n        case 4:\n          for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n            fontFamily = _Object$keys[_i];\n            delete loaded[fontFamily];\n          }\n\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAllAsync());\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function unloadAsync(fontFamilyOrFontMap, options) {\n  var fontMap, names;\n  return _regeneratorRuntime.async(function unloadAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoFontLoader.unloadAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-font', 'unloadAsync');\n\n        case 2:\n          if (!(typeof fontFamilyOrFontMap === 'object')) {\n            _context5.next = 10;\n            break;\n          }\n\n          if (!options) {\n            _context5.next = 5;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n\n        case 5:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return unloadFontInNamespaceAsync(name, fontMap[name]);\n          })));\n\n        case 9:\n          return _context5.abrupt(\"return\");\n\n        case 10:\n          _context5.next = 12;\n          return _regeneratorRuntime.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n\n        case 12:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction unloadFontInNamespaceAsync(fontFamily, options) {\n  var nativeFontName;\n  return _regeneratorRuntime.async(function unloadFontInNamespaceAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (loaded[fontFamily]) {\n            _context6.next = 4;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 4:\n          delete loaded[fontFamily];\n\n        case 5:\n          nativeFontName = getNativeFontName(fontFamily);\n\n          if (nativeFontName) {\n            _context6.next = 8;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n\n        case 8:\n          _context6.next = 10;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAsync(nativeFontName, options));\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { FontDisplay };","map":{"version":3,"sources":["../src/Font.ts"],"names":["loaded","loadPromises","fontFamilyNeedsScoping","isLoaded","isLoading","console","getNativeFontName","fontFamily","fontMap","names","Object","Promise","loadFontInNamespaceAsync","asset","getAssetForSource","loadSingleFontAsync","ExpoFontLoader","unloadFontInNamespaceAsync","nativeFontName"],"mappings":";AAAA,SAAA,UAAA,EAAA,mBAAA,QAAA,mBAAA;AAEA,OAAA,cAAA;AACA,SAAA,WAAA;AACA,SAAA,iBAAA,EAAA,mBAAA,EAAA,sBAAA,EAAA,iBAAA;AAOA,IAAMA,MAAM,GAAZ,EAAA;AACA,IAAMC,YAAY,GAAlB,EAAA;AAYA,OAAM,SAAA,iBAAA,CAAA,UAAA,EAAqD;EACzD,IAAI,CAAA,UAAA,IAAe,CAACC,sBAAsB,CAA1C,UAA0C,CAA1C,EAAwD;IACtD,OAAA,UAAA;EAGF;;EAAA,IAAI,CAACC,QAAQ,CAAb,UAAa,CAAb,EAA2B;IACzB,IAAA,OAAA,EAAa;MACX,IAAIC,SAAS,CAAb,UAAa,CAAb,EAA2B;QACzBC,OAAO,CAAPA,KAAAA,CAAAA,oCAAAA,UAAAA,GAAAA,oHAAAA;MADF,CAAA,MAIO;QACLA,OAAO,CAAPA,KAAAA,CAAAA,kBAAAA,UAAAA,GAAAA,4RAAAA;MAMH;IAED;;IAAA,OAAA,QAAA;EAGF;;EAAA,OAAA,cAAmBC,iBAAiB,CAApC,UAAoC,CAApC;AAUF;AAAA,OAAM,SAAA,QAAA,CAAA,UAAA,EAAqC;EACzC,OAAOC,UAAU,IAAjB,MAAA;AAUF;AAAA,OAAM,SAAA,SAAA,CAAA,UAAA,EAAsC;EAC1C,OAAOA,UAAU,IAAjB,YAAA;AAgBF;AAAA,OAAO,SAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,EAAA;EAAA,IAAA,OAAA,EAAA,KAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,UAAA,CAAA,QAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAA,IAAA,EAID,OAAA,mBAAA,KAJC,QAAA,CAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,IAAA,CAAA,MAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MAMK,IAAA,UAAA,CAAA,cAAA,EAAA,wDAAA,MAAA,GANL,sGAMK,CANL;;QAAA,KAAA,CAAA;UAWGC,OAXH,GAAA,mBAWGA;UACAC,KAZH,GAYWC,MAAM,CAANA,IAAAA,CAZX,OAYWA,CAARD;UAZH,QAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAaGE,OAAO,CAAPA,GAAAA,CAAYF,KAAK,CAALA,GAAAA,CAAU,UAAA,IAAA,EAAA;YAAA,OAAUG,wBAAwB,CAAA,IAAA,EAAOJ,OAAO,CAAhD,IAAgD,CAAd,CAAlC;UAbzB,CAaeC,CAAZE,CAbH,CAAA;;QAAA,KAAA,CAAA;UAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;QAAA,KAAA,CAAA;UAAA,QAAA,CAAA,IAAA,GAAA,EAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAiBQC,wBAAwB,CAAA,mBAAA,EAjBhC,MAiBgC,CAjBhC,CAAA;;QAAA,KAAA,EAAA;UAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,QAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAoBP;;AAAA,SAAA,wBAAA,CAAA,UAAA,EAAA,MAAA,EAAA;EAAA,IAAA,KAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,yBAAA,CAAA,SAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAA,IAAA,MAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MAKU,IAAA,UAAA,CAAA,iBAAA,EAAA,oDAAA,UAAA,GAAA,MAAA,GAAA,MAAA,GAAA,oEAAA,GAAA,UAAA,GALV,IAKU,CALV;;QAAA,KAAA,CAAA;UAAA,IAAA,CAWMZ,MAAM,CAXZ,UAWY,CAXZ,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;QAAA,KAAA,CAAA;UAAA,IAAA,CAeMC,YAAY,CAAZA,cAAAA,CAfN,UAeMA,CAfN,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAgBWA,YAAY,CAhBvB,UAgBuB,CAhBvB,CAAA;;QAAA,KAAA,CAAA;UAwBQY,KAxBR,GAwBgBC,iBAAiB,CAxBjC,MAwBiC,CAAzBD;;UACNZ,YAAY,CAAZA,UAAY,CAAZA,GAA4B,SAAA,OAAA,GAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA;cAAA,OAAA,CAAA,EAAA;gBAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;kBAAA,KAAA,CAAA;oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,OAAA,mBAAA,CAAA,KAAA,CAElBc,mBAAmB,CAAA,UAAA,EAFD,KAEC,CAFD,CAAA;;kBAAA,KAAA,CAAA;oBAGxBf,MAAM,CAANA,UAAM,CAANA,GAAAA,IAAAA;;kBAHwB,KAAA,CAAA;oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;oBAKxB,OAAOC,YAAY,CAAnB,UAAmB,CAAnB;oBALwB,OAAA,SAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;kBAAA,KAAA,CAAA;kBAAA,KAAA,KAAA;oBAAA,OAAA,SAAA,CAAA,IAAA,EAAA;gBAAA;cAAA;YAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA;UAA5BA,CAA4B,EAA5BA;;UAzBF,SAAA,CAAA,IAAA,GAAA,EAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAkCQA,YAAY,CAlCpB,UAkCoB,CAlCpB,CAAA;;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,SAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAyCA;;AAAA,OAAO,SAAA,cAAA,GAAA;EAAA,IAAA,EAAA,EAAA,YAAA,EAAA,UAAA;;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,eAAA,CAAA,SAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAA,IACAe,cAAc,CADd,cAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MAEG,IAAA,mBAAA,CAAA,WAAA,EAFH,gBAEG,CAFH;;QAAA,KAAA,CAAA;UAAA,IAAA,CAKDN,MAAM,CAANA,IAAAA,CAAAA,YAAAA,EALC,MAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MAMG,IAAA,UAAA,CAAA,YAAA,EAAA,sDAEgDA,MAAM,CAANA,IAAAA,CAAAA,YAAAA,EAAAA,IAAAA,CARnD,IAQmDA,CAFhD,CANH;;QAAA,KAAA,CAAA;UAYL,KAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAyBA,MAAM,CAANA,IAAAA,CAAzB,MAAyBA,CAAzB,EAAA,EAAA,GAAA,YAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAA8C;YAAnCH,UAAmC,GAAA,YAAA,CAAA,EAAA,CAAnCA;YACT,OAAOP,MAAM,CAAb,UAAa,CAAb;UAbG;;UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAgBCgB,cAAc,CAhBf,cAgBCA,EAhBD,CAAA;;QAAA,KAAA,CAAA;QAAA,KAAA,KAAA;UAAA,OAAA,SAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AA4BP;AAAA,OAAO,SAAA,WAAA,CAAA,mBAAA,EAAA,OAAA,EAAA;EAAA,IAAA,OAAA,EAAA,KAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,YAAA,CAAA,SAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAA,IAIAA,cAAc,CAJd,WAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MAKG,IAAA,mBAAA,CAAA,WAAA,EALH,aAKG,CALH;;QAAA,KAAA,CAAA;UAAA,IAAA,EAOD,OAAA,mBAAA,KAPC,QAAA,CAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA;;UAAA,IAAA,CAAA,OAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MASK,IAAA,UAAA,CAAA,cAAA,EAAA,yDAAA,OAAA,GATL,wGASK,CATL;;QAAA,KAAA,CAAA;UAcGR,OAdH,GAAA,mBAcGA;UACAC,KAfH,GAeWC,MAAM,CAANA,IAAAA,CAfX,OAeWA,CAARD;UAfH,SAAA,CAAA,IAAA,GAAA,CAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAgBGE,OAAO,CAAPA,GAAAA,CAAYF,KAAK,CAALA,GAAAA,CAAU,UAAA,IAAA,EAAA;YAAA,OAAUQ,0BAA0B,CAAA,IAAA,EAAOT,OAAO,CAAlD,IAAkD,CAAd,CAApC;UAhBzB,CAgBeC,CAAZE,CAhBH,CAAA;;QAAA,KAAA,CAAA;UAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;QAAA,KAAA,EAAA;UAAA,SAAA,CAAA,IAAA,GAAA,EAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAoBQM,0BAA0B,CAAA,mBAAA,EApBlC,OAoBkC,CApBlC,CAAA;;QAAA,KAAA,EAAA;UAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA;;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,SAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAuBP;;AAAA,SAAA,0BAAA,CAAA,UAAA,EAAA,OAAA,EAAA;EAAA,IAAA,cAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,2BAAA,CAAA,SAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAA,IAIOjB,MAAM,CAJb,UAIa,CAJb,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;QAAA,KAAA,CAAA;UAOI,OAAOA,MAAM,CAAb,UAAa,CAAb;;QAPJ,KAAA,CAAA;UAeQkB,cAfR,GAeyBZ,iBAAiB,CAf1C,UAe0C,CAAlCY;;UAfR,IAAA,cAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA;;UAAA,MAkBU,IAAA,UAAA,CAAA,iBAAA,EAlBV,6BAkBU,CAlBV;;QAAA,KAAA,CAAA;UAAA,SAAA,CAAA,IAAA,GAAA,EAAA;UAAA,OAAA,mBAAA,CAAA,KAAA,CAqBQF,cAAc,CAAdA,WAAAA,CAAAA,cAAAA,EArBR,OAqBQA,CArBR,CAAA;;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,SAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAwBA;;AAAA,SAAA,WAAA","sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/introduction/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}