{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerItem;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TouchableItem = _interopRequireDefault(require(\"./TouchableItem\"));\n\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"delayPressIn\"],\n    _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Touchable = function Touchable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      delayPressIn = _ref.delayPressIn,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  if (_reactNative.Platform.OS === 'web' && to) {\n    return React.createElement(_native.Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      }\n    }), children);\n  } else {\n    return React.createElement(_TouchableItem.default, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      delayPressIn: delayPressIn,\n      onPress: _onPress\n    }), React.createElement(_reactNative.View, {\n      style: style\n    }, children));\n  }\n};\n\nfunction DrawerItem(props) {\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? (0, _color.default)(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? (0, _color.default)(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      rest = (0, _objectWithoutProperties2.default)(props, _excluded2);\n\n  var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(_reactNative.View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(_reactNative.View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(_reactNative.Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["Touchable","rest","Platform","styles","e","onPress","style","colors","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","borderRadius","StyleSheet","color","backgroundColor","iconNode","icon","size","selected","to","marginLeft","marginVertical","fontWeight","label","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight","flex","button","display"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}