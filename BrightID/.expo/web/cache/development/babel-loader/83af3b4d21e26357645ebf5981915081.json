{"ast":null,"code":"import TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector } from \"../store\";\nimport { INVITE_ACTIVE } from \"../utils/constants\";\nimport { DEVICE_LARGE } from \"../utils/deviceConstants\";\nimport { BLACK } from \"../theme/colors\";\nimport { createSelector } from '@reduxjs/toolkit';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Bell from \"../components/Icons/NotificationBell\";\nimport Menu from \"../components/Icons/Menu\";\nimport { pendingConnection_states, selectAllPendingConnections } from \"../components/PendingConnections/pendingConnectionSlice\";\nimport { toggleDrawer, resetHome, resetNotifications } from \"../NavigationService\";\nimport { HomeDrawer } from \"./HomeDrawer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar unconfirmedSelector = createSelector(selectAllPendingConnections, function (pendingConnections) {\n  return pendingConnections.filter(function (pc) {\n    return pc.state === pendingConnection_states.UNCONFIRMED;\n  });\n});\nvar inviteSelector = createSelector(function (state) {\n  return state.groups.invites;\n}, function (invites) {\n  return invites.filter(function (_ref) {\n    var state = _ref.state;\n    return state === INVITE_ACTIVE;\n  });\n});\n\nvar NotificationBell = function NotificationBell() {\n  var pendingConnections = useSelector(function (state) {\n    var _unconfirmedSelector;\n\n    return (_unconfirmedSelector = unconfirmedSelector(state)) == null ? void 0 : _unconfirmedSelector.length;\n  });\n  var invites = useSelector(function (state) {\n    var _inviteSelector;\n\n    return (_inviteSelector = inviteSelector(state)) == null ? void 0 : _inviteSelector.length;\n  });\n  var backupPending = useSelector(function (state) {\n    return state.notifications.backupPending;\n  });\n  var displayBadge = backupPending || invites || pendingConnections;\n  return _jsx(TouchableOpacity, {\n    testID: \"notificationsBtn\",\n    style: {\n      marginRight: 25\n    },\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      resetNotifications();\n    },\n    children: _jsx(Bell, {\n      color: BLACK,\n      alert: !!displayBadge\n    })\n  });\n};\n\nvar BrightIdLogo = function BrightIdLogo() {\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      resetHome();\n    },\n    testID: \"BrightIdLogo\",\n    children: _jsx(Image, {\n      source: require(\"../static/brightid-final.png\"),\n      accessible: true,\n      accessibilityLabel: \"Home Header Logo\",\n      resizeMode: \"contain\",\n      style: {\n        width: DEVICE_LARGE ? 104 : 85,\n        maxHeight: 80\n      }\n    })\n  });\n};\n\nvar homeScreenOptions = {\n  headerTitle: function headerTitle() {\n    return _jsx(BrightIdLogo, {});\n  },\n  headerLeft: function headerLeft() {\n    return _jsx(TouchableOpacity, {\n      testID: \"toggleDrawer\",\n      style: {\n        width: DEVICE_LARGE ? 80 : 70,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      onPress: function onPress() {\n        Keyboard.dismiss();\n        toggleDrawer();\n      },\n      children: _jsx(Menu, {\n        width: DEVICE_LARGE ? 30 : 24\n      })\n    });\n  },\n  headerRight: function headerRight() {\n    return _jsx(NotificationBell, {});\n  },\n  headerStyle: {\n    height: DEVICE_LARGE ? 80 : 70,\n    shadowRadius: 0,\n    elevation: -1\n  },\n  headerTitleAlign: 'center',\n  headerTintColor: 'transparent',\n  headerTransparent: true\n};\nvar Stack = createStackNavigator();\n\nvar Home = function Home() {\n  return _jsx(_Fragment, {\n    children: _jsx(Stack.Screen, {\n      name: \"Home\",\n      component: HomeDrawer,\n      options: homeScreenOptions\n    })\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/routes/Home.tsx"],"names":["unconfirmedSelector","createSelector","pendingConnections","pc","pendingConnection_states","inviteSelector","state","invites","NotificationBell","useSelector","backupPending","displayBadge","marginRight","Keyboard","resetNotifications","BrightIdLogo","resetHome","require","width","DEVICE_LARGE","maxHeight","homeScreenOptions","headerTitle","headerLeft","alignItems","justifyContent","toggleDrawer","headerRight","headerStyle","height","shadowRadius","elevation","headerTitleAlign","headerTintColor","headerTransparent","Stack","createStackNavigator","Home"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  Keyboard,\n  Image,\n  TouchableOpacity,\n} from 'react-native';\nimport { useSelector } from '@/store';\nimport { INVITE_ACTIVE } from '@/utils/constants';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLACK } from '@/theme/colors';\nimport { createSelector } from '@reduxjs/toolkit';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport Bell from '@/components/Icons/NotificationBell';\nimport Menu from '@/components/Icons/Menu';\nimport {\n  pendingConnection_states,\n  selectAllPendingConnections,\n} from '@/components/PendingConnections/pendingConnectionSlice';\nimport {\n  toggleDrawer,\n  resetHome,\n  resetNotifications,\n} from '@/NavigationService';\nimport { HomeDrawer } from './HomeDrawer';\n\n/** SELECTORS */\n\nconst unconfirmedSelector = createSelector(\n  selectAllPendingConnections,\n  (pendingConnections) =>\n    pendingConnections.filter(\n      // @ts-ignore\n      (pc) => pc.state === pendingConnection_states.UNCONFIRMED,\n    ),\n);\n\nconst inviteSelector = createSelector(\n  (state: State) => state.groups.invites,\n  (invites) => invites.filter(({ state }) => state === INVITE_ACTIVE),\n);\n\n/** COMPONENTS */\n\nconst NotificationBell = () => {\n  const pendingConnections = useSelector(\n    (state: State) => unconfirmedSelector(state)?.length,\n  );\n\n  const invites = useSelector((state: State) => inviteSelector(state)?.length);\n\n  const backupPending = useSelector(\n    (state: State) => state.notifications.backupPending,\n  );\n\n  const displayBadge = backupPending || invites || pendingConnections;\n\n  return (\n    <TouchableOpacity\n      testID=\"notificationsBtn\"\n      style={{ marginRight: 25 }}\n      onPress={() => {\n        Keyboard.dismiss();\n        resetNotifications();\n      }}\n    >\n      <Bell color={BLACK} alert={!!displayBadge} />\n    </TouchableOpacity>\n  );\n};\n\n/** OPTIONS */\n\nconst BrightIdLogo = () => {\n  return (\n    <TouchableWithoutFeedback\n      onPress={() => {\n        Keyboard.dismiss();\n        resetHome();\n      }}\n      testID=\"BrightIdLogo\"\n    >\n      <Image\n        source={require('@/static/brightid-final.png')}\n        accessible={true}\n        accessibilityLabel=\"Home Header Logo\"\n        resizeMode=\"contain\"\n        style={{ width: DEVICE_LARGE ? 104 : 85, maxHeight: 80 }}\n      />\n    </TouchableWithoutFeedback>\n  );\n};\n\nconst homeScreenOptions: StackNavigationOptions = {\n  headerTitle: () => <BrightIdLogo />,\n  headerLeft: () => {\n    return (\n      <TouchableOpacity\n        testID=\"toggleDrawer\"\n        style={{\n          width: DEVICE_LARGE ? 80 : 70,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onPress={() => {\n          Keyboard.dismiss();\n          toggleDrawer();\n        }}\n      >\n        <Menu width={DEVICE_LARGE ? 30 : 24} />\n      </TouchableOpacity>\n    );\n  },\n  headerRight: () => <NotificationBell />,\n  headerStyle: {\n    height: DEVICE_LARGE ? 80 : 70,\n    shadowRadius: 0,\n    elevation: -1,\n  },\n  headerTitleAlign: 'center',\n  headerTintColor: 'transparent',\n  headerTransparent: true,\n};\n\n/** SCREENS */\n\nconst Stack = createStackNavigator();\n\nconst Home = () => {\n  /* /!\\ Moved 'RecoveringConnection' options to the component in order to access to useTranslation() */\n  // const { t } = useTranslation();\n  return (\n    <>\n      <Stack.Screen\n        name=\"Home\"\n        component={HomeDrawer}\n        options={homeScreenOptions}\n      />\n    </>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}