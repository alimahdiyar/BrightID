{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\nimport { useTranslation } from 'react-i18next';\nimport Contacts from \"../../utils/ContactsProvider\";\nimport { DEVICE_IOS, DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { BLACK, DARKER_GREY, GREY, ORANGE, WHITE } from \"../../theme/colors\";\nimport { useSelector } from \"../../store\";\nimport { selectSocialMediaVariationById } from \"../../reducer/socialMediaVariationSlice\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { SocialMediaVariationIds } from \"../EditProfile/socialMediaVariations\";\nimport { extractDigits } from \"../../utils/phoneUtils\";\nimport { hashSocialProfile } from \"../../utils/cryptoHelper\";\nimport EmptyList from \"../Helpers/EmptyList\";\nimport { BrightIdNetwork } from \"../Apps/types.d\";\nimport socialMediaService from \"../../utils/socialMediaServiceProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar FlatListItemSeparator = function FlatListItemSeparator() {\n  return _jsx(View, {\n    style: {\n      height: StyleSheet.hairlineWidth,\n      backgroundColor: GREY\n    }\n  });\n};\n\nfunction removeDuplicates(friendProfiles) {\n  var uniques = [];\n  friendProfiles.forEach(function (friendProfile) {\n    if (!uniques.find(function (item) {\n      return item.profile === friendProfile.profile && item.variation.id === friendProfile.variation.id;\n    })) {\n      uniques.push(friendProfile);\n    }\n  });\n  return uniques;\n}\n\nexport var FindFriendsScreen = function FindFriendsScreen() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var headerHeight = useHeaderHeight();\n\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  var isDrawerOpen = useIsDrawerOpen();\n  var emailSocialMediaVariation = useSelector(function (state) {\n    return selectSocialMediaVariationById(state, SocialMediaVariationIds.EMAIL);\n  });\n  var phoneNumberSocialMediaVariation = useSelector(function (state) {\n    return selectSocialMediaVariationById(state, SocialMediaVariationIds.PHONE_NUMBER);\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      friendsRaw = _useState2[0],\n      setFriendsRaw = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      apiError = _useState4[0],\n      setApiError = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      friends = _useState6[0],\n      setFriends = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var getContacts = useCallback(function _callee() {\n    var _friendsRaw, permissionStatus, contacts;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _friendsRaw = [];\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_CONTACTS, {\n              title: 'Contacts',\n              message: 'This app would like to view your contacts.',\n              buttonPositive: 'Please accept bare mortal',\n              buttonNegative: 'No, thanks'\n            }));\n\n          case 3:\n            permissionStatus = _context.sent;\n\n            if (!(permissionStatus === 'granted')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Contacts.getAll());\n\n          case 7:\n            contacts = _context.sent;\n            contacts.forEach(function (contact) {\n              var contactName = contact.displayName;\n              contact.emailAddresses.forEach(function (emailAddress) {\n                var _profile = emailAddress.email;\n\n                _friendsRaw.push({\n                  name: contactName,\n                  profile: _profile,\n                  profileHash: hashSocialProfile(_profile),\n                  variation: emailSocialMediaVariation\n                });\n              });\n              contact.phoneNumbers.forEach(function (phoneNumber) {\n                var _profile = extractDigits(phoneNumber.number);\n\n                _friendsRaw.push({\n                  name: contactName,\n                  profile: _profile,\n                  profileHash: hashSocialProfile(_profile),\n                  variation: phoneNumberSocialMediaVariation\n                });\n              });\n            });\n\n          case 9:\n            _friendsRaw = removeDuplicates(_friendsRaw);\n            setFriendsRaw(_friendsRaw);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [emailSocialMediaVariation, phoneNumberSocialMediaVariation]);\n  useEffect(function () {\n    getContacts().catch(console.error);\n  }, [getContacts]);\n  var fetchFriends = useCallback(function _callee2() {\n    var _profileHashes, _filteredProfileHashes;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (friendsRaw.length) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            setLoading(true);\n            setApiError(null);\n            _profileHashes = friendsRaw.map(function (friendProfile) {\n              return friendProfile.profileHash;\n            });\n\n            if (!_profileHashes.length) {\n              _context2.next = 18;\n              break;\n            }\n\n            _context2.prev = 6;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(socialMediaService.querySocialMedia({\n              profileHashes: _profileHashes,\n              network: __DEV__ ? BrightIdNetwork.TEST : BrightIdNetwork.NODE\n            }));\n\n          case 9:\n            _filteredProfileHashes = _context2.sent;\n            setFriends(friendsRaw.filter(function (friendProfile) {\n              return _filteredProfileHashes.includes(friendProfile.profileHash);\n            }));\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](6);\n            setApiError(t('common.text.noConnection'));\n\n          case 16:\n            _context2.next = 19;\n            break;\n\n          case 18:\n            setFriends([]);\n\n          case 19:\n            setLoading(false);\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[6, 13]], Promise);\n  }, [friendsRaw, t]);\n  useEffect(function () {\n    fetchFriends().catch(console.error);\n  }, [fetchFriends, friendsRaw]);\n\n  function sendInvitation(item) {\n    var subject = \"Let's connect on BrightID\";\n    var connectionLink = 'https://app.brightid.org/connection-code/xxx';\n    var body = \"Hi\\nLet's connect on BrightID!\\n\" + connectionLink;\n\n    if (item.variation.id === SocialMediaVariationIds.PHONE_NUMBER) {\n      var smsDivider = Platform.OS === 'ios' ? '&' : '?';\n      var phone = item.profile;\n      Linking.openURL(\"sms:\" + phone + smsDivider + \"body=\" + body);\n      return;\n    }\n\n    if (item.variation.id === SocialMediaVariationIds.EMAIL) {\n      var email = item.profile;\n      Linking.openURL(\"mailto:\" + email + \"?subject=\" + subject + \"&body=\" + body);\n      return;\n    }\n\n    var invitationNotAvailableText = t('findFriends.text.invitationNotAvailable');\n\n    if (Platform.OS === 'android') {\n      ToastAndroid.show(invitationNotAvailableText, ToastAndroid.LONG);\n    } else {\n      Alert.alert(invitationNotAvailableText);\n    }\n  }\n\n  var keyExtractor = function keyExtractor(item, idx) {\n    var _item$recordID;\n\n    return (item == null ? void 0 : (_item$recordID = item.recordID) == null ? void 0 : _item$recordID.toString()) || idx.toString();\n  };\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsxs(View, {\n      style: styles.contactCon,\n      testID: item.name + \"-\" + item.variation.name,\n      children: [_jsx(View, {\n        style: styles.imgCon,\n        children: _jsx(View, {\n          style: styles.placeholder,\n          children: _jsx(Text, {\n            style: styles.txt,\n            children: item.name ? item.name[0] : ''\n          })\n        })\n      }), _jsxs(View, {\n        style: styles.contactDat,\n        children: [_jsx(Text, {\n          style: styles.name,\n          numberOfLines: 1,\n          children: item.name\n        }), _jsx(Text, {\n          style: styles.profile,\n          numberOfLines: 1,\n          children: item.variation.name\n        }), _jsx(Text, {\n          style: styles.profile,\n          numberOfLines: 1,\n          testID: item.profile,\n          children: item.profile\n        })]\n      }), _jsx(View, {\n        style: styles.contactAction\n      })]\n    });\n  };\n\n  function renderFriendsList() {\n    return _jsx(FlatList, {\n      data: friends,\n      contentContainerStyle: {\n        paddingBottom: 50,\n        flexGrow: 1\n      },\n      keyExtractor: keyExtractor,\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      ItemSeparatorComponent: FlatListItemSeparator,\n      renderItem: renderItem,\n      ListEmptyComponent: _jsx(EmptyList, {\n        iconType: \"account-off-outline\",\n        title: t('findFriends.text.noFriends')\n      }),\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: false,\n        onRefresh: fetchFriends\n      })\n    });\n  }\n\n  function renderStatus() {\n    return _jsx(View, {\n      style: styles.statusContainer,\n      children: apiError ? _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: styles.apiErrorText,\n          children: apiError\n        }), _jsx(TouchableOpacity, {\n          style: styles.retryBtn,\n          onPress: fetchFriends,\n          children: _jsx(Text, {\n            style: styles.retryBtnText,\n            children: t('common.button.retry')\n          })\n        })]\n      }) : _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: DARKER_GREY,\n        animating: true\n      })\n    });\n  }\n\n  return _jsx(View, {\n    style: [styles.container, {\n      marginTop: headerHeight\n    }, !isDrawerOpen && styles.shadow],\n    testID: \"findFriendsScreen\",\n    children: loading || apiError ? renderStatus() : renderFriendsList()\n  });\n};\nvar styles = StyleSheet.create({\n  apiErrorText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: 26,\n    marginBottom: 12\n  },\n  retryBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 4\n  },\n  retryBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE\n  },\n  inviteBtn: {\n    width: '100%',\n    height: 40,\n    borderRadius: 100,\n    borderColor: ORANGE,\n    borderWidth: 1,\n    backgroundColor: WHITE,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inviteBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: ORANGE\n  },\n  statusContainer: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: -20,\n    bottom: 0,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    paddingLeft: 10,\n    paddingRight: 18\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  },\n  contactCon: {\n    flex: 1,\n    flexDirection: 'row',\n    padding: 5,\n    borderBottomWidth: 0.5,\n    borderBottomColor: '#d9d9d9',\n    paddingVertical: 24,\n    paddingHorizontal: 18\n  },\n  imgCon: {},\n  placeholder: {\n    width: 55,\n    height: 55,\n    borderRadius: 30,\n    overflow: 'hidden',\n    backgroundColor: '#d9d9d9',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  contactDat: {\n    flex: 3,\n    justifyContent: 'center',\n    paddingLeft: 10,\n    paddingRight: 5\n  },\n  contactAction: {\n    flex: 1.4,\n    justifyContent: 'center',\n    paddingLeft: 5\n  },\n  txt: {\n    fontSize: 18\n  },\n  name: {\n    fontSize: 16\n  },\n  profile: {\n    color: '#888'\n  }\n});\nexport default FindFriendsScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/FindFriends/FindFriendsScreen.tsx"],"names":["FlatListItemSeparator","height","StyleSheet","backgroundColor","uniques","friendProfiles","item","friendProfile","FindFriendsScreen","t","useTranslation","headerHeight","useHeaderHeight","DEVICE_IOS","isDrawerOpen","useIsDrawerOpen","emailSocialMediaVariation","useSelector","selectSocialMediaVariationById","SocialMediaVariationIds","phoneNumberSocialMediaVariation","friendsRaw","setFriendsRaw","useState","apiError","setApiError","friends","setFriends","loading","setLoading","getContacts","useCallback","_friendsRaw","permissionStatus","PermissionsAndroid","title","message","buttonPositive","buttonNegative","contacts","Contacts","contactName","contact","_profile","emailAddress","name","profile","profileHash","hashSocialProfile","variation","extractDigits","phoneNumber","removeDuplicates","useEffect","console","fetchFriends","_profileHashes","_filteredProfileHashes","socialMediaService","profileHashes","network","__DEV__","BrightIdNetwork","subject","connectionLink","body","smsDivider","Platform","phone","Linking","email","invitationNotAvailableText","ToastAndroid","Alert","keyExtractor","idx","renderItem","styles","paddingBottom","flexGrow","marginTop","renderStatus","renderFriendsList","apiErrorText","fontFamily","fontSize","textAlign","lineHeight","marginBottom","retryBtn","alignItems","justifyContent","width","DEVICE_LARGE","borderRadius","elevation","shadowColor","shadowOffset","shadowRadius","retryBtnText","color","inviteBtn","borderColor","borderWidth","flexDirection","inviteBtnText","statusContainer","position","left","right","top","bottom","container","flex","paddingLeft","paddingRight","shadow","shadowOpacity","contactCon","padding","borderBottomWidth","borderBottomColor","paddingVertical","paddingHorizontal","imgCon","placeholder","overflow","contactDat","contactAction","txt"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  ActivityIndicator,\n  Alert,\n  FlatList,\n  Linking,\n  PermissionsAndroid,\n  Platform,\n  RefreshControl,\n  StyleSheet,\n  Text,\n  ToastAndroid,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\nimport { useTranslation } from 'react-i18next';\nimport Contacts from '@/utils/ContactsProvider';\nimport { DEVICE_IOS, DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLACK, DARKER_GREY, GREY, ORANGE, WHITE } from '@/theme/colors';\nimport { useSelector } from '@/store';\nimport { selectSocialMediaVariationById } from '@/reducer/socialMediaVariationSlice';\nimport { fontSize } from '@/theme/fonts';\nimport { SocialMediaVariationIds } from '@/components/EditProfile/socialMediaVariations';\nimport { extractDigits } from '@/utils/phoneUtils';\nimport { hashSocialProfile } from '@/utils/cryptoHelper';\nimport EmptyList from '@/components/Helpers/EmptyList';\nimport { BrightIdNetwork } from '@/components/Apps/types.d';\nimport socialMediaService from '@/utils/socialMediaServiceProvider';\n\nconst FlatListItemSeparator = () => {\n  return (\n    <View\n      style={{\n        height: StyleSheet.hairlineWidth,\n        backgroundColor: GREY,\n      }}\n    />\n  );\n};\n\ntype FriendProfile = {\n  profile: string;\n  profileHash: string;\n  name: string;\n  variation: SocialMediaVariation;\n};\n\nfunction removeDuplicates(friendProfiles: FriendProfile[]) {\n  const uniques: FriendProfile[] = [];\n  friendProfiles.forEach((friendProfile) => {\n    if (\n      !uniques.find(\n        (item) =>\n          item.profile === friendProfile.profile &&\n          item.variation.id === friendProfile.variation.id,\n      )\n    ) {\n      uniques.push(friendProfile);\n    }\n  });\n  return uniques;\n}\n\nexport const FindFriendsScreen = function () {\n  const { t } = useTranslation();\n\n  let headerHeight = useHeaderHeight();\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n  const isDrawerOpen = useIsDrawerOpen();\n\n  const emailSocialMediaVariation = useSelector((state) =>\n    selectSocialMediaVariationById(state, SocialMediaVariationIds.EMAIL),\n  );\n  const phoneNumberSocialMediaVariation = useSelector((state) =>\n    selectSocialMediaVariationById(state, SocialMediaVariationIds.PHONE_NUMBER),\n  );\n  const [friendsRaw, setFriendsRaw] = useState<FriendProfile[]>([]);\n  const [apiError, setApiError] = useState<string | null>(null);\n  const [friends, setFriends] = useState<FriendProfile[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const getContacts = useCallback(async () => {\n    let _friendsRaw: FriendProfile[] = [];\n    const permissionStatus = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.READ_CONTACTS,\n      {\n        title: 'Contacts',\n        message: 'This app would like to view your contacts.',\n        buttonPositive: 'Please accept bare mortal',\n        buttonNegative: 'No, thanks',\n      },\n    );\n    if (permissionStatus === 'granted') {\n      const contacts = await Contacts.getAll();\n      contacts.forEach((contact) => {\n        const contactName = contact.displayName;\n        contact.emailAddresses.forEach((emailAddress) => {\n          const _profile = emailAddress.email;\n          _friendsRaw.push({\n            name: contactName,\n            profile: _profile,\n            profileHash: hashSocialProfile(_profile),\n            variation: emailSocialMediaVariation,\n          });\n        });\n        contact.phoneNumbers.forEach((phoneNumber) => {\n          const _profile = extractDigits(phoneNumber.number);\n          _friendsRaw.push({\n            name: contactName,\n            profile: _profile,\n            profileHash: hashSocialProfile(_profile),\n            variation: phoneNumberSocialMediaVariation,\n          });\n        });\n      });\n    }\n    _friendsRaw = removeDuplicates(_friendsRaw);\n    setFriendsRaw(_friendsRaw);\n  }, [emailSocialMediaVariation, phoneNumberSocialMediaVariation]);\n\n  useEffect(() => {\n    getContacts().catch(console.error);\n  }, [getContacts]);\n\n  const fetchFriends = useCallback(async () => {\n    if (!friendsRaw.length) {\n      return;\n    }\n    setLoading(true);\n    setApiError(null);\n    const _profileHashes = friendsRaw.map(\n      (friendProfile) => friendProfile.profileHash,\n    );\n    if (_profileHashes.length) {\n      try {\n        const _filteredProfileHashes =\n          await socialMediaService.querySocialMedia({\n            profileHashes: _profileHashes,\n            network: __DEV__ ? BrightIdNetwork.TEST : BrightIdNetwork.NODE,\n          });\n        setFriends(\n          friendsRaw.filter((friendProfile) =>\n            _filteredProfileHashes.includes(friendProfile.profileHash),\n          ),\n        );\n      } catch (_e) {\n        setApiError(t('common.text.noConnection'));\n      }\n    } else {\n      setFriends([]);\n    }\n    setLoading(false);\n  }, [friendsRaw, t]);\n\n  useEffect(() => {\n    fetchFriends().catch(console.error);\n  }, [fetchFriends, friendsRaw]);\n\n  function sendInvitation(item: FriendProfile) {\n    const subject = \"Let's connect on BrightID\";\n    // TODO: generate connection link\n    const connectionLink = 'https://app.brightid.org/connection-code/xxx';\n    const body = `Hi\\nLet's connect on BrightID!\\n${connectionLink}`;\n    if (item.variation.id === SocialMediaVariationIds.PHONE_NUMBER) {\n      const smsDivider = Platform.OS === 'ios' ? '&' : '?';\n      const phone = item.profile;\n      Linking.openURL(`sms:${phone}${smsDivider}body=${body}`);\n      return;\n    }\n    if (item.variation.id === SocialMediaVariationIds.EMAIL) {\n      const email = item.profile;\n      Linking.openURL(`mailto:${email}?subject=${subject}&body=${body}`);\n      return;\n    }\n    const invitationNotAvailableText = t(\n      'findFriends.text.invitationNotAvailable',\n    );\n    if (Platform.OS === 'android') {\n      ToastAndroid.show(invitationNotAvailableText, ToastAndroid.LONG);\n    } else {\n      Alert.alert(invitationNotAvailableText);\n    }\n  }\n\n  const keyExtractor = (item, idx) => {\n    return item?.recordID?.toString() || idx.toString();\n  };\n\n  const renderItem = ({ item }: { item: FriendProfile }) => {\n    return (\n      <View\n        style={styles.contactCon}\n        testID={`${item.name}-${item.variation.name}`}\n      >\n        <View style={styles.imgCon}>\n          <View style={styles.placeholder}>\n            <Text style={styles.txt}>{item.name ? item.name[0] : ''}</Text>\n          </View>\n        </View>\n        <View style={styles.contactDat}>\n          <Text style={styles.name} numberOfLines={1}>\n            {item.name}\n          </Text>\n          <Text style={styles.profile} numberOfLines={1}>\n            {item.variation.name}\n          </Text>\n          <Text style={styles.profile} numberOfLines={1} testID={item.profile}>\n            {item.profile}\n          </Text>\n        </View>\n        <View style={styles.contactAction}>\n          {/* <TouchableOpacity */}\n          {/*  testID=\"InviteBtn\" */}\n          {/*  style={styles.inviteBtn} */}\n          {/*  onPress={() => sendInvitation(item)} */}\n          {/* > */}\n          {/*  <Text style={styles.inviteBtnText}> */}\n          {/*    {t('findFriends.button.invite')} */}\n          {/*  </Text> */}\n          {/* </TouchableOpacity> */}\n        </View>\n      </View>\n    );\n  };\n\n  function renderFriendsList() {\n    return (\n      <FlatList\n        data={friends}\n        contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n        keyExtractor={keyExtractor}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={FlatListItemSeparator}\n        renderItem={renderItem}\n        ListEmptyComponent={\n          <EmptyList\n            iconType=\"account-off-outline\"\n            title={t('findFriends.text.noFriends')}\n          />\n        }\n        refreshControl={\n          <RefreshControl refreshing={false} onRefresh={fetchFriends} />\n        }\n      />\n    );\n  }\n\n  function renderStatus() {\n    return (\n      <View style={styles.statusContainer}>\n        {apiError ? (\n          <>\n            <Text style={styles.apiErrorText}>{apiError}</Text>\n            <TouchableOpacity style={styles.retryBtn} onPress={fetchFriends}>\n              <Text style={styles.retryBtnText}>\n                {t('common.button.retry')}\n              </Text>\n            </TouchableOpacity>\n          </>\n        ) : (\n          <ActivityIndicator size=\"large\" color={DARKER_GREY} animating />\n        )}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { marginTop: headerHeight },\n        !isDrawerOpen && styles.shadow,\n      ]}\n      testID=\"findFriendsScreen\"\n    >\n      {loading || apiError ? renderStatus() : renderFriendsList()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  apiErrorText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: 26,\n    marginBottom: 12,\n  },\n  retryBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 4,\n  },\n  retryBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE,\n  },\n  inviteBtn: {\n    width: '100%',\n    height: 40,\n    borderRadius: 100,\n    borderColor: ORANGE,\n    borderWidth: 1,\n    backgroundColor: WHITE,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inviteBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: ORANGE,\n  },\n  statusContainer: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: -20,\n    bottom: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    paddingLeft: 10,\n    paddingRight: 18,\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n  },\n  contactCon: {\n    flex: 1,\n    flexDirection: 'row',\n    padding: 5,\n    borderBottomWidth: 0.5,\n    borderBottomColor: '#d9d9d9',\n    paddingVertical: 24,\n    paddingHorizontal: 18,\n  },\n  imgCon: {},\n  placeholder: {\n    width: 55,\n    height: 55,\n    borderRadius: 30,\n    overflow: 'hidden',\n    backgroundColor: '#d9d9d9',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  contactDat: {\n    flex: 3,\n    justifyContent: 'center',\n    paddingLeft: 10,\n    paddingRight: 5,\n  },\n  contactAction: {\n    flex: 1.4,\n    justifyContent: 'center',\n    paddingLeft: 5,\n  },\n  txt: {\n    fontSize: 18,\n  },\n  name: {\n    fontSize: 16,\n  },\n  profile: {\n    color: '#888',\n  },\n});\n\nexport default FindFriendsScreen;\n"]},"metadata":{},"sourceType":"module"}