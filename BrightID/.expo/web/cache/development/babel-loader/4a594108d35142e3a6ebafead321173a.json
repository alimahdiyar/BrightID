{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n      route = _ref.route,\n      navigation = _ref.navigation,\n      routeState = _ref.routeState,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      options = _ref.options,\n      clearOptions = _ref.clearOptions;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n\n  var _useOptionsGetters = useOptionsGetters({\n    key: route.key,\n    options: options,\n    navigation: navigation\n  }),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter;\n\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var isInitialRef = React.useRef(true);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n  });\n  React.useEffect(function () {\n    return clearOptions;\n  }, []);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","React","getKey","addOptionsGetter","useOptionsGetters","key","setKey","getCurrentState","state","currentRoute","r","setCurrentState","child","routes","isInitialRef","getIsInitial","context","ScreenComponent","NavigationStateContext","value","name","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}