{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.QrCode = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _clipboard = _interopRequireDefault(require(\"@react-native-community/clipboard\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _reactNativeSvg = _interopRequireWildcard(require(\"react-native-svg\"));\n\nvar _store = require(\"../../store\");\n\nvar _ramda = require(\"ramda\");\n\nvar _reactNativeSpinkit = _interopRequireDefault(require(\"react-native-spinkit\"));\n\nvar _MaterialCommunityIcons = _interopRequireDefault(require(\"react-native-vector-icons/MaterialCommunityIcons\"));\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _qrCodes = require(\"../../utils/qrCodes\");\n\nvar _hooks = require(\"../../utils/hooks\");\n\nvar _channelSlice = require(\"./channelSlice\");\n\nvar _channels = require(\"../../utils/channels\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/QrCode.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Timer = function Timer(_ref) {\n  var channel = _ref.channel;\n  var navigation = (0, _native.useNavigation)();\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useState = (0, _react.useState)(channel ? channel.ttl - (Date.now() - channel.timestamp) : 0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      countdown = _useState2[0],\n      setCountdown = _useState2[1];\n\n  var timerTick = function timerTick() {\n    if (channel && navigation.isFocused()) {\n      var countDown = channel.ttl - (Date.now() - channel.timestamp);\n      setCountdown(countDown);\n    }\n  };\n\n  (0, _hooks.useInterval)(timerTick, 1000);\n\n  var displayTime = function displayTime() {\n    var minutes = Math.floor(countdown / 60000);\n    var seconds = Math.trunc(countdown % 60000 / 1000);\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return minutes + \":\" + seconds;\n  };\n\n  return countdown > 0 ? _react.default.createElement(_reactNative.View, {\n    style: styles.timerContainer,\n    testID: \"TimerContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.timerTextLeft,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, t('qrcode.text.expiresIn'), \" \"), _react.default.createElement(_reactNative.Text, {\n    style: styles.timerTextRight,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, displayTime())) : _react.default.createElement(_reactNative.View, {\n    style: [styles.timerContainer, {\n      height: 20\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  });\n};\n\nvar QrCode = function QrCode(_ref2) {\n  var channel = _ref2.channel;\n  var dispatch = (0, _store.useDispatch)();\n\n  var _useTranslation2 = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation2.t;\n\n  var myName = (0, _store.useSelector)(function (state) {\n    return state.user.name;\n  });\n\n  var _useState3 = (0, _react.useState)(''),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      qrString = _useState4[0],\n      setQrString = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(''),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      qrsvg = _useState6[0],\n      setQrsvg = _useState6[1];\n\n  (0, _react.useEffect)(function () {\n    if (channel && channel.state === _channelSlice.channel_states.OPEN) {\n      var newQrString = (0, _channels.buildChannelQrUrl)(channel).href;\n\n      if (newQrString !== qrString) {\n        console.log(\"Creating QRCode: profileId \" + channel.myProfileId + \" channel \" + channel.id);\n        setQrString(newQrString);\n        (0, _qrCodes.qrCodeToSvg)(newQrString, function (qrsvg) {\n          return setQrsvg(qrsvg);\n        });\n      }\n    } else if (!channel || (channel == null ? void 0 : channel.state) !== _channelSlice.channel_states.OPEN) {\n      setQrString('');\n      setQrsvg('');\n    }\n  }, [channel, qrString]);\n\n  var copyQr = function copyQr() {\n    var universalLink = \"https://app.brightid.org/connection-code/\" + encodeURIComponent(qrString);\n    var clipboardMsg = __DEV__ ? universalLink : (channel == null ? void 0 : channel.type) === _channelSlice.channel_types.SINGLE ? t('qrcode.alert.connectSingle', {\n      name: myName,\n      link: universalLink\n    }) : t('qrcode.alert.connectGroup', {\n      name: myName,\n      link: universalLink\n    });\n    var alertMsg = (channel == null ? void 0 : channel.type) === _channelSlice.channel_types.SINGLE ? t('qrcode.alert.text.shareLinkSingle') : t('qrcode.alert.text.shareLinkGroup');\n\n    _reactNative.Alert.alert(t('qrcode.alert.text.universalLink'), alertMsg, [{\n      text: t('common.button.copy'),\n      onPress: function onPress() {\n        _clipboard.default.setString(clipboardMsg);\n\n        if ((channel == null ? void 0 : channel.type) === _channelSlice.channel_types.SINGLE) dispatch((0, _channelSlice.closeChannel)({\n          channelId: channel == null ? void 0 : channel.id,\n          background: true\n        }));\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  var CopyQr = function CopyQr() {\n    return _react.default.createElement(_reactNative.View, {\n      style: styles.copyContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }, _react.default.createElement(_reactNative.TouchableOpacity, {\n      testID: \"CopyQrBtn\",\n      style: styles.copyButton,\n      onPress: copyQr,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_MaterialCommunityIcons.default, {\n      size: 24,\n      name: \"content-copy\",\n      color: _colors.LIGHT_BLACK,\n      style: {\n        width: 24,\n        height: 24\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), _react.default.createElement(_reactNative.Text, {\n      style: styles.copyText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \" \", t('qrcode.button.copyLink'))));\n  };\n\n  console.log('RENDERING QR CODE');\n  return qrsvg ? _react.default.createElement(_reactNative.View, {\n    style: styles.qrCodeContainer,\n    testID: \"QRCodeContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Timer, {\n    channel: channel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNativeSvg.default, {\n    height: _deviceConstants.DEVICE_LARGE ? '260' : '200',\n    width: _deviceConstants.DEVICE_LARGE ? '260' : '200',\n    viewBox: (0, _ramda.path)(['svg', '$', 'viewBox'], qrsvg),\n    \"shape-rendering\": \"crispEdges\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeSvg.Path, {\n    fill: \"#fff\",\n    d: (0, _ramda.path)(['svg', 'path', '0', '$', 'd'], qrsvg),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNativeSvg.Path, {\n    stroke: \"#000\",\n    d: (0, _ramda.path)(['svg', 'path', '1', '$', 'd'], qrsvg),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  })), _react.default.createElement(CopyQr, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  })) : _react.default.createElement(_reactNative.View, {\n    style: styles.qrCodeContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.emptyQr,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeSpinkit.default, {\n    isVisible: true,\n    size: 47,\n    type: \"FadingCircleAlt\",\n    color: _colors.LIGHT_BLACK,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  })));\n};\n\nexports.QrCode = QrCode;\n\nvar styles = _reactNative.StyleSheet.create({\n  qrCodeContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    paddingTop: _deviceConstants.DEVICE_LARGE ? 35 : 20\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: _deviceConstants.DEVICE_LARGE ? 260 : 200\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copyText: {\n    color: _colors.LIGHT_BLACK,\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[14]\n  },\n  timerContainer: {\n    flexDirection: 'row'\n  },\n  timerTextLeft: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    color: _colors.LIGHT_BLACK\n  },\n  timerTextRight: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    color: _colors.LIGHT_BLACK\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: _deviceConstants.DEVICE_LARGE ? 308 : 244\n  }\n});\n\nvar _default = QrCode;\nexports.default = _default;","map":{"version":3,"names":["Timer","channel","navigation","useNavigation","useTranslation","t","useState","ttl","Date","now","timestamp","countdown","setCountdown","timerTick","isFocused","countDown","useInterval","displayTime","minutes","Math","floor","seconds","trunc","styles","timerContainer","timerTextLeft","timerTextRight","height","QrCode","dispatch","useDispatch","myName","useSelector","state","user","name","qrString","setQrString","qrsvg","setQrsvg","useEffect","channel_states","OPEN","newQrString","buildChannelQrUrl","href","console","log","myProfileId","id","qrCodeToSvg","copyQr","universalLink","encodeURIComponent","clipboardMsg","__DEV__","type","channel_types","SINGLE","link","alertMsg","Alert","alert","text","onPress","Clipboard","setString","closeChannel","channelId","background","cancelable","CopyQr","copyContainer","copyButton","LIGHT_BLACK","width","copyText","qrCodeContainer","DEVICE_LARGE","path","emptyQr","StyleSheet","create","justifyContent","alignItems","paddingTop","flexDirection","color","fontFamily","fontSize"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/QrCode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Alert } from 'react-native';\nimport Clipboard from '@react-native-community/clipboard';\nimport { useNavigation } from '@react-navigation/native';\nimport Svg, { Path } from 'react-native-svg';\nimport { useDispatch, useSelector } from '@/store';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { LIGHT_BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { qrCodeToSvg } from '@/utils/qrCodes';\nimport { useInterval } from '@/utils/hooks';\nimport {\n  channel_states,\n  channel_types,\n  closeChannel,\n} from '@/components/PendingConnections/channelSlice';\nimport { buildChannelQrUrl } from '@/utils/channels';\n\n/**\n * My Code screen of BrightID\n *\n * USERA represents this user\n * ==================================================================\n * displays a qrcode\n *\n */\nconst Timer = ({ channel }) => {\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n\n  const [countdown, setCountdown] = useState(\n    channel ? channel.ttl - (Date.now() - channel.timestamp) : 0,\n  );\n\n  const timerTick = () => {\n    if (channel && navigation.isFocused()) {\n      const countDown = channel.ttl - (Date.now() - channel.timestamp);\n      setCountdown(countDown);\n    }\n  };\n\n  // start local timer to display countdown\n  useInterval(timerTick, 1000);\n  const displayTime = () => {\n    const minutes = Math.floor(countdown / 60000);\n    let seconds: string | number = Math.trunc((countdown % 60000) / 1000);\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n    return `${minutes}:${seconds}`;\n  };\n\n  return countdown > 0 ? (\n    <View style={styles.timerContainer} testID=\"TimerContainer\">\n      <Text style={styles.timerTextLeft}>{t('qrcode.text.expiresIn')} </Text>\n      <Text style={styles.timerTextRight}>{displayTime()}</Text>\n    </View>\n  ) : (\n    <View style={[styles.timerContainer, { height: 20 }]} />\n  );\n};\n\nexport const QrCode = ({ channel }) => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const myName = useSelector((state: State) => state.user.name);\n  const [qrString, setQrString] = useState('');\n  const [qrsvg, setQrsvg] = useState('');\n\n  // create QRCode from channel data\n  useEffect(() => {\n    if (channel && channel.state === channel_states.OPEN) {\n      const newQrString = buildChannelQrUrl(channel).href;\n      // do not re-render svg if we already have the string\n      if (newQrString !== qrString) {\n        console.log(\n          `Creating QRCode: profileId ${channel.myProfileId} channel ${channel.id}`,\n        );\n        setQrString(newQrString);\n        qrCodeToSvg(newQrString, (qrsvg) => setQrsvg(qrsvg));\n      }\n    } else if (!channel || channel?.state !== channel_states.OPEN) {\n      setQrString('');\n      setQrsvg('');\n    }\n  }, [channel, qrString]);\n\n  const copyQr = () => {\n    const universalLink = `https://app.brightid.org/connection-code/${encodeURIComponent(\n      qrString,\n    )}`;\n    const clipboardMsg = __DEV__\n      ? universalLink\n      : channel?.type === channel_types.SINGLE\n      ? t('qrcode.alert.connectSingle', {\n          name: myName,\n          link: universalLink,\n        })\n      : t('qrcode.alert.connectGroup', {\n          name: myName,\n          link: universalLink,\n        });\n\n    const alertMsg =\n      channel?.type === channel_types.SINGLE\n        ? t('qrcode.alert.text.shareLinkSingle')\n        : t('qrcode.alert.text.shareLinkGroup');\n    Alert.alert(\n      t('qrcode.alert.text.universalLink'),\n      alertMsg,\n      [\n        {\n          text: t('common.button.copy'),\n          onPress: () => {\n            Clipboard.setString(clipboardMsg);\n            if (channel?.type === channel_types.SINGLE)\n              dispatch(\n                closeChannel({ channelId: channel?.id, background: true }),\n              );\n          },\n        },\n      ],\n      { cancelable: false },\n    );\n  };\n\n  // we want to replace this QRcode with a different one for single connections\n\n  const CopyQr = () => (\n    <View style={styles.copyContainer}>\n      <TouchableOpacity\n        testID=\"CopyQrBtn\"\n        style={styles.copyButton}\n        onPress={copyQr}\n      >\n        <Material\n          size={24}\n          name=\"content-copy\"\n          color={LIGHT_BLACK}\n          style={{ width: 24, height: 24 }}\n        />\n        <Text style={styles.copyText}> {t('qrcode.button.copyLink')}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  console.log('RENDERING QR CODE');\n\n  return qrsvg ? (\n    <View style={styles.qrCodeContainer} testID=\"QRCodeContainer\">\n      <Timer channel={channel} />\n      <Svg\n        height={DEVICE_LARGE ? '260' : '200'}\n        width={DEVICE_LARGE ? '260' : '200'}\n        viewBox={path(['svg', '$', 'viewBox'], qrsvg)}\n        shape-rendering=\"crispEdges\"\n      >\n        <Path fill=\"#fff\" d={path(['svg', 'path', '0', '$', 'd'], qrsvg)} />\n        <Path stroke=\"#000\" d={path(['svg', 'path', '1', '$', 'd'], qrsvg)} />\n      </Svg>\n      <CopyQr />\n    </View>\n  ) : (\n    <View style={styles.qrCodeContainer}>\n      <View style={styles.emptyQr}>\n        <Spinner\n          isVisible={true}\n          size={47}\n          type=\"FadingCircleAlt\"\n          color={LIGHT_BLACK}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  qrCodeContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    // flexGrow: 1,\n    paddingTop: DEVICE_LARGE ? 35 : 20,\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 260 : 200,\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  copyText: {\n    color: LIGHT_BLACK,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n  },\n  timerContainer: {\n    flexDirection: 'row',\n  },\n  timerTextLeft: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  timerTextRight: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244,\n  },\n});\n\nexport default QrCode;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}