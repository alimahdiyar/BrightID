{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport moment from 'moment';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { BLACK, DARKER_GREY, ORANGE, RED, WHITE } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport TrustlevelSlider from \"../Connections/TrustlevelSlider\";\nimport { retrieveImage } from \"../../utils/filesystem\";\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from \"../../utils/constants\";\nimport { useSelector } from \"../../store\";\nimport { ConnectionStats } from \"./ConnectionStats\";\nimport { ProfileCard } from \"./ProfileCard\";\nimport { firstRecoveryTimeSelector } from \"../../reducer/connectionsSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar REPORTED_PERCENTAGE = 0.1;\nexport var ReconnectView = function ReconnectView(_ref) {\n  var pendingConnection = _ref.pendingConnection,\n      existingConnection = _ref.existingConnection,\n      setLevelHandler = _ref.setLevelHandler,\n      abuseHandler = _ref.abuseHandler;\n  var _pendingConnection$pe = pendingConnection.pendingConnectionData,\n      sharedProfile = _pendingConnection$pe.sharedProfile,\n      profileInfo = _pendingConnection$pe.profileInfo;\n  var navigation = useNavigation();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      identicalProfile = _useState2[0],\n      setIdenticalProfile = _useState2[1];\n\n  var _useState3 = useState(existingConnection.level),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connectionLevel = _useState4[0],\n      setConnectionLevel = _useState4[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      id = _useSelector.id;\n\n  var firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  var userReported = profileInfo.reports.find(function (report) {\n    return report.id === id;\n  });\n  var reported = !userReported && profileInfo.reports.length / (profileInfo.connectionsNum || 1) >= REPORTED_PERCENTAGE;\n  useEffect(function () {\n    var compareProfiles = function _callee() {\n      var existingPhoto;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(sharedProfile.name !== existingConnection.name)) {\n                _context.next = 3;\n                break;\n              }\n\n              setIdenticalProfile(false);\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(retrieveImage(existingConnection.photo.filename));\n\n            case 5:\n              existingPhoto = _context.sent;\n\n              if (!(existingPhoto !== sharedProfile.photo)) {\n                _context.next = 9;\n                break;\n              }\n\n              setIdenticalProfile(false);\n              return _context.abrupt(\"return\");\n\n            case 9:\n              setIdenticalProfile(true);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    compareProfiles();\n  }, [existingConnection, sharedProfile.name, sharedProfile.photo]);\n\n  var photoTouchHandler = function photoTouchHandler(photo, type) {\n    navigation.navigate('FullScreenPhoto', {\n      photo: photo,\n      base64: type === 'base64'\n    });\n  };\n\n  var updateLevel = function updateLevel() {\n    if (existingConnection.level !== connectionLevel && (existingConnection.level === connection_levels.RECOVERY || connectionLevel === connection_levels.RECOVERY) && firstRecoveryTime && Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION) {\n      navigation.navigate('RecoveryCooldownInfo', {\n        successCallback: function successCallback() {\n          setLevelHandler(connectionLevel);\n        }\n      });\n    } else {\n      setLevelHandler(connectionLevel);\n    }\n  };\n\n  if (identicalProfile) {\n    var _profileInfo$mutualCo;\n\n    return _jsxs(_Fragment, {\n      children: [_jsxs(View, {\n        style: styles.header,\n        testID: \"ReconnectScreen\",\n        children: [_jsx(Text, {\n          style: styles.subheaderText,\n          children: t('connections.text.alreadyConnectedWith', {\n            name: sharedProfile.name\n          })\n        }), _jsx(Text, {\n          style: styles.lastConnectedText,\n          children: t('connections.tag.lastConnected', {\n            date: moment(parseInt(String(profileInfo.connectedAt), 10)).fromNow()\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.profiles,\n        children: _jsx(View, {\n          testID: \"identicalProfileView\",\n          style: styles.profile,\n          children: _jsx(ProfileCard, {\n            name: sharedProfile.name,\n            photo: sharedProfile.photo,\n            photoSize: \"large\",\n            photoType: \"base64\",\n            photoTouchHandler: photoTouchHandler,\n            reported: reported,\n            userReported: userReported\n          })\n        })\n      }), _jsx(View, {\n        style: styles.countsContainer,\n        children: _jsx(ConnectionStats, {\n          connectionsNum: profileInfo.connectionsNum,\n          groupsNum: profileInfo.groupsNum,\n          mutualConnectionsNum: ((_profileInfo$mutualCo = profileInfo.mutualConnections) == null ? void 0 : _profileInfo$mutualCo.length) || 0\n        })\n      }), _jsxs(View, {\n        style: styles.connectionLevel,\n        children: [_jsx(View, {\n          style: styles.connectionLevelLabel,\n          children: _jsx(Text, {\n            style: styles.connectionLevelLabelText,\n            children: t('connections.label.currentConnectionLevel')\n          })\n        }), _jsx(View, {\n          style: styles.connectionLevel,\n          testID: \"ReconnectSliderView\",\n          children: _jsx(TrustlevelSlider, {\n            currentLevel: connectionLevel,\n            changeLevelHandler: setConnectionLevel,\n            incomingLevel: existingConnection.incomingLevel,\n            verbose: false\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.actionButtons,\n        children: _jsx(TouchableOpacity, {\n          style: styles.updateButton,\n          onPress: updateLevel,\n          testID: \"updateBtn\",\n          children: _jsx(Text, {\n            style: styles.updateButtonLabel,\n            children: t('connections.button.reconnect')\n          })\n        })\n      })]\n    });\n  } else {\n    var _profileInfo$mutualCo2;\n\n    return _jsxs(_Fragment, {\n      children: [_jsxs(View, {\n        style: styles.header,\n        testID: \"ReconnectScreen\",\n        children: [_jsx(Text, {\n          style: styles.subheaderText,\n          children: t('connections.text.alreadyConnectedWith', {\n            name: sharedProfile.name\n          })\n        }), _jsx(Text, {\n          style: styles.lastConnectedText,\n          children: t('connections.tag.lastConnected', {\n            date: moment(parseInt(String(existingConnection.timestamp), 10)).fromNow()\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.profiles,\n        children: [_jsxs(View, {\n          testID: \"oldProfileView\",\n          style: [styles.profile, styles.verticalDivider],\n          children: [_jsx(View, {\n            style: styles.profileHeader,\n            children: _jsx(Text, {\n              style: styles.profileHeaderText,\n              children: t('connections.label.oldProfile')\n            })\n          }), _jsx(ProfileCard, {\n            name: existingConnection.name,\n            photo: existingConnection.photo.filename,\n            photoSize: \"small\",\n            photoType: \"file\",\n            photoTouchHandler: photoTouchHandler,\n            reported: reported,\n            userReported: userReported\n          })]\n        }), _jsxs(View, {\n          testID: \"newProfileView\",\n          style: styles.profile,\n          children: [_jsx(View, {\n            style: styles.profileHeader,\n            children: _jsx(Text, {\n              style: styles.profileHeaderText,\n              children: t('connections.label.newProfile')\n            })\n          }), _jsx(ProfileCard, {\n            name: sharedProfile.name,\n            photo: sharedProfile.photo,\n            photoSize: \"small\",\n            photoType: \"base64\",\n            photoTouchHandler: photoTouchHandler,\n            reported: reported,\n            userReported: userReported\n          })]\n        })]\n      }), _jsx(View, {\n        style: styles.countsContainer,\n        children: _jsx(ConnectionStats, {\n          connectionsNum: profileInfo.connectionsNum,\n          groupsNum: profileInfo.groupsNum,\n          mutualConnectionsNum: ((_profileInfo$mutualCo2 = profileInfo.mutualConnections) == null ? void 0 : _profileInfo$mutualCo2.length) || 0\n        })\n      }), _jsxs(View, {\n        style: styles.connectionLevel,\n        children: [_jsx(View, {\n          style: styles.connectionLevelLabel,\n          children: _jsx(Text, {\n            style: styles.connectionLevelLabelText,\n            children: t('connections.label.currentConnectionLevel')\n          })\n        }), _jsx(View, {\n          style: styles.connectionLevel,\n          testID: \"ReconnectSliderView\",\n          children: _jsx(TrustlevelSlider, {\n            currentLevel: connectionLevel,\n            changeLevelHandler: setConnectionLevel,\n            incomingLevel: existingConnection.incomingLevel,\n            verbose: false\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.actionButtons,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.abuseButton,\n          onPress: abuseHandler,\n          testID: \"reportAbuseBtn\",\n          children: _jsx(Text, {\n            style: styles.abuseButtonLabel,\n            children: t('connections.button.reportConnection')\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.updateButton,\n          onPress: updateLevel,\n          testID: \"updateBtn\",\n          children: _jsx(Text, {\n            style: styles.updateButtonLabel,\n            children: t('connections.button.updateConnection')\n          })\n        })]\n      })]\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  header: {\n    marginTop: DEVICE_LARGE ? 10 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 5\n  },\n  subheaderText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY\n  },\n  lastConnectedText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY\n  },\n  profiles: {\n    flexDirection: 'row',\n    marginTop: 8,\n    marginBottom: 0\n  },\n  profileHeader: {\n    marginTop: 8,\n    marginBottom: 10\n  },\n  profileHeaderText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK\n  },\n  profile: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  verticalDivider: {\n    borderRightWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    height: '100%'\n  },\n  countsContainer: {\n    width: '88%',\n    paddingTop: 6,\n    paddingBottom: 6,\n    marginTop: 8,\n    marginBottom: 16,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    justifyContent: 'space-evenly',\n    flexDirection: 'row'\n  },\n  connectionLevel: {\n    alignItems: 'center'\n  },\n  connectionLevelLabel: {\n    marginBottom: 10\n  },\n  connectionLevelLabelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK\n  },\n  connectionLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginBottom: 5\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    width: '88%'\n  },\n  abuseButton: {\n    backgroundColor: RED,\n    flex: 1,\n    marginRight: 5,\n    borderRadius: 60,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9\n  },\n  abuseButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE\n  },\n  updateButton: {\n    backgroundColor: WHITE,\n    borderColor: ORANGE,\n    borderWidth: 1,\n    borderRadius: 60,\n    flex: 1,\n    marginLeft: 5,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9\n  },\n  updateButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE\n  }\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/ReconnectView.tsx"],"names":["REPORTED_PERCENTAGE","ReconnectView","pendingConnection","existingConnection","setLevelHandler","abuseHandler","sharedProfile","profileInfo","navigation","useNavigation","identicalProfile","setIdenticalProfile","useState","connectionLevel","setConnectionLevel","t","useTranslation","id","useSelector","state","firstRecoveryTime","userReported","report","reported","useEffect","compareProfiles","existingPhoto","retrieveImage","photoTouchHandler","photo","base64","type","updateLevel","connection_levels","Date","successCallback","styles","name","date","moment","parseInt","String","StyleSheet","header","marginTop","DEVICE_LARGE","justifyContent","alignItems","marginBottom","subheaderText","fontFamily","fontSize","textAlign","color","lastConnectedText","profiles","flexDirection","profileHeader","profileHeaderText","profile","flex","verticalDivider","borderRightWidth","borderColor","height","countsContainer","width","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","connectionLevelLabel","connectionLevelLabelText","connectionLevelText","actionButtons","abuseButton","backgroundColor","marginRight","borderRadius","abuseButtonLabel","updateButton","borderWidth","marginLeft","updateButtonLabel"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport moment from 'moment';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLACK, DARKER_GREY, ORANGE, RED, WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport TrustlevelSlider from '@/components/Connections/TrustlevelSlider';\nimport { retrieveImage } from '@/utils/filesystem';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { useSelector } from '@/store';\nimport { ConnectionStats } from './ConnectionStats';\nimport { ProfileCard } from './ProfileCard';\nimport { firstRecoveryTimeSelector } from '@/reducer/connectionsSlice';\n\n// percentage determines reported warning\nconst REPORTED_PERCENTAGE = 0.1;\n// Reported is currently not displayed inside of the reconnect view\n\ntype ReconnectViewProps = {\n  pendingConnection: PendingConnection;\n  existingConnection: Connection;\n  setLevelHandler: (level: ConnectionLevel) => any;\n  abuseHandler: () => any;\n};\n\nexport const ReconnectView = ({\n  pendingConnection,\n  existingConnection,\n  setLevelHandler,\n  abuseHandler,\n}: ReconnectViewProps) => {\n  const {\n    pendingConnectionData: { sharedProfile, profileInfo },\n  } = pendingConnection;\n\n  const navigation = useNavigation();\n  const [identicalProfile, setIdenticalProfile] = useState(true);\n  const [connectionLevel, setConnectionLevel] = useState(\n    existingConnection.level,\n  );\n  const { t } = useTranslation();\n  const { id } = useSelector((state) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n\n  const userReported = profileInfo.reports.find((report) => report.id === id);\n\n  const reported =\n    !userReported &&\n    profileInfo.reports.length / (profileInfo.connectionsNum || 1) >=\n      REPORTED_PERCENTAGE;\n\n  useEffect(() => {\n    const compareProfiles = async () => {\n      if (sharedProfile.name !== existingConnection.name) {\n        setIdenticalProfile(false);\n        return;\n      }\n      const existingPhoto = await retrieveImage(\n        existingConnection.photo.filename,\n      );\n      if (existingPhoto !== sharedProfile.photo) {\n        setIdenticalProfile(false);\n        return;\n      }\n      // name and photo are equal\n      setIdenticalProfile(true);\n    };\n    compareProfiles();\n  }, [existingConnection, sharedProfile.name, sharedProfile.photo]);\n\n  const photoTouchHandler = (photo: string, type: 'base64' | 'file') => {\n    navigation.navigate('FullScreenPhoto', {\n      photo,\n      base64: type === 'base64',\n    });\n  };\n\n  const updateLevel = () => {\n    if (\n      existingConnection.level !== connectionLevel &&\n      (existingConnection.level === connection_levels.RECOVERY ||\n        connectionLevel === connection_levels.RECOVERY) &&\n      firstRecoveryTime &&\n      Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n    ) {\n      // show info about cooldown period\n      navigation.navigate('RecoveryCooldownInfo', {\n        successCallback: () => {\n          setLevelHandler(connectionLevel);\n        },\n      });\n    } else {\n      setLevelHandler(connectionLevel);\n    }\n  };\n\n  if (identicalProfile) {\n    return (\n      <>\n        <View style={styles.header} testID=\"ReconnectScreen\">\n          <Text style={styles.subheaderText}>\n            {t('connections.text.alreadyConnectedWith', {\n              name: sharedProfile.name,\n            })}\n          </Text>\n          <Text style={styles.lastConnectedText}>\n            {t('connections.tag.lastConnected', {\n              date: moment(\n                parseInt(String(profileInfo.connectedAt), 10),\n              ).fromNow(),\n            })}\n          </Text>\n        </View>\n        <View style={styles.profiles}>\n          <View testID=\"identicalProfileView\" style={styles.profile}>\n            <ProfileCard\n              name={sharedProfile.name}\n              photo={sharedProfile.photo}\n              photoSize=\"large\"\n              photoType=\"base64\"\n              photoTouchHandler={photoTouchHandler}\n              reported={reported}\n              userReported={userReported}\n            />\n          </View>\n        </View>\n        <View style={styles.countsContainer}>\n          <ConnectionStats\n            connectionsNum={profileInfo.connectionsNum}\n            groupsNum={profileInfo.groupsNum}\n            mutualConnectionsNum={profileInfo.mutualConnections?.length || 0}\n          />\n        </View>\n        <View style={styles.connectionLevel}>\n          <View style={styles.connectionLevelLabel}>\n            <Text style={styles.connectionLevelLabelText}>\n              {t('connections.label.currentConnectionLevel')}\n            </Text>\n          </View>\n          <View style={styles.connectionLevel} testID=\"ReconnectSliderView\">\n            <TrustlevelSlider\n              currentLevel={connectionLevel}\n              changeLevelHandler={setConnectionLevel}\n              incomingLevel={existingConnection.incomingLevel}\n              verbose={false}\n            />\n          </View>\n        </View>\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={styles.updateButton}\n            onPress={updateLevel}\n            testID=\"updateBtn\"\n          >\n            <Text style={styles.updateButtonLabel}>\n              {t('connections.button.reconnect')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <View style={styles.header} testID=\"ReconnectScreen\">\n          <Text style={styles.subheaderText}>\n            {t('connections.text.alreadyConnectedWith', {\n              name: sharedProfile.name,\n            })}\n          </Text>\n          <Text style={styles.lastConnectedText}>\n            {t('connections.tag.lastConnected', {\n              date: moment(\n                parseInt(String(existingConnection.timestamp), 10),\n              ).fromNow(),\n            })}\n          </Text>\n        </View>\n\n        <View style={styles.profiles}>\n          <View\n            testID=\"oldProfileView\"\n            style={[styles.profile, styles.verticalDivider]}\n          >\n            <View style={styles.profileHeader}>\n              <Text style={styles.profileHeaderText}>\n                {t('connections.label.oldProfile')}\n              </Text>\n            </View>\n            <ProfileCard\n              name={existingConnection.name}\n              photo={existingConnection.photo.filename}\n              photoSize=\"small\"\n              photoType=\"file\"\n              photoTouchHandler={photoTouchHandler}\n              reported={reported}\n              userReported={userReported}\n            />\n          </View>\n          <View testID=\"newProfileView\" style={styles.profile}>\n            <View style={styles.profileHeader}>\n              <Text style={styles.profileHeaderText}>\n                {t('connections.label.newProfile')}\n              </Text>\n            </View>\n            <ProfileCard\n              name={sharedProfile.name}\n              photo={sharedProfile.photo}\n              photoSize=\"small\"\n              photoType=\"base64\"\n              photoTouchHandler={photoTouchHandler}\n              reported={reported}\n              userReported={userReported}\n            />\n          </View>\n        </View>\n        <View style={styles.countsContainer}>\n          <ConnectionStats\n            connectionsNum={profileInfo.connectionsNum}\n            groupsNum={profileInfo.groupsNum}\n            mutualConnectionsNum={profileInfo.mutualConnections?.length || 0}\n          />\n        </View>\n        <View style={styles.connectionLevel}>\n          <View style={styles.connectionLevelLabel}>\n            <Text style={styles.connectionLevelLabelText}>\n              {t('connections.label.currentConnectionLevel')}\n            </Text>\n          </View>\n          <View style={styles.connectionLevel} testID=\"ReconnectSliderView\">\n            <TrustlevelSlider\n              currentLevel={connectionLevel}\n              changeLevelHandler={setConnectionLevel}\n              incomingLevel={existingConnection.incomingLevel}\n              verbose={false}\n            />\n          </View>\n        </View>\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={styles.abuseButton}\n            onPress={abuseHandler}\n            testID=\"reportAbuseBtn\"\n          >\n            <Text style={styles.abuseButtonLabel}>\n              {t('connections.button.reportConnection')}\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={styles.updateButton}\n            onPress={updateLevel}\n            testID=\"updateBtn\"\n          >\n            <Text style={styles.updateButtonLabel}>\n              {t('connections.button.updateConnection')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    marginTop: DEVICE_LARGE ? 10 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 5,\n  },\n  subheaderText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY,\n  },\n  lastConnectedText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY,\n  },\n  profiles: {\n    flexDirection: 'row',\n    marginTop: 8,\n    marginBottom: 0,\n  },\n  profileHeader: {\n    marginTop: 8,\n    marginBottom: 10,\n  },\n  profileHeaderText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK,\n  },\n  profile: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  verticalDivider: {\n    borderRightWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    height: '100%',\n  },\n  countsContainer: {\n    width: '88%',\n    paddingTop: 6,\n    paddingBottom: 6,\n    marginTop: 8,\n    marginBottom: 16,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    justifyContent: 'space-evenly',\n    flexDirection: 'row',\n  },\n  connectionLevel: {\n    alignItems: 'center',\n  },\n  connectionLevelLabel: {\n    marginBottom: 10,\n  },\n  connectionLevelLabelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK,\n  },\n  connectionLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginBottom: 5,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    width: '88%',\n  },\n  abuseButton: {\n    backgroundColor: RED,\n    flex: 1,\n    marginRight: 5,\n    borderRadius: 60,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9,\n  },\n  abuseButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n  },\n  updateButton: {\n    backgroundColor: WHITE,\n    borderColor: ORANGE,\n    borderWidth: 1,\n    borderRadius: 60,\n    flex: 1,\n    marginLeft: 5,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9,\n  },\n  updateButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}