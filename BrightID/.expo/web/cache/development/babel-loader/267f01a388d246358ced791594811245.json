{"ast":null,"code":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n'use strict';\n\nvar base64 = require('base64-js');\n\nvar ieee754 = require('ieee754');\n\nvar isArray = require('isarray');\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && typeof arr.subarray === 'function' && arr.subarray(1, 1).byteLength === 0;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  }\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192;\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength;\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0;\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length;\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false;\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  }\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  if (buffer.length === 0) return -1;\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset;\n\n  if (isNaN(byteOffset)) {\n    byteOffset = dir ? 0 : buffer.length - 1;\n  }\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  }\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF;\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n}\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints);\n  }\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n};\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0;\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds');\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n};\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n};\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  if (str.length < 2) return '';\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      if (!leadSurrogate) {\n        if (codePoint > 0xDBFF) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        }\n\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val;\n}","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/buffer/index.js"],"names":["base64","require","ieee754","isArray","exports","Buffer","global","typedArraySupport","kMaxLength","arr","__proto__","Uint8Array","foo","that","allocUnsafe","from","value","fromArrayBuffer","fromString","fromObject","Symbol","Object","configurable","size","assertSize","createBuffer","fill","alloc","checked","i","encoding","length","byteLength","actual","array","byteOffset","fromArrayLike","len","obj","isnan","b","a","x","y","Math","String","list","buffer","pos","buf","string","ArrayBuffer","loweredCase","utf8ToBytes","base64ToBytes","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","arguments","slowToString","str","max","target","thisStart","thisEnd","thisCopy","targetCopy","isNaN","dir","val","arrayIndexOf","indexSize","arrLength","valLength","foundIndex","read","found","j","bidirectionalIndexOf","offset","Number","remaining","strLen","parsed","parseInt","blitBuffer","asciiToBytes","asciiWrite","utf16leToBytes","isFinite","hexWrite","utf8Write","latin1Write","base64Write","ucs2Write","type","data","Array","res","firstByte","codePoint","bytesPerSequence","secondByte","tempCodePoint","thirdByte","fourthByte","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","ret","out","toHex","bytes","newBuf","sliceLen","checkOffset","mul","maxBytes","checkInt","littleEndian","objectWriteUInt16","objectWriteUInt32","limit","sub","checkIEEE754","writeFloat","writeDouble","targetStart","code","INVALID_BASE64_RE","stringtrim","n","units","leadSurrogate","byteArray","c","hi","lo","base64clean","dst","src"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAApB,WAAoB,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAArB,SAAqB,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAArB,SAAqB,CAArB;;AAEAG,OAAO,CAAPA,MAAAA,GAAAA,MAAAA;AACAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACAA,OAAO,CAAPA,iBAAAA,GAAAA,EAAAA;AA0BAC,MAAM,CAANA,mBAAAA,GAA6BC,MAAM,CAANA,mBAAAA,KAAAA,SAAAA,GACzBA,MAAM,CADmBA,mBAAAA,GAEzBC,iBAFJF,EAAAA;AAOAD,OAAO,CAAPA,UAAAA,GAAqBI,UAArBJ,EAAAA;;AAEA,SAAA,iBAAA,GAA8B;EAC5B,IAAI;IACF,IAAIK,GAAG,GAAG,IAAA,UAAA,CAAV,CAAU,CAAV;IACAA,GAAG,CAAHA,SAAAA,GAAgB;MAACC,SAAS,EAAEC,UAAU,CAAtB,SAAA;MAAkCC,GAAG,EAAE,SAAA,GAAA,GAAY;QAAE,OAAA,EAAA;MAArEH;IAAgB,CAAhBA;IACA,OAAOA,GAAG,CAAHA,GAAAA,OAAAA,EAAAA,IACH,OAAOA,GAAG,CAAV,QAAA,KADGA,UAAAA,IAEHA,GAAG,CAAHA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,UAAAA,KAFJ,CAAA;EAGA,CANF,CAME,OAAA,CAAA,EAAU;IACV,OAAA,KAAA;EAEH;AAED;;AAAA,SAAA,UAAA,GAAuB;EACrB,OAAOJ,MAAM,CAANA,mBAAAA,GAAAA,UAAAA,GAAP,UAAA;AAKF;;AAAA,SAAA,YAAA,CAAA,IAAA,EAAA,MAAA,EAAqC;EACnC,IAAIG,UAAU,KAAd,MAAA,EAA2B;IACzB,MAAM,IAAA,UAAA,CAAN,4BAAM,CAAN;EAEF;;EAAA,IAAIH,MAAM,CAAV,mBAAA,EAAgC;IAE9BQ,IAAI,GAAG,IAAA,UAAA,CAAPA,MAAO,CAAPA;IACAA,IAAI,CAAJA,SAAAA,GAAiBR,MAAM,CAAvBQ,SAAAA;EAHF,CAAA,MAIO;IAEL,IAAIA,IAAI,KAAR,IAAA,EAAmB;MACjBA,IAAI,GAAG,IAAA,MAAA,CAAPA,MAAO,CAAPA;IAEFA;;IAAAA,IAAI,CAAJA,MAAAA,GAAAA,MAAAA;EAGF;;EAAA,OAAA,IAAA;AAaF;;AAAA,SAAA,MAAA,CAAA,GAAA,EAAA,gBAAA,EAAA,MAAA,EAAgD;EAC9C,IAAI,CAACR,MAAM,CAAP,mBAAA,IAA+B,EAAE,gBAArC,MAAmC,CAAnC,EAA8D;IAC5D,OAAO,IAAA,MAAA,CAAA,GAAA,EAAA,gBAAA,EAAP,MAAO,CAAP;EAIF;;EAAA,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAC3B,IAAI,OAAA,gBAAA,KAAJ,QAAA,EAA0C;MACxC,MAAM,IAAA,KAAA,CAAN,mEAAM,CAAN;IAIF;;IAAA,OAAOS,WAAW,CAAA,IAAA,EAAlB,GAAkB,CAAlB;EAEF;;EAAA,OAAOC,IAAI,CAAA,IAAA,EAAA,GAAA,EAAA,gBAAA,EAAX,MAAW,CAAX;AAGFV;;AAAAA,MAAM,CAANA,QAAAA,GAAAA,IAAAA;;AAGAA,MAAM,CAANA,QAAAA,GAAkB,UAAA,GAAA,EAAe;EAC/BI,GAAG,CAAHA,SAAAA,GAAgBJ,MAAM,CAAtBI,SAAAA;EACA,OAAA,GAAA;AAFFJ,CAAAA;;AAKA,SAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,MAAA,EAAsD;EACpD,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;IAC7B,MAAM,IAAA,SAAA,CAAN,uCAAM,CAAN;EAGF;;EAAA,IAAI,OAAA,WAAA,KAAA,WAAA,IAAsCW,KAAK,YAA/C,WAAA,EAAwE;IACtE,OAAOC,eAAe,CAAA,IAAA,EAAA,KAAA,EAAA,gBAAA,EAAtB,MAAsB,CAAtB;EAGF;;EAAA,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;IAC7B,OAAOC,UAAU,CAAA,IAAA,EAAA,KAAA,EAAjB,gBAAiB,CAAjB;EAGF;;EAAA,OAAOC,UAAU,CAAA,IAAA,EAAjB,KAAiB,CAAjB;AAWFd;;AAAAA,MAAM,CAANA,IAAAA,GAAc,UAAA,KAAA,EAAA,gBAAA,EAAA,MAAA,EAA2C;EACvD,OAAOU,IAAI,CAAA,IAAA,EAAA,KAAA,EAAA,gBAAA,EAAX,MAAW,CAAX;AADFV,CAAAA;;AAIA,IAAIA,MAAM,CAAV,mBAAA,EAAgC;EAC9BA,MAAM,CAANA,SAAAA,CAAAA,SAAAA,GAA6BM,UAAU,CAAvCN,SAAAA;EACAA,MAAM,CAANA,SAAAA,GAAAA,UAAAA;;EACA,IAAI,OAAA,MAAA,KAAA,WAAA,IAAiCe,MAAM,CAAvC,OAAA,IACAf,MAAM,CAACe,MAAM,CAAbf,OAAM,CAANA,KADJ,MAAA,EACuC;IAErCgB,MAAM,CAANA,cAAAA,CAAAA,MAAAA,EAA8BD,MAAM,CAApCC,OAAAA,EAA8C;MAC5CL,KAAK,EADuC,IAAA;MAE5CM,YAAY,EAFdD;IAA8C,CAA9CA;EAKH;AAED;;AAAA,SAAA,UAAA,CAAA,IAAA,EAA2B;EACzB,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;IAC5B,MAAM,IAAA,SAAA,CAAN,kCAAM,CAAN;EADF,CAAA,MAEO,IAAIE,IAAI,GAAR,CAAA,EAAc;IACnB,MAAM,IAAA,UAAA,CAAN,sCAAM,CAAN;EAEH;AAED;;AAAA,SAAA,KAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAA4C;EAC1CC,UAAU,CAAVA,IAAU,CAAVA;;EACA,IAAID,IAAI,IAAR,CAAA,EAAe;IACb,OAAOE,YAAY,CAAA,IAAA,EAAnB,IAAmB,CAAnB;EAEF;;EAAA,IAAIC,IAAI,KAAR,SAAA,EAAwB;IAItB,OAAO,OAAA,QAAA,KAAA,QAAA,GACHD,YAAY,CAAA,IAAA,EAAZA,IAAY,CAAZA,CAAAA,IAAAA,CAAAA,IAAAA,EADG,QACHA,CADG,GAEHA,YAAY,CAAA,IAAA,EAAZA,IAAY,CAAZA,CAAAA,IAAAA,CAFJ,IAEIA,CAFJ;EAIF;;EAAA,OAAOA,YAAY,CAAA,IAAA,EAAnB,IAAmB,CAAnB;AAOFpB;;AAAAA,MAAM,CAANA,KAAAA,GAAe,UAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAgC;EAC7C,OAAOsB,KAAK,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAZ,QAAY,CAAZ;AADFtB,CAAAA;;AAIA,SAAA,WAAA,CAAA,IAAA,EAAA,IAAA,EAAkC;EAChCmB,UAAU,CAAVA,IAAU,CAAVA;EACAX,IAAI,GAAGY,YAAY,CAAA,IAAA,EAAOF,IAAI,GAAJA,CAAAA,GAAAA,CAAAA,GAAeK,OAAO,CAAPA,IAAO,CAAPA,GAAzCf,CAAmB,CAAnBA;;EACA,IAAI,CAACR,MAAM,CAAX,mBAAA,EAAiC;IAC/B,KAAK,IAAIwB,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0B,EAA1B,CAAA,EAA+B;MAC7BhB,IAAI,CAAJA,CAAI,CAAJA,GAAAA,CAAAA;IAEH;EACD;;EAAA,OAAA,IAAA;AAMFR;;AAAAA,MAAM,CAANA,WAAAA,GAAqB,UAAA,IAAA,EAAgB;EACnC,OAAOS,WAAW,CAAA,IAAA,EAAlB,IAAkB,CAAlB;AADFT,CAAAA;;AAMAA,MAAM,CAANA,eAAAA,GAAyB,UAAA,IAAA,EAAgB;EACvC,OAAOS,WAAW,CAAA,IAAA,EAAlB,IAAkB,CAAlB;AADFT,CAAAA;;AAIA,SAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAAA,QAAA,EAA6C;EAC3C,IAAI,OAAA,QAAA,KAAA,QAAA,IAAgCyB,QAAQ,KAA5C,EAAA,EAAqD;IACnDA,QAAQ,GAARA,MAAAA;EAGF;;EAAA,IAAI,CAACzB,MAAM,CAANA,UAAAA,CAAL,QAAKA,CAAL,EAAkC;IAChC,MAAM,IAAA,SAAA,CAAN,4CAAM,CAAN;EAGF;;EAAA,IAAI0B,MAAM,GAAGC,UAAU,CAAA,MAAA,EAAVA,QAAU,CAAVA,GAAb,CAAA;EACAnB,IAAI,GAAGY,YAAY,CAAA,IAAA,EAAnBZ,MAAmB,CAAnBA;EAEA,IAAIoB,MAAM,GAAGpB,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,EAAb,QAAaA,CAAb;;EAEA,IAAIoB,MAAM,KAAV,MAAA,EAAuB;IAIrBpB,IAAI,GAAGA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAPA,MAAOA,CAAPA;EAGF;;EAAA,OAAA,IAAA;AAGF;;AAAA,SAAA,aAAA,CAAA,IAAA,EAAA,KAAA,EAAqC;EACnC,IAAIkB,MAAM,GAAGG,KAAK,CAALA,MAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAuBN,OAAO,CAACM,KAAK,CAAbN,MAAO,CAAPA,GAApC,CAAA;EACAf,IAAI,GAAGY,YAAY,CAAA,IAAA,EAAnBZ,MAAmB,CAAnBA;;EACA,KAAK,IAAIgB,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,MAAA,EAA4BA,CAAC,IAA7B,CAAA,EAAoC;IAClChB,IAAI,CAAJA,CAAI,CAAJA,GAAUqB,KAAK,CAALA,CAAK,CAALA,GAAVrB,GAAAA;EAEF;;EAAA,OAAA,IAAA;AAGF;;AAAA,SAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAA2D;EACzDqB,KAAK,CAALA,UAAAA;;EAEA,IAAIC,UAAU,GAAVA,CAAAA,IAAkBD,KAAK,CAALA,UAAAA,GAAtB,UAAA,EAAqD;IACnD,MAAM,IAAA,UAAA,CAAN,6BAAM,CAAN;EAGF;;EAAA,IAAIA,KAAK,CAALA,UAAAA,GAAmBC,UAAU,IAAIJ,MAAM,IAA3C,CAAiC,CAAjC,EAAmD;IACjD,MAAM,IAAA,UAAA,CAAN,6BAAM,CAAN;EAGF;;EAAA,IAAII,UAAU,KAAVA,SAAAA,IAA4BJ,MAAM,KAAtC,SAAA,EAAsD;IACpDG,KAAK,GAAG,IAAA,UAAA,CAARA,KAAQ,CAARA;EADF,CAAA,MAEO,IAAIH,MAAM,KAAV,SAAA,EAA0B;IAC/BG,KAAK,GAAG,IAAA,UAAA,CAAA,KAAA,EAARA,UAAQ,CAARA;EADK,CAAA,MAEA;IACLA,KAAK,GAAG,IAAA,UAAA,CAAA,KAAA,EAAA,UAAA,EAARA,MAAQ,CAARA;EAGF;;EAAA,IAAI7B,MAAM,CAAV,mBAAA,EAAgC;IAE9BQ,IAAI,GAAJA,KAAAA;IACAA,IAAI,CAAJA,SAAAA,GAAiBR,MAAM,CAAvBQ,SAAAA;EAHF,CAAA,MAIO;IAELA,IAAI,GAAGuB,aAAa,CAAA,IAAA,EAApBvB,KAAoB,CAApBA;EAEF;;EAAA,OAAA,IAAA;AAGF;;AAAA,SAAA,UAAA,CAAA,IAAA,EAAA,GAAA,EAAgC;EAC9B,IAAIR,MAAM,CAANA,QAAAA,CAAJ,GAAIA,CAAJ,EAA0B;IACxB,IAAIgC,GAAG,GAAGT,OAAO,CAACU,GAAG,CAAXV,MAAO,CAAPA,GAAV,CAAA;IACAf,IAAI,GAAGY,YAAY,CAAA,IAAA,EAAnBZ,GAAmB,CAAnBA;;IAEA,IAAIA,IAAI,CAAJA,MAAAA,KAAJ,CAAA,EAAuB;MACrB,OAAA,IAAA;IAGFyB;;IAAAA,GAAG,CAAHA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA;IACA,OAAA,IAAA;EAGF;;EAAA,IAAA,GAAA,EAAS;IACP,IAAK,OAAA,WAAA,KAAA,WAAA,IACDA,GAAG,CAAHA,MAAAA,YADA,WAAC,IACqC,YAD1C,GAAA,EAC2D;MACzD,IAAI,OAAOA,GAAG,CAAV,MAAA,KAAA,QAAA,IAAkCC,KAAK,CAACD,GAAG,CAA/C,MAA2C,CAA3C,EAAyD;QACvD,OAAOb,YAAY,CAAA,IAAA,EAAnB,CAAmB,CAAnB;MAEF;;MAAA,OAAOW,aAAa,CAAA,IAAA,EAApB,GAAoB,CAApB;IAGF;;IAAA,IAAIE,GAAG,CAAHA,IAAAA,KAAAA,QAAAA,IAAyBnC,OAAO,CAACmC,GAAG,CAAxC,IAAoC,CAApC,EAAgD;MAC9C,OAAOF,aAAa,CAAA,IAAA,EAAOE,GAAG,CAA9B,IAAoB,CAApB;IAEH;EAED;;EAAA,MAAM,IAAA,SAAA,CAAN,oFAAM,CAAN;AAGF;;AAAA,SAAA,OAAA,CAAA,MAAA,EAA0B;EAGxB,IAAIP,MAAM,IAAIvB,UAAd,EAAA,EAA4B;IAC1B,MAAM,IAAA,UAAA,CAAe,oDAAA,UAAA,GACaA,UAAU,GAAVA,QAAAA,CADb,EACaA,CADb,GAArB,QAAM,CAAN;EAGF;;EAAA,OAAOuB,MAAM,GAAb,CAAA;AAGF;;AAAA,SAAA,UAAA,CAAA,MAAA,EAA6B;EAC3B,IAAI,CAAA,MAAA,IAAJ,MAAA,EAAuB;IACrBA,MAAM,GAANA,CAAAA;EAEF;;EAAA,OAAO1B,MAAM,CAANA,KAAAA,CAAa,CAApB,MAAOA,CAAP;AAGFA;;AAAAA,MAAM,CAANA,QAAAA,GAAkB,SAAA,QAAA,CAAA,CAAA,EAAsB;EACtC,OAAO,CAAC,EAAEmC,CAAC,IAADA,IAAAA,IAAaA,CAAC,CAAxB,SAAQ,CAAR;AADFnC,CAAAA;;AAIAA,MAAM,CAANA,OAAAA,GAAiB,SAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAwB;EACvC,IAAI,CAACA,MAAM,CAANA,QAAAA,CAAD,CAACA,CAAD,IAAuB,CAACA,MAAM,CAANA,QAAAA,CAA5B,CAA4BA,CAA5B,EAAgD;IAC9C,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;EAGF;;EAAA,IAAIoC,CAAC,KAAL,CAAA,EAAa,OAAA,CAAA;EAEb,IAAIC,CAAC,GAAGD,CAAC,CAAT,MAAA;EACA,IAAIE,CAAC,GAAGH,CAAC,CAAT,MAAA;;EAEA,KAAK,IAAIX,CAAC,GAAL,CAAA,EAAWQ,GAAG,GAAGO,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAtB,CAAsBA,CAAtB,EAAsCf,CAAC,GAAvC,GAAA,EAA+C,EAA/C,CAAA,EAAoD;IAClD,IAAIY,CAAC,CAADA,CAAC,CAADA,KAASD,CAAC,CAAd,CAAc,CAAd,EAAmB;MACjBE,CAAC,GAAGD,CAAC,CAALC,CAAK,CAALA;MACAC,CAAC,GAAGH,CAAC,CAALG,CAAK,CAALA;MACA;IAEH;EAED;;EAAA,IAAID,CAAC,GAAL,CAAA,EAAW,OAAO,CAAP,CAAA;EACX,IAAIC,CAAC,GAAL,CAAA,EAAW,OAAA,CAAA;EACX,OAAA,CAAA;AApBFtC,CAAAA;;AAuBAA,MAAM,CAANA,UAAAA,GAAoB,SAAA,UAAA,CAAA,QAAA,EAA+B;EACjD,QAAQwC,MAAM,CAANA,QAAM,CAANA,CAAR,WAAQA,EAAR;IACE,KAAA,KAAA;IACA,KAAA,MAAA;IACA,KAAA,OAAA;IACA,KAAA,OAAA;IACA,KAAA,QAAA;IACA,KAAA,QAAA;IACA,KAAA,QAAA;IACA,KAAA,MAAA;IACA,KAAA,OAAA;IACA,KAAA,SAAA;IACA,KAAA,UAAA;MACE,OAAA,IAAA;;IACF;MACE,OAdJ,KAcI;EAdJ;AADFxC,CAAAA;;AAmBAA,MAAM,CAANA,MAAAA,GAAgB,SAAA,MAAA,CAAA,IAAA,EAAA,MAAA,EAA+B;EAC7C,IAAI,CAACF,OAAO,CAAZ,IAAY,CAAZ,EAAoB;IAClB,MAAM,IAAA,SAAA,CAAN,6CAAM,CAAN;EAGF;;EAAA,IAAI2C,IAAI,CAAJA,MAAAA,KAAJ,CAAA,EAAuB;IACrB,OAAOzC,MAAM,CAANA,KAAAA,CAAP,CAAOA,CAAP;EAGF;;EAAA,IAAA,CAAA;;EACA,IAAI0B,MAAM,KAAV,SAAA,EAA0B;IACxBA,MAAM,GAANA,CAAAA;;IACA,KAAKF,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAGiB,IAAI,CAApB,MAAA,EAA6B,EAA7B,CAAA,EAAkC;MAChCf,MAAM,IAAIe,IAAI,CAAJA,CAAI,CAAJA,CAAVf,MAAAA;IAEH;EAED;;EAAA,IAAIgB,MAAM,GAAG1C,MAAM,CAANA,WAAAA,CAAb,MAAaA,CAAb;EACA,IAAI2C,GAAG,GAAP,CAAA;;EACA,KAAKnB,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAGiB,IAAI,CAApB,MAAA,EAA6B,EAA7B,CAAA,EAAkC;IAChC,IAAIG,GAAG,GAAGH,IAAI,CAAd,CAAc,CAAd;;IACA,IAAI,CAACzC,MAAM,CAANA,QAAAA,CAAL,GAAKA,CAAL,EAA2B;MACzB,MAAM,IAAA,SAAA,CAAN,6CAAM,CAAN;IAEF4C;;IAAAA,GAAG,CAAHA,IAAAA,CAAAA,MAAAA,EAAAA,GAAAA;IACAD,GAAG,IAAIC,GAAG,CAAVD,MAAAA;EAEF;;EAAA,OAAA,MAAA;AA3BF3C,CAAAA;;AA8BA,SAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAuC;EACrC,IAAIA,MAAM,CAANA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6B;IAC3B,OAAO6C,MAAM,CAAb,MAAA;EAEF;;EAAA,IAAI,OAAA,WAAA,KAAA,WAAA,IAAsC,OAAOC,WAAW,CAAlB,MAAA,KAAtC,UAAA,KACCA,WAAW,CAAXA,MAAAA,CAAAA,MAAAA,KAA8BD,MAAM,YADzC,WAAI,CAAJ,EACmE;IACjE,OAAOA,MAAM,CAAb,UAAA;EAEF;;EAAA,IAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;IAC9BA,MAAM,GAAG,KAATA,MAAAA;EAGF;;EAAA,IAAIb,GAAG,GAAGa,MAAM,CAAhB,MAAA;EACA,IAAIb,GAAG,KAAP,CAAA,EAAe,OAAA,CAAA;EAGf,IAAIe,WAAW,GAAf,KAAA;;EACA,SAAS;IACP,QAAA,QAAA;MACE,KAAA,OAAA;MACA,KAAA,QAAA;MACA,KAAA,QAAA;QACE,OAAA,GAAA;;MACF,KAAA,MAAA;MACA,KAAA,OAAA;MACA,KAAA,SAAA;QACE,OAAOC,WAAW,CAAXA,MAAW,CAAXA,CAAP,MAAA;;MACF,KAAA,MAAA;MACA,KAAA,OAAA;MACA,KAAA,SAAA;MACA,KAAA,UAAA;QACE,OAAOhB,GAAG,GAAV,CAAA;;MACF,KAAA,KAAA;QACE,OAAOA,GAAG,KAAV,CAAA;;MACF,KAAA,QAAA;QACE,OAAOiB,aAAa,CAAbA,MAAa,CAAbA,CAAP,MAAA;;MACF;QACE,IAAA,WAAA,EAAiB,OAAOD,WAAW,CAAXA,MAAW,CAAXA,CAAP,MAAA;QACjBvB,QAAQ,GAAG,CAAC,KAAD,QAAA,EAAXA,WAAW,EAAXA;QACAsB,WAAW,GArBf,IAqBIA;IArBJ;EAwBH;AACD/C;;AAAAA,MAAM,CAANA,UAAAA,GAAAA,UAAAA;;AAEA,SAAA,YAAA,CAAA,QAAA,EAAA,KAAA,EAAA,GAAA,EAA6C;EAC3C,IAAI+C,WAAW,GAAf,KAAA;;EASA,IAAIG,KAAK,KAALA,SAAAA,IAAuBA,KAAK,GAAhC,CAAA,EAAsC;IACpCA,KAAK,GAALA,CAAAA;EAIF;;EAAA,IAAIA,KAAK,GAAG,KAAZ,MAAA,EAAyB;IACvB,OAAA,EAAA;EAGF;;EAAA,IAAIC,GAAG,KAAHA,SAAAA,IAAqBA,GAAG,GAAG,KAA/B,MAAA,EAA4C;IAC1CA,GAAG,GAAG,KAANA,MAAAA;EAGF;;EAAA,IAAIA,GAAG,IAAP,CAAA,EAAc;IACZ,OAAA,EAAA;EAIFA;;EAAAA,GAAG,MAAHA,CAAAA;EACAD,KAAK,MAALA,CAAAA;;EAEA,IAAIC,GAAG,IAAP,KAAA,EAAkB;IAChB,OAAA,EAAA;EAGF;;EAAA,IAAI,CAAJ,QAAA,EAAe1B,QAAQ,GAARA,MAAAA;;EAEf,OAAA,IAAA,EAAa;IACX,QAAA,QAAA;MACE,KAAA,KAAA;QACE,OAAO2B,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAf,GAAe,CAAf;;MAEF,KAAA,MAAA;MACA,KAAA,OAAA;QACE,OAAOC,SAAS,CAAA,IAAA,EAAA,KAAA,EAAhB,GAAgB,CAAhB;;MAEF,KAAA,OAAA;QACE,OAAOC,UAAU,CAAA,IAAA,EAAA,KAAA,EAAjB,GAAiB,CAAjB;;MAEF,KAAA,QAAA;MACA,KAAA,QAAA;QACE,OAAOC,WAAW,CAAA,IAAA,EAAA,KAAA,EAAlB,GAAkB,CAAlB;;MAEF,KAAA,QAAA;QACE,OAAOC,WAAW,CAAA,IAAA,EAAA,KAAA,EAAlB,GAAkB,CAAlB;;MAEF,KAAA,MAAA;MACA,KAAA,OAAA;MACA,KAAA,SAAA;MACA,KAAA,UAAA;QACE,OAAOC,YAAY,CAAA,IAAA,EAAA,KAAA,EAAnB,GAAmB,CAAnB;;MAEF;QACE,IAAA,WAAA,EAAiB,MAAM,IAAA,SAAA,CAAc,uBAApB,QAAM,CAAN;QACjBhC,QAAQ,GAAG,CAACA,QAAQ,GAAT,EAAA,EAAXA,WAAW,EAAXA;QACAsB,WAAW,GA3Bf,IA2BIA;IA3BJ;EA8BH;AAID/C;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,SAAAA,GAAAA,IAAAA;;AAEA,SAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwB;EACtB,IAAIwB,CAAC,GAAGW,CAAC,CAAT,CAAS,CAAT;EACAA,CAAC,CAADA,CAAC,CAADA,GAAOA,CAAC,CAARA,CAAQ,CAARA;EACAA,CAAC,CAADA,CAAC,CAADA,GAAAA,CAAAA;AAGFnC;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,MAAAA,GAA0B,SAAA,MAAA,GAAmB;EAC3C,IAAIgC,GAAG,GAAG,KAAV,MAAA;;EACA,IAAIA,GAAG,GAAHA,CAAAA,KAAJ,CAAA,EAAmB;IACjB,MAAM,IAAA,UAAA,CAAN,2CAAM,CAAN;EAEF;;EAAA,KAAK,IAAIR,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,GAAA,EAAyBA,CAAC,IAA1B,CAAA,EAAiC;IAC/BkC,IAAI,CAAA,IAAA,EAAA,CAAA,EAAUlC,CAAC,GAAfkC,CAAI,CAAJA;EAEF;;EAAA,OAAA,IAAA;AARF1D,CAAAA;;AAWAA,MAAM,CAANA,SAAAA,CAAAA,MAAAA,GAA0B,SAAA,MAAA,GAAmB;EAC3C,IAAIgC,GAAG,GAAG,KAAV,MAAA;;EACA,IAAIA,GAAG,GAAHA,CAAAA,KAAJ,CAAA,EAAmB;IACjB,MAAM,IAAA,UAAA,CAAN,2CAAM,CAAN;EAEF;;EAAA,KAAK,IAAIR,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,GAAA,EAAyBA,CAAC,IAA1B,CAAA,EAAiC;IAC/BkC,IAAI,CAAA,IAAA,EAAA,CAAA,EAAUlC,CAAC,GAAfkC,CAAI,CAAJA;IACAA,IAAI,CAAA,IAAA,EAAOlC,CAAC,GAAR,CAAA,EAAcA,CAAC,GAAnBkC,CAAI,CAAJA;EAEF;;EAAA,OAAA,IAAA;AATF1D,CAAAA;;AAYAA,MAAM,CAANA,SAAAA,CAAAA,MAAAA,GAA0B,SAAA,MAAA,GAAmB;EAC3C,IAAIgC,GAAG,GAAG,KAAV,MAAA;;EACA,IAAIA,GAAG,GAAHA,CAAAA,KAAJ,CAAA,EAAmB;IACjB,MAAM,IAAA,UAAA,CAAN,2CAAM,CAAN;EAEF;;EAAA,KAAK,IAAIR,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,GAAA,EAAyBA,CAAC,IAA1B,CAAA,EAAiC;IAC/BkC,IAAI,CAAA,IAAA,EAAA,CAAA,EAAUlC,CAAC,GAAfkC,CAAI,CAAJA;IACAA,IAAI,CAAA,IAAA,EAAOlC,CAAC,GAAR,CAAA,EAAcA,CAAC,GAAnBkC,CAAI,CAAJA;IACAA,IAAI,CAAA,IAAA,EAAOlC,CAAC,GAAR,CAAA,EAAcA,CAAC,GAAnBkC,CAAI,CAAJA;IACAA,IAAI,CAAA,IAAA,EAAOlC,CAAC,GAAR,CAAA,EAAcA,CAAC,GAAnBkC,CAAI,CAAJA;EAEF;;EAAA,OAAA,IAAA;AAXF1D,CAAAA;;AAcAA,MAAM,CAANA,SAAAA,CAAAA,QAAAA,GAA4B,SAAA,QAAA,GAAqB;EAC/C,IAAI0B,MAAM,GAAG,KAAA,MAAA,GAAb,CAAA;EACA,IAAIA,MAAM,KAAV,CAAA,EAAkB,OAAA,EAAA;EAClB,IAAIiC,SAAS,CAATA,MAAAA,KAAJ,CAAA,EAA4B,OAAON,SAAS,CAAA,IAAA,EAAA,CAAA,EAAhB,MAAgB,CAAhB;EAC5B,OAAOO,YAAY,CAAZA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AAJF5D,CAAAA;;AAOAA,MAAM,CAANA,SAAAA,CAAAA,MAAAA,GAA0B,SAAA,MAAA,CAAA,CAAA,EAAoB;EAC5C,IAAI,CAACA,MAAM,CAANA,QAAAA,CAAL,CAAKA,CAAL,EAAyB,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;EACzB,IAAI,SAAJ,CAAA,EAAgB,OAAA,IAAA;EAChB,OAAOA,MAAM,CAANA,OAAAA,CAAAA,IAAAA,EAAAA,CAAAA,MAAP,CAAA;AAHFA,CAAAA;;AAMAA,MAAM,CAANA,SAAAA,CAAAA,OAAAA,GAA2B,SAAA,OAAA,GAAoB;EAC7C,IAAI6D,GAAG,GAAP,EAAA;EACA,IAAIC,GAAG,GAAG/D,OAAO,CAAjB,iBAAA;;EACA,IAAI,KAAA,MAAA,GAAJ,CAAA,EAAqB;IACnB8D,GAAG,GAAG,KAAA,QAAA,CAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAANA,GAAM,CAANA;IACA,IAAI,KAAA,MAAA,GAAJ,GAAA,EAAuBA,GAAG,IAAHA,OAAAA;EAEzB;;EAAA,OAAO,aAAA,GAAA,GAAP,GAAA;AAPF7D,CAAAA;;AAUAA,MAAM,CAANA,SAAAA,CAAAA,OAAAA,GAA2B,SAAA,OAAA,CAAA,MAAA,EAAA,KAAA,EAAA,GAAA,EAAA,SAAA,EAAA,OAAA,EAA0D;EACnF,IAAI,CAACA,MAAM,CAANA,QAAAA,CAAL,MAAKA,CAAL,EAA8B;IAC5B,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;EAGF;;EAAA,IAAIkD,KAAK,KAAT,SAAA,EAAyB;IACvBA,KAAK,GAALA,CAAAA;EAEF;;EAAA,IAAIC,GAAG,KAAP,SAAA,EAAuB;IACrBA,GAAG,GAAGY,MAAM,GAAGA,MAAM,CAAT,MAAA,GAAZZ,CAAAA;EAEF;;EAAA,IAAIa,SAAS,KAAb,SAAA,EAA6B;IAC3BA,SAAS,GAATA,CAAAA;EAEF;;EAAA,IAAIC,OAAO,KAAX,SAAA,EAA2B;IACzBA,OAAO,GAAG,KAAVA,MAAAA;EAGF;;EAAA,IAAIf,KAAK,GAALA,CAAAA,IAAaC,GAAG,GAAGY,MAAM,CAAzBb,MAAAA,IAAoCc,SAAS,GAA7Cd,CAAAA,IAAqDe,OAAO,GAAG,KAAnE,MAAA,EAAgF;IAC9E,MAAM,IAAA,UAAA,CAAN,oBAAM,CAAN;EAGF;;EAAA,IAAID,SAAS,IAATA,OAAAA,IAAwBd,KAAK,IAAjC,GAAA,EAA0C;IACxC,OAAA,CAAA;EAEF;;EAAA,IAAIc,SAAS,IAAb,OAAA,EAA0B;IACxB,OAAO,CAAP,CAAA;EAEF;;EAAA,IAAId,KAAK,IAAT,GAAA,EAAkB;IAChB,OAAA,CAAA;EAGFA;;EAAAA,KAAK,MAALA,CAAAA;EACAC,GAAG,MAAHA,CAAAA;EACAa,SAAS,MAATA,CAAAA;EACAC,OAAO,MAAPA,CAAAA;EAEA,IAAI,SAAJ,MAAA,EAAqB,OAAA,CAAA;EAErB,IAAI5B,CAAC,GAAG4B,OAAO,GAAf,SAAA;EACA,IAAI3B,CAAC,GAAGa,GAAG,GAAX,KAAA;EACA,IAAInB,GAAG,GAAGO,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAV,CAAUA,CAAV;EAEA,IAAI2B,QAAQ,GAAG,KAAA,KAAA,CAAA,SAAA,EAAf,OAAe,CAAf;EACA,IAAIC,UAAU,GAAGJ,MAAM,CAANA,KAAAA,CAAAA,KAAAA,EAAjB,GAAiBA,CAAjB;;EAEA,KAAK,IAAIvC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,GAAA,EAAyB,EAAzB,CAAA,EAA8B;IAC5B,IAAI0C,QAAQ,CAARA,CAAQ,CAARA,KAAgBC,UAAU,CAA9B,CAA8B,CAA9B,EAAmC;MACjC9B,CAAC,GAAG6B,QAAQ,CAAZ7B,CAAY,CAAZA;MACAC,CAAC,GAAG6B,UAAU,CAAd7B,CAAc,CAAdA;MACA;IAEH;EAED;;EAAA,IAAID,CAAC,GAAL,CAAA,EAAW,OAAO,CAAP,CAAA;EACX,IAAIC,CAAC,GAAL,CAAA,EAAW,OAAA,CAAA;EACX,OAAA,CAAA;AAxDFtC,CAAAA;;AAoEA,SAAA,oBAAA,CAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAAA,GAAA,EAAuE;EAErE,IAAI0C,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB,OAAO,CAAP,CAAA;;EAGzB,IAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;IAClCjB,QAAQ,GAARA,UAAAA;IACAK,UAAU,GAAVA,CAAAA;EAFF,CAAA,MAGO,IAAIA,UAAU,GAAd,UAAA,EAA6B;IAClCA,UAAU,GAAVA,UAAAA;EADK,CAAA,MAEA,IAAIA,UAAU,GAAG,CAAjB,UAAA,EAA8B;IACnCA,UAAU,GAAG,CAAbA,UAAAA;EAEFA;;EAAAA,UAAU,GAAG,CAAbA,UAAAA;;EACA,IAAIsC,KAAK,CAAT,UAAS,CAAT,EAAuB;IAErBtC,UAAU,GAAGuC,GAAG,GAAA,CAAA,GAAQ3B,MAAM,CAANA,MAAAA,GAAxBZ,CAAAA;EAIF;;EAAA,IAAIA,UAAU,GAAd,CAAA,EAAoBA,UAAU,GAAGY,MAAM,CAANA,MAAAA,GAAbZ,UAAAA;;EACpB,IAAIA,UAAU,IAAIY,MAAM,CAAxB,MAAA,EAAiC;IAC/B,IAAA,GAAA,EAAS,OAAO,CAAhB,CAAS,CAAT,KACKZ,UAAU,GAAGY,MAAM,CAANA,MAAAA,GAAbZ,CAAAA;EAFP,CAAA,MAGO,IAAIA,UAAU,GAAd,CAAA,EAAoB;IACzB,IAAA,GAAA,EAASA,UAAU,GAAnB,CAASA,CAAT,KACK,OAAO,CAAP,CAAA;EAIP;;EAAA,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAC3BwC,GAAG,GAAGtE,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAANsE,QAAMtE,CAANsE;EAIF;;EAAA,IAAItE,MAAM,CAANA,QAAAA,CAAJ,GAAIA,CAAJ,EAA0B;IAExB,IAAIsE,GAAG,CAAHA,MAAAA,KAAJ,CAAA,EAAsB;MACpB,OAAO,CAAP,CAAA;IAEF;;IAAA,OAAOC,YAAY,CAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAAnB,GAAmB,CAAnB;EALF,CAAA,MAMO,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAClCD,GAAG,GAAGA,GAAG,GAATA,IAAAA;;IACA,IAAItE,MAAM,CAANA,mBAAAA,IACA,OAAOM,UAAU,CAAVA,SAAAA,CAAP,OAAA,KADJ,UAAA,EACwD;MACtD,IAAA,GAAA,EAAS;QACP,OAAOA,UAAU,CAAVA,SAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAP,UAAOA,CAAP;MADF,CAAA,MAEO;QACL,OAAOA,UAAU,CAAVA,SAAAA,CAAAA,WAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAP,UAAOA,CAAP;MAEH;IACD;;IAAA,OAAOiE,YAAY,CAAA,MAAA,EAAS,CAAT,GAAS,CAAT,EAAA,UAAA,EAAA,QAAA,EAAnB,GAAmB,CAAnB;EAGF;;EAAA,MAAM,IAAA,SAAA,CAAN,sCAAM,CAAN;AAGF;;AAAA,SAAA,YAAA,CAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAAA,GAAA,EAA4D;EAC1D,IAAIC,SAAS,GAAb,CAAA;EACA,IAAIC,SAAS,GAAGrE,GAAG,CAAnB,MAAA;EACA,IAAIsE,SAAS,GAAGJ,GAAG,CAAnB,MAAA;;EAEA,IAAI7C,QAAQ,KAAZ,SAAA,EAA4B;IAC1BA,QAAQ,GAAGe,MAAM,CAANA,QAAM,CAANA,CAAXf,WAAWe,EAAXf;;IACA,IAAIA,QAAQ,KAARA,MAAAA,IAAuBA,QAAQ,KAA/BA,OAAAA,IACAA,QAAQ,KADRA,SAAAA,IAC0BA,QAAQ,KADtC,UAAA,EACuD;MACrD,IAAIrB,GAAG,CAAHA,MAAAA,GAAAA,CAAAA,IAAkBkE,GAAG,CAAHA,MAAAA,GAAtB,CAAA,EAAsC;QACpC,OAAO,CAAP,CAAA;MAEFE;;MAAAA,SAAS,GAATA,CAAAA;MACAC,SAAS,IAATA,CAAAA;MACAC,SAAS,IAATA,CAAAA;MACA5C,UAAU,IAAVA,CAAAA;IAEH;EAED;;EAAA,SAAA,IAAA,CAAA,GAAA,EAAA,CAAA,EAAuB;IACrB,IAAI0C,SAAS,KAAb,CAAA,EAAqB;MACnB,OAAO5B,GAAG,CAAV,CAAU,CAAV;IADF,CAAA,MAEO;MACL,OAAOA,GAAG,CAAHA,YAAAA,CAAiBpB,CAAC,GAAzB,SAAOoB,CAAP;IAEH;EAED;;EAAA,IAAA,CAAA;;EACA,IAAA,GAAA,EAAS;IACP,IAAI+B,UAAU,GAAG,CAAjB,CAAA;;IACA,KAAKnD,CAAC,GAAN,UAAA,EAAqBA,CAAC,GAAtB,SAAA,EAAoCA,CAApC,EAAA,EAAyC;MACvC,IAAIoD,IAAI,CAAA,GAAA,EAAJA,CAAI,CAAJA,KAAiBA,IAAI,CAAA,GAAA,EAAMD,UAAU,KAAK,CAAfA,CAAAA,GAAAA,CAAAA,GAAwBnD,CAAC,GAAxD,UAAyB,CAAzB,EAAwE;QACtE,IAAImD,UAAU,KAAK,CAAnB,CAAA,EAAuBA,UAAU,GAAVA,CAAAA;QACvB,IAAInD,CAAC,GAADA,UAAAA,GAAAA,CAAAA,KAAJ,SAAA,EAAsC,OAAOmD,UAAU,GAAjB,SAAA;MAFxC,CAAA,MAGO;QACL,IAAIA,UAAU,KAAK,CAAnB,CAAA,EAAuBnD,CAAC,IAAIA,CAAC,GAANA,UAAAA;QACvBmD,UAAU,GAAG,CAAbA,CAAAA;MAEH;IACF;EAXD,CAAA,MAWO;IACL,IAAI7C,UAAU,GAAVA,SAAAA,GAAJ,SAAA,EAAwCA,UAAU,GAAG2C,SAAS,GAAtB3C,SAAAA;;IACxC,KAAKN,CAAC,GAAN,UAAA,EAAqBA,CAAC,IAAtB,CAAA,EAA6BA,CAA7B,EAAA,EAAkC;MAChC,IAAIqD,KAAK,GAAT,IAAA;;MACA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,SAAA,EAA+BA,CAA/B,EAAA,EAAoC;QAClC,IAAIF,IAAI,CAAA,GAAA,EAAMpD,CAAC,GAAXoD,CAAI,CAAJA,KAAqBA,IAAI,CAAA,GAAA,EAA7B,CAA6B,CAA7B,EAAuC;UACrCC,KAAK,GAALA,KAAAA;UACA;QAEH;MACD;;MAAA,IAAA,KAAA,EAAW,OAAA,CAAA;IAEd;EAED;;EAAA,OAAO,CAAP,CAAA;AAGF7E;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,QAAAA,GAA4B,SAAA,QAAA,CAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAA8C;EACxE,OAAO,KAAA,OAAA,CAAA,GAAA,EAAA,UAAA,EAAA,QAAA,MAA4C,CAAnD,CAAA;AADFA,CAAAA;;AAIAA,MAAM,CAANA,SAAAA,CAAAA,OAAAA,GAA2B,SAAA,OAAA,CAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAA6C;EACtE,OAAO+E,oBAAoB,CAAA,IAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAA3B,IAA2B,CAA3B;AADF/E,CAAAA;;AAIAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAAiD;EAC9E,OAAO+E,oBAAoB,CAAA,IAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,EAA3B,KAA2B,CAA3B;AADF/E,CAAAA;;AAIA,SAAA,QAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAgD;EAC9CgF,MAAM,GAAGC,MAAM,CAANA,MAAM,CAANA,IAATD,CAAAA;EACA,IAAIE,SAAS,GAAGtC,GAAG,CAAHA,MAAAA,GAAhB,MAAA;;EACA,IAAI,CAAJ,MAAA,EAAa;IACXlB,MAAM,GAANA,SAAAA;EADF,CAAA,MAEO;IACLA,MAAM,GAAGuD,MAAM,CAAfvD,MAAe,CAAfA;;IACA,IAAIA,MAAM,GAAV,SAAA,EAAwB;MACtBA,MAAM,GAANA,SAAAA;IAEH;EAGD;;EAAA,IAAIyD,MAAM,GAAGtC,MAAM,CAAnB,MAAA;EACA,IAAIsC,MAAM,GAANA,CAAAA,KAAJ,CAAA,EAAsB,MAAM,IAAA,SAAA,CAAN,oBAAM,CAAN;;EAEtB,IAAIzD,MAAM,GAAGyD,MAAM,GAAnB,CAAA,EAAyB;IACvBzD,MAAM,GAAGyD,MAAM,GAAfzD,CAAAA;EAEF;;EAAA,KAAK,IAAIF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;IAC/B,IAAI4D,MAAM,GAAGC,QAAQ,CAACxC,MAAM,CAANA,MAAAA,CAAcrB,CAAC,GAAfqB,CAAAA,EAAD,CAACA,CAAD,EAArB,EAAqB,CAArB;IACA,IAAIuB,KAAK,CAAT,MAAS,CAAT,EAAmB,OAAA,CAAA;IACnBxB,GAAG,CAACoC,MAAM,GAAVpC,CAAG,CAAHA,GAAAA,MAAAA;EAEF;;EAAA,OAAA,CAAA;AAGF;;AAAA,SAAA,SAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAiD;EAC/C,OAAO0C,UAAU,CAACtC,WAAW,CAAA,MAAA,EAASJ,GAAG,CAAHA,MAAAA,GAArB,MAAY,CAAZ,EAAA,GAAA,EAAA,MAAA,EAAjB,MAAiB,CAAjB;AAGF;;AAAA,SAAA,UAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAkD;EAChD,OAAO0C,UAAU,CAACC,YAAY,CAAb,MAAa,CAAb,EAAA,GAAA,EAAA,MAAA,EAAjB,MAAiB,CAAjB;AAGF;;AAAA,SAAA,WAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAmD;EACjD,OAAOC,UAAU,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAjB,MAAiB,CAAjB;AAGF;;AAAA,SAAA,WAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAmD;EACjD,OAAOF,UAAU,CAACrC,aAAa,CAAd,MAAc,CAAd,EAAA,GAAA,EAAA,MAAA,EAAjB,MAAiB,CAAjB;AAGF;;AAAA,SAAA,SAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAiD;EAC/C,OAAOqC,UAAU,CAACG,cAAc,CAAA,MAAA,EAAS7C,GAAG,CAAHA,MAAAA,GAAxB,MAAe,CAAf,EAAA,GAAA,EAAA,MAAA,EAAjB,MAAiB,CAAjB;AAGF5C;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,KAAAA,GAAyB,SAAA,KAAA,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAkD;EAEzE,IAAIgF,MAAM,KAAV,SAAA,EAA0B;IACxBvD,QAAQ,GAARA,MAAAA;IACAC,MAAM,GAAG,KAATA,MAAAA;IACAsD,MAAM,GAANA,CAAAA;EAHF,CAAA,MAKO,IAAItD,MAAM,KAANA,SAAAA,IAAwB,OAAA,MAAA,KAA5B,QAAA,EAAwD;IAC7DD,QAAQ,GAARA,MAAAA;IACAC,MAAM,GAAG,KAATA,MAAAA;IACAsD,MAAM,GAANA,CAAAA;EAHK,CAAA,MAKA,IAAIU,QAAQ,CAAZ,MAAY,CAAZ,EAAsB;IAC3BV,MAAM,GAAGA,MAAM,GAAfA,CAAAA;;IACA,IAAIU,QAAQ,CAAZ,MAAY,CAAZ,EAAsB;MACpBhE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;MACA,IAAID,QAAQ,KAAZ,SAAA,EAA4BA,QAAQ,GAARA,MAAAA;IAF9B,CAAA,MAGO;MACLA,QAAQ,GAARA,MAAAA;MACAC,MAAM,GAANA,SAAAA;IAGH;EAVM,CAAA,MAUA;IACL,MAAM,IAAA,KAAA,CAAN,yEAAM,CAAN;EAKF;;EAAA,IAAIwD,SAAS,GAAG,KAAA,MAAA,GAAhB,MAAA;EACA,IAAIxD,MAAM,KAANA,SAAAA,IAAwBA,MAAM,GAAlC,SAAA,EAAgDA,MAAM,GAANA,SAAAA;;EAEhD,IAAKmB,MAAM,CAANA,MAAAA,GAAAA,CAAAA,KAAsBnB,MAAM,GAANA,CAAAA,IAAcsD,MAAM,GAA3C,CAACnC,KAAoDmC,MAAM,GAAG,KAAlE,MAAA,EAA+E;IAC7E,MAAM,IAAA,UAAA,CAAN,wCAAM,CAAN;EAGF;;EAAA,IAAI,CAAJ,QAAA,EAAevD,QAAQ,GAARA,MAAAA;EAEf,IAAIsB,WAAW,GAAf,KAAA;;EACA,SAAS;IACP,QAAA,QAAA;MACE,KAAA,KAAA;QACE,OAAO4C,QAAQ,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAf,MAAe,CAAf;;MAEF,KAAA,MAAA;MACA,KAAA,OAAA;QACE,OAAOC,SAAS,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAhB,MAAgB,CAAhB;;MAEF,KAAA,OAAA;QACE,OAAOJ,UAAU,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAjB,MAAiB,CAAjB;;MAEF,KAAA,QAAA;MACA,KAAA,QAAA;QACE,OAAOK,WAAW,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAlB,MAAkB,CAAlB;;MAEF,KAAA,QAAA;QAEE,OAAOC,WAAW,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAlB,MAAkB,CAAlB;;MAEF,KAAA,MAAA;MACA,KAAA,OAAA;MACA,KAAA,SAAA;MACA,KAAA,UAAA;QACE,OAAOC,SAAS,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAhB,MAAgB,CAAhB;;MAEF;QACE,IAAA,WAAA,EAAiB,MAAM,IAAA,SAAA,CAAc,uBAApB,QAAM,CAAN;QACjBtE,QAAQ,GAAG,CAAC,KAAD,QAAA,EAAXA,WAAW,EAAXA;QACAsB,WAAW,GA5Bf,IA4BIA;IA5BJ;EA+BH;AAtED/C,CAAAA;;AAwEAA,MAAM,CAANA,SAAAA,CAAAA,MAAAA,GAA0B,SAAA,MAAA,GAAmB;EAC3C,OAAO;IACLgG,IAAI,EADC,QAAA;IAELC,IAAI,EAAEC,KAAK,CAALA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAA2B,KAAA,IAAA,IAA3BA,IAAAA,EAFR,CAEQA;EAFD,CAAP;AADFlG,CAAAA;;AAOA,SAAA,WAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAuC;EACrC,IAAIkD,KAAK,KAALA,CAAAA,IAAeC,GAAG,KAAKP,GAAG,CAA9B,MAAA,EAAuC;IACrC,OAAOjD,MAAM,CAANA,aAAAA,CAAP,GAAOA,CAAP;EADF,CAAA,MAEO;IACL,OAAOA,MAAM,CAANA,aAAAA,CAAqBiD,GAAG,CAAHA,KAAAA,CAAAA,KAAAA,EAA5B,GAA4BA,CAArBjD,CAAP;EAEH;AAED;;AAAA,SAAA,SAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAqC;EACnCwD,GAAG,GAAGZ,IAAI,CAAJA,GAAAA,CAASK,GAAG,CAAZL,MAAAA,EAANY,GAAMZ,CAANY;EACA,IAAIgD,GAAG,GAAP,EAAA;EAEA,IAAI3E,CAAC,GAAL,KAAA;;EACA,OAAOA,CAAC,GAAR,GAAA,EAAgB;IACd,IAAI4E,SAAS,GAAGxD,GAAG,CAAnB,CAAmB,CAAnB;IACA,IAAIyD,SAAS,GAAb,IAAA;IACA,IAAIC,gBAAgB,GAAIF,SAAS,GAAV,IAACA,GAAD,CAACA,GACnBA,SAAS,GAAV,IAACA,GAAD,CAACA,GACAA,SAAS,GAAV,IAACA,GAAD,CAACA,GAFL,CAAA;;IAKA,IAAI5E,CAAC,GAADA,gBAAAA,IAAJ,GAAA,EAAiC;MAC/B,IAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAA,aAAA;;MAEA,QAAA,gBAAA;QACE,KAAA,CAAA;UACE,IAAI4E,SAAS,GAAb,IAAA,EAAsB;YACpBC,SAAS,GAATA,SAAAA;UAEF;;UAAA;;QACF,KAAA,CAAA;UACEE,UAAU,GAAG3D,GAAG,CAACpB,CAAC,GAAlB+E,CAAgB,CAAhBA;;UACA,IAAI,CAACA,UAAU,GAAX,IAAA,MAAJ,IAAA,EAAkC;YAChCC,aAAa,GAAG,CAACJ,SAAS,GAAV,IAAA,KAAA,GAAA,GAA6BG,UAAU,GAAvDC,IAAAA;;YACA,IAAIA,aAAa,GAAjB,IAAA,EAA0B;cACxBH,SAAS,GAATA,aAAAA;YAEH;UACD;;UAAA;;QACF,KAAA,CAAA;UACEE,UAAU,GAAG3D,GAAG,CAACpB,CAAC,GAAlB+E,CAAgB,CAAhBA;UACAE,SAAS,GAAG7D,GAAG,CAACpB,CAAC,GAAjBiF,CAAe,CAAfA;;UACA,IAAI,CAACF,UAAU,GAAX,IAAA,MAAA,IAAA,IAAgC,CAACE,SAAS,GAAV,IAAA,MAApC,IAAA,EAAiE;YAC/DD,aAAa,GAAG,CAACJ,SAAS,GAAV,GAAA,KAAA,GAAA,GAA2B,CAACG,UAAU,GAAX,IAAA,KAA3B,GAAA,GAAyDE,SAAS,GAAlFD,IAAAA;;YACA,IAAIA,aAAa,GAAbA,KAAAA,KAA0BA,aAAa,GAAbA,MAAAA,IAA0BA,aAAa,GAArE,MAAIA,CAAJ,EAAiF;cAC/EH,SAAS,GAATA,aAAAA;YAEH;UACD;;UAAA;;QACF,KAAA,CAAA;UACEE,UAAU,GAAG3D,GAAG,CAACpB,CAAC,GAAlB+E,CAAgB,CAAhBA;UACAE,SAAS,GAAG7D,GAAG,CAACpB,CAAC,GAAjBiF,CAAe,CAAfA;UACAC,UAAU,GAAG9D,GAAG,CAACpB,CAAC,GAAlBkF,CAAgB,CAAhBA;;UACA,IAAI,CAACH,UAAU,GAAX,IAAA,MAAA,IAAA,IAAgC,CAACE,SAAS,GAAV,IAAA,MAAhC,IAAA,IAA+D,CAACC,UAAU,GAAX,IAAA,MAAnE,IAAA,EAAiG;YAC/FF,aAAa,GAAG,CAACJ,SAAS,GAAV,GAAA,KAAA,IAAA,GAA4B,CAACG,UAAU,GAAX,IAAA,KAA5B,GAAA,GAAyD,CAACE,SAAS,GAAV,IAAA,KAAzD,GAAA,GAAsFC,UAAU,GAAhHF,IAAAA;;YACA,IAAIA,aAAa,GAAbA,MAAAA,IAA0BA,aAAa,GAA3C,QAAA,EAAwD;cACtDH,SAAS,GAATA,aAAAA;YAEH;UAlCL;;MAAA;IAsCF;;IAAA,IAAIA,SAAS,KAAb,IAAA,EAAwB;MAGtBA,SAAS,GAATA,MAAAA;MACAC,gBAAgB,GAAhBA,CAAAA;IAJF,CAAA,MAKO,IAAID,SAAS,GAAb,MAAA,EAAwB;MAE7BA,SAAS,IAATA,OAAAA;MACAF,GAAG,CAAHA,IAAAA,CAASE,SAAS,KAATA,EAAAA,GAAAA,KAAAA,GAATF,MAAAA;MACAE,SAAS,GAAG,SAASA,SAAS,GAA9BA,KAAAA;IAGFF;;IAAAA,GAAG,CAAHA,IAAAA,CAAAA,SAAAA;IACA3E,CAAC,IAADA,gBAAAA;EAGF;;EAAA,OAAOmF,qBAAqB,CAA5B,GAA4B,CAA5B;AAMF;;AAAA,IAAIC,oBAAoB,GAAxB,MAAA;;AAEA,SAAA,qBAAA,CAAA,UAAA,EAA4C;EAC1C,IAAI5E,GAAG,GAAG6E,UAAU,CAApB,MAAA;;EACA,IAAI7E,GAAG,IAAP,oBAAA,EAAiC;IAC/B,OAAOQ,MAAM,CAANA,YAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAAP,UAAOA,CAAP;EAIF;;EAAA,IAAI2D,GAAG,GAAP,EAAA;EACA,IAAI3E,CAAC,GAAL,CAAA;;EACA,OAAOA,CAAC,GAAR,GAAA,EAAgB;IACd2E,GAAG,IAAI3D,MAAM,CAANA,YAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAELqE,UAAU,CAAVA,KAAAA,CAAAA,CAAAA,EAAoBrF,CAAC,IAFvB2E,oBAEEU,CAFKrE,CAAP2D;EAKF;;EAAA,OAAA,GAAA;AAGF;;AAAA,SAAA,UAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAsC;EACpC,IAAIW,GAAG,GAAP,EAAA;EACA3D,GAAG,GAAGZ,IAAI,CAAJA,GAAAA,CAASK,GAAG,CAAZL,MAAAA,EAANY,GAAMZ,CAANY;;EAEA,KAAK,IAAI3B,CAAC,GAAV,KAAA,EAAoBA,CAAC,GAArB,GAAA,EAA6B,EAA7B,CAAA,EAAkC;IAChCsF,GAAG,IAAItE,MAAM,CAANA,YAAAA,CAAoBI,GAAG,CAAHA,CAAG,CAAHA,GAA3BkE,IAAOtE,CAAPsE;EAEF;;EAAA,OAAA,GAAA;AAGF;;AAAA,SAAA,WAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAuC;EACrC,IAAIA,GAAG,GAAP,EAAA;EACA3D,GAAG,GAAGZ,IAAI,CAAJA,GAAAA,CAASK,GAAG,CAAZL,MAAAA,EAANY,GAAMZ,CAANY;;EAEA,KAAK,IAAI3B,CAAC,GAAV,KAAA,EAAoBA,CAAC,GAArB,GAAA,EAA6B,EAA7B,CAAA,EAAkC;IAChCsF,GAAG,IAAItE,MAAM,CAANA,YAAAA,CAAoBI,GAAG,CAA9BkE,CAA8B,CAAvBtE,CAAPsE;EAEF;;EAAA,OAAA,GAAA;AAGF;;AAAA,SAAA,QAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAoC;EAClC,IAAI9E,GAAG,GAAGY,GAAG,CAAb,MAAA;EAEA,IAAI,CAAA,KAAA,IAAUM,KAAK,GAAnB,CAAA,EAAyBA,KAAK,GAALA,CAAAA;EACzB,IAAI,CAAA,GAAA,IAAQC,GAAG,GAAX,CAAA,IAAmBA,GAAG,GAA1B,GAAA,EAAkCA,GAAG,GAAHA,GAAAA;EAElC,IAAI4D,GAAG,GAAP,EAAA;;EACA,KAAK,IAAIvF,CAAC,GAAV,KAAA,EAAoBA,CAAC,GAArB,GAAA,EAA6B,EAA7B,CAAA,EAAkC;IAChCuF,GAAG,IAAIC,KAAK,CAACpE,GAAG,CAAhBmE,CAAgB,CAAJ,CAAZA;EAEF;;EAAA,OAAA,GAAA;AAGF;;AAAA,SAAA,YAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAwC;EACtC,IAAIE,KAAK,GAAGrE,GAAG,CAAHA,KAAAA,CAAAA,KAAAA,EAAZ,GAAYA,CAAZ;EACA,IAAIuD,GAAG,GAAP,EAAA;;EACA,KAAK,IAAI3E,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGyF,KAAK,CAAzB,MAAA,EAAkCzF,CAAC,IAAnC,CAAA,EAA0C;IACxC2E,GAAG,IAAI3D,MAAM,CAANA,YAAAA,CAAoByE,KAAK,CAALA,CAAK,CAALA,GAAWA,KAAK,CAACzF,CAAC,GAAPyF,CAAK,CAALA,GAAtCd,GAAO3D,CAAP2D;EAEF;;EAAA,OAAA,GAAA;AAGFnG;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,KAAAA,GAAyB,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAA4B;EACnD,IAAIgC,GAAG,GAAG,KAAV,MAAA;EACAkB,KAAK,GAAG,CAAC,CAATA,KAAAA;EACAC,GAAG,GAAGA,GAAG,KAAHA,SAAAA,GAAAA,GAAAA,GAA0B,CAAC,CAAjCA,GAAAA;;EAEA,IAAID,KAAK,GAAT,CAAA,EAAe;IACbA,KAAK,IAALA,GAAAA;IACA,IAAIA,KAAK,GAAT,CAAA,EAAeA,KAAK,GAALA,CAAAA;EAFjB,CAAA,MAGO,IAAIA,KAAK,GAAT,GAAA,EAAiB;IACtBA,KAAK,GAALA,GAAAA;EAGF;;EAAA,IAAIC,GAAG,GAAP,CAAA,EAAa;IACXA,GAAG,IAAHA,GAAAA;IACA,IAAIA,GAAG,GAAP,CAAA,EAAaA,GAAG,GAAHA,CAAAA;EAFf,CAAA,MAGO,IAAIA,GAAG,GAAP,GAAA,EAAe;IACpBA,GAAG,GAAHA,GAAAA;EAGF;;EAAA,IAAIA,GAAG,GAAP,KAAA,EAAiBA,GAAG,GAAHA,KAAAA;EAEjB,IAAA,MAAA;;EACA,IAAInD,MAAM,CAAV,mBAAA,EAAgC;IAC9BkH,MAAM,GAAG,KAAA,QAAA,CAAA,KAAA,EAATA,GAAS,CAATA;IACAA,MAAM,CAANA,SAAAA,GAAmBlH,MAAM,CAAzBkH,SAAAA;EAFF,CAAA,MAGO;IACL,IAAIC,QAAQ,GAAGhE,GAAG,GAAlB,KAAA;IACA+D,MAAM,GAAG,IAAA,MAAA,CAAA,QAAA,EAATA,SAAS,CAATA;;IACA,KAAK,IAAI1F,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,QAAA,EAA8B,EAA9B,CAAA,EAAmC;MACjC0F,MAAM,CAANA,CAAM,CAANA,GAAY,KAAK1F,CAAC,GAAlB0F,KAAY,CAAZA;IAEH;EAED;;EAAA,OAAA,MAAA;AAjCFlH,CAAAA;;AAuCA,SAAA,WAAA,CAAA,MAAA,EAAA,GAAA,EAAA,MAAA,EAA2C;EACzC,IAAKgF,MAAM,GAAP,CAACA,KAAD,CAACA,IAAqBA,MAAM,GAAhC,CAAA,EAAsC,MAAM,IAAA,UAAA,CAAN,oBAAM,CAAN;EACtC,IAAIA,MAAM,GAANA,GAAAA,GAAJ,MAAA,EAA2B,MAAM,IAAA,UAAA,CAAN,uCAAM,CAAN;AAG7BhF;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,UAAAA,GAA8B,SAAA,UAAA,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAmD;EAC/EgF,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACArD,UAAU,GAAGA,UAAU,GAAvBA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeyF,WAAW,CAAA,MAAA,EAAA,UAAA,EAAqB,KAAhCA,MAAW,CAAXA;EAEf,IAAI9C,GAAG,GAAG,KAAV,MAAU,CAAV;EACA,IAAI+C,GAAG,GAAP,CAAA;EACA,IAAI7F,CAAC,GAAL,CAAA;;EACA,OAAO,EAAA,CAAA,GAAA,UAAA,KAAqB6F,GAAG,IAA/B,KAAO,CAAP,EAA2C;IACzC/C,GAAG,IAAI,KAAKU,MAAM,GAAX,CAAA,IAAPV,GAAAA;EAGF;;EAAA,OAAA,GAAA;AAZFtE,CAAAA;;AAeAA,MAAM,CAANA,SAAAA,CAAAA,UAAAA,GAA8B,SAAA,UAAA,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAmD;EAC/EgF,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACArD,UAAU,GAAGA,UAAU,GAAvBA,CAAAA;;EACA,IAAI,CAAJ,QAAA,EAAe;IACbyF,WAAW,CAAA,MAAA,EAAA,UAAA,EAAqB,KAAhCA,MAAW,CAAXA;EAGF;;EAAA,IAAI9C,GAAG,GAAG,KAAKU,MAAM,GAAG,EAAxB,UAAU,CAAV;EACA,IAAIqC,GAAG,GAAP,CAAA;;EACA,OAAO1F,UAAU,GAAVA,CAAAA,KAAmB0F,GAAG,IAA7B,KAAO1F,CAAP,EAAyC;IACvC2C,GAAG,IAAI,KAAKU,MAAM,GAAG,EAAd,UAAA,IAAPV,GAAAA;EAGF;;EAAA,OAAA,GAAA;AAbFtE,CAAAA;;AAgBAA,MAAM,CAANA,SAAAA,CAAAA,SAAAA,GAA6B,SAAA,SAAA,CAAA,MAAA,EAAA,QAAA,EAAsC;EACjE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAO,KAAP,MAAO,CAAP;AAFFpH,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAyC;EACvE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAO,KAAA,MAAA,IAAgB,KAAKpC,MAAM,GAAX,CAAA,KAAvB,CAAA;AAFFhF,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAyC;EACvE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAQ,KAAA,MAAA,KAAD,CAAC,GAAqB,KAAKpC,MAAM,GAAxC,CAA6B,CAA7B;AAFFhF,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAyC;EACvE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EAEf,OAAO,CAAE,KAAD,MAAC,IACJ,KAAKpC,MAAM,GAAX,CAAA,KADG,CAAC,GAEJ,KAAKA,MAAM,GAAX,CAAA,KAFE,EAAA,IAGF,KAAKA,MAAM,GAAX,CAAA,IAHL,SAAA;AAHFhF,CAAAA;;AASAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAyC;EACvE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EAEf,OAAQ,KAAA,MAAA,IAAD,SAAC,IACJ,KAAKpC,MAAM,GAAX,CAAA,KAAD,EAAC,GACD,KAAKA,MAAM,GAAX,CAAA,KADA,CAAC,GAEF,KAAKA,MAAM,GAHb,CAGE,CAHM,CAAR;AAHFhF,CAAAA;;AASAA,MAAM,CAANA,SAAAA,CAAAA,SAAAA,GAA6B,SAAA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAkD;EAC7EgF,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACArD,UAAU,GAAGA,UAAU,GAAvBA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeyF,WAAW,CAAA,MAAA,EAAA,UAAA,EAAqB,KAAhCA,MAAW,CAAXA;EAEf,IAAI9C,GAAG,GAAG,KAAV,MAAU,CAAV;EACA,IAAI+C,GAAG,GAAP,CAAA;EACA,IAAI7F,CAAC,GAAL,CAAA;;EACA,OAAO,EAAA,CAAA,GAAA,UAAA,KAAqB6F,GAAG,IAA/B,KAAO,CAAP,EAA2C;IACzC/C,GAAG,IAAI,KAAKU,MAAM,GAAX,CAAA,IAAPV,GAAAA;EAEF+C;;EAAAA,GAAG,IAAHA,IAAAA;EAEA,IAAI/C,GAAG,IAAP,GAAA,EAAgBA,GAAG,IAAI/B,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,IAAnB+B,UAAO/B,CAAP+B;EAEhB,OAAA,GAAA;AAfFtE,CAAAA;;AAkBAA,MAAM,CAANA,SAAAA,CAAAA,SAAAA,GAA6B,SAAA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAkD;EAC7EgF,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACArD,UAAU,GAAGA,UAAU,GAAvBA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeyF,WAAW,CAAA,MAAA,EAAA,UAAA,EAAqB,KAAhCA,MAAW,CAAXA;EAEf,IAAI5F,CAAC,GAAL,UAAA;EACA,IAAI6F,GAAG,GAAP,CAAA;EACA,IAAI/C,GAAG,GAAG,KAAKU,MAAM,GAAG,EAAxB,CAAU,CAAV;;EACA,OAAOxD,CAAC,GAADA,CAAAA,KAAU6F,GAAG,IAApB,KAAO7F,CAAP,EAAgC;IAC9B8C,GAAG,IAAI,KAAKU,MAAM,GAAG,EAAd,CAAA,IAAPV,GAAAA;EAEF+C;;EAAAA,GAAG,IAAHA,IAAAA;EAEA,IAAI/C,GAAG,IAAP,GAAA,EAAgBA,GAAG,IAAI/B,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,IAAnB+B,UAAO/B,CAAP+B;EAEhB,OAAA,GAAA;AAfFtE,CAAAA;;AAkBAA,MAAM,CAANA,SAAAA,CAAAA,QAAAA,GAA4B,SAAA,QAAA,CAAA,MAAA,EAAA,QAAA,EAAqC;EAC/D,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,IAAI,EAAE,KAAA,MAAA,IAAN,IAAI,CAAJ,EAA4B,OAAQ,KAAR,MAAQ,CAAR;EAC5B,OAAQ,CAAC,OAAO,KAAP,MAAO,CAAP,GAAD,CAAA,IAA4B,CAApC,CAAA;AAHFpH,CAAAA;;AAMAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAwC;EACrE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,IAAI9C,GAAG,GAAG,KAAA,MAAA,IAAgB,KAAKU,MAAM,GAAX,CAAA,KAA1B,CAAA;EACA,OAAQV,GAAG,GAAJ,MAACA,GAAgBA,GAAG,GAApB,UAACA,GAAR,GAAA;AAHFtE,CAAAA;;AAMAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAwC;EACrE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,IAAI9C,GAAG,GAAG,KAAKU,MAAM,GAAX,CAAA,IAAoB,KAAA,MAAA,KAA9B,CAAA;EACA,OAAQV,GAAG,GAAJ,MAACA,GAAgBA,GAAG,GAApB,UAACA,GAAR,GAAA;AAHFtE,CAAAA;;AAMAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAwC;EACrE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EAEf,OAAQ,KAAD,MAAC,IACL,KAAKpC,MAAM,GAAX,CAAA,KADI,CAAC,GAEL,KAAKA,MAAM,GAAX,CAAA,KAFI,EAAC,GAGL,KAAKA,MAAM,GAAX,CAAA,KAHH,EAAA;AAHFhF,CAAAA;;AASAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAwC;EACrE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EAEf,OAAQ,KAAA,MAAA,KAAD,EAAC,GACL,KAAKpC,MAAM,GAAX,CAAA,KADI,EAAC,GAEL,KAAKA,MAAM,GAAX,CAAA,KAFI,CAAC,GAGL,KAAKA,MAAM,GAHd,CAGG,CAHH;AAHFhF,CAAAA;;AASAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAwC;EACrE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAOvH,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAP,CAAOA,CAAP;AAFFG,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAwC;EACrE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAOvH,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAP,CAAOA,CAAP;AAFFG,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAyC;EACvE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAOvH,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAP,CAAOA,CAAP;AAFFG,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,MAAA,EAAA,QAAA,EAAyC;EACvE,IAAI,CAAJ,QAAA,EAAeoH,WAAW,CAAA,MAAA,EAAA,CAAA,EAAY,KAAvBA,MAAW,CAAXA;EACf,OAAOvH,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAP,CAAOA,CAAP;AAFFG,CAAAA;;AAKA,SAAA,QAAA,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAsD;EACpD,IAAI,CAACA,MAAM,CAANA,QAAAA,CAAL,GAAKA,CAAL,EAA2B,MAAM,IAAA,SAAA,CAAN,6CAAM,CAAN;EAC3B,IAAIW,KAAK,GAALA,GAAAA,IAAeA,KAAK,GAAxB,GAAA,EAAgC,MAAM,IAAA,UAAA,CAAN,mCAAM,CAAN;EAChC,IAAIqE,MAAM,GAANA,GAAAA,GAAepC,GAAG,CAAtB,MAAA,EAA+B,MAAM,IAAA,UAAA,CAAN,oBAAM,CAAN;AAGjC5C;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAA2D;EACxFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACArD,UAAU,GAAGA,UAAU,GAAvBA,CAAAA;;EACA,IAAI,CAAJ,QAAA,EAAe;IACb,IAAI2F,QAAQ,GAAG/E,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,IAAZA,UAAAA,IAAf,CAAA;IACAgF,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAARA,CAAQ,CAARA;EAGF;;EAAA,IAAIF,GAAG,GAAP,CAAA;EACA,IAAI7F,CAAC,GAAL,CAAA;EACA,KAAA,MAAA,IAAeb,KAAK,GAApB,IAAA;;EACA,OAAO,EAAA,CAAA,GAAA,UAAA,KAAqB0G,GAAG,IAA/B,KAAO,CAAP,EAA2C;IACzC,KAAKrC,MAAM,GAAX,CAAA,IAAoBrE,KAAK,GAAN,GAACA,GAApB,IAAA;EAGF;;EAAA,OAAOqE,MAAM,GAAb,UAAA;AAhBFhF,CAAAA;;AAmBAA,MAAM,CAANA,SAAAA,CAAAA,WAAAA,GAA+B,SAAA,WAAA,CAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAA2D;EACxFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACArD,UAAU,GAAGA,UAAU,GAAvBA,CAAAA;;EACA,IAAI,CAAJ,QAAA,EAAe;IACb,IAAI2F,QAAQ,GAAG/E,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,IAAZA,UAAAA,IAAf,CAAA;IACAgF,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAARA,CAAQ,CAARA;EAGF;;EAAA,IAAI/F,CAAC,GAAGG,UAAU,GAAlB,CAAA;EACA,IAAI0F,GAAG,GAAP,CAAA;EACA,KAAKrC,MAAM,GAAX,CAAA,IAAmBrE,KAAK,GAAxB,IAAA;;EACA,OAAO,EAAA,CAAA,IAAA,CAAA,KAAa0G,GAAG,IAAvB,KAAO,CAAP,EAAmC;IACjC,KAAKrC,MAAM,GAAX,CAAA,IAAoBrE,KAAK,GAAN,GAACA,GAApB,IAAA;EAGF;;EAAA,OAAOqE,MAAM,GAAb,UAAA;AAhBFhF,CAAAA;;AAmBAA,MAAM,CAANA,SAAAA,CAAAA,UAAAA,GAA8B,SAAA,UAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAA8C;EAC1EW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAARA,CAAQ,CAARA;EACf,IAAI,CAACvH,MAAM,CAAX,mBAAA,EAAiCW,KAAK,GAAG4B,IAAI,CAAJA,KAAAA,CAAR5B,KAAQ4B,CAAR5B;EACjC,KAAA,MAAA,IAAgBA,KAAK,GAArB,IAAA;EACA,OAAOqE,MAAM,GAAb,CAAA;AANFhF,CAAAA;;AASA,SAAA,iBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAA8D;EAC5D,IAAIW,KAAK,GAAT,CAAA,EAAeA,KAAK,GAAG,SAAA,KAAA,GAARA,CAAAA;;EACf,KAAK,IAAIa,CAAC,GAAL,CAAA,EAAWsD,CAAC,GAAGvC,IAAI,CAAJA,GAAAA,CAASK,GAAG,CAAHA,MAAAA,GAATL,MAAAA,EAApB,CAAoBA,CAApB,EAAsDf,CAAC,GAAvD,CAAA,EAA6D,EAA7D,CAAA,EAAkE;IAChEoB,GAAG,CAACoC,MAAM,GAAVpC,CAAG,CAAHA,GAAkB,CAACjC,KAAK,GAAI,QAAS,KAAK6G,YAAY,GAAA,CAAA,GAAO,IAA3C,CAAmB,CAAnB,MAChB,CAACA,YAAY,GAAA,CAAA,GAAO,IAApB,CAAA,IADF5E,CAAAA;EAGH;AAED5C;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,GAAiC,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAiD;EAChFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAARA,CAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,GAArB,IAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,CAAA;EAFF,CAAA,MAGO;IACL8G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,IAAiB,CAAjBA;EAEF;;EAAA,OAAOzC,MAAM,GAAb,CAAA;AAVFhF,CAAAA;;AAaAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,GAAiC,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAiD;EAChFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAARA,CAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,KAArB,CAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,GAAzB,IAAA;EAFF,CAAA,MAGO;IACL8G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,KAAiB,CAAjBA;EAEF;;EAAA,OAAOzC,MAAM,GAAb,CAAA;AAVFhF,CAAAA;;AAaA,SAAA,iBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAA8D;EAC5D,IAAIW,KAAK,GAAT,CAAA,EAAeA,KAAK,GAAG,aAAA,KAAA,GAARA,CAAAA;;EACf,KAAK,IAAIa,CAAC,GAAL,CAAA,EAAWsD,CAAC,GAAGvC,IAAI,CAAJA,GAAAA,CAASK,GAAG,CAAHA,MAAAA,GAATL,MAAAA,EAApB,CAAoBA,CAApB,EAAsDf,CAAC,GAAvD,CAAA,EAA6D,EAA7D,CAAA,EAAkE;IAChEoB,GAAG,CAACoC,MAAM,GAAVpC,CAAG,CAAHA,GAAmBjC,KAAK,KAAK,CAAC6G,YAAY,GAAA,CAAA,GAAO,IAApB,CAAA,IAAX,CAAC7G,GAAnBiC,IAAAA;EAEH;AAED5C;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,GAAiC,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAiD;EAChFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAARA,CAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAKgF,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,CAAA;IACA,KAAA,MAAA,IAAgBA,KAAK,GAArB,IAAA;EAJF,CAAA,MAKO;IACL+G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,IAAiB,CAAjBA;EAEF;;EAAA,OAAO1C,MAAM,GAAb,CAAA;AAZFhF,CAAAA;;AAeAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,GAAiC,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAiD;EAChFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAARA,CAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,KAArB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,CAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,GAAzB,IAAA;EAJF,CAAA,MAKO;IACL+G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,KAAiB,CAAjBA;EAEF;;EAAA,OAAO1C,MAAM,GAAb,CAAA;AAZFhF,CAAAA;;AAeAA,MAAM,CAANA,SAAAA,CAAAA,UAAAA,GAA8B,SAAA,UAAA,CAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAA0D;EACtFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;;EACA,IAAI,CAAJ,QAAA,EAAe;IACb,IAAI2C,KAAK,GAAGpF,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,IAAA,UAAA,GAAxB,CAAYA,CAAZ;IAEAgF,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAkCI,KAAK,GAAvC,CAAA,EAA6C,CAArDJ,KAAQ,CAARA;EAGF;;EAAA,IAAI/F,CAAC,GAAL,CAAA;EACA,IAAI6F,GAAG,GAAP,CAAA;EACA,IAAIO,GAAG,GAAP,CAAA;EACA,KAAA,MAAA,IAAejH,KAAK,GAApB,IAAA;;EACA,OAAO,EAAA,CAAA,GAAA,UAAA,KAAqB0G,GAAG,IAA/B,KAAO,CAAP,EAA2C;IACzC,IAAI1G,KAAK,GAALA,CAAAA,IAAaiH,GAAG,KAAhBjH,CAAAA,IAA0B,KAAKqE,MAAM,GAANA,CAAAA,GAAL,CAAA,MAA9B,CAAA,EAA0D;MACxD4C,GAAG,GAAHA,CAAAA;IAEF;;IAAA,KAAK5C,MAAM,GAAX,CAAA,IAAmB,CAAErE,KAAK,GAAN,GAACA,IAAF,CAAA,IAAA,GAAA,GAAnB,IAAA;EAGF;;EAAA,OAAOqE,MAAM,GAAb,UAAA;AApBFhF,CAAAA;;AAuBAA,MAAM,CAANA,SAAAA,CAAAA,UAAAA,GAA8B,SAAA,UAAA,CAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAA0D;EACtFW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;;EACA,IAAI,CAAJ,QAAA,EAAe;IACb,IAAI2C,KAAK,GAAGpF,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,IAAA,UAAA,GAAxB,CAAYA,CAAZ;IAEAgF,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAkCI,KAAK,GAAvC,CAAA,EAA6C,CAArDJ,KAAQ,CAARA;EAGF;;EAAA,IAAI/F,CAAC,GAAGG,UAAU,GAAlB,CAAA;EACA,IAAI0F,GAAG,GAAP,CAAA;EACA,IAAIO,GAAG,GAAP,CAAA;EACA,KAAK5C,MAAM,GAAX,CAAA,IAAmBrE,KAAK,GAAxB,IAAA;;EACA,OAAO,EAAA,CAAA,IAAA,CAAA,KAAa0G,GAAG,IAAvB,KAAO,CAAP,EAAmC;IACjC,IAAI1G,KAAK,GAALA,CAAAA,IAAaiH,GAAG,KAAhBjH,CAAAA,IAA0B,KAAKqE,MAAM,GAANA,CAAAA,GAAL,CAAA,MAA9B,CAAA,EAA0D;MACxD4C,GAAG,GAAHA,CAAAA;IAEF;;IAAA,KAAK5C,MAAM,GAAX,CAAA,IAAmB,CAAErE,KAAK,GAAN,GAACA,IAAF,CAAA,IAAA,GAAA,GAAnB,IAAA;EAGF;;EAAA,OAAOqE,MAAM,GAAb,UAAA;AApBFhF,CAAAA;;AAuBAA,MAAM,CAANA,SAAAA,CAAAA,SAAAA,GAA6B,SAAA,SAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAA6C;EACxEW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAA+B,CAAvCA,IAAQ,CAARA;EACf,IAAI,CAACvH,MAAM,CAAX,mBAAA,EAAiCW,KAAK,GAAG4B,IAAI,CAAJA,KAAAA,CAAR5B,KAAQ4B,CAAR5B;EACjC,IAAIA,KAAK,GAAT,CAAA,EAAeA,KAAK,GAAG,OAAA,KAAA,GAARA,CAAAA;EACf,KAAA,MAAA,IAAgBA,KAAK,GAArB,IAAA;EACA,OAAOqE,MAAM,GAAb,CAAA;AAPFhF,CAAAA;;AAUAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAgD;EAC9EW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAiC,CAAzCA,MAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,GAArB,IAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,CAAA;EAFF,CAAA,MAGO;IACL8G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,IAAiB,CAAjBA;EAEF;;EAAA,OAAOzC,MAAM,GAAb,CAAA;AAVFhF,CAAAA;;AAaAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAgD;EAC9EW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAiC,CAAzCA,MAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,KAArB,CAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,GAAzB,IAAA;EAFF,CAAA,MAGO;IACL8G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,KAAiB,CAAjBA;EAEF;;EAAA,OAAOzC,MAAM,GAAb,CAAA;AAVFhF,CAAAA;;AAaAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAgD;EAC9EW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAqC,CAA7CA,UAAQ,CAARA;;EACf,IAAIvH,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,GAArB,IAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,CAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,EAAA;EAJF,CAAA,MAKO;IACL+G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,IAAiB,CAAjBA;EAEF;;EAAA,OAAO1C,MAAM,GAAb,CAAA;AAZFhF,CAAAA;;AAeAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAgD;EAC9EW,KAAK,GAAG,CAARA,KAAAA;EACAqE,MAAM,GAAGA,MAAM,GAAfA,CAAAA;EACA,IAAI,CAAJ,QAAA,EAAeuC,QAAQ,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAqC,CAA7CA,UAAQ,CAARA;EACf,IAAI5G,KAAK,GAAT,CAAA,EAAeA,KAAK,GAAG,aAAA,KAAA,GAARA,CAAAA;;EACf,IAAIX,MAAM,CAAV,mBAAA,EAAgC;IAC9B,KAAA,MAAA,IAAgBW,KAAK,KAArB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,EAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,KAAzB,CAAA;IACA,KAAKqE,MAAM,GAAX,CAAA,IAAoBrE,KAAK,GAAzB,IAAA;EAJF,CAAA,MAKO;IACL+G,iBAAiB,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAjBA,KAAiB,CAAjBA;EAEF;;EAAA,OAAO1C,MAAM,GAAb,CAAA;AAbFhF,CAAAA;;AAgBA,SAAA,YAAA,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAA0D;EACxD,IAAIgF,MAAM,GAANA,GAAAA,GAAepC,GAAG,CAAtB,MAAA,EAA+B,MAAM,IAAA,UAAA,CAAN,oBAAM,CAAN;EAC/B,IAAIoC,MAAM,GAAV,CAAA,EAAgB,MAAM,IAAA,UAAA,CAAN,oBAAM,CAAN;AAGlB;;AAAA,SAAA,UAAA,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAiE;EAC/D,IAAI,CAAJ,QAAA,EAAe;IACb6C,YAAY,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,sBAAA,EAAgD,CAA5DA,sBAAY,CAAZA;EAEFhI;;EAAAA,OAAO,CAAPA,KAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,YAAAA,EAAAA,EAAAA,EAAAA,CAAAA;EACA,OAAOmF,MAAM,GAAb,CAAA;AAGFhF;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAgD;EAC9E,OAAO8H,UAAU,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAjB,QAAiB,CAAjB;AADF9H,CAAAA;;AAIAA,MAAM,CAANA,SAAAA,CAAAA,YAAAA,GAAgC,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAgD;EAC9E,OAAO8H,UAAU,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAjB,QAAiB,CAAjB;AADF9H,CAAAA;;AAIA,SAAA,WAAA,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAkE;EAChE,IAAI,CAAJ,QAAA,EAAe;IACb6H,YAAY,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,uBAAA,EAAiD,CAA7DA,uBAAY,CAAZA;EAEFhI;;EAAAA,OAAO,CAAPA,KAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,YAAAA,EAAAA,EAAAA,EAAAA,CAAAA;EACA,OAAOmF,MAAM,GAAb,CAAA;AAGFhF;;AAAAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,GAAiC,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAiD;EAChF,OAAO+H,WAAW,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAlB,QAAkB,CAAlB;AADF/H,CAAAA;;AAIAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,GAAiC,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAiD;EAChF,OAAO+H,WAAW,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAlB,QAAkB,CAAlB;AADF/H,CAAAA;;AAKAA,MAAM,CAANA,SAAAA,CAAAA,IAAAA,GAAwB,SAAA,IAAA,CAAA,MAAA,EAAA,WAAA,EAAA,KAAA,EAAA,GAAA,EAAgD;EACtE,IAAI,CAAJ,KAAA,EAAYkD,KAAK,GAALA,CAAAA;EACZ,IAAI,CAAA,GAAA,IAAQC,GAAG,KAAf,CAAA,EAAuBA,GAAG,GAAG,KAANA,MAAAA;EACvB,IAAI6E,WAAW,IAAIjE,MAAM,CAAzB,MAAA,EAAkCiE,WAAW,GAAGjE,MAAM,CAApBiE,MAAAA;EAClC,IAAI,CAAJ,WAAA,EAAkBA,WAAW,GAAXA,CAAAA;EAClB,IAAI7E,GAAG,GAAHA,CAAAA,IAAWA,GAAG,GAAlB,KAAA,EAA4BA,GAAG,GAAHA,KAAAA;EAG5B,IAAIA,GAAG,KAAP,KAAA,EAAmB,OAAA,CAAA;EACnB,IAAIY,MAAM,CAANA,MAAAA,KAAAA,CAAAA,IAAuB,KAAA,MAAA,KAA3B,CAAA,EAA8C,OAAA,CAAA;;EAG9C,IAAIiE,WAAW,GAAf,CAAA,EAAqB;IACnB,MAAM,IAAA,UAAA,CAAN,2BAAM,CAAN;EAEF;;EAAA,IAAI9E,KAAK,GAALA,CAAAA,IAAaA,KAAK,IAAI,KAA1B,MAAA,EAAuC,MAAM,IAAA,UAAA,CAAN,2BAAM,CAAN;EACvC,IAAIC,GAAG,GAAP,CAAA,EAAa,MAAM,IAAA,UAAA,CAAN,yBAAM,CAAN;EAGb,IAAIA,GAAG,GAAG,KAAV,MAAA,EAAuBA,GAAG,GAAG,KAANA,MAAAA;;EACvB,IAAIY,MAAM,CAANA,MAAAA,GAAAA,WAAAA,GAA8BZ,GAAG,GAArC,KAAA,EAA+C;IAC7CA,GAAG,GAAGY,MAAM,CAANA,MAAAA,GAAAA,WAAAA,GAANZ,KAAAA;EAGF;;EAAA,IAAInB,GAAG,GAAGmB,GAAG,GAAb,KAAA;EACA,IAAA,CAAA;;EAEA,IAAI,SAAA,MAAA,IAAmBD,KAAK,GAAxB,WAAA,IAA0C8E,WAAW,GAAzD,GAAA,EAAiE;IAE/D,KAAKxG,CAAC,GAAGQ,GAAG,GAAZ,CAAA,EAAkBR,CAAC,IAAnB,CAAA,EAA0B,EAA1B,CAAA,EAA+B;MAC7BuC,MAAM,CAACvC,CAAC,GAARuC,WAAM,CAANA,GAA0B,KAAKvC,CAAC,GAAhCuC,KAA0B,CAA1BA;IAEH;EALD,CAAA,MAKO,IAAI/B,GAAG,GAAHA,IAAAA,IAAc,CAAChC,MAAM,CAAzB,mBAAA,EAA+C;IAEpD,KAAKwB,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAb,GAAA,EAAqB,EAArB,CAAA,EAA0B;MACxBuC,MAAM,CAACvC,CAAC,GAARuC,WAAM,CAANA,GAA0B,KAAKvC,CAAC,GAAhCuC,KAA0B,CAA1BA;IAEH;EALM,CAAA,MAKA;IACLzD,UAAU,CAAVA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAEE,KAAA,QAAA,CAAA,KAAA,EAAqB4C,KAAK,GAF5B5C,GAEE,CAFFA,EAAAA,WAAAA;EAOF;;EAAA,OAAA,GAAA;AA7CFN,CAAAA;;AAoDAA,MAAM,CAANA,SAAAA,CAAAA,IAAAA,GAAwB,SAAA,IAAA,CAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,QAAA,EAA0C;EAEhE,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAC3B,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;MAC7ByB,QAAQ,GAARA,KAAAA;MACAyB,KAAK,GAALA,CAAAA;MACAC,GAAG,GAAG,KAANA,MAAAA;IAHF,CAAA,MAIO,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;MAClC1B,QAAQ,GAARA,GAAAA;MACA0B,GAAG,GAAG,KAANA,MAAAA;IAEF;;IAAA,IAAImB,GAAG,CAAHA,MAAAA,KAAJ,CAAA,EAAsB;MACpB,IAAI2D,IAAI,GAAG3D,GAAG,CAAHA,UAAAA,CAAX,CAAWA,CAAX;;MACA,IAAI2D,IAAI,GAAR,GAAA,EAAgB;QACd3D,GAAG,GAAHA,IAAAA;MAEH;IACD;;IAAA,IAAI7C,QAAQ,KAARA,SAAAA,IAA0B,OAAA,QAAA,KAA9B,QAAA,EAA4D;MAC1D,MAAM,IAAA,SAAA,CAAN,2BAAM,CAAN;IAEF;;IAAA,IAAI,OAAA,QAAA,KAAA,QAAA,IAAgC,CAACzB,MAAM,CAANA,UAAAA,CAArC,QAAqCA,CAArC,EAAkE;MAChE,MAAM,IAAA,SAAA,CAAc,uBAApB,QAAM,CAAN;IAEH;EArBD,CAAA,MAqBO,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAClCsE,GAAG,GAAGA,GAAG,GAATA,GAAAA;EAIF;;EAAA,IAAIpB,KAAK,GAALA,CAAAA,IAAa,KAAA,MAAA,GAAbA,KAAAA,IAAoC,KAAA,MAAA,GAAxC,GAAA,EAA2D;IACzD,MAAM,IAAA,UAAA,CAAN,oBAAM,CAAN;EAGF;;EAAA,IAAIC,GAAG,IAAP,KAAA,EAAkB;IAChB,OAAA,IAAA;EAGFD;;EAAAA,KAAK,GAAGA,KAAK,KAAbA,CAAAA;EACAC,GAAG,GAAGA,GAAG,KAAHA,SAAAA,GAAoB,KAApBA,MAAAA,GAAkCA,GAAG,KAA3CA,CAAAA;EAEA,IAAI,CAAJ,GAAA,EAAUmB,GAAG,GAAHA,CAAAA;EAEV,IAAA,CAAA;;EACA,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;IAC3B,KAAK9C,CAAC,GAAN,KAAA,EAAgBA,CAAC,GAAjB,GAAA,EAAyB,EAAzB,CAAA,EAA8B;MAC5B,KAAA,CAAA,IAAA,GAAA;IAEH;EAJD,CAAA,MAIO;IACL,IAAIyF,KAAK,GAAGjH,MAAM,CAANA,QAAAA,CAAAA,GAAAA,IAAAA,GAAAA,GAERgD,WAAW,CAAC,IAAA,MAAA,CAAA,GAAA,EAAA,QAAA,EAFhB,QAEgB,EAAD,CAFf;IAGA,IAAIhB,GAAG,GAAGiF,KAAK,CAAf,MAAA;;IACA,KAAKzF,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAG2B,GAAG,GAAnB,KAAA,EAA6B,EAA7B,CAAA,EAAkC;MAChC,KAAK3B,CAAC,GAAN,KAAA,IAAkByF,KAAK,CAACzF,CAAC,GAAzB,GAAuB,CAAvB;IAEH;EAED;;EAAA,OAAA,IAAA;AAxDFxB,CAAAA;;AA8DA,IAAIkI,iBAAiB,GAArB,oBAAA;;AAEA,SAAA,WAAA,CAAA,GAAA,EAA2B;EAEzBrE,GAAG,GAAGsE,UAAU,CAAVA,GAAU,CAAVA,CAAAA,OAAAA,CAAAA,iBAAAA,EAANtE,EAAMsE,CAANtE;EAEA,IAAIA,GAAG,CAAHA,MAAAA,GAAJ,CAAA,EAAoB,OAAA,EAAA;;EAEpB,OAAOA,GAAG,CAAHA,MAAAA,GAAAA,CAAAA,KAAP,CAAA,EAA6B;IAC3BA,GAAG,GAAGA,GAAG,GAATA,GAAAA;EAEF;;EAAA,OAAA,GAAA;AAGF;;AAAA,SAAA,UAAA,CAAA,GAAA,EAA0B;EACxB,IAAIA,GAAG,CAAP,IAAA,EAAc,OAAOA,GAAG,CAAV,IAAOA,EAAP;EACd,OAAOA,GAAG,CAAHA,OAAAA,CAAAA,YAAAA,EAAP,EAAOA,CAAP;AAGF;;AAAA,SAAA,KAAA,CAAA,CAAA,EAAmB;EACjB,IAAIuE,CAAC,GAAL,EAAA,EAAY,OAAO,MAAMA,CAAC,CAADA,QAAAA,CAAb,EAAaA,CAAb;EACZ,OAAOA,CAAC,CAADA,QAAAA,CAAP,EAAOA,CAAP;AAGF;;AAAA,SAAA,WAAA,CAAA,MAAA,EAAA,KAAA,EAAqC;EACnCC,KAAK,GAAGA,KAAK,IAAbA,QAAAA;EACA,IAAA,SAAA;EACA,IAAI3G,MAAM,GAAGmB,MAAM,CAAnB,MAAA;EACA,IAAIyF,aAAa,GAAjB,IAAA;EACA,IAAIrB,KAAK,GAAT,EAAA;;EAEA,KAAK,IAAIzF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;IAC/B6E,SAAS,GAAGxD,MAAM,CAANA,UAAAA,CAAZwD,CAAYxD,CAAZwD;;IAGA,IAAIA,SAAS,GAATA,MAAAA,IAAsBA,SAAS,GAAnC,MAAA,EAA8C;MAE5C,IAAI,CAAJ,aAAA,EAAoB;QAElB,IAAIA,SAAS,GAAb,MAAA,EAAwB;UAEtB,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAe,CAAnB,CAAA,EAAuBpB,KAAK,CAALA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;UACvB;QAHF,CAAA,MAIO,IAAIzF,CAAC,GAADA,CAAAA,KAAJ,MAAA,EAAsB;UAE3B,IAAI,CAAC6G,KAAK,IAAN,CAAA,IAAe,CAAnB,CAAA,EAAuBpB,KAAK,CAALA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;UACvB;QAIFqB;;QAAAA,aAAa,GAAbA,SAAAA;QAEA;MAIF;;MAAA,IAAIjC,SAAS,GAAb,MAAA,EAAwB;QACtB,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAe,CAAnB,CAAA,EAAuBpB,KAAK,CAALA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;QACvBqB,aAAa,GAAbA,SAAAA;QACA;MAIFjC;;MAAAA,SAAS,GAAG,CAACiC,aAAa,GAAbA,MAAAA,IAAAA,EAAAA,GAA+BjC,SAAS,GAAzC,MAAA,IAAZA,OAAAA;IA5BF,CAAA,MA6BO,IAAA,aAAA,EAAmB;MAExB,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAe,CAAnB,CAAA,EAAuBpB,KAAK,CAALA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;IAGzBqB;;IAAAA,aAAa,GAAbA,IAAAA;;IAGA,IAAIjC,SAAS,GAAb,IAAA,EAAsB;MACpB,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAJ,CAAA,EAAsB;MACtBpB,KAAK,CAALA,IAAAA,CAAAA,SAAAA;IAFF,CAAA,MAGO,IAAIZ,SAAS,GAAb,KAAA,EAAuB;MAC5B,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAJ,CAAA,EAAsB;MACtBpB,KAAK,CAALA,IAAAA,CACEZ,SAAS,IAATA,GAAAA,GADFY,IAAAA,EAEEZ,SAAS,GAATA,IAAAA,GAFFY,IAAAA;IAFK,CAAA,MAMA,IAAIZ,SAAS,GAAb,OAAA,EAAyB;MAC9B,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAJ,CAAA,EAAsB;MACtBpB,KAAK,CAALA,IAAAA,CACEZ,SAAS,IAATA,GAAAA,GADFY,IAAAA,EAEEZ,SAAS,IAATA,GAAAA,GAAAA,IAAAA,GAFFY,IAAAA,EAGEZ,SAAS,GAATA,IAAAA,GAHFY,IAAAA;IAFK,CAAA,MAOA,IAAIZ,SAAS,GAAb,QAAA,EAA0B;MAC/B,IAAI,CAACgC,KAAK,IAAN,CAAA,IAAJ,CAAA,EAAsB;MACtBpB,KAAK,CAALA,IAAAA,CACEZ,SAAS,IAATA,IAAAA,GADFY,IAAAA,EAEEZ,SAAS,IAATA,GAAAA,GAAAA,IAAAA,GAFFY,IAAAA,EAGEZ,SAAS,IAATA,GAAAA,GAAAA,IAAAA,GAHFY,IAAAA,EAIEZ,SAAS,GAATA,IAAAA,GAJFY,IAAAA;IAFK,CAAA,MAQA;MACL,MAAM,IAAA,KAAA,CAAN,oBAAM,CAAN;IAEH;EAED;;EAAA,OAAA,KAAA;AAGF;;AAAA,SAAA,YAAA,CAAA,GAAA,EAA4B;EAC1B,IAAIsB,SAAS,GAAb,EAAA;;EACA,KAAK,IAAI/G,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGqC,GAAG,CAAvB,MAAA,EAAgC,EAAhC,CAAA,EAAqC;IAEnC0E,SAAS,CAATA,IAAAA,CAAe1E,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAAf0E,IAAAA;EAEF;;EAAA,OAAA,SAAA;AAGF;;AAAA,SAAA,cAAA,CAAA,GAAA,EAAA,KAAA,EAAqC;EACnC,IAAA,CAAA,EAAA,EAAA,EAAA,EAAA;EACA,IAAIA,SAAS,GAAb,EAAA;;EACA,KAAK,IAAI/G,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGqC,GAAG,CAAvB,MAAA,EAAgC,EAAhC,CAAA,EAAqC;IACnC,IAAI,CAACwE,KAAK,IAAN,CAAA,IAAJ,CAAA,EAAsB;IAEtBG,CAAC,GAAG3E,GAAG,CAAHA,UAAAA,CAAJ2E,CAAI3E,CAAJ2E;IACAC,EAAE,GAAGD,CAAC,IAANC,CAAAA;IACAC,EAAE,GAAGF,CAAC,GAANE,GAAAA;IACAH,SAAS,CAATA,IAAAA,CAAAA,EAAAA;IACAA,SAAS,CAATA,IAAAA,CAAAA,EAAAA;EAGF;;EAAA,OAAA,SAAA;AAGF;;AAAA,SAAA,aAAA,CAAA,GAAA,EAA6B;EAC3B,OAAO5I,MAAM,CAANA,WAAAA,CAAmBgJ,WAAW,CAArC,GAAqC,CAA9BhJ,CAAP;AAGF;;AAAA,SAAA,UAAA,CAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAA+C;EAC7C,KAAK,IAAI6B,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;IAC/B,IAAKA,CAAC,GAADA,MAAAA,IAAcoH,GAAG,CAAlB,MAACpH,IAA8BA,CAAC,IAAIqH,GAAG,CAA3C,MAAA,EAAqD;IACrDD,GAAG,CAACpH,CAAC,GAALoH,MAAG,CAAHA,GAAkBC,GAAG,CAArBD,CAAqB,CAArBA;EAEF;;EAAA,OAAA,CAAA;AAGF;;AAAA,SAAA,KAAA,CAAA,GAAA,EAAqB;EACnB,OAAOtE,GAAG,KAAV,GAAA;AACD","sourcesContent":["/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n"]},"metadata":{},"sourceType":"script"}