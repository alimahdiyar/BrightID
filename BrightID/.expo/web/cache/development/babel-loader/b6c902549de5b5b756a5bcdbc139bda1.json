{"ast":null,"code":"import { useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { DARK_GREY, ORANGE, WHITE } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar X_TRANSFORM = DEVICE_LARGE ? 45 : 40;\nvar ANIMATION_DURATION = 150;\n\nvar ChannelSwitch = function ChannelSwitch(_ref) {\n  var value = _ref.value,\n      onValueChange = _ref.onValueChange,\n      onLongPress = _ref.onLongPress,\n      testID = _ref.testID;\n  var toggleAnim = useRef(new Animated.Value(value ? 0 : X_TRANSFORM)).current;\n  var backgroundAnim = useRef(new Animated.Value(value ? 0 : X_TRANSFORM)).current;\n\n  var getPidded = function getPidded() {\n    Animated.parallel([Animated.timing(toggleAnim, {\n      toValue: value ? X_TRANSFORM : 0,\n      useNativeDriver: true,\n      duration: ANIMATION_DURATION,\n      easing: Easing.bezier(0.39, -0.01, 1, 1)\n    }), Animated.timing(backgroundAnim, {\n      toValue: value ? X_TRANSFORM : 0,\n      useNativeDriver: false,\n      duration: ANIMATION_DURATION,\n      easing: Easing.bezier(0.39, -0.01, 1, 1)\n    })]).start(function (_ref2) {\n      var finished = _ref2.finished;\n      if (finished) onValueChange();\n    });\n  };\n\n  console.log('rendering channel switch');\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: getPidded,\n    testID: testID,\n    onLongPress: onLongPress,\n    delayLongPress: 3000,\n    children: _jsxs(Animated.View, {\n      style: [styles.container, {\n        backgroundColor: backgroundAnim.interpolate({\n          inputRange: [0, X_TRANSFORM],\n          outputRange: [DARK_GREY, ORANGE]\n        })\n      }],\n      children: [_jsx(Animated.View, {\n        style: [styles.toggle, {\n          transform: [{\n            translateX: toggleAnim\n          }]\n        }]\n      }), _jsx(Animated.View, {\n        style: [styles.leftIcon, {\n          opacity: 1\n        }],\n        children: _jsx(Material, {\n          name: \"account-multiple\",\n          size: DEVICE_LARGE ? 22 : 18,\n          color: WHITE\n        })\n      }), _jsx(Animated.View, {\n        style: [styles.rightIcon, {\n          opacity: 1\n        }],\n        children: _jsx(Material, {\n          name: \"account\",\n          size: DEVICE_LARGE ? 22 : 18,\n          color: WHITE\n        })\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY\n  },\n  toggle: {\n    position: 'absolute',\n    left: 1,\n    width: DEVICE_LARGE ? 33 : 28,\n    height: '95%',\n    backgroundColor: WHITE,\n    zIndex: 10,\n    elevation: 2,\n    borderRadius: 3\n  },\n  leftIcon: {\n    position: 'absolute',\n    left: 11,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  rightIcon: {\n    position: 'absolute',\n    right: 11,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default ChannelSwitch;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/ChannelSwitch.tsx"],"names":["X_TRANSFORM","DEVICE_LARGE","ANIMATION_DURATION","ChannelSwitch","value","onValueChange","onLongPress","testID","toggleAnim","useRef","Animated","backgroundAnim","getPidded","toValue","useNativeDriver","duration","easing","Easing","finished","console","styles","backgroundColor","inputRange","outputRange","transform","translateX","opacity","StyleSheet","container","flexDirection","width","height","borderRadius","justifyContent","alignItems","borderColor","toggle","position","left","zIndex","elevation","leftIcon","rightIcon","right"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Easing,\n} from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { DARK_GREY, ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\n\nconst X_TRANSFORM = DEVICE_LARGE ? 45 : 40;\nconst ANIMATION_DURATION = 150;\n\nconst ChannelSwitch = ({ value, onValueChange, onLongPress, testID }) => {\n  const toggleAnim = useRef(new Animated.Value(value ? 0 : X_TRANSFORM))\n    .current;\n  const backgroundAnim = useRef(new Animated.Value(value ? 0 : X_TRANSFORM))\n    .current;\n\n  const getPidded = () => {\n    Animated.parallel([\n      Animated.timing(toggleAnim, {\n        toValue: value ? X_TRANSFORM : 0,\n        useNativeDriver: true,\n        duration: ANIMATION_DURATION,\n        // ease out\n        easing: Easing.bezier(0.39, -0.01, 1, 1),\n      }),\n      Animated.timing(backgroundAnim, {\n        toValue: value ? X_TRANSFORM : 0,\n        useNativeDriver: false,\n        duration: ANIMATION_DURATION,\n        // ease out\n        easing: Easing.bezier(0.39, -0.01, 1, 1),\n      }),\n    ]).start(({ finished }) => {\n      if (finished) onValueChange();\n    });\n  };\n\n  console.log('rendering channel switch');\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={getPidded}\n      testID={testID}\n      onLongPress={onLongPress}\n      delayLongPress={3000}\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          {\n            backgroundColor: backgroundAnim.interpolate({\n              inputRange: [0, X_TRANSFORM],\n              outputRange: [DARK_GREY, ORANGE],\n            }),\n          },\n        ]}\n      >\n        <Animated.View\n          style={[\n            styles.toggle,\n            {\n              transform: [\n                {\n                  translateX: toggleAnim,\n                },\n              ],\n            },\n          ]}\n        />\n        <Animated.View\n          style={[\n            styles.leftIcon,\n            {\n              opacity: 1,\n            },\n          ]}\n        >\n          <Material\n            name=\"account-multiple\"\n            size={DEVICE_LARGE ? 22 : 18}\n            color={WHITE}\n          />\n        </Animated.View>\n        <Animated.View\n          style={[\n            styles.rightIcon,\n            {\n              opacity: 1,\n            },\n          ]}\n        >\n          <Material\n            name=\"account\"\n            size={DEVICE_LARGE ? 22 : 18}\n            color={WHITE}\n          />\n        </Animated.View>\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY,\n  },\n  toggle: {\n    position: 'absolute',\n    left: 1,\n    width: DEVICE_LARGE ? 33 : 28,\n    height: '95%',\n    backgroundColor: WHITE,\n    zIndex: 10,\n    elevation: 2,\n    borderRadius: 3,\n  },\n  leftIcon: {\n    position: 'absolute',\n    left: 11,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  rightIcon: {\n    position: 'absolute',\n    right: 11,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default ChannelSwitch;\n"]},"metadata":{},"sourceType":"module"}