{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport nacl from 'tweetnacl';\nimport RNFetchBlob from 'rn-fetch-blob';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createSelector } from '@reduxjs/toolkit';\nimport { uInt8ArrayToB64, b64ToUrlSafeB64, urlSafeRandomKey } from \"../utils/encoding\";\nimport { encryptData } from \"../utils/cryptoHelper\";\nimport { selectChannelById } from \"../components/PendingConnections/channelSlice\";\nimport { selectConnectionById, selectAllConnections } from \"../reducer/connectionsSlice\";\nimport { names } from \"../utils/fakeNames\";\nimport { connectFakeUsers } from \"../utils/fakeHelper\";\nimport { retrieveImage } from \"../utils/filesystem\";\nimport { PROFILE_VERSION } from \"../utils/constants\";\nimport { addOperation } from \"../reducer/operationsSlice\";\nimport { connectionLevelStrings } from \"../utils/connectionLevelStrings\";\nexport var selectOtherFakeConnections = createSelector(selectAllConnections, function (_, id) {\n  return id;\n}, function (connections, id) {\n  return connections.filter(function (c) {\n    return c.secretKey && c.id !== id;\n  });\n});\nexport var addFakeConnection = function addFakeConnection() {\n  return function _callee(dispatch, getState) {\n    var _await$nacl$sign$keyP, publicKey, secretKey, b64PubKey, connectId, _names$Math$floor, firstName, lastName, name, photo, photoResponse, channel, dataObj, encrypted, fakeChannel;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('creating fake user');\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(nacl.sign.keyPair());\n\n          case 4:\n            _await$nacl$sign$keyP = _context.sent;\n            publicKey = _await$nacl$sign$keyP.publicKey;\n            secretKey = _await$nacl$sign$keyP.secretKey;\n            b64PubKey = uInt8ArrayToB64(publicKey);\n            connectId = b64ToUrlSafeB64(b64PubKey);\n            _names$Math$floor = names[Math.floor(Math.random() * (names.length - 1))], firstName = _names$Math$floor.firstName, lastName = _names$Math$floor.lastName;\n            name = firstName + \" \" + lastName;\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(RNFetchBlob.fetch('GET', 'https://loremflickr.com/180/180', {}));\n\n          case 13:\n            photoResponse = _context.sent;\n\n            if (!(photoResponse.info().status === 200)) {\n              _context.next = 18;\n              break;\n            }\n\n            photo = \"data:image/jpeg;base64,\" + String(photoResponse.base64());\n            _context.next = 20;\n            break;\n\n          case 18:\n            Alert.alert('Error', 'Unable to fetch image');\n            return _context.abrupt(\"return\");\n\n          case 20:\n            channel = selectChannelById(getState(), getState().channels.myChannelIds[getState().channels.displayChannelType]);\n            dataObj = {\n              id: connectId,\n              photo: photo,\n              name: name,\n              profileTimestamp: Date.now(),\n              secretKey: uInt8ArrayToB64(secretKey),\n              notificationToken: null,\n              version: PROFILE_VERSION\n            };\n            encrypted = encryptData(dataObj, channel.aesKey);\n            _context.t0 = _objectSpread;\n            _context.t1 = _objectSpread({}, channel);\n            _context.t2 = {};\n            _context.next = 28;\n            return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n          case 28:\n            _context.t3 = _context.sent;\n            _context.t4 = {\n              myProfileId: _context.t3\n            };\n            fakeChannel = (0, _context.t0)(_context.t1, _context.t2, _context.t4);\n            _context.next = 33;\n            return _regeneratorRuntime.awrap(fakeChannel.api.upload({\n              channelId: fakeChannel.id,\n              data: encrypted,\n              dataId: fakeChannel.myProfileId\n            }));\n\n          case 33:\n            _context.next = 38;\n            break;\n\n          case 35:\n            _context.prev = 35;\n            _context.t5 = _context[\"catch\"](0);\n            _context.t5 instanceof Error ? console.log(_context.t5.message) : console.log(_context.t5);\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 35]], Promise);\n  };\n};\nexport var connectWithOtherFakeConnections = function connectWithOtherFakeConnections(id, api, level) {\n  return function _callee2(dispatch, getState) {\n    var fakeUser1, otherFakeUsers, _iterator, _step, otherUser, ops, _iterator2, _step2, op;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fakeUser1 = selectConnectionById(getState(), id);\n\n            if (fakeUser1) {\n              _context2.next = 4;\n              break;\n            }\n\n            console.log(\"Failed to get fake connection id \" + id);\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            if (fakeUser1.secretKey) {\n              _context2.next = 7;\n              break;\n            }\n\n            console.log(\"Fake connection \" + id + \" does not have a secretKey!\");\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            otherFakeUsers = selectOtherFakeConnections(getState(), id);\n            console.log(\"Connecting \" + id + \" with \" + otherFakeUsers.length + \" fake connections as \" + connectionLevelStrings[level]);\n            _iterator = _createForOfIteratorHelperLoose(otherFakeUsers);\n\n          case 10:\n            if ((_step = _iterator()).done) {\n              _context2.next = 18;\n              break;\n            }\n\n            otherUser = _step.value;\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(connectFakeUsers({\n              id: fakeUser1.id,\n              secretKey: fakeUser1.secretKey\n            }, {\n              id: otherUser.id,\n              secretKey: otherUser.secretKey\n            }, api, level));\n\n          case 14:\n            ops = _context2.sent;\n\n            for (_iterator2 = _createForOfIteratorHelperLoose(ops); !(_step2 = _iterator2()).done;) {\n              op = _step2.value;\n              dispatch(addOperation(op));\n            }\n\n          case 16:\n            _context2.next = 10;\n            break;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var joinAllGroups = function joinAllGroups(id, api) {\n  return function _callee3(dispatch, getState) {\n    var fakeUser, groups, _iterator3, _step3, group, op;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fakeUser = selectConnectionById(getState(), id);\n\n            if (fakeUser) {\n              _context3.next = 4;\n              break;\n            }\n\n            console.log(\"Failed to get fake connection id \" + id);\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            if (fakeUser.secretKey) {\n              _context3.next = 7;\n              break;\n            }\n\n            console.log(\"Fake connection \" + id + \" does not have a secretKey!\");\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            groups = getState().groups.groups;\n            _iterator3 = _createForOfIteratorHelperLoose(groups);\n\n          case 9:\n            if ((_step3 = _iterator3()).done) {\n              _context3.next = 17;\n              break;\n            }\n\n            group = _step3.value;\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(api.joinGroup(group.id, {\n              id: id,\n              secretKey: fakeUser.secretKey\n            }));\n\n          case 13:\n            op = _context3.sent;\n            dispatch(addOperation(op));\n\n          case 15:\n            _context3.next = 9;\n            break;\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var reconnectFakeConnection = function reconnectFakeConnection(id, changeProfile) {\n  return function _callee4(dispatch, getState) {\n    var fakeUser1, channel, photo, name, photoResponse, _names$Math$floor2, firstName, lastName, dataObj, encrypted, fakeChannel;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            fakeUser1 = selectConnectionById(getState(), id);\n\n            if (fakeUser1) {\n              _context4.next = 4;\n              break;\n            }\n\n            console.log(\"Failed to get fake connection id \" + id);\n            return _context4.abrupt(\"return\");\n\n          case 4:\n            if (fakeUser1.secretKey) {\n              _context4.next = 7;\n              break;\n            }\n\n            console.log(\"Fake connection \" + id + \" does not have a secretKey!\");\n            return _context4.abrupt(\"return\");\n\n          case 7:\n            channel = selectChannelById(getState(), getState().channels.myChannelIds[getState().channels.displayChannelType]);\n\n            if (channel) {\n              _context4.next = 11;\n              break;\n            }\n\n            Alert.alert('Error', 'No open channel. Go to MyCodeScreen before attempting fake reconnect to have an open channel.');\n            return _context4.abrupt(\"return\");\n\n          case 11:\n            if (!changeProfile) {\n              _context4.next = 25;\n              break;\n            }\n\n            _context4.next = 14;\n            return _regeneratorRuntime.awrap(RNFetchBlob.fetch('GET', 'https://loremflickr.com/180/180', {}));\n\n          case 14:\n            photoResponse = _context4.sent;\n\n            if (!(photoResponse.info().status === 200)) {\n              _context4.next = 19;\n              break;\n            }\n\n            photo = \"data:image/jpeg;base64,\" + String(photoResponse.base64());\n            _context4.next = 21;\n            break;\n\n          case 19:\n            Alert.alert('Error', 'Unable to fetch image');\n            return _context4.abrupt(\"return\");\n\n          case 21:\n            _names$Math$floor2 = names[Math.floor(Math.random() * (names.length - 1))], firstName = _names$Math$floor2.firstName, lastName = _names$Math$floor2.lastName;\n            name = firstName + \" \" + lastName;\n            _context4.next = 29;\n            break;\n\n          case 25:\n            name = fakeUser1.name;\n            _context4.next = 28;\n            return _regeneratorRuntime.awrap(retrieveImage(fakeUser1.photo.filename));\n\n          case 28:\n            photo = _context4.sent;\n\n          case 29:\n            dataObj = {\n              id: id,\n              photo: photo,\n              name: name,\n              profileTimestamp: Date.now(),\n              secretKey: fakeUser1.secretKey,\n              notificationToken: null,\n              version: PROFILE_VERSION\n            };\n            encrypted = encryptData(dataObj, channel.aesKey);\n            _context4.t0 = _objectSpread;\n            _context4.t1 = _objectSpread({}, channel);\n            _context4.t2 = {};\n            _context4.next = 36;\n            return _regeneratorRuntime.awrap(urlSafeRandomKey(9));\n\n          case 36:\n            _context4.t3 = _context4.sent;\n            _context4.t4 = {\n              myProfileId: _context4.t3\n            };\n            fakeChannel = (0, _context4.t0)(_context4.t1, _context4.t2, _context4.t4);\n            _context4.next = 41;\n            return _regeneratorRuntime.awrap(fakeChannel.api.upload({\n              channelId: fakeChannel.id,\n              data: encrypted,\n              dataId: fakeChannel.myProfileId\n            }));\n\n          case 41:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/fakeContact.ts"],"names":["selectOtherFakeConnections","createSelector","connections","c","addFakeConnection","console","publicKey","secretKey","nacl","b64PubKey","uInt8ArrayToB64","connectId","b64ToUrlSafeB64","firstName","lastName","names","Math","name","photoResponse","RNFetchBlob","photo","String","Alert","channel","selectChannelById","getState","dataObj","id","profileTimestamp","Date","notificationToken","version","encrypted","encryptData","fakeChannel","myProfileId","urlSafeRandomKey","channelId","data","dataId","connectWithOtherFakeConnections","fakeUser1","selectConnectionById","otherFakeUsers","connectionLevelStrings","otherUser","ops","connectFakeUsers","op","dispatch","addOperation","joinAllGroups","fakeUser","groups","group","api","reconnectFakeConnection","retrieveImage"],"mappings":"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","sourcesContent":["import nacl from 'tweetnacl';\nimport RNFetchBlob from 'rn-fetch-blob';\nimport { Alert } from 'react-native';\nimport { createSelector } from '@reduxjs/toolkit';\nimport {\n  uInt8ArrayToB64,\n  b64ToUrlSafeB64,\n  urlSafeRandomKey,\n} from '@/utils/encoding';\nimport { encryptData } from '@/utils/cryptoHelper';\nimport { selectChannelById } from '@/components/PendingConnections/channelSlice';\nimport {\n  selectConnectionById,\n  selectAllConnections,\n} from '@/reducer/connectionsSlice';\nimport { names } from '@/utils/fakeNames';\nimport { connectFakeUsers } from '@/utils/fakeHelper';\nimport { retrieveImage } from '@/utils/filesystem';\nimport { PROFILE_VERSION } from '@/utils/constants';\nimport { addOperation } from '@/reducer/operationsSlice';\nimport { NodeApi } from '@/api/brightId';\nimport { connectionLevelStrings } from '@/utils/connectionLevelStrings';\n\n/** SELECTORS */\n\nexport const selectOtherFakeConnections = createSelector(\n  selectAllConnections,\n  (_: State, id: string) => id,\n  (connections, id) => connections.filter((c) => c.secretKey && c.id !== id),\n);\n\nexport const addFakeConnection =\n  () => async (dispatch: dispatch, getState: getState) => {\n    try {\n      // create a fake user\n      console.log('creating fake user');\n      const { publicKey, secretKey } = await nacl.sign.keyPair();\n      const b64PubKey = uInt8ArrayToB64(publicKey);\n      const connectId = b64ToUrlSafeB64(b64PubKey);\n      const { firstName, lastName } =\n        names[Math.floor(Math.random() * (names.length - 1))];\n      const name = `${firstName} ${lastName}`;\n\n      // load random photo\n      let photo;\n      const photoResponse = await RNFetchBlob.fetch(\n        'GET',\n        'https://loremflickr.com/180/180',\n        {},\n      );\n      if (photoResponse.info().status === 200) {\n        photo = `data:image/jpeg;base64,${String(photoResponse.base64())}`;\n      } else {\n        Alert.alert('Error', 'Unable to fetch image');\n        return;\n      }\n\n      const channel = selectChannelById(\n        getState(),\n        getState().channels.myChannelIds[\n          getState().channels.displayChannelType\n        ],\n      );\n\n      const dataObj: SharedProfile = {\n        id: connectId,\n        photo,\n        name,\n        profileTimestamp: Date.now(),\n        secretKey: uInt8ArrayToB64(secretKey),\n        notificationToken: null,\n        version: PROFILE_VERSION,\n      };\n\n      const encrypted = encryptData(dataObj, channel.aesKey);\n      const fakeChannel = {\n        ...channel,\n        myProfileId: await urlSafeRandomKey(9),\n      };\n\n      await fakeChannel.api.upload({\n        channelId: fakeChannel.id,\n        data: encrypted,\n        dataId: fakeChannel.myProfileId,\n      });\n    } catch (err) {\n      err instanceof Error ? console.log(err.message) : console.log(err);\n    }\n  };\n\nexport const connectWithOtherFakeConnections =\n  (id: string, api: NodeApi, level: ConnectionLevel) =>\n  async (dispatch: dispatch, getState: getState) => {\n    // get fakeUser by ID\n    const fakeUser1 = selectConnectionById(getState(), id);\n\n    if (!fakeUser1) {\n      console.log(`Failed to get fake connection id ${id}`);\n      return;\n    }\n    if (!fakeUser1.secretKey) {\n      console.log(`Fake connection ${id} does not have a secretKey!`);\n      return;\n    }\n\n    // get all other fakeUser that we should connect to\n    const otherFakeUsers = selectOtherFakeConnections(getState(), id);\n\n    console.log(\n      `Connecting ${id} with ${otherFakeUsers.length} fake connections as ${connectionLevelStrings[level]}`,\n    );\n    for (const otherUser of otherFakeUsers) {\n      const ops = await connectFakeUsers(\n        { id: fakeUser1.id, secretKey: fakeUser1.secretKey },\n        { id: otherUser.id, secretKey: otherUser.secretKey },\n        api,\n        level,\n      );\n      for (const op of ops) {\n        dispatch(addOperation(op));\n      }\n    }\n  };\n\nexport const joinAllGroups =\n  (id: string, api: NodeApi) =>\n  async (dispatch: dispatch, getState: getState) => {\n    // get fakeUser by ID\n    const fakeUser = selectConnectionById(getState(), id);\n\n    if (!fakeUser) {\n      console.log(`Failed to get fake connection id ${id}`);\n      return;\n    }\n    if (!fakeUser.secretKey) {\n      console.log(`Fake connection ${id} does not have a secretKey!`);\n      return;\n    }\n\n    // join all groups\n    const { groups } = getState().groups;\n    for (const group of groups) {\n      const op = await api.joinGroup(group.id, {\n        id,\n        secretKey: fakeUser.secretKey,\n      });\n      dispatch(addOperation(op));\n    }\n  };\n\nexport const reconnectFakeConnection =\n  (id: string, changeProfile: boolean) =>\n  async (dispatch: dispatch, getState: getState) => {\n    // get fakeUser by ID\n    const fakeUser1 = selectConnectionById(getState(), id);\n\n    if (!fakeUser1) {\n      console.log(`Failed to get fake connection id ${id}`);\n      return;\n    }\n    if (!fakeUser1.secretKey) {\n      console.log(`Fake connection ${id} does not have a secretKey!`);\n      return;\n    }\n    const channel = selectChannelById(\n      getState(),\n      getState().channels.myChannelIds[getState().channels.displayChannelType],\n    );\n    if (!channel) {\n      Alert.alert(\n        'Error',\n        'No open channel. Go to MyCodeScreen before attempting fake reconnect to have an open channel.',\n      );\n      return;\n    }\n\n    let photo, name;\n    if (changeProfile) {\n      // load a new random photo\n      const photoResponse = await RNFetchBlob.fetch(\n        'GET',\n        'https://loremflickr.com/180/180',\n        {},\n      );\n      if (photoResponse.info().status === 200) {\n        photo = `data:image/jpeg;base64,${String(photoResponse.base64())}`;\n      } else {\n        Alert.alert('Error', 'Unable to fetch image');\n        return;\n      }\n      // create new name\n      const { firstName, lastName } =\n        names[Math.floor(Math.random() * (names.length - 1))];\n      name = `${firstName} ${lastName}`;\n    } else {\n      // use existing photo and name\n      name = fakeUser1.name;\n      // retrieve photo\n      photo = await retrieveImage(fakeUser1.photo.filename);\n    }\n\n    const dataObj = {\n      id,\n      photo,\n      name,\n      profileTimestamp: Date.now(),\n      secretKey: fakeUser1.secretKey,\n      notificationToken: null,\n      version: PROFILE_VERSION,\n    };\n\n    const encrypted = encryptData(dataObj, channel.aesKey);\n    const fakeChannel = { ...channel, myProfileId: await urlSafeRandomKey(9) };\n\n    await fakeChannel.api.upload({\n      channelId: fakeChannel.id,\n      data: encrypted,\n      dataId: fakeChannel.myProfileId,\n    });\n  };\n"]},"metadata":{},"sourceType":"module"}