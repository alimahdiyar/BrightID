{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport B64 from 'base64-js';\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js';\nimport { compose } from 'ramda';\nexport function uInt8ArrayToB64(array) {\n  return B64.fromByteArray(array);\n}\nexport function b64ToUint8Array(str) {\n  var arr = B64.toByteArray(str);\n\n  if (arr.join) {\n    return arr;\n  }\n\n  var plainArray = Object.values(arr);\n  arr = new Uint8Array(arr);\n\n  if (arr.join) {\n    return arr;\n  }\n\n  return plainArray;\n}\nexport function strToUint8Array(str) {\n  return new Uint8Array(Buffer.from(str, 'ascii'));\n}\nexport var objValues = function objValues(obj) {\n  return Object.values(obj).map(parseFloat);\n};\nexport var objToUint8 = function objToUint8(obj) {\n  return new Uint8Array(objValues(obj));\n};\nexport function b64ToUrlSafeB64(s) {\n  var alts = {\n    '/': '_',\n    '+': '-',\n    '=': ''\n  };\n  return s.replace(/[/+=]/g, function (c) {\n    return alts[c];\n  });\n}\nexport var objToB64 = compose(uInt8ArrayToB64, objToUint8);\nexport var hash = function hash(data) {\n  var h = CryptoJS.SHA256(data);\n  var b = h.toString(CryptoJS.enc.Base64);\n  return b64ToUrlSafeB64(b);\n};\nvar RNRandomBytes = NativeModules.RNRandomBytes;\nexport var randomKey = function randomKey(size) {\n  return new Promise(function (resolve, reject) {\n    RNRandomBytes.randomBytes(size, function (err, bytes) {\n      err ? reject(err) : resolve(bytes);\n    });\n  });\n};\nexport var urlSafeRandomKey = function _callee() {\n  var size,\n      key,\n      _args = arguments;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          size = _args.length > 0 && _args[0] !== undefined ? _args[0] : 9;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(randomKey(size));\n\n        case 3:\n          key = _context.sent;\n          return _context.abrupt(\"return\", b64ToUrlSafeB64(key));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/encoding.ts"],"names":["B64","arr","plainArray","Object","Buffer","objValues","objToUint8","alts","s","objToB64","compose","hash","h","CryptoJS","b","b64ToUrlSafeB64","RNRandomBytes","NativeModules","randomKey","err","reject","resolve","urlSafeRandomKey","size","key"],"mappings":"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","sourcesContent":["import { NativeModules } from 'react-native';\nimport B64 from 'base64-js';\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js';\nimport { compose } from 'ramda';\n\n/**\n *\n * @param {Uint8Array} array\n * @returns {string}\n */\nexport function uInt8ArrayToB64(array) {\n  return B64.fromByteArray(array);\n}\n\n/**\n *\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport function b64ToUint8Array(str: string): Uint8Array {\n  // B64.toByteArray might return a Uint8Array, an Array or an Object depending on the platform.\n  // Wrap it in Object.values and new Uint8Array to make sure it's a Uint8Array.\n  let arr = B64.toByteArray(str);\n  if (arr.join) {\n    return arr;\n  }\n  const plainArray = Object.values(arr);\n  arr = new Uint8Array(arr);\n  if (arr.join) {\n    return arr;\n  }\n  // TODO Fix this code to solve below typescript error about returning Array<number>\n  // instead of UInt8Array. I don't think it makes sense to return a number array here anyway\n  // @ts-ignore\n  return plainArray;\n}\n\n/**\n *\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport function strToUint8Array(str) {\n  return new Uint8Array(Buffer.from(str, 'ascii'));\n}\n\n/**\n *\n * @param {Uint8Obj} obj\n * @returns {number[]}\n */\nexport const objValues = (obj) => Object.values(obj).map(parseFloat);\n\n/**\n *\n * @param {Uint8Obj} obj\n * @returns {Uint8Array}\n */\nexport const objToUint8 = (obj) => new Uint8Array(objValues(obj));\n\n/**\n *\n * @param {string} s\n * @returns\n */\nexport function b64ToUrlSafeB64(s) {\n  const alts = {\n    '/': '_',\n    '+': '-',\n    '=': '',\n  };\n  return s.replace(/[/+=]/g, (c) => alts[c]);\n}\n\nexport const objToB64 = compose(uInt8ArrayToB64, objToUint8);\n\n/**\n *\n * @param {string} data\n * @returns\n */\nexport const hash = (data) => {\n  const h = CryptoJS.SHA256(data);\n  const b = h.toString(CryptoJS.enc.Base64);\n  return b64ToUrlSafeB64(b);\n};\n\nconst { RNRandomBytes } = NativeModules;\n/**\n *\n * @param {number} size\n * @returns\n */\nexport const randomKey = (size: number) =>\n  new Promise<string>((resolve, reject) => {\n    RNRandomBytes.randomBytes(size, (err, bytes) => {\n      err ? reject(err) : resolve(bytes);\n    });\n  });\n\nexport const urlSafeRandomKey = async (size: number = 9) => {\n  const key = await randomKey(size);\n  return b64ToUrlSafeB64(key);\n};\n"]},"metadata":{},"sourceType":"module"}