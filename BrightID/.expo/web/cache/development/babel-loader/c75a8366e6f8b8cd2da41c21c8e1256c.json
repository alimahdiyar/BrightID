{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { useTranslation } from 'react-i18next';\nimport BlurWidget from '@/components/BlurWidget/BlurWidget.web';\nimport { useNavigation } from '@react-navigation/native';\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from \"../../utils/constants\";\nimport { BLACK, WHITE, GREEN } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { addOperation, firstRecoveryTimeSelector, setConnectionLevel, setFirstRecoveryTime } from \"../../actions\";\nimport { selectConnectionById } from \"../../reducer/connectionsSlice\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport TrustlevelSlider from \"./TrustlevelSlider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TrustlevelModal = function TrustlevelModal(_ref) {\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var connectionId = route.params.connectionId;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      myId = _useSelector.id;\n\n  var firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  var connection = useSelector(function (state) {\n    return selectConnectionById(state, connectionId);\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(connection ? connection.level : connection_levels.JUST_MET),\n      _useState2 = _slicedToArray(_useState, 2),\n      level = _useState2[0],\n      setLevel = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n\n  var goBack = function goBack() {\n    navigation.goBack();\n  };\n\n  var saveLevelHandler = function _callee() {\n    var op, _op;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(connection.level !== level)) {\n              _context.next = 14;\n              break;\n            }\n\n            console.log(\"Setting connection level '\" + level + \"' for \" + connection.name);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(api.addConnection(myId, connection.id, level, Date.now()));\n\n          case 4:\n            op = _context.sent;\n            dispatch(addOperation(op));\n            dispatch(setConnectionLevel({\n              id: connection.id,\n              level: level\n            }));\n\n            if (!__DEV__) {\n              _context.next = 13;\n              break;\n            }\n\n            if (!connection.secretKey) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(api.addConnection(connection.id, myId, level, Date.now(), null, null, {\n              id: connection.id,\n              secretKey: connection.secretKey\n            }));\n\n          case 11:\n            _op = _context.sent;\n            dispatch(addOperation(_op));\n\n          case 13:\n            if (!firstRecoveryTime && level === connection_levels.RECOVERY) {\n              dispatch(setFirstRecoveryTime(Date.now()));\n            }\n\n          case 14:\n            goBack();\n\n            if ((level === connection_levels.RECOVERY || connection.level === connection_levels.RECOVERY) && firstRecoveryTime && Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION) {\n              navigation.navigate('RecoveryCooldownInfo');\n            }\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!connection) {\n    console.log(\"ConnectionID \" + connectionId + \" not found!\");\n    goBack();\n    return null;\n  }\n\n  var changeLevelHandler = function changeLevelHandler(newLevel) {\n    setLevel(newLevel);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BlurView, {\n      style: styles.blurView,\n      blurType: \"dark\",\n      blurAmount: 5,\n      reducedTransparencyFallbackColor: BLACK\n    }), _jsx(TouchableWithoutFeedback, {\n      onPress: goBack,\n      children: _jsx(View, {\n        style: styles.blurView\n      })\n    }), _jsxs(View, {\n      style: styles.modalContainer,\n      children: [_jsx(View, {\n        style: styles.header,\n        children: _jsx(Text, {\n          style: styles.headerText,\n          children: t('connectionDetails.text.level', {\n            name: connection.name\n          })\n        })\n      }), _jsx(TrustlevelSlider, {\n        incomingLevel: connection.incomingLevel,\n        currentLevel: level,\n        changeLevelHandler: changeLevelHandler,\n        verbose: true\n      }), _jsx(TouchableOpacity, {\n        testID: \"SaveLevelBtn\",\n        style: styles.confirmButton,\n        onPress: saveLevelHandler,\n        children: _jsx(Text, {\n          style: styles.confirmButtonText,\n          children: t('connectionDetails.button.levelSave')\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  blurView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  },\n  modalContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: WHITE,\n    width: '90%',\n    borderRadius: 25,\n    padding: DEVICE_LARGE ? 30 : 25\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: DEVICE_LARGE ? 22 : 20\n  },\n  headerText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[19],\n    textAlign: 'center'\n  },\n  confirmButton: {\n    width: '90%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: GREEN,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20\n  },\n  confirmButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[17]\n  }\n});\nexport default TrustlevelModal;","map":{"version":3,"names":["React","useContext","useState","useTranslation","BlurView","useNavigation","connection_levels","RECOVERY_COOLDOWN_EXEMPTION","BLACK","WHITE","GREEN","DEVICE_LARGE","fontSize","useDispatch","useSelector","addOperation","firstRecoveryTimeSelector","setConnectionLevel","setFirstRecoveryTime","selectConnectionById","NodeApiContext","TrustlevelSlider","TrustlevelModal","route","navigation","connectionId","params","state","user","myId","id","firstRecoveryTime","connection","dispatch","level","JUST_MET","setLevel","t","api","goBack","saveLevelHandler","console","log","name","addConnection","Date","now","op","__DEV__","secretKey","RECOVERY","navigate","changeLevelHandler","newLevel","styles","container","blurView","modalContainer","header","headerText","incomingLevel","confirmButton","confirmButtonText","StyleSheet","create","flex","flexDirection","alignItems","justifyContent","position","left","right","top","bottom","backgroundColor","width","borderRadius","padding","marginTop","marginBottom","fontFamily","textAlign","paddingTop","paddingBottom"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustlevelModal.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport BlurWidget from '@/components/BlurWidget/BlurWidget.web';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { BLACK, WHITE, GREEN } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  addOperation,\n  firstRecoveryTimeSelector,\n  setConnectionLevel,\n  setFirstRecoveryTime,\n} from '@/actions';\nimport { selectConnectionById } from '@/reducer/connectionsSlice';\nimport { NodeApiContext } from '@/components/NodeApiGate';\n\nimport TrustlevelSlider from './TrustlevelSlider';\n\ntype props = StackScreenProps<ModalStackParamList, 'SetTrustlevel'>;\n\nconst TrustlevelModal = ({ route }: props) => {\n  const navigation = useNavigation();\n  const { connectionId } = route.params;\n  const { id: myId } = useSelector((state: State) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  const connection: Connection = useSelector((state: State) =>\n    selectConnectionById(state, connectionId),\n  );\n  const dispatch = useDispatch();\n  const [level, setLevel] = useState(\n    connection ? connection.level : connection_levels.JUST_MET,\n  );\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const goBack = () => {\n    navigation.goBack();\n    // navigation.navigate('Connection', { connectionId });\n  };\n\n  const saveLevelHandler = async () => {\n    if (connection.level !== level) {\n      console.log(`Setting connection level '${level}' for ${connection.name}`);\n      const op = await api.addConnection(\n        myId,\n        connection.id,\n        level,\n        Date.now(),\n      );\n      dispatch(addOperation(op));\n      dispatch(setConnectionLevel({ id: connection.id, level }));\n\n      if (__DEV__) {\n        // if peer is a fake connection also submit opposite addConnection operation\n        if (connection.secretKey) {\n          const op = await api.addConnection(\n            connection.id,\n            myId,\n            level,\n            Date.now(),\n            null,\n            null,\n            {\n              id: connection.id,\n              secretKey: connection.secretKey,\n            },\n          );\n          dispatch(addOperation(op));\n        }\n      }\n\n      if (!firstRecoveryTime && level === connection_levels.RECOVERY) {\n        // First ever recovery connection. Set firstRecoveryTime accordingly.\n        dispatch(setFirstRecoveryTime(Date.now()));\n      }\n    }\n    // close modal\n    goBack();\n    if (\n      (level === connection_levels.RECOVERY ||\n        connection.level === connection_levels.RECOVERY) &&\n      firstRecoveryTime &&\n      Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n    ) {\n      // show info about cooldown period\n      navigation.navigate('RecoveryCooldownInfo');\n    }\n  };\n\n  // go back silently if connection does not exist. Should never happen.\n  if (!connection) {\n    console.log(`ConnectionID ${connectionId} not found!`);\n    goBack();\n    return null;\n  }\n\n  const changeLevelHandler = (newLevel: ConnectionLevel) => {\n    setLevel(newLevel);\n  };\n\n  return (\n    <View style={styles.container}>\n      <BlurView\n        style={styles.blurView}\n        blurType=\"dark\"\n        blurAmount={5}\n        reducedTransparencyFallbackColor={BLACK}\n      />\n      <TouchableWithoutFeedback onPress={goBack}>\n        <View style={styles.blurView} />\n      </TouchableWithoutFeedback>\n      <View style={styles.modalContainer}>\n        <View style={styles.header}>\n          <Text style={styles.headerText}>\n            {t('connectionDetails.text.level', { name: connection.name })}\n          </Text>\n        </View>\n        <TrustlevelSlider\n          incomingLevel={connection.incomingLevel}\n          currentLevel={level}\n          changeLevelHandler={changeLevelHandler}\n          verbose={true}\n        />\n        <TouchableOpacity\n          testID=\"SaveLevelBtn\"\n          style={styles.confirmButton}\n          onPress={saveLevelHandler}\n        >\n          <Text style={styles.confirmButtonText}>\n            {t('connectionDetails.button.levelSave')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  blurView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  modalContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: WHITE,\n    width: '90%',\n    borderRadius: 25,\n    padding: DEVICE_LARGE ? 30 : 25,\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: DEVICE_LARGE ? 22 : 20,\n  },\n  headerText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[19],\n    textAlign: 'center',\n  },\n  confirmButton: {\n    width: '90%',\n    paddingTop: 8,\n    paddingBottom: 8,\n    backgroundColor: GREEN,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n  },\n  confirmButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[17],\n  },\n});\n\nexport default TrustlevelModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}