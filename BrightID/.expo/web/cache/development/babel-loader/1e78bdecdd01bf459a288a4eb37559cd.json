{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar packageJson = require(\"./package.json\");\n\nmodule.exports = {\n  request: function request(verb, url, requestBody, callback) {\n    return function _callee() {\n      var headers, response, statusCode, body;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (typeof requestBody === \"function\") {\n                callback = requestBody;\n                requestBody = null;\n              }\n\n              headers = {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-CodePush-Plugin-Name\": packageJson.name,\n                \"X-CodePush-Plugin-Version\": packageJson.version,\n                \"X-CodePush-SDK-Version\": packageJson.dependencies[\"code-push\"]\n              };\n\n              if (requestBody && typeof requestBody === \"object\") {\n                requestBody = JSON.stringify(requestBody);\n              }\n\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url, {\n                method: getHttpMethodName(verb),\n                headers: headers,\n                body: requestBody\n              }));\n\n            case 6:\n              response = _context.sent;\n              statusCode = response.status;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(response.text());\n\n            case 10:\n              body = _context.sent;\n              callback(null, {\n                statusCode: statusCode,\n                body: body\n              });\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](3);\n              callback(_context.t0);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 14]], Promise);\n    }();\n  }\n};\n\nfunction getHttpMethodName(verb) {\n  return [\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"TRACE\", \"OPTIONS\", \"CONNECT\", \"PATCH\"][verb];\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-code-push/request-fetch-adapter.js"],"names":["packageJson","require","module","request","callback","requestBody","headers","JSON","response","fetch","method","getHttpMethodName","body","statusCode"],"mappings":";;AAAA,IAAMA,WAAW,GAAGC,OAApB,kBAAA;;AAEAC,MAAM,CAANA,OAAAA,GAAiB;EACTC,OADS,EAAA,SAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,WAAA,EAAA,QAAA,EACiC;IAAA,OAAA,SAAA,OAAA,GAAA;MAAA,IAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,IAAA;MAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAC9C,IAAI,OAAA,WAAA,KAAJ,UAAA,EAAuC;gBACrCC,QAAQ,GAARA,WAAAA;gBACAC,WAAW,GAAXA,IAAAA;cAGIC;;cAAAA,OANwC,GAM9B;gBACd,UADc,kBAAA;gBAEd,gBAFc,kBAAA;gBAGd,0BAA0BN,WAAW,CAHvB,IAAA;gBAId,6BAA6BA,WAAW,CAJ1B,OAAA;gBAKd,0BAA0BA,WAAW,CAAXA,YAAAA,CAXkB,WAWlBA;cALZ,CAAVM;;cAQN,IAAID,WAAW,IAAI,OAAA,WAAA,KAAnB,QAAA,EAAoD;gBAClDA,WAAW,GAAGE,IAAI,CAAJA,SAAAA,CAAdF,WAAcE,CAAdF;cAf4C;;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA,OAAA,mBAAA,CAAA,KAAA,CAmBrBI,KAAK,CAAA,GAAA,EAAM;gBAChCC,MAAM,EAAEC,iBAAiB,CADO,IACP,CADO;gBAEhCL,OAAO,EAFyB,OAAA;gBAGhCM,IAAI,EAtBsC;cAmBV,CAAN,CAnBgB,CAAA;;YAAA,KAAA,CAAA;cAmBtCJ,QAnBsC,GAAA,QAAA,CAAA,IAmBtCA;cAMAK,UAzBsC,GAyBzBL,QAAQ,CAzBiB,MAyBtCK;cAzBsC,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA,OAAA,mBAAA,CAAA,KAAA,CA0BzBL,QAAQ,CA1BiB,IA0BzBA,EA1ByB,CAAA;;YAAA,KAAA,EAAA;cA0BtCI,IA1BsC,GAAA,QAAA,CAAA,IA0BtCA;cACNR,QAAQ,CAAA,IAAA,EAAO;gBAAES,UAAU,EAAZ,UAAA;gBAAcD,IAAI,EAAjCR;cAAe,CAAP,CAARA;cA3B4C,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;;YAAA,KAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;cA6B5CA,QAAQ,CAAA,QAAA,CAARA,EAAQ,CAARA;;YA7B4C,KAAA,EAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;IAAA,CAAA,EAAA;EADlDF;AAAiB,CAAjBA;;AAmCA,SAAA,iBAAA,CAAA,IAAA,EAAiC;EAG/B,OAAO,CAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAP,IAAO,CAAP;AAWD","sourcesContent":["const packageJson = require(\"./package.json\");\n\nmodule.exports = {\n  async request(verb, url, requestBody, callback) {\n    if (typeof requestBody === \"function\") {\n      callback = requestBody;\n      requestBody = null;\n    }\n\n    const headers = {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-CodePush-Plugin-Name\": packageJson.name,\n      \"X-CodePush-Plugin-Version\": packageJson.version,\n      \"X-CodePush-SDK-Version\": packageJson.dependencies[\"code-push\"]\n    };\n\n    if (requestBody && typeof requestBody === \"object\") {\n      requestBody = JSON.stringify(requestBody);\n    }\n\n    try {\n      const response = await fetch(url, {\n        method: getHttpMethodName(verb),\n        headers: headers,\n        body: requestBody\n      });\n\n      const statusCode = response.status;\n      const body = await response.text();\n      callback(null, { statusCode, body });\n    } catch (err) {\n      callback(err);\n    }\n  }\n};\n\nfunction getHttpMethodName(verb) {\n  // Note: This should stay in sync with the enum definition in\n  // https://github.com/microsoft/code-push/blob/master/sdk/script/acquisition-sdk.ts#L6\n  return [\n    \"GET\",\n    \"HEAD\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"TRACE\",\n    \"OPTIONS\",\n    \"CONNECT\",\n    \"PATCH\"\n  ][verb];\n}"]},"metadata":{},"sourceType":"module"}