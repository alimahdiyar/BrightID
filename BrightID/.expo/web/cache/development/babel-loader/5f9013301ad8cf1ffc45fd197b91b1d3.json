{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n\n  var font = _defineProperty({}, fontName, expoAssetId);\n\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(Font.loadAsync(font));\n\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n          console.warn(\"\\\"\" + this.props.name + \"\\\" is not a valid icon name for family \\\"\" + fontName + \"\\\"\");\n        }\n\n        if (!this.state.fontIsLoaded) {\n          return _jsx(Text, {});\n        }\n\n        return _jsx(RNVIconComponent, _objectSpread({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props));\n      }\n    }]);\n\n    return Icon;\n  }(React.Component), _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":["font","RNVIconComponent","createIconSet","React","_a","createIconButtonComponent","Font","fontIsLoaded","__DEV__","console"],"mappings":"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","sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(\n          `\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`\n        );\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}