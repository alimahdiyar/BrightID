{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useContext, useEffect, useLayoutEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { useTranslation } from 'react-i18next';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport ChannelSwitch from \"../Helpers/ChannelSwitch\";\nimport { DARK_GREY, LIGHT_BLACK, ORANGE, WHITE } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport Camera from \"../Icons/Camera\";\nimport { channel_states, channel_types, closeChannel, selectAllActiveChannelIdsByType, selectChannelById, setDisplayChannelType } from \"./channelSlice\";\nimport { selectAllPendingConnectionsByChannelIds, selectAllUnconfirmedConnectionsByChannelIds } from \"./pendingConnectionSlice\";\nimport { createChannel } from \"./actions/channelThunks\";\nimport { setActiveNotification } from \"../../actions\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { QrCode } from \"./QrCode\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar FakeConnectionBtn = function FakeConnectionBtn() {\n  return null;\n};\n\nvar addFakeConnection = function addFakeConnection() {\n  return null;\n};\n\nif (__DEV__) {\n  addFakeConnection = require(\"../../actions/fakeContact\").addFakeConnection;\n\n  FakeConnectionBtn = function FakeConnectionBtn() {\n    var dispatch = useDispatch();\n    return _jsx(TouchableOpacity, {\n      testID: \"fakeConnectionBtn\",\n      style: {\n        marginRight: 11\n      },\n      onPress: function onPress() {\n        dispatch(addFakeConnection());\n      },\n      children: _jsx(Material, {\n        name: \"ghost\",\n        size: 32,\n        color: WHITE\n      })\n    });\n  };\n}\n\nvar PENDING_GROUP_TIMEOUT = 45000;\nexport var MyCodeScreen = function MyCodeScreen() {\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      channelErr = _useState2[0],\n      setChannelErr = _useState2[1];\n\n  var displayChannelType = useSelector(function (state) {\n    return state.channels.displayChannelType;\n  });\n  var myChannel = useSelector(function (state) {\n    return selectChannelById(state, state.channels.myChannelIds[displayChannelType]);\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var activeChannelIds = useSelector(function (state) {\n    return selectAllActiveChannelIdsByType(state, displayChannelType);\n  });\n  console.log('activeChannelIds', activeChannelIds);\n  var pendingConnectionSize = useSelector(function (state) {\n    if (myChannel) {\n      return selectAllPendingConnectionsByChannelIds(state, [myChannel.id]).length;\n    } else {\n      return 0;\n    }\n  });\n  var unconfirmedConnectionSize = useSelector(function (state) {\n    return selectAllUnconfirmedConnectionsByChannelIds(state, activeChannelIds).length;\n  });\n  useFocusEffect(useCallback(function () {\n    if (!navigation.isFocused()) return;\n\n    if ((!myChannel || (myChannel == null ? void 0 : myChannel.state) !== channel_states.OPEN) && channelErr < 3) {\n      InteractionManager.runAfterInteractions(function () {\n        dispatch(createChannel(displayChannelType, api)).catch(function (err) {\n          console.log(\"error creating channel: \" + err.message);\n\n          if (channelErr === 2) {\n            Alert.alert(t('common.alert.error'), t('pendingConnection.alert.text.errorCreateChannel', {\n              message: \"\" + err.message\n            }));\n          }\n\n          setChannelErr(function (c) {\n            return c + 1;\n          });\n        });\n      });\n    }\n\n    dispatch(setActiveNotification(null));\n  }, [navigation, myChannel, channelErr, dispatch, displayChannelType, api, t]));\n  useEffect(function () {\n    var timer;\n\n    if (unconfirmedConnectionSize > 0 && (myChannel == null ? void 0 : myChannel.state) === channel_states.OPEN) {\n      switch (displayChannelType) {\n        case channel_types.SINGLE:\n          navigation.navigate('PendingConnections');\n          dispatch(closeChannel({\n            channelId: myChannel == null ? void 0 : myChannel.id,\n            background: true\n          }));\n          break;\n\n        case channel_types.GROUP:\n        case channel_types.STAR:\n          timer = setTimeout(function () {\n            navigation.navigate('PendingConnections');\n          }, PENDING_GROUP_TIMEOUT);\n          break;\n      }\n    }\n\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [displayChannelType, dispatch, navigation, unconfirmedConnectionSize, myChannel]);\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return unconfirmedConnectionSize > 0 ? _jsxs(TouchableOpacity, {\n          style: {\n            width: DEVICE_LARGE ? 60 : 50\n          },\n          onPress: function onPress() {\n            navigation.navigate('PendingConnections');\n          },\n          children: [_jsx(Material, {\n            name: \"account-supervisor-circle\",\n            size: 32,\n            color: WHITE\n          }), _jsx(View, {\n            style: {\n              backgroundColor: ORANGE,\n              width: 9,\n              height: 9,\n              borderRadius: 5,\n              position: 'absolute',\n              top: 2,\n              left: 21\n            }\n          })]\n        }) : _jsx(FakeConnectionBtn, {});\n      },\n      headerTitle: function headerTitle() {\n        var ConnectionTitle = function ConnectionTitle() {\n          return _jsx(Text, {\n            style: styles.headerTitle,\n            children: t('qrcode.header.connections', {\n              count: pendingConnectionSize + 1\n            })\n          });\n        };\n\n        var group_types = [channel_types.GROUP, channel_types.STAR];\n        return group_types.includes(myChannel == null ? void 0 : myChannel.type) ? __DEV__ ? _jsx(TouchableWithoutFeedback, {\n          onPress: function onPress() {\n            dispatch(addFakeConnection());\n          },\n          children: _jsx(View, {\n            children: _jsx(ConnectionTitle, {})\n          })\n        }) : _jsx(ConnectionTitle, {}) : null;\n      },\n      headerTitleAlign: 'center'\n    });\n  }, [myChannel, dispatch, navigation, pendingConnectionSize, unconfirmedConnectionSize, t]);\n\n  var toggleChannelType = function toggleChannelType() {\n    dispatch(setDisplayChannelType(displayChannelType === channel_types.SINGLE ? channel_types.GROUP : channel_types.SINGLE));\n  };\n\n  var setStarChannelType = function setStarChannelType() {\n    console.log(\"LongPress\");\n    dispatch(setDisplayChannelType(channel_types.STAR));\n  };\n\n  var displayOneToOneInfo = function displayOneToOneInfo() {\n    Alert.alert(t('qrcode.alert.title.codeSingle'), t('qrcode.alert.text.codeSingle'));\n  };\n\n  var displayManyToManyInfo = function displayManyToManyInfo() {\n    Alert.alert(t('qrcode.alert.title.codeGroup'), t('qrcode.alert.text.codeGroup'));\n  };\n\n  var displayOneToManyInfo = function displayOneToManyInfo() {\n    Alert.alert(t('qrcode.alert.title.codeStar', 'Star code'), t('qrcode.alert.text.codeStar', 'This QR code is designed to connect many people with one person.'));\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      testID: \"MyCodeScreen\",\n      children: [_jsx(View, {\n        style: styles.infoTopContainer,\n        children: displayChannelType === channel_types.STAR ? _jsx(TouchableOpacity, {\n          style: styles.starContainer,\n          onPress: toggleChannelType,\n          children: _jsx(Material, {\n            name: \"star\",\n            size: 30,\n            color: WHITE\n          })\n        }) : _jsx(ChannelSwitch, {\n          onValueChange: toggleChannelType,\n          value: displayChannelType === channel_types.SINGLE,\n          onLongPress: setStarChannelType,\n          testID: \"ChannelSwitch\"\n        })\n      }), _jsxs(View, {\n        style: styles.infoTopContainer,\n        children: [_jsxs(Text, {\n          style: styles.infoTopText,\n          children: [t('qrcode.label.connectionType'), ' ']\n        }), displayChannelType === channel_types.GROUP && _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row'\n          },\n          onPress: displayManyToManyInfo,\n          testID: \"ConnectionInfoGroupBtn\",\n          children: [_jsx(Text, {\n            testID: \"group-code\",\n            style: styles.infoTopText,\n            children: t('qrcode.text.codeGroup')\n          }), _jsx(Material, {\n            name: \"information-variant\",\n            size: 18,\n            color: LIGHT_BLACK\n          })]\n        }), displayChannelType === channel_types.SINGLE && _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row'\n          },\n          onPress: displayOneToOneInfo,\n          testID: \"ConnectionInfoSingleBtn\",\n          children: [_jsx(Text, {\n            testID: \"single-use-code\",\n            style: styles.infoTopText,\n            children: t('qrcode.text.codeSingle')\n          }), _jsx(Material, {\n            name: \"information-variant\",\n            size: 18,\n            color: LIGHT_BLACK\n          })]\n        }), displayChannelType === channel_types.STAR && _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row'\n          },\n          onPress: displayOneToManyInfo,\n          testID: \"ConnectionInfoStarBtn\",\n          children: [_jsx(Text, {\n            testID: \"star-code\",\n            style: styles.infoTopText,\n            children: t('qrcode.text.codeStar', 'Star code')\n          }), _jsx(Material, {\n            name: \"information-variant\",\n            size: 18,\n            color: LIGHT_BLACK\n          })]\n        })]\n      }), _jsx(View, {\n        style: {\n          flexGrow: 2\n        },\n        children: _jsx(QrCode, {\n          channel: myChannel\n        })\n      }), _jsxs(View, {\n        style: styles.bottomContainer,\n        children: [_jsx(Text, {\n          style: styles.infoBottomText,\n          children: t('qrcode.text.canAlso')\n        }), _jsxs(TouchableOpacity, {\n          testID: \"MyCodeToScanCodeBtn\",\n          style: styles.scanCodeButton,\n          onPress: function onPress() {\n            navigation.navigate('ScanCode');\n          },\n          children: [_jsx(Camera, {\n            color: WHITE,\n            width: DEVICE_LARGE ? 22 : 20,\n            height: DEVICE_LARGE ? 22 : 20\n          }), _jsx(Text, {\n            style: styles.scanCodeText,\n            children: t('qrcode.button.scanCode')\n          })]\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n    paddingTop: 20\n  },\n  headerTitle: {\n    color: WHITE,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16]\n  },\n  infoTopContainer: {\n    width: '100%',\n    flexGrow: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    textAlign: 'center',\n    color: LIGHT_BLACK\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10\n  },\n  scanCodeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10\n  },\n  scanCodeText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244\n  },\n  starContainer: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY\n  }\n});\nexport default MyCodeScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/MyCodeScreen.tsx"],"names":["FakeConnectionBtn","addFakeConnection","require","dispatch","useDispatch","marginRight","PENDING_GROUP_TIMEOUT","MyCodeScreen","navigation","useNavigation","t","useTranslation","api","useContext","channelErr","setChannelErr","useState","displayChannelType","useSelector","state","myChannel","selectChannelById","b","activeChannelIds","selectAllActiveChannelIdsByType","console","pendingConnectionSize","selectAllPendingConnectionsByChannelIds","unconfirmedConnectionSize","selectAllUnconfirmedConnectionsByChannelIds","useFocusEffect","useCallback","channel_states","InteractionManager","createChannel","err","Alert","message","c","setActiveNotification","useEffect","channel_types","closeChannel","channelId","background","timer","setTimeout","clearTimeout","useLayoutEffect","headerRight","width","DEVICE_LARGE","backgroundColor","height","borderRadius","position","top","left","headerTitle","ConnectionTitle","styles","count","group_types","__DEV__","headerTitleAlign","toggleChannelType","setDisplayChannelType","setStarChannelType","displayOneToOneInfo","displayManyToManyInfo","displayOneToManyInfo","flexDirection","flexGrow","StyleSheet","orangeTop","zIndex","container","flex","alignItems","justifyContent","borderTopLeftRadius","borderTopRightRadius","marginTop","overflow","paddingTop","color","fontFamily","fontSize","infoTopContainer","infoTopText","textAlign","bottomContainer","minHeight","infoBottomText","marginBottom","scanCodeButton","scanCodeText","marginLeft","emptyQr","starContainer","borderColor"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  Alert,\n  InteractionManager,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { useTranslation } from 'react-i18next';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ChannelSwitch from '@/components/Helpers/ChannelSwitch';\nimport { DARK_GREY, LIGHT_BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport Camera from '@/components/Icons/Camera';\nimport {\n  channel_states,\n  channel_types,\n  closeChannel,\n  selectAllActiveChannelIdsByType,\n  selectChannelById,\n  setDisplayChannelType,\n} from '@/components/PendingConnections/channelSlice';\nimport {\n  selectAllPendingConnectionsByChannelIds,\n  selectAllUnconfirmedConnectionsByChannelIds,\n} from '@/components/PendingConnections/pendingConnectionSlice';\n\nimport { createChannel } from '@/components/PendingConnections/actions/channelThunks';\nimport { setActiveNotification } from '@/actions';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { QrCode } from './QrCode';\n\n/**\n * My Code screen of BrightID\n *\n * USERA represents this user\n * ==================================================================\n * displays a qrcode\n *\n */\nlet FakeConnectionBtn = () => null;\nlet addFakeConnection = () => null;\nif (__DEV__) {\n  addFakeConnection = require('@/actions/fakeContact').addFakeConnection;\n\n  FakeConnectionBtn = () => {\n    const dispatch = useDispatch();\n    return (\n      <TouchableOpacity\n        testID=\"fakeConnectionBtn\"\n        style={{ marginRight: 11 }}\n        onPress={() => {\n          dispatch(addFakeConnection());\n        }}\n      >\n        <Material name=\"ghost\" size={32} color={WHITE} />\n      </TouchableOpacity>\n    );\n  };\n}\n\nconst PENDING_GROUP_TIMEOUT = 45000;\n\nexport const MyCodeScreen = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const [channelErr, setChannelErr] = useState(0);\n\n  // GROUP / SINGLE / STAR\n  const displayChannelType = useSelector(\n    (state: State) => state.channels.displayChannelType,\n  );\n  // current channel displayed by QRCode\n  const myChannel = useSelector(\n    (state: State) =>\n      selectChannelById(state, state.channels.myChannelIds[displayChannelType]),\n    (a, b) => a?.id === b?.id,\n  );\n\n  // All channels with current displayChannelType actively polling profile service\n  const activeChannelIds = useSelector((state: State) =>\n    selectAllActiveChannelIdsByType(state, displayChannelType),\n  );\n\n  console.log('activeChannelIds', activeChannelIds);\n\n  // pending connections attached to active channel\n  const pendingConnectionSize = useSelector((state: State) => {\n    if (myChannel) {\n      return selectAllPendingConnectionsByChannelIds(state, [myChannel.id])\n        .length;\n    } else {\n      return 0;\n    }\n  });\n\n  const unconfirmedConnectionSize = useSelector(\n    (state) =>\n      selectAllUnconfirmedConnectionsByChannelIds(state, activeChannelIds)\n        .length,\n  );\n\n  // create channel if none exists\n  useFocusEffect(\n    useCallback(() => {\n      if (!navigation.isFocused()) return;\n      if (\n        (!myChannel || myChannel?.state !== channel_states.OPEN) &&\n        channelErr < 3\n      ) {\n        InteractionManager.runAfterInteractions(() => {\n          dispatch(createChannel(displayChannelType, api)).catch((err) => {\n            console.log(`error creating channel: ${err.message}`);\n            if (channelErr === 2) {\n              Alert.alert(\n                t('common.alert.error'),\n                t('pendingConnection.alert.text.errorCreateChannel', {\n                  message: `${err.message}`,\n                }),\n              );\n            }\n            setChannelErr((c) => c + 1);\n          });\n        });\n      }\n      dispatch(setActiveNotification(null));\n    }, [\n      navigation,\n      myChannel,\n      channelErr,\n      dispatch,\n      displayChannelType,\n      api,\n      t,\n    ]),\n  );\n\n  // Navigate to next screen if QRCode has been scanned\n  useEffect(() => {\n    let timer;\n    if (\n      unconfirmedConnectionSize > 0 &&\n      myChannel?.state === channel_states.OPEN\n    ) {\n      switch (displayChannelType) {\n        case channel_types.SINGLE:\n          // navigate immediately to pending connections\n          navigation.navigate('PendingConnections');\n          // close channel to prevent navigation loop\n          dispatch(\n            closeChannel({ channelId: myChannel?.id, background: true }),\n          );\n          break;\n        case channel_types.GROUP:\n        case channel_types.STAR:\n          timer = setTimeout(() => {\n            navigation.navigate('PendingConnections');\n          }, PENDING_GROUP_TIMEOUT);\n          break;\n      }\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [\n    displayChannelType,\n    dispatch,\n    navigation,\n    unconfirmedConnectionSize,\n    myChannel,\n  ]);\n\n  // dev button\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () =>\n        unconfirmedConnectionSize > 0 ? (\n          <TouchableOpacity\n            style={{ width: DEVICE_LARGE ? 60 : 50 }}\n            onPress={() => {\n              navigation.navigate('PendingConnections');\n            }}\n          >\n            <Material\n              name=\"account-supervisor-circle\"\n              size={32}\n              color={WHITE}\n            />\n\n            <View\n              style={{\n                backgroundColor: ORANGE,\n                width: 9,\n                height: 9,\n                borderRadius: 5,\n                position: 'absolute',\n                top: 2,\n                left: 21,\n              }}\n            />\n          </TouchableOpacity>\n        ) : (\n          <FakeConnectionBtn />\n        ),\n      headerTitle: () => {\n        const ConnectionTitle = () => (\n          <Text style={styles.headerTitle}>\n            {t('qrcode.header.connections', {\n              count: pendingConnectionSize + 1,\n            })}\n          </Text>\n        );\n        const group_types: Array<string> = [\n          channel_types.GROUP,\n          channel_types.STAR,\n        ];\n        return group_types.includes(myChannel?.type) ? (\n          __DEV__ ? (\n            <TouchableWithoutFeedback\n              onPress={() => {\n                dispatch(addFakeConnection());\n              }}\n            >\n              <View>\n                <ConnectionTitle />\n              </View>\n            </TouchableWithoutFeedback>\n          ) : (\n            <ConnectionTitle />\n          )\n        ) : null;\n      },\n      headerTitleAlign: 'center',\n    });\n  }, [\n    myChannel,\n    dispatch,\n    navigation,\n    pendingConnectionSize,\n    unconfirmedConnectionSize,\n    t,\n  ]);\n\n  // when\n  const toggleChannelType = () => {\n    // toggle switch\n    dispatch(\n      setDisplayChannelType(\n        displayChannelType === channel_types.SINGLE\n          ? channel_types.GROUP\n          : channel_types.SINGLE,\n      ),\n    );\n  };\n\n  const setStarChannelType = () => {\n    console.log(`LongPress`);\n    dispatch(setDisplayChannelType(channel_types.STAR));\n  };\n\n  const displayOneToOneInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeSingle'),\n      t('qrcode.alert.text.codeSingle'),\n    );\n  };\n\n  const displayManyToManyInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeGroup'),\n      t('qrcode.alert.text.codeGroup'),\n    );\n  };\n\n  const displayOneToManyInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeStar', 'Star code'),\n      t(\n        'qrcode.alert.text.codeStar',\n        'This QR code is designed to connect many people with one person.',\n      ),\n    );\n  };\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"MyCodeScreen\">\n        <View style={styles.infoTopContainer}>\n          {displayChannelType === channel_types.STAR ? (\n            <TouchableOpacity\n              style={styles.starContainer}\n              onPress={toggleChannelType}\n            >\n              <Material name=\"star\" size={30} color={WHITE} />\n            </TouchableOpacity>\n          ) : (\n            <ChannelSwitch\n              onValueChange={toggleChannelType}\n              value={displayChannelType === channel_types.SINGLE}\n              onLongPress={setStarChannelType}\n              testID=\"ChannelSwitch\"\n            />\n          )}\n        </View>\n        <View style={styles.infoTopContainer}>\n          <Text style={styles.infoTopText}>\n            {t('qrcode.label.connectionType')}{' '}\n          </Text>\n          {displayChannelType === channel_types.GROUP && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayManyToManyInfo}\n              testID=\"ConnectionInfoGroupBtn\"\n            >\n              <Text testID=\"group-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeGroup')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n          {displayChannelType === channel_types.SINGLE && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayOneToOneInfo}\n              testID=\"ConnectionInfoSingleBtn\"\n            >\n              <Text testID=\"single-use-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeSingle')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n          {displayChannelType === channel_types.STAR && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayOneToManyInfo}\n              testID=\"ConnectionInfoStarBtn\"\n            >\n              <Text testID=\"star-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeStar', 'Star code')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n        </View>\n        <View style={{ flexGrow: 2 }}>\n          <QrCode channel={myChannel} />\n        </View>\n\n        <View style={styles.bottomContainer}>\n          <Text style={styles.infoBottomText}>{t('qrcode.text.canAlso')}</Text>\n          <TouchableOpacity\n            testID=\"MyCodeToScanCodeBtn\"\n            style={styles.scanCodeButton}\n            onPress={() => {\n              navigation.navigate('ScanCode');\n            }}\n          >\n            <Camera\n              color={WHITE}\n              width={DEVICE_LARGE ? 22 : 20}\n              height={DEVICE_LARGE ? 22 : 20}\n            />\n            <Text style={styles.scanCodeText}>\n              {t('qrcode.button.scanCode')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n    paddingTop: 20,\n  },\n  headerTitle: {\n    color: WHITE,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n  },\n  infoTopContainer: {\n    width: '100%',\n    flexGrow: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100,\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10,\n  },\n  scanCodeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10,\n  },\n  scanCodeText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10,\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244,\n  },\n  starContainer: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY,\n  },\n});\n\nexport default MyCodeScreen;\n"]},"metadata":{},"sourceType":"module"}