{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport B64 from 'base64-js';\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js';\nimport { compose } from 'ramda';\nexport function uInt8ArrayToB64(array) {\n  return B64.fromByteArray(array);\n}\nexport function b64ToUint8Array(str) {\n  var arr = B64.toByteArray(str);\n\n  if (arr.join) {\n    return arr;\n  }\n\n  var plainArray = Object.values(arr);\n  arr = new Uint8Array(arr);\n\n  if (arr.join) {\n    return arr;\n  }\n\n  return plainArray;\n}\nexport function strToUint8Array(str) {\n  return new Uint8Array(Buffer.from(str, 'ascii'));\n}\nexport var objValues = function objValues(obj) {\n  return Object.values(obj).map(parseFloat);\n};\nexport var objToUint8 = function objToUint8(obj) {\n  return new Uint8Array(objValues(obj));\n};\nexport function b64ToUrlSafeB64(s) {\n  var alts = {\n    '/': '_',\n    '+': '-',\n    '=': ''\n  };\n  return s.replace(/[/+=]/g, function (c) {\n    return alts[c];\n  });\n}\nexport var objToB64 = compose(uInt8ArrayToB64, objToUint8);\nexport var hash = function hash(data) {\n  var h = CryptoJS.SHA256(data);\n  var b = h.toString(CryptoJS.enc.Base64);\n  return b64ToUrlSafeB64(b);\n};\nvar RNRandomBytes = NativeModules.RNRandomBytes;\nexport var randomKey = function randomKey(size) {\n  return new Promise(function (resolve, reject) {\n    RNRandomBytes.randomBytes(size, function (err, bytes) {\n      err ? reject(err) : resolve(bytes);\n    });\n  });\n};\nexport var urlSafeRandomKey = function _callee() {\n  var size,\n      key,\n      _args = arguments;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          size = _args.length > 0 && _args[0] !== undefined ? _args[0] : 9;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(randomKey(size));\n\n        case 3:\n          key = _context.sent;\n          return _context.abrupt(\"return\", b64ToUrlSafeB64(key));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["B64","Buffer","CryptoJS","compose","uInt8ArrayToB64","array","fromByteArray","b64ToUint8Array","str","arr","toByteArray","join","plainArray","Object","values","Uint8Array","strToUint8Array","from","objValues","obj","map","parseFloat","objToUint8","b64ToUrlSafeB64","s","alts","replace","c","objToB64","hash","data","h","SHA256","b","toString","enc","Base64","RNRandomBytes","NativeModules","randomKey","size","Promise","resolve","reject","randomBytes","err","bytes","urlSafeRandomKey","key"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/encoding.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport B64 from 'base64-js';\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js';\nimport { compose } from 'ramda';\n\n/**\n *\n * @param {Uint8Array} array\n * @returns {string}\n */\nexport function uInt8ArrayToB64(array) {\n  return B64.fromByteArray(array);\n}\n\n/**\n *\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport function b64ToUint8Array(str: string): Uint8Array {\n  // B64.toByteArray might return a Uint8Array, an Array or an Object depending on the platform.\n  // Wrap it in Object.values and new Uint8Array to make sure it's a Uint8Array.\n  let arr = B64.toByteArray(str);\n  if (arr.join) {\n    return arr;\n  }\n  const plainArray = Object.values(arr);\n  arr = new Uint8Array(arr);\n  if (arr.join) {\n    return arr;\n  }\n  // TODO Fix this code to solve below typescript error about returning Array<number>\n  // instead of UInt8Array. I don't think it makes sense to return a number array here anyway\n  // @ts-ignore\n  return plainArray;\n}\n\n/**\n *\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport function strToUint8Array(str) {\n  return new Uint8Array(Buffer.from(str, 'ascii'));\n}\n\n/**\n *\n * @param {Uint8Obj} obj\n * @returns {number[]}\n */\nexport const objValues = (obj) => Object.values(obj).map(parseFloat);\n\n/**\n *\n * @param {Uint8Obj} obj\n * @returns {Uint8Array}\n */\nexport const objToUint8 = (obj) => new Uint8Array(objValues(obj));\n\n/**\n *\n * @param {string} s\n * @returns\n */\nexport function b64ToUrlSafeB64(s) {\n  const alts = {\n    '/': '_',\n    '+': '-',\n    '=': '',\n  };\n  return s.replace(/[/+=]/g, (c) => alts[c]);\n}\n\nexport const objToB64 = compose(uInt8ArrayToB64, objToUint8);\n\n/**\n *\n * @param {string} data\n * @returns\n */\nexport const hash = (data) => {\n  const h = CryptoJS.SHA256(data);\n  const b = h.toString(CryptoJS.enc.Base64);\n  return b64ToUrlSafeB64(b);\n};\n\nconst { RNRandomBytes } = NativeModules;\n/**\n *\n * @param {number} size\n * @returns\n */\nexport const randomKey = (size: number) =>\n  new Promise<string>((resolve, reject) => {\n    RNRandomBytes.randomBytes(size, (err, bytes) => {\n      err ? reject(err) : resolve(bytes);\n    });\n  });\n\nexport const urlSafeRandomKey = async (size: number = 9) => {\n  const key = await randomKey(size);\n  return b64ToUrlSafeB64(key);\n};\n"],"mappings":";;AACA,OAAOA,GAAP,MAAgB,WAAhB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAOA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;EACrC,OAAOL,GAAG,CAACM,aAAJ,CAAkBD,KAAlB,CAAP;AACD;AAOD,OAAO,SAASE,eAAT,CAAyBC,GAAzB,EAAkD;EAGvD,IAAIC,GAAG,GAAGT,GAAG,CAACU,WAAJ,CAAgBF,GAAhB,CAAV;;EACA,IAAIC,GAAG,CAACE,IAAR,EAAc;IACZ,OAAOF,GAAP;EACD;;EACD,IAAMG,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcL,GAAd,CAAnB;EACAA,GAAG,GAAG,IAAIM,UAAJ,CAAeN,GAAf,CAAN;;EACA,IAAIA,GAAG,CAACE,IAAR,EAAc;IACZ,OAAOF,GAAP;EACD;;EAID,OAAOG,UAAP;AACD;AAOD,OAAO,SAASI,eAAT,CAAyBR,GAAzB,EAA8B;EACnC,OAAO,IAAIO,UAAJ,CAAed,MAAM,CAACgB,IAAP,CAAYT,GAAZ,EAAiB,OAAjB,CAAf,CAAP;AACD;AAOD,OAAO,IAAMU,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;EAAA,OAASN,MAAM,CAACC,MAAP,CAAcK,GAAd,EAAmBC,GAAnB,CAAuBC,UAAvB,CAAT;AAAA,CAAlB;AAOP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACH,GAAD;EAAA,OAAS,IAAIJ,UAAJ,CAAeG,SAAS,CAACC,GAAD,CAAxB,CAAT;AAAA,CAAnB;AAOP,OAAO,SAASI,eAAT,CAAyBC,CAAzB,EAA4B;EACjC,IAAMC,IAAI,GAAG;IACX,KAAK,GADM;IAEX,KAAK,GAFM;IAGX,KAAK;EAHM,CAAb;EAKA,OAAOD,CAAC,CAACE,OAAF,CAAU,QAAV,EAAoB,UAACC,CAAD;IAAA,OAAOF,IAAI,CAACE,CAAD,CAAX;EAAA,CAApB,CAAP;AACD;AAED,OAAO,IAAMC,QAAQ,GAAGzB,OAAO,CAACC,eAAD,EAAkBkB,UAAlB,CAAxB;AAOP,OAAO,IAAMO,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAU;EAC5B,IAAMC,CAAC,GAAG7B,QAAQ,CAAC8B,MAAT,CAAgBF,IAAhB,CAAV;EACA,IAAMG,CAAC,GAAGF,CAAC,CAACG,QAAF,CAAWhC,QAAQ,CAACiC,GAAT,CAAaC,MAAxB,CAAV;EACA,OAAOb,eAAe,CAACU,CAAD,CAAtB;AACD,CAJM;AAMP,IAAQI,aAAR,GAA0BC,aAA1B,CAAQD,aAAR;AAMA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;EAAA,OACvB,IAAIC,OAAJ,CAAoB,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACvCN,aAAa,CAACO,WAAd,CAA0BJ,IAA1B,EAAgC,UAACK,GAAD,EAAMC,KAAN,EAAgB;MAC9CD,GAAG,GAAGF,MAAM,CAACE,GAAD,CAAT,GAAiBH,OAAO,CAACI,KAAD,CAA3B;IACD,CAFD;EAGD,CAJD,CADuB;AAAA,CAAlB;AAOP,OAAO,IAAMC,gBAAgB,GAAG;EAAA;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAAOP,IAAP,2DAAsB,CAAtB;UAAA;UAAA,iCACZD,SAAS,CAACC,IAAD,CADG;;QAAA;UACxBQ,GADwB;UAAA,iCAEvBzB,eAAe,CAACyB,GAAD,CAFQ;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAzB"},"metadata":{},"sourceType":"module"}