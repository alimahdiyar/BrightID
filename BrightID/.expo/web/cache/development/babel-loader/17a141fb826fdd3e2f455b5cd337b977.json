{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NotificationBanner = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeDropdownalert = _interopRequireDefault(require(\"react-native-dropdownalert\"));\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _store = require(\"../../store\");\n\nvar _NavigationService = require(\"../../NavigationService\");\n\nvar _AddGroup = _interopRequireDefault(require(\"../Icons/AddGroup\"));\n\nvar _AddPerson = _interopRequireDefault(require(\"../Icons/AddPerson\"));\n\nvar _Certificate = _interopRequireDefault(require(\"../Icons/Certificate\"));\n\nvar _PhoneLock = _interopRequireDefault(require(\"../Icons/PhoneLock\"));\n\nvar _actions = require(\"../../actions\");\n\nvar _constants = require(\"../../utils/constants\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _pendingConnectionSlice = require(\"../PendingConnections/pendingConnectionSlice\");\n\nvar _Detox = require(\"../../utils/Detox\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/NotificationBanner.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Icons = {\n  AddGroup: _AddGroup.default,\n  AddPerson: _AddPerson.default,\n  PhoneLock: _PhoneLock.default,\n  Certificate: _Certificate.default\n};\nvar NOTIFICATION_TIMEOUT = 10000;\nvar screenBlackList = ['ScanCode', 'PendingConnections', 'MyCode', 'GroupConnection'];\n\nvar NotificationBanner = function NotificationBanner() {\n  var dispatch = (0, _store.useDispatch)();\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var dropDownAlertRef = (0, _react.useRef)(null);\n  var activeNotification = (0, _store.useSelector)(function (state) {\n    return state.notifications.activeNotification;\n  });\n  var pendingConnections = (0, _store.useSelector)(_pendingConnectionSlice.selectAllUnconfirmedConnections);\n  (0, _react.useEffect)(function () {\n    var _dropDownAlertRef$cur;\n\n    if (!activeNotification) {\n      return;\n    }\n\n    var route = (0, _NavigationService.getRoute)();\n    (_dropDownAlertRef$cur = dropDownAlertRef.current) == null ? void 0 : _dropDownAlertRef$cur.closeAction('cancel');\n\n    if (!screenBlackList.includes(route == null ? void 0 : route.name)) {\n      if (!_Detox.DetoxEnabled) {\n        var _dropDownAlertRef$cur2;\n\n        (_dropDownAlertRef$cur2 = dropDownAlertRef.current) == null ? void 0 : _dropDownAlertRef$cur2.alertWithType('custom', activeNotification == null ? void 0 : activeNotification.title, activeNotification == null ? void 0 : activeNotification.message);\n      }\n    }\n  }, [activeNotification, dispatch]);\n  (0, _react.useEffect)(function () {\n    if (pendingConnections.length) {\n      dispatch((0, _actions.setActiveNotification)({\n        type: _constants.CONNECTIONS_TYPE,\n        title: t('notificationBar.title.pendingConnection'),\n        message: t('notificationBar.text.pendingConnections', {\n          count: pendingConnections.length\n        }),\n        navigationTarget: 'PendingConnections',\n        icon: 'AddPerson'\n      }));\n    }\n  }, [pendingConnections.length, dispatch, t]);\n  var Icon = Icons[(activeNotification == null ? void 0 : activeNotification.icon) || 'Certificate'];\n\n  var _onTap = function _onTap() {\n    console.log('onTap', activeNotification);\n\n    if (activeNotification != null && activeNotification.navigationTarget) {\n      (0, _NavigationService.navigate)(activeNotification.navigationTarget);\n    }\n  };\n\n  var _onClose = function _onClose() {\n    console.log('onClose, setting null');\n    dispatch((0, _actions.setActiveNotification)(null));\n  };\n\n  return _react.default.createElement(_reactNativeDropdownalert.default, {\n    ref: dropDownAlertRef,\n    closeInterval: NOTIFICATION_TIMEOUT,\n    containerStyle: styles.container,\n    contentContainerStyle: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    titleStyle: styles.title,\n    messageStyle: styles.message,\n    updateStatusBar: true,\n    activeStatusBarBackgroundColor: _colors.LIGHT_GREEN,\n    activeStatusBarStyle: \"dark-content\",\n    testID: \"notificationBanner\",\n    elevation: 10,\n    zIndex: 100,\n    onTap: _onTap,\n    onClose: _onClose,\n    renderImage: function renderImage() {\n      return _react.default.createElement(_reactNative.View, {\n        style: styles.icon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(Icon, {\n        width: _deviceConstants.DEVICE_LARGE ? 24 : 20,\n        height: _deviceConstants.DEVICE_LARGE ? 24 : 20,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }));\n    },\n    panResponderEnabled: false,\n    tapToCloseEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  });\n};\n\nexports.NotificationBanner = NotificationBanner;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: _colors.LIGHT_GREEN,\n    height: _deviceConstants.HEIGHT * 0.15\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: _deviceConstants.DEVICE_LARGE ? 20 : 10,\n    color: _colors.BLACK,\n    fontSize: _fonts.fontSize[16]\n  },\n  message: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: _deviceConstants.DEVICE_LARGE ? 20 : 10,\n    color: _colors.BLACK,\n    fontSize: _fonts.fontSize[13]\n  },\n  icon: {\n    marginLeft: _deviceConstants.DEVICE_LARGE ? 20 : 10\n  }\n});\n\nvar _default = NotificationBanner;\nexports.default = _default;","map":{"version":3,"names":["Icons","AddGroup","AddPerson","PhoneLock","Certificate","NOTIFICATION_TIMEOUT","screenBlackList","NotificationBanner","dispatch","useDispatch","useTranslation","t","dropDownAlertRef","useRef","activeNotification","useSelector","state","notifications","pendingConnections","selectAllUnconfirmedConnections","useEffect","route","getRoute","current","closeAction","includes","name","DetoxEnabled","alertWithType","title","message","length","setActiveNotification","type","CONNECTIONS_TYPE","count","navigationTarget","icon","Icon","_onTap","console","log","navigate","_onClose","styles","container","flex","flexDirection","alignItems","justifyContent","LIGHT_GREEN","DEVICE_LARGE","StyleSheet","create","backgroundColor","height","HEIGHT","fontFamily","marginLeft","color","BLACK","fontSize"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/NotificationBanner.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport DropdownAlert from 'react-native-dropdownalert';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport { navigate, getRoute } from '@/NavigationService';\nimport AddGroup from '@/components/Icons/AddGroup';\nimport AddPerson from '@/components/Icons/AddPerson';\nimport Certificate from '@/components/Icons/Certificate';\nimport PhoneLock from '@/components/Icons/PhoneLock';\nimport { setActiveNotification } from '@/actions';\nimport { CONNECTIONS_TYPE } from '@/utils/constants';\nimport { DEVICE_LARGE, HEIGHT } from '@/utils/deviceConstants';\nimport { LIGHT_GREEN, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DetoxEnabled } from '@/utils/Detox';\n\n/* notification types:\n@type groups\n@type connections\n@type misc\n*/\n// default icons\nconst Icons = {\n  AddGroup,\n  AddPerson,\n  PhoneLock,\n  Certificate,\n};\n\nconst NOTIFICATION_TIMEOUT = 10000;\n\nconst screenBlackList = [\n  'ScanCode',\n  'PendingConnections',\n  'MyCode',\n  'GroupConnection',\n];\n\nexport const NotificationBanner = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  // const route = useRoute();\n  const dropDownAlertRef = useRef(null);\n  const activeNotification = useSelector(\n    (state: State) => state.notifications.activeNotification,\n  );\n\n  const pendingConnections = useSelector(selectAllUnconfirmedConnections);\n\n  useEffect(() => {\n    if (!activeNotification) {\n      return;\n    }\n\n    const route = getRoute();\n\n    dropDownAlertRef.current?.closeAction('cancel');\n\n    if (!screenBlackList.includes(route?.name)) {\n      if (!DetoxEnabled) {\n        dropDownAlertRef.current?.alertWithType(\n          'custom',\n          activeNotification?.title,\n          activeNotification?.message,\n        );\n      }\n    }\n  }, [activeNotification, dispatch]);\n\n  useEffect(() => {\n    // always close the banner first\n    // dropDownAlertRef.current?.closeAction('automatic');\n\n    if (pendingConnections.length) {\n      dispatch(\n        setActiveNotification({\n          type: CONNECTIONS_TYPE,\n          title: t('notificationBar.title.pendingConnection'),\n          message: t('notificationBar.text.pendingConnections', {\n            count: pendingConnections.length,\n          }),\n          navigationTarget: 'PendingConnections',\n          icon: 'AddPerson',\n        }),\n      );\n    }\n  }, [pendingConnections.length, dispatch, t]);\n\n  // icon fallback: activeNotification prop 'icon' -> default icon for notification type -> default 'Certificate'\n  const Icon = Icons[activeNotification?.icon || 'Certificate'];\n\n  const _onTap = () => {\n    console.log('onTap', activeNotification);\n    if (activeNotification?.navigationTarget) {\n      navigate(activeNotification.navigationTarget);\n    }\n  };\n\n  const _onClose = () => {\n    console.log('onClose, setting null');\n    dispatch(setActiveNotification(null));\n  };\n\n  return (\n    <DropdownAlert\n      ref={dropDownAlertRef}\n      closeInterval={NOTIFICATION_TIMEOUT}\n      containerStyle={styles.container}\n      contentContainerStyle={{\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      titleStyle={styles.title}\n      messageStyle={styles.message}\n      updateStatusBar={true}\n      activeStatusBarBackgroundColor={LIGHT_GREEN}\n      activeStatusBarStyle=\"dark-content\"\n      testID=\"notificationBanner\"\n      elevation={10}\n      zIndex={100}\n      onTap={_onTap}\n      onClose={_onClose}\n      renderImage={() => (\n        <View style={styles.icon}>\n          <Icon\n            width={DEVICE_LARGE ? 24 : 20}\n            height={DEVICE_LARGE ? 24 : 20}\n          />\n        </View>\n      )}\n      panResponderEnabled={false}\n      tapToCloseEnabled={true}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: LIGHT_GREEN,\n    height: HEIGHT * 0.15,\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[16],\n  },\n  message: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[13],\n  },\n  icon: {\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n  },\n});\n\nexport default NotificationBanner;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}