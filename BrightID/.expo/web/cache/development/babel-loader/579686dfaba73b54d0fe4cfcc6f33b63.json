{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _store = require(\"../../store\");\n\nvar _connectionTestButton = _interopRequireDefault(require(\"../../utils/connectionTestButton\"));\n\nvar _verifications = require(\"../../utils/verifications\");\n\nvar _connectionsSlice = require(\"../../reducer/connectionsSlice\");\n\nvar _NodeApiGate = require(\"../NodeApiGate\");\n\nvar _ConnectionScreen = _interopRequireDefault(require(\"./ConnectionScreen\"));\n\nvar _stringSimilarity = _interopRequireDefault(require(\"../../utils/stringSimilarity\"));\n\nvar _constants = require(\"../../utils/constants\");\n\nvar _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/ConnectionScreenController.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ConnectionScreenController() {\n  var _this = this;\n\n  var navigation = (0, _native.useNavigation)();\n  var route = (0, _native.useRoute)();\n  var dispatch = (0, _store.useDispatch)();\n  var connectionId = route.params.connectionId;\n  var api = (0, _react.useContext)(_NodeApiGate.NodeApiContext);\n  var connection = (0, _store.useSelector)(function (state) {\n    return (0, _connectionsSlice.selectConnectionById)(state, connectionId);\n  });\n  var myConnections = (0, _store.useSelector)(_connectionsSlice.selectAllConnections);\n  var myGroups = (0, _store.useSelector)(function (state) {\n    return state.groups.groups;\n  });\n  var me = (0, _store.useSelector)(function (state) {\n    return state.user;\n  });\n\n  var _useState = (0, _react.useState)([]),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      mutualGroups = _useState2[0],\n      setMutualGroups = _useState2[1];\n\n  var _useState3 = (0, _react.useState)([]),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      mutualConnections = _useState4[0],\n      setMutualConnections = _useState4[1];\n\n  var _useState5 = (0, _react.useState)([]),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      recoveryConnections = _useState6[0],\n      setRecoveryConnections = _useState6[1];\n\n  var _useState7 = (0, _react.useState)([]),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      verificationsTexts = _useState8[0],\n      setVerificationsTexts = _useState8[1];\n\n  var _useState9 = (0, _react.useState)([]),\n      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),\n      possibleDuplicates = _useState10[0],\n      setPossibleDuplicates = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(0),\n      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),\n      connectedAt = _useState12[0],\n      setConnectedAt = _useState12[1];\n\n  var _useState13 = (0, _react.useState)(true),\n      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var _useState15 = (0, _react.useState)(undefined),\n      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),\n      connectionProfile = _useState16[0],\n      setConnectionProfile = _useState16[1];\n\n  (0, _native.useFocusEffect)((0, _react.useCallback)(function () {\n    var fetchData = function _callee(connectionId) {\n      var profile, texts;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              console.log(\"fetching connection info for \" + connectionId);\n              _context.prev = 2;\n              _context.next = 5;\n              return _regenerator.default.awrap(api.getProfile(connectionId));\n\n            case 5:\n              profile = _context.sent;\n              setConnectionProfile(profile);\n              console.log(\"Updating verifications for \" + profile.id);\n              texts = (0, _verifications.getVerificationPatches)(profile.verifications).map(function (patch) {\n                return patch.text;\n              });\n              setVerificationsTexts(texts);\n              dispatch((0, _connectionsSlice.setConnectionVerifications)({\n                id: connectionId,\n                verifications: profile.verifications\n              }));\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(\"Error getting profile for \" + connectionId + \": \" + _context.t0);\n\n            case 16:\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    };\n\n    if (connectionId !== undefined) {\n      fetchData(connectionId);\n    }\n  }, [api, connectionId, dispatch]));\n  (0, _react.useEffect)(function () {\n    if (connectionProfile) {\n      console.log(\"Updating mutual groups etc. for \" + connectionProfile.id);\n      setConnectedAt(connectionProfile.connectedAt);\n      setMutualConnections(myConnections.filter(function (conn) {\n        return connectionProfile.mutualConnections.includes(conn.id);\n      }));\n      setMutualGroups(myGroups.filter(function (g) {\n        return connectionProfile.mutualGroups.includes(g.id);\n      }));\n\n      var _recoveryConnections = connectionProfile.recoveryConnections.map(function (rc) {\n        if (rc.id === me.id) {\n          rc.conn = me;\n        } else {\n          rc.conn = myConnections.find(function (c) {\n            return rc.id === c.id;\n          });\n        }\n\n        return rc;\n      });\n\n      setRecoveryConnections(_recoveryConnections);\n    }\n  }, [connectionProfile, me, myConnections, myGroups]);\n  (0, _react.useEffect)(function () {\n    console.log(\"Searching possible duplicates for \" + (connection == null ? void 0 : connection.id));\n\n    if (connection && myConnections.length <= _constants.MAX_CONNECTIONS_DUPLICATE_SEARCH) {\n      setPossibleDuplicates(myConnections.filter(function (conn) {\n        return (0, _stringSimilarity.default)(conn.name, connection.name) >= _constants.POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE && conn.id !== connection.id;\n      }));\n    } else {\n      setPossibleDuplicates([]);\n    }\n  }, [connection, myConnections]);\n  (0, _react.useEffect)(function () {\n    if (!connection) {\n      navigation.goBack();\n    }\n  }, [navigation, connection]);\n  (0, _react.useLayoutEffect)(function () {\n    if (__DEV__) {\n      navigation.setOptions({\n        headerRight: function headerRight() {\n          return _react.default.createElement(_connectionTestButton.default, {\n            connectionId: connectionId,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 28\n            }\n          });\n        }\n      });\n    }\n  }, [navigation, connectionId]);\n\n  if (!connection) {\n    return null;\n  }\n\n  return _react.default.createElement(_ConnectionScreen.default, {\n    connection: connection,\n    verificationsTexts: verificationsTexts,\n    loading: loading,\n    connectedAt: connectedAt,\n    mutualConnections: mutualConnections,\n    mutualGroups: mutualGroups,\n    recoveryConnections: recoveryConnections,\n    possibleDuplicates: possibleDuplicates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  });\n}\n\nvar _default = ConnectionScreenController;\nexports.default = _default;","map":{"version":3,"names":["ConnectionScreenController","navigation","useNavigation","route","useRoute","dispatch","useDispatch","connectionId","params","api","useContext","NodeApiContext","connection","useSelector","state","selectConnectionById","myConnections","selectAllConnections","myGroups","groups","me","user","useState","mutualGroups","setMutualGroups","mutualConnections","setMutualConnections","recoveryConnections","setRecoveryConnections","verificationsTexts","setVerificationsTexts","possibleDuplicates","setPossibleDuplicates","connectedAt","setConnectedAt","loading","setLoading","undefined","connectionProfile","setConnectionProfile","useFocusEffect","useCallback","fetchData","console","log","getProfile","profile","id","texts","getVerificationPatches","verifications","map","patch","text","setConnectionVerifications","useEffect","filter","conn","includes","g","rc","find","c","length","MAX_CONNECTIONS_DUPLICATE_SEARCH","stringSimilarity","name","POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE","goBack","useLayoutEffect","__DEV__","setOptions","headerRight"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/ConnectionScreenController.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  useFocusEffect,\n  useNavigation,\n  useRoute,\n  RouteProp,\n} from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport ConnectionTestButton from '@/utils/connectionTestButton';\nimport { getVerificationPatches } from '@/utils/verifications';\nimport {\n  selectConnectionById,\n  selectAllConnections,\n  setConnectionVerifications,\n} from '@/reducer/connectionsSlice';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport ConnectionScreen from './ConnectionScreen';\nimport stringSimilarity from '@/utils/stringSimilarity';\nimport {\n  MAX_CONNECTIONS_DUPLICATE_SEARCH,\n  POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE,\n} from '@/utils/constants';\n\ntype ConnectionRoute = RouteProp<\n  { Connection: { connectionId: string } },\n  'Connection'\n>;\n\ntype DetailedRecoveryConnection = RecoveryConnection & { conn?: Connection };\n\nfunction ConnectionScreenController() {\n  const navigation = useNavigation();\n  const route = useRoute<ConnectionRoute>();\n  const dispatch = useDispatch();\n  const { connectionId } = route.params;\n  const api = useContext(NodeApiContext);\n  const connection = useSelector((state: State) =>\n    selectConnectionById(state, connectionId),\n  );\n  const myConnections = useSelector(selectAllConnections);\n  const myGroups = useSelector((state: State) => state.groups.groups);\n  const me = useSelector((state: State) => state.user);\n  const [mutualGroups, setMutualGroups] = useState<Array<Group>>([]);\n  const [mutualConnections, setMutualConnections] = useState<Array<Connection>>(\n    [],\n  );\n  const [recoveryConnections, setRecoveryConnections] = useState<\n    Array<DetailedRecoveryConnection>\n  >([]);\n  const [verificationsTexts, setVerificationsTexts] = useState<Array<string>>(\n    [],\n  );\n  const [possibleDuplicates, setPossibleDuplicates] = useState<\n    Array<Connection>\n  >([]);\n  const [connectedAt, setConnectedAt] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [connectionProfile, setConnectionProfile] = useState<\n    ProfileInfo | undefined\n  >(undefined);\n\n  useFocusEffect(\n    useCallback(() => {\n      const fetchData = async (connectionId) => {\n        setLoading(true);\n        console.log(`fetching connection info for ${connectionId}`);\n        try {\n          const profile: ProfileInfo = await api.getProfile(connectionId);\n          setConnectionProfile(profile);\n          console.log(`Updating verifications for ${profile.id}`);\n          const texts = getVerificationPatches(profile.verifications).map(\n            (patch) => patch.text,\n          );\n          setVerificationsTexts(texts);\n          // TODO: This causes unnecessary rerender by replacing the verifications array in redux\n          //  store, although contents are most likely identical\n          dispatch(\n            setConnectionVerifications({\n              id: connectionId,\n              verifications: profile.verifications,\n            }),\n          );\n        } catch (e) {\n          console.log(`Error getting profile for ${connectionId}: ${e}`);\n        }\n        setLoading(false);\n      };\n      if (connectionId !== undefined) {\n        fetchData(connectionId);\n      }\n    }, [api, connectionId, dispatch]),\n  );\n\n  // Update mutual groups etc. in local state\n  useEffect(() => {\n    if (connectionProfile) {\n      console.log(`Updating mutual groups etc. for ${connectionProfile.id}`);\n      setConnectedAt(connectionProfile.connectedAt);\n      setMutualConnections(\n        myConnections.filter((conn) => {\n          return connectionProfile.mutualConnections.includes(conn.id);\n        }),\n      );\n      setMutualGroups(\n        myGroups.filter((g) => {\n          return connectionProfile.mutualGroups.includes(g.id);\n        }),\n      );\n      const recoveryConnections: Array<DetailedRecoveryConnection> =\n        connectionProfile.recoveryConnections.map(\n          (rc: DetailedRecoveryConnection) => {\n            if (rc.id === me.id) {\n              rc.conn = me;\n            } else {\n              rc.conn = myConnections.find((c) => rc.id === c.id);\n            }\n            return rc;\n          },\n        );\n      setRecoveryConnections(recoveryConnections);\n    }\n  }, [connectionProfile, me, myConnections, myGroups]);\n\n  // get possible duplicates\n  useEffect(() => {\n    console.log(`Searching possible duplicates for ${connection?.id}`);\n    // Prevent high system load: Don't try to search duplicates if we have too many connections\n    if (\n      connection &&\n      myConnections.length <= MAX_CONNECTIONS_DUPLICATE_SEARCH\n    ) {\n      setPossibleDuplicates(\n        myConnections.filter(\n          (conn) =>\n            stringSimilarity(conn.name, connection.name) >=\n              POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE &&\n            conn.id !== connection.id,\n        ),\n      );\n    } else {\n      setPossibleDuplicates([]);\n    }\n  }, [connection, myConnections]);\n\n  useEffect(() => {\n    if (!connection) {\n      // connection not there anymore.\n      navigation.goBack();\n    }\n  }, [navigation, connection]);\n\n  // Add fake user functionality in DEV mode\n  useLayoutEffect(() => {\n    if (__DEV__) {\n      navigation.setOptions({\n        headerRight: () => <ConnectionTestButton connectionId={connectionId} />,\n      });\n    }\n  }, [navigation, connectionId]);\n\n  if (!connection) {\n    return null;\n  }\n\n  return (\n    <ConnectionScreen\n      connection={connection}\n      verificationsTexts={verificationsTexts}\n      loading={loading}\n      connectedAt={connectedAt}\n      mutualConnections={mutualConnections}\n      mutualGroups={mutualGroups}\n      recoveryConnections={recoveryConnections}\n      possibleDuplicates={possibleDuplicates}\n    />\n  );\n}\n\nexport default ConnectionScreenController;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}