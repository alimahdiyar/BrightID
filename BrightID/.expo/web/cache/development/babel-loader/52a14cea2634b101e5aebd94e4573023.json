{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { b64ToUrlSafeB64 } from \"../../../../utils/encoding\";\nimport { saveImage } from \"../../../../utils/filesystem\";\nimport { addLinkedContext, upsertSig } from \"../../../../reducer/appsSlice\";\nimport { decryptData } from \"../../../../utils/cryptoHelper\";\nimport { setUploadCompletedBy, setRecoveryId } from \"../../RecoveryFlow/recoveryDataSlice\";\nimport { setPhoto, setName, setIsSponsored, setBackupCompleted, setPassword, setIsSponsoredv6 } from \"../../../../reducer/userSlice\";\nimport { IMPORT_PREFIX } from \"../../../../utils/constants\";\nexport var downloadContextInfo = function downloadContextInfo(_ref) {\n  var channelApi = _ref.channelApi,\n      dataIds = _ref.dataIds;\n  return function _callee(dispatch, getState) {\n    var _getState, _getState$recoveryDat, aesKey, channelId, isContextInfo, contextInfoDataIds, _iterator, _step, dataId, encrypted, contextInfo;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState = getState(), _getState$recoveryDat = _getState.recoveryData, aesKey = _getState$recoveryDat.aesKey, channelId = _getState$recoveryDat.channel.channelId;\n\n            isContextInfo = function isContextInfo(id) {\n              return id.startsWith(IMPORT_PREFIX + \"contextInfo_\");\n            };\n\n            contextInfoDataIds = dataIds.filter(function (dataId) {\n              return isContextInfo(dataId);\n            });\n            _iterator = _createForOfIteratorHelperLoose(contextInfoDataIds);\n\n          case 5:\n            if ((_step = _iterator()).done) {\n              _context.next = 16;\n              break;\n            }\n\n            dataId = _step.value;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(channelApi.download({\n              channelId: channelId,\n              dataId: dataId,\n              deleteAfterDownload: true\n            }));\n\n          case 9:\n            encrypted = _context.sent;\n            contextInfo = decryptData(encrypted, aesKey);\n            console.log(\"ContextInfo:\");\n            console.log(contextInfo);\n            dispatch(addLinkedContext(contextInfo));\n\n          case 14:\n            _context.next = 5;\n            break;\n\n          case 16:\n            return _context.abrupt(\"return\", contextInfoDataIds.length);\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"downloadContextInfo error: \" + _context.t0.message);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n};\nexport var downloadBlindSigs = function downloadBlindSigs(_ref2) {\n  var channelApi = _ref2.channelApi,\n      dataIds = _ref2.dataIds;\n  return function _callee2(dispatch, getState) {\n    var _getState2, _getState2$recoveryDa, aesKey, channelId, isBlindSig, blindSigDataIds, _iterator2, _step2, dataId, encrypted, blindSigData;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _getState2 = getState(), _getState2$recoveryDa = _getState2.recoveryData, aesKey = _getState2$recoveryDa.aesKey, channelId = _getState2$recoveryDa.channel.channelId;\n\n            isBlindSig = function isBlindSig(id) {\n              return id.startsWith(IMPORT_PREFIX + \"blindsig_\");\n            };\n\n            blindSigDataIds = dataIds.filter(function (dataId) {\n              return isBlindSig(dataId);\n            });\n            _iterator2 = _createForOfIteratorHelperLoose(blindSigDataIds);\n\n          case 5:\n            if ((_step2 = _iterator2()).done) {\n              _context2.next = 14;\n              break;\n            }\n\n            dataId = _step2.value;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(channelApi.download({\n              channelId: channelId,\n              dataId: dataId,\n              deleteAfterDownload: true\n            }));\n\n          case 9:\n            encrypted = _context2.sent;\n            blindSigData = decryptData(encrypted, aesKey);\n            dispatch(upsertSig(blindSigData));\n\n          case 12:\n            _context2.next = 5;\n            break;\n\n          case 14:\n            return _context2.abrupt(\"return\", blindSigDataIds.length);\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(\"downloadingBlindSigs: \" + _context2.t0.message);\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n};\nexport var downloadUserInfo = function downloadUserInfo(_ref3) {\n  var channelApi = _ref3.channelApi,\n      dataIds = _ref3.dataIds;\n  return function _callee3(dispatch, getState) {\n    var _getState3, signingKey, _getState3$recoveryDa, aesKey, channelId, updateTimestamps, prefix, isUserInfo, uploader, userInfoDataId, encrypted, info, filename;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _getState3 = getState(), signingKey = _getState3.keypair.publicKey, _getState3$recoveryDa = _getState3.recoveryData, aesKey = _getState3$recoveryDa.aesKey, channelId = _getState3$recoveryDa.channel.channelId, updateTimestamps = _getState3.user.updateTimestamps;\n            prefix = IMPORT_PREFIX + \"userinfo_\";\n\n            isUserInfo = function isUserInfo(id) {\n              return id.startsWith(prefix);\n            };\n\n            uploader = function uploader(id) {\n              return id.replace(prefix, '').split(':')[1];\n            };\n\n            userInfoDataId = dataIds.find(function (dataId) {\n              return isUserInfo(dataId) && uploader(dataId) !== b64ToUrlSafeB64(signingKey);\n            });\n\n            if (userInfoDataId) {\n              _context3.next = 8;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", false);\n\n          case 8:\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(channelApi.download({\n              channelId: channelId,\n              dataId: userInfoDataId,\n              deleteAfterDownload: true\n            }));\n\n          case 10:\n            encrypted = _context3.sent;\n            info = decryptData(encrypted, aesKey);\n            dispatch(setRecoveryId(info.id));\n\n            if (!updateTimestamps.name || info.updateTimestamps.name > updateTimestamps.name) {\n              dispatch(setName(info.name));\n            }\n\n            if (!(!updateTimestamps.photo || info.updateTimestamps.photo > updateTimestamps.photo)) {\n              _context3.next = 20;\n              break;\n            }\n\n            _context3.next = 17;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: info.id,\n              base64Image: info.photo\n            }));\n\n          case 17:\n            filename = _context3.sent;\n            info.photo = {\n              filename: filename\n            };\n            dispatch(setPhoto(info.photo));\n\n          case 20:\n            if (!updateTimestamps.isSponsored || info.updateTimestamps.isSponsored > updateTimestamps.isSponsored) {\n              dispatch(setIsSponsored(info.isSponsored));\n            }\n\n            if (!updateTimestamps.isSponsoredv6 || info.updateTimestamps.isSponsoredv6 > updateTimestamps.isSponsoredv6) {\n              dispatch(setIsSponsoredv6(info.isSponsoredv6));\n            }\n\n            if (!updateTimestamps.password || info.updateTimestamps.password > updateTimestamps.password) {\n              dispatch(setPassword(info.password));\n            }\n\n            if (!updateTimestamps.backupCompleted || info.updateTimestamps.backupCompleted > updateTimestamps.backupCompleted) {\n              dispatch(setBackupCompleted(info.backupCompleted));\n            }\n\n            return _context3.abrupt(\"return\", true);\n\n          case 27:\n            _context3.prev = 27;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(\"downloadingUserInfo: \" + _context3.t0.message);\n\n          case 30:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 27]], Promise);\n  };\n};\nexport var checkCompletedFlags = function checkCompletedFlags(_ref4) {\n  var channelApi = _ref4.channelApi,\n      dataIds = _ref4.dataIds;\n  return function _callee4(dispatch, getState) {\n    var _getState4, signingKey, _getState4$recoveryDa, channelId, uploadCompletedBy, _prefix, isCompleted, completedBy, uploader, completedDataIds, _iterator3, _step3, dataId, _uploader;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _getState4 = getState(), signingKey = _getState4.keypair.publicKey, _getState4$recoveryDa = _getState4.recoveryData, channelId = _getState4$recoveryDa.channel.channelId, uploadCompletedBy = _getState4$recoveryDa.uploadCompletedBy;\n            _prefix = IMPORT_PREFIX + \"completed_\";\n\n            isCompleted = function isCompleted(id) {\n              return id.startsWith(_prefix);\n            };\n\n            completedBy = function completedBy(id) {\n              return id.replace(_prefix, '');\n            };\n\n            uploader = function uploader(id) {\n              return id.replace(_prefix, '').split(':')[1];\n            };\n\n            completedDataIds = dataIds.filter(function (dataId) {\n              return isCompleted(dataId) && uploader(dataId) !== b64ToUrlSafeB64(signingKey) && !uploadCompletedBy[completedBy(dataId)];\n            });\n            _iterator3 = _createForOfIteratorHelperLoose(completedDataIds);\n\n          case 8:\n            if ((_step3 = _iterator3()).done) {\n              _context4.next = 16;\n              break;\n            }\n\n            dataId = _step3.value;\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(channelApi.download({\n              channelId: channelId,\n              dataId: dataId,\n              deleteAfterDownload: true\n            }));\n\n          case 12:\n            _uploader = completedBy(dataId);\n            dispatch(setUploadCompletedBy(_uploader));\n\n          case 14:\n            _context4.next = 8;\n            break;\n\n          case 16:\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(\"checkingCompletedFlags: \" + _context4.t0.message);\n\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 18]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/thunks/channelDownloadThunks.ts"],"names":["downloadContextInfo","channelApi","dataIds","aesKey","channelId","getState","isContextInfo","id","IMPORT_PREFIX","contextInfoDataIds","dataId","encrypted","deleteAfterDownload","contextInfo","decryptData","console","dispatch","addLinkedContext","downloadBlindSigs","isBlindSig","blindSigDataIds","blindSigData","upsertSig","downloadUserInfo","signingKey","updateTimestamps","prefix","isUserInfo","uploader","userInfoDataId","b64ToUrlSafeB64","info","setRecoveryId","setName","filename","saveImage","imageName","base64Image","setPhoto","setIsSponsored","setIsSponsoredv6","setPassword","setBackupCompleted","checkCompletedFlags","uploadCompletedBy","isCompleted","completedBy","completedDataIds","setUploadCompletedBy"],"mappings":"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","sourcesContent":["import { b64ToUrlSafeB64 } from '@/utils/encoding';\nimport { saveImage } from '@/utils/filesystem';\nimport { addLinkedContext, upsertSig } from '@/reducer/appsSlice';\nimport { decryptData } from '@/utils/cryptoHelper';\nimport {\n  setUploadCompletedBy,\n  setRecoveryId,\n} from '../../RecoveryFlow/recoveryDataSlice';\nimport {\n  setPhoto,\n  setName,\n  setIsSponsored,\n  setBackupCompleted,\n  setPassword,\n  setIsSponsoredv6,\n} from '@/reducer/userSlice';\nimport ChannelAPI from '@/api/channelService';\nimport { IMPORT_PREFIX } from '@/utils/constants';\n\nexport const downloadContextInfo =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        recoveryData: {\n          aesKey,\n          channel: { channelId },\n        },\n      } = getState();\n\n      const isContextInfo = (id: string) =>\n        id.startsWith(`${IMPORT_PREFIX}contextInfo_`);\n\n      const contextInfoDataIds = dataIds.filter((dataId) =>\n        isContextInfo(dataId),\n      );\n\n      for (const dataId of contextInfoDataIds) {\n        const encrypted = await channelApi.download({\n          channelId,\n          dataId,\n          deleteAfterDownload: true,\n        });\n        const contextInfo = decryptData(encrypted, aesKey) as ContextInfo;\n        console.log(`ContextInfo:`);\n        console.log(contextInfo);\n        dispatch(addLinkedContext(contextInfo));\n      }\n      return contextInfoDataIds.length;\n    } catch (err) {\n      console.error(`downloadContextInfo error: ${err.message}`);\n    }\n  };\n\nexport const downloadBlindSigs =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        recoveryData: {\n          aesKey,\n          channel: { channelId },\n        },\n      } = getState();\n\n      const isBlindSig = (id: string) =>\n        id.startsWith(`${IMPORT_PREFIX}blindsig_`);\n      const blindSigDataIds = dataIds.filter((dataId) => isBlindSig(dataId));\n\n      for (const dataId of blindSigDataIds) {\n        const encrypted = await channelApi.download({\n          channelId,\n          dataId,\n          deleteAfterDownload: true,\n        });\n        const blindSigData = decryptData(encrypted, aesKey) as SigInfo;\n        dispatch(upsertSig(blindSigData));\n      }\n      return blindSigDataIds.length;\n    } catch (err) {\n      console.error(`downloadingBlindSigs: ${err.message}`);\n    }\n  };\n\nexport const downloadUserInfo =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        keypair: { publicKey: signingKey },\n        recoveryData: {\n          aesKey,\n          channel: { channelId },\n        },\n        user: { updateTimestamps },\n      } = getState();\n\n      const prefix = `${IMPORT_PREFIX}userinfo_`;\n      const isUserInfo = (id: string) => id.startsWith(prefix);\n      const uploader = (id) => id.replace(prefix, '').split(':')[1];\n      const userInfoDataId = dataIds.find(\n        (dataId) =>\n          isUserInfo(dataId) &&\n          uploader(dataId) !== b64ToUrlSafeB64(signingKey),\n      );\n      if (!userInfoDataId) {\n        return false;\n      }\n\n      const encrypted = await channelApi.download({\n        channelId,\n        dataId: userInfoDataId,\n        deleteAfterDownload: true,\n      });\n      const info = decryptData(encrypted, aesKey);\n      dispatch(setRecoveryId(info.id));\n      if (\n        !updateTimestamps.name ||\n        info.updateTimestamps.name > updateTimestamps.name\n      ) {\n        dispatch(setName(info.name));\n      }\n      if (\n        !updateTimestamps.photo ||\n        info.updateTimestamps.photo > updateTimestamps.photo\n      ) {\n        const filename = await saveImage({\n          imageName: info.id,\n          base64Image: info.photo,\n        });\n        info.photo = { filename };\n        dispatch(setPhoto(info.photo));\n      }\n      if (\n        !updateTimestamps.isSponsored ||\n        info.updateTimestamps.isSponsored > updateTimestamps.isSponsored\n      ) {\n        dispatch(setIsSponsored(info.isSponsored));\n      }\n      if (\n        !updateTimestamps.isSponsoredv6 ||\n        info.updateTimestamps.isSponsoredv6 > updateTimestamps.isSponsoredv6\n      ) {\n        dispatch(setIsSponsoredv6(info.isSponsoredv6));\n      }\n      if (\n        !updateTimestamps.password ||\n        info.updateTimestamps.password > updateTimestamps.password\n      ) {\n        dispatch(setPassword(info.password));\n      }\n      if (\n        !updateTimestamps.backupCompleted ||\n        info.updateTimestamps.backupCompleted > updateTimestamps.backupCompleted\n      ) {\n        dispatch(setBackupCompleted(info.backupCompleted));\n      }\n      return true;\n    } catch (err) {\n      console.error(`downloadingUserInfo: ${err.message}`);\n    }\n  };\n\nexport const checkCompletedFlags =\n  ({\n    channelApi,\n    dataIds,\n  }: {\n    channelApi: ChannelAPI;\n    dataIds: Array<string>;\n  }) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        keypair: { publicKey: signingKey },\n        recoveryData: {\n          channel: { channelId },\n          uploadCompletedBy,\n        },\n      } = getState();\n\n      const prefix = `${IMPORT_PREFIX}completed_`;\n      const isCompleted = (id: string) => id.startsWith(prefix);\n      const completedBy = (id: string) => id.replace(prefix, '');\n      const uploader = (id) => id.replace(prefix, '').split(':')[1];\n\n      const completedDataIds = dataIds.filter(\n        (dataId) =>\n          isCompleted(dataId) &&\n          uploader(dataId) !== b64ToUrlSafeB64(signingKey) &&\n          !uploadCompletedBy[completedBy(dataId)],\n      );\n\n      for (const dataId of completedDataIds) {\n        await channelApi.download({\n          channelId,\n          dataId,\n          deleteAfterDownload: true,\n        });\n        const uploader = completedBy(dataId);\n        dispatch(setUploadCompletedBy(uploader));\n      }\n    } catch (err) {\n      console.error(`checkingCompletedFlags: ${err.message}`);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}