{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { hash, urlSafeRandomKey } from \"../../../../utils/encoding\";\nimport { store } from \"../../../../store\";\nimport ChannelAPI from \"../../../../api/channelService\";\nimport { selectBaseUrl } from \"../../../../reducer/settingsSlice\";\nimport { CHANNEL_POLL_INTERVAL } from \"../../RecoveryFlow/thunks/channelThunks\";\nimport { init, setRecoveryChannel } from \"../../RecoveryFlow/recoveryDataSlice\";\nimport { downloadConnections, downloadGroups } from \"../../RecoveryFlow/thunks/channelDownloadThunks\";\nimport { checkCompletedFlags, downloadBlindSigs, downloadContextInfo, downloadUserInfo } from \"./channelDownloadThunks\";\nimport { uploadAllInfoAfter, uploadDeviceInfo } from \"./channelUploadThunks\";\nimport { IMPORT_PREFIX } from \"../../../../utils/constants\";\nexport var setupSync = function setupSync() {\n  return function _callee(dispatch, getState) {\n    var _getState, recoveryData, aesKey;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _getState = getState(), recoveryData = _getState.recoveryData;\n\n            if (recoveryData.aesKey) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(urlSafeRandomKey(16));\n\n          case 4:\n            aesKey = _context.sent;\n            dispatch(init({\n              aesKey: aesKey\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createSyncChannel = function createSyncChannel() {\n  return function _callee2(dispatch, getState) {\n    var _getState2, aesKey, baseUrl, url, channelId, _getState3, settings, lastSyncTime, after;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getState2 = getState(), aesKey = _getState2.recoveryData.aesKey;\n            baseUrl = selectBaseUrl(getState());\n            url = new URL(baseUrl + \"/profile\");\n            channelId = hash(aesKey);\n            console.log(\"created channel \" + channelId + \" for sync data\");\n            dispatch(setRecoveryChannel({\n              channelId: channelId,\n              url: url\n            }));\n            _getState3 = getState(), settings = _getState3.settings;\n            lastSyncTime = 0;\n\n            if (settings.isPrimaryDevice) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(uploadDeviceInfo());\n\n          case 11:\n            console.log(\"Finished uploading last sync time to the channel \" + channelId);\n            _context2.next = 19;\n            break;\n\n          case 14:\n            console.log(\"Polling last sync time from the scanner of the channel \" + channelId);\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(pollOtherSideDeviceInfo());\n\n          case 17:\n            lastSyncTime = _context2.sent.lastSyncTime;\n            console.log(\"Last sync time was \" + lastSyncTime);\n\n          case 19:\n            after = settings.isPrimaryDevice ? lastSyncTime : settings.lastSyncTime;\n            uploadAllInfoAfter(after).then(function () {\n              console.log(\"Finished uploading sync data to the channel \" + channelId);\n            });\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getOtherSideDeviceInfo = function _callee3() {\n  var _store$getState, _store$getState$recov, url, channelId, channelApi, dataString;\n\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _store$getState = store.getState(), _store$getState$recov = _store$getState.recoveryData.channel, url = _store$getState$recov.url, channelId = _store$getState$recov.channelId;\n          channelApi = new ChannelAPI(url.href);\n          _context3.prev = 2;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(channelApi.download({\n            channelId: channelId,\n            dataId: IMPORT_PREFIX + \"data\",\n            deleteAfterDownload: true\n          }));\n\n        case 5:\n          dataString = _context3.sent;\n          return _context3.abrupt(\"return\", JSON.parse(dataString));\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](2);\n          return _context3.abrupt(\"return\", {\n            isPrimaryDevice: true\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[2, 9]], Promise);\n};\nexport var pollOtherSideDeviceInfo = function _callee4() {\n  var data;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(getOtherSideDeviceInfo());\n\n        case 2:\n          data = _context4.sent;\n\n        case 3:\n          if (!(data.lastSyncTime === undefined)) {\n            _context4.next = 11;\n            break;\n          }\n\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(new Promise(function (r) {\n            return setTimeout(r, CHANNEL_POLL_INTERVAL);\n          }));\n\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(getOtherSideDeviceInfo());\n\n        case 8:\n          data = _context4.sent;\n          _context4.next = 3;\n          break;\n\n        case 11:\n          return _context4.abrupt(\"return\", data);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nvar channelIntervalId;\nvar checkInProgress = false;\nexport var pollImportChannel = function pollImportChannel() {\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            clearInterval(channelIntervalId);\n            channelIntervalId = setInterval(function () {\n              if (!checkInProgress) {\n                checkInProgress = true;\n                dispatch(checkImportChannel()).then(function () {\n                  checkInProgress = false;\n                }).catch(function (err) {\n                  checkInProgress = false;\n                  console.error(\"error polling sync/import channel: \" + err.message);\n                });\n              }\n            }, CHANNEL_POLL_INTERVAL);\n            console.log(\"start polling sync/import channel (\" + channelIntervalId + \")\");\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var clearImportChannel = function clearImportChannel() {\n  console.log(\"stop polling sync/import channel (\" + channelIntervalId + \")\");\n  clearInterval(channelIntervalId);\n};\nexport var checkImportChannel = function checkImportChannel() {\n  return function _callee6(dispatch, getState) {\n    var _getState4, _getState4$recoveryDa, channelId, url, isPrimaryDevice, channelApi, dataIds;\n\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _getState4 = getState(), _getState4$recoveryDa = _getState4.recoveryData.channel, channelId = _getState4$recoveryDa.channelId, url = _getState4$recoveryDa.url, isPrimaryDevice = _getState4.settings.isPrimaryDevice;\n            channelApi = new ChannelAPI(url.href);\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(channelApi.list(channelId));\n\n          case 4:\n            dataIds = _context6.sent;\n            _context6.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(downloadUserInfo({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 7:\n            _context6.next = 9;\n            return _regeneratorRuntime.awrap(dispatch(downloadConnections({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 9:\n            _context6.next = 11;\n            return _regeneratorRuntime.awrap(dispatch(downloadGroups({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 11:\n            _context6.next = 13;\n            return _regeneratorRuntime.awrap(dispatch(downloadContextInfo({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 13:\n            if (isPrimaryDevice) {\n              _context6.next = 16;\n              break;\n            }\n\n            _context6.next = 16;\n            return _regeneratorRuntime.awrap(dispatch(downloadBlindSigs({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 16:\n            _context6.next = 18;\n            return _regeneratorRuntime.awrap(dispatch(checkCompletedFlags({\n              channelApi: channelApi,\n              dataIds: dataIds\n            })));\n\n          case 18:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/thunks/channelThunks.ts"],"names":["setupSync","recoveryData","getState","aesKey","urlSafeRandomKey","dispatch","init","createSyncChannel","baseUrl","selectBaseUrl","url","channelId","hash","console","setRecoveryChannel","settings","lastSyncTime","uploadDeviceInfo","pollOtherSideDeviceInfo","after","uploadAllInfoAfter","getOtherSideDeviceInfo","store","channelApi","dataString","dataId","IMPORT_PREFIX","deleteAfterDownload","JSON","isPrimaryDevice","data","setTimeout","checkInProgress","pollImportChannel","clearInterval","channelIntervalId","setInterval","checkImportChannel","err","clearImportChannel","dataIds","downloadUserInfo","downloadConnections","downloadGroups","downloadContextInfo","downloadBlindSigs","checkCompletedFlags"],"mappings":"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","sourcesContent":["import { hash, urlSafeRandomKey } from '@/utils/encoding';\nimport { store } from '@/store';\nimport ChannelAPI from '@/api/channelService';\nimport { selectBaseUrl } from '@/reducer/settingsSlice';\nimport { CHANNEL_POLL_INTERVAL } from '../../RecoveryFlow/thunks/channelThunks';\nimport { init, setRecoveryChannel } from '../../RecoveryFlow/recoveryDataSlice';\nimport {\n  downloadConnections,\n  downloadGroups,\n} from '../../RecoveryFlow/thunks/channelDownloadThunks';\nimport {\n  checkCompletedFlags,\n  downloadBlindSigs,\n  downloadContextInfo,\n  downloadUserInfo,\n} from './channelDownloadThunks';\nimport { uploadAllInfoAfter, uploadDeviceInfo } from './channelUploadThunks';\nimport { IMPORT_PREFIX } from '@/utils/constants';\n\nexport const setupSync =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const { recoveryData } = getState();\n    // setup recovery data\n    if (!recoveryData.aesKey) {\n      const aesKey = await urlSafeRandomKey(16);\n      // setup recovery data slice with sync info\n      dispatch(init({ aesKey }));\n    }\n  };\n\nexport const createSyncChannel =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const {\n      recoveryData: { aesKey },\n    } = getState();\n    const baseUrl = selectBaseUrl(getState());\n    const url = new URL(`${baseUrl}/profile`);\n    // use this for local running profile service\n    // const url = new URL(`http://10.0.2.2:3000/`);\n    const channelId = hash(aesKey);\n    console.log(`created channel ${channelId} for sync data`);\n    dispatch(setRecoveryChannel({ channelId, url }));\n    const { settings } = getState();\n    let lastSyncTime = 0;\n    if (!settings.isPrimaryDevice) {\n      await uploadDeviceInfo();\n      console.log(\n        `Finished uploading last sync time to the channel ${channelId}`,\n      );\n    } else {\n      console.log(\n        `Polling last sync time from the scanner of the channel ${channelId}`,\n      );\n      lastSyncTime = (await pollOtherSideDeviceInfo()).lastSyncTime;\n      console.log(`Last sync time was ${lastSyncTime}`);\n    }\n    const after = settings.isPrimaryDevice\n      ? lastSyncTime\n      : settings.lastSyncTime;\n    uploadAllInfoAfter(after).then(() => {\n      console.log(`Finished uploading sync data to the channel ${channelId}`);\n    });\n  };\n\nexport const getOtherSideDeviceInfo = async (): Promise<SyncDeviceInfo> => {\n  const {\n    recoveryData: {\n      channel: { url, channelId },\n    },\n  } = store.getState();\n  const channelApi = new ChannelAPI(url.href);\n  try {\n    const dataString = await channelApi.download({\n      channelId,\n      dataId: `${IMPORT_PREFIX}data`,\n      deleteAfterDownload: true,\n    });\n    return JSON.parse(dataString) as SyncDeviceInfo;\n  } catch (err) {\n    // TODO: handle real errors, like network issues etc?\n    // if other side (code generator) did not push its info, it was primary.\n    return {\n      isPrimaryDevice: true,\n    };\n  }\n};\n\nexport const pollOtherSideDeviceInfo = async (): Promise<SyncDeviceInfo> => {\n  // TODO: This is an endless loop. Needs refactoring and error handling.\n  let data = await getOtherSideDeviceInfo();\n  while (data.lastSyncTime === undefined) {\n    await new Promise((r) => setTimeout(r, CHANNEL_POLL_INTERVAL));\n    data = await getOtherSideDeviceInfo();\n  }\n  return data;\n};\n\nlet channelIntervalId: IntervalId;\nlet checkInProgress = false;\n\nexport const pollImportChannel = () => async (dispatch: dispatch) => {\n  clearInterval(channelIntervalId);\n\n  channelIntervalId = setInterval(() => {\n    if (!checkInProgress) {\n      checkInProgress = true;\n      dispatch(checkImportChannel())\n        .then(() => {\n          checkInProgress = false;\n        })\n        .catch((err) => {\n          checkInProgress = false;\n          console.error(`error polling sync/import channel: ${err.message}`);\n        });\n    }\n  }, CHANNEL_POLL_INTERVAL);\n\n  console.log(`start polling sync/import channel (${channelIntervalId})`);\n};\n\nexport const clearImportChannel = () => {\n  console.log(`stop polling sync/import channel (${channelIntervalId})`);\n  clearInterval(channelIntervalId);\n};\n\nexport const checkImportChannel =\n  () => async (dispatch: dispatch, getState: getState) => {\n    const {\n      recoveryData: {\n        channel: { channelId, url },\n      },\n      settings: { isPrimaryDevice },\n    } = getState();\n    const channelApi = new ChannelAPI(url.href);\n    const dataIds = await channelApi.list(channelId);\n    await dispatch(downloadUserInfo({ channelApi, dataIds }));\n    await dispatch(downloadConnections({ channelApi, dataIds }));\n    await dispatch(downloadGroups({ channelApi, dataIds }));\n    await dispatch(downloadContextInfo({ channelApi, dataIds }));\n    if (!isPrimaryDevice) {\n      await dispatch(downloadBlindSigs({ channelApi, dataIds }));\n    }\n    await dispatch(checkCompletedFlags({ channelApi, dataIds }));\n  };\n"]},"metadata":{},"sourceType":"module"}