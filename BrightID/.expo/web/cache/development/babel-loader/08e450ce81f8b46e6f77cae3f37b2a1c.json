{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { Parser } from 'expr-eval';\nimport { UserTasks } from \"../components/Tasks/UserTasks\";\nexport var isVerified = function isVerified(verifications, verification) {\n  try {\n    var expr = Parser.parse(verification);\n\n    for (var _iterator = _createForOfIteratorHelperLoose(expr.variables()), _step; !(_step = _iterator()).done;) {\n      var v = _step.value;\n\n      if (!verifications[v]) {\n        verifications[v] = false;\n      }\n    }\n\n    return expr.evaluate(verifications);\n  } catch (err) {\n    console.log(\"verification \" + verification + \" can not be evaluated.\", err);\n    return false;\n  }\n};\nexport var getVerificationPatches = function getVerificationPatches(verifications) {\n  var patches = [];\n  var v = verifications.find(function (v) {\n    return v.name === 'SeedConnected';\n  });\n\n  if (v && v.rank > 0) {\n    patches.push({\n      text: 'Meets'\n    });\n  }\n\n  v = verifications.find(function (v) {\n    return v.name === 'Bitu';\n  });\n\n  if (v && v.score > 0) {\n    patches.push({\n      text: \"Bitu \" + v.score,\n      task: UserTasks.bitu_verification\n    });\n  }\n\n  v = verifications.find(function (v) {\n    return v.name === 'Seed';\n  });\n\n  if (v) {\n    patches.push({\n      text: 'Seed'\n    });\n  }\n\n  return patches;\n};\nexport var getBituReportedByText = function getBituReportedByText(bituVerification, connections, item) {\n  var reportersNames = bituVerification.reportedConnections[item].map(function (id) {\n    var _connections$find;\n\n    return (_connections$find = connections.find(function (c) {\n      return c.id === id;\n    })) == null ? void 0 : _connections$find.name;\n  });\n  var parts = reportersNames.filter(function (name) {\n    return !!name;\n  });\n  var unknownReportersCount = reportersNames.filter(function (name) {\n    return !name;\n  }).length;\n\n  if (unknownReportersCount > 0) {\n    parts.push(unknownReportersCount + \" unkown user\" + (unknownReportersCount > 1 ? 's' : ''));\n  }\n\n  var joinParts = function joinParts(a) {\n    return [a.slice(0, -1).join(', '), a.slice(-1)[0]].join(a.length < 2 ? '' : ' and ');\n  };\n\n  return \"Reported by \" + joinParts(parts);\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/verifications.ts"],"names":["isVerified","expr","Parser","v","verifications","console","getVerificationPatches","patches","text","task","UserTasks","getBituReportedByText","reportersNames","bituVerification","connections","c","parts","unknownReportersCount","joinParts","a"],"mappings":"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","sourcesContent":["import { Parser, Value } from 'expr-eval';\nimport { Dictionary } from 'ramda';\nimport { UserTasks } from '@/components/Tasks/UserTasks';\n\nexport const isVerified = (\n  verifications: Value | Dictionary<any>,\n  verification: string,\n) => {\n  try {\n    const expr = Parser.parse(verification);\n    for (const v of expr.variables()) {\n      if (!verifications[v]) {\n        verifications[v] = false;\n      }\n    }\n    return expr.evaluate(verifications);\n  } catch (err) {\n    console.log(`verification ${verification} can not be evaluated.`, err);\n    return false;\n  }\n};\n\nexport const getVerificationPatches = (verifications: Verification[]) => {\n  const patches = [];\n  let v = verifications.find((v) => v.name === 'SeedConnected');\n  if (v && (v as SeedConnectedVerification).rank > 0) {\n    patches.push({ text: 'Meets' });\n  }\n  v = verifications.find((v) => v.name === 'Bitu');\n  if (v && (v as BituVerification).score > 0) {\n    patches.push({\n      text: `Bitu ${(v as BituVerification).score}`,\n      task: UserTasks.bitu_verification,\n    });\n  }\n  v = verifications.find((v) => v.name === 'Seed');\n  if (v) {\n    patches.push({ text: 'Seed' });\n  }\n  return patches;\n};\n\nexport const getBituReportedByText = (\n  bituVerification: BituVerification,\n  connections: Connection[],\n  item: string,\n) => {\n  const reportersNames = bituVerification.reportedConnections[item].map(\n    (id) => connections.find((c) => c.id === id)?.name,\n  );\n  const parts = reportersNames.filter((name) => !!name);\n  const unknownReportersCount = reportersNames.filter((name) => !name).length;\n  if (unknownReportersCount > 0) {\n    parts.push(\n      `${unknownReportersCount} unkown user${\n        unknownReportersCount > 1 ? 's' : ''\n      }`,\n    );\n  }\n  // this function is used to convert ['a', 'b', 'c'] to 'a, b and c'\n  const joinParts = (a) =>\n    [a.slice(0, -1).join(', '), a.slice(-1)[0]].join(\n      a.length < 2 ? '' : ' and ',\n    );\n  return `Reported by ${joinParts(parts)}`;\n};\n"]},"metadata":{},"sourceType":"module"}