{"ast":null,"code":"import useCode from \"../derived/useCode\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    var error = !children ? \"Got \\\"\".concat(typeof children, \"\\\" type passed to children\") : \"Got \\\"\".concat(typeof exec, \"\\\" type passed to exec\");\n    throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \".concat(error));\n  }\n}\n\nfunction Code(_ref) {\n  var exec = _ref.exec,\n      children = _ref.children,\n      dependencies = _ref.dependencies;\n  var nodes = children || exec;\n  var code = null;\n\n  if (nodes instanceof AnimatedNode) {\n    code = function code() {\n      return nodes;\n    };\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;","map":{"version":3,"sources":["AnimatedCode.js"],"names":["error","exec","children","dependencies","nodes","code","assertNodesNotNull","useCode"],"mappings":"AAAA,OAAA,OAAA;AACA,OAAA,YAAA;;AAEA,SAAA,kBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAkD;EAChD,IAAI,CAAJ,IAAA,EAAW;IACT,IAAMA,KAAK,GAAG,CAAA,QAAA,GAAA,SAAA,MAAA,CACF,OADE,QAAA,EAAA,4BAAA,CAAA,GAAA,SAAA,MAAA,CAEF,OAFE,IAAA,EAAd,wBAAc,CAAd;IAIA,MAAM,IAAA,KAAA,CAAA,0HAAA,MAAA,CAAN,KAAM,CAAA,CAAN;EAIH;AAED;;AAAA,SAAA,IAAA,CAAA,IAAA,EAAgD;EAAhCC,IAAAA,IAAgC,GAAA,IAAA,CAAhCA,IAAAA;EAAAA,IAAMC,QAA0B,GAAA,IAAA,CAA1BA,QAAND;EAAAA,IAAgBE,YAAgB,GAAA,IAAA,CAAhBA,YAAhBF;EACd,IAAMG,KAAK,GAAGF,QAAQ,IAAtB,IAAA;EAEA,IAAIG,IAAI,GAAR,IAAA;;EACA,IAAID,KAAK,YAAT,YAAA,EAAmC;IACjCC,IAAI,GAAG,SAAA,IAAA,GAAA;MAAA,OAAA,KAAA;IADT,CACEA;EADF,CAAA,MAEO,IAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;IACtCA,IAAI,GAAJA,KAAAA;EAGFC;;EAAAA,kBAAkB,CAAA,IAAA,EAAA,QAAA,EAAlBA,IAAkB,CAAlBA;EAEAC,OAAO,CAAA,IAAA,EAAPA,YAAO,CAAPA;EACA,OAAA,IAAA;AAGF;;AAAA,eAAA,IAAA","sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}