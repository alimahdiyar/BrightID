{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInterval = useInterval;\nexports.useStatusBarHome = useStatusBarHome;\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _colors = require(\"../theme/colors\");\n\nvar _deviceConstants = require(\"./deviceConstants\");\n\nfunction useInterval(callback, delay) {\n  var savedCallback = (0, _react.useRef)(callback);\n  (0, _react.useLayoutEffect)(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  (0, _react.useEffect)(function () {\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    var id = setInterval(function () {\n      return savedCallback.current();\n    }, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\n\nfunction useStatusBarHome() {\n  (0, _native.useFocusEffect)((0, _react.useCallback)(function () {\n    if (_deviceConstants.DEVICE_ANDROID) _reactNative.StatusBar.setBackgroundColor(_colors.WHITE, true);\n\n    _reactNative.StatusBar.setBarStyle('dark-content', true);\n\n    return function () {\n      if (_deviceConstants.DEVICE_ANDROID) _reactNative.StatusBar.setBackgroundColor(_colors.ORANGE, true);\n\n      _reactNative.StatusBar.setBarStyle('light-content', true);\n    };\n  }, []));\n}","map":{"version":3,"names":["useInterval","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","id","setInterval","clearInterval","useStatusBarHome","useFocusEffect","useCallback","DEVICE_ANDROID","StatusBar","setBackgroundColor","WHITE","setBarStyle","ORANGE"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useLayoutEffect, useRef } from 'react';\nimport { StatusBar } from 'react-native';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { WHITE, ORANGE } from '@/theme/colors';\nimport { DEVICE_ANDROID } from './deviceConstants';\n\nexport function useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport function useStatusBarHome() {\n  useFocusEffect(\n    useCallback(() => {\n      if (DEVICE_ANDROID) StatusBar.setBackgroundColor(WHITE, true);\n\n      StatusBar.setBarStyle('dark-content', true);\n      return () => {\n        if (DEVICE_ANDROID) StatusBar.setBackgroundColor(ORANGE, true);\n        StatusBar.setBarStyle('light-content', true);\n      };\n    }, []),\n  );\n}\n"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEO,SAASA,WAAT,CAAqBC,QAArB,EAA2CC,KAA3C,EAAiE;EACtE,IAAMC,aAAa,GAAG,IAAAC,aAAA,EAAOH,QAAP,CAAtB;EAGA,IAAAI,sBAAA,EAAgB,YAAM;IACpBF,aAAa,CAACG,OAAd,GAAwBL,QAAxB;EACD,CAFD,EAEG,CAACA,QAAD,CAFH;EAKA,IAAAM,gBAAA,EAAU,YAAM;IAGd,IAAI,CAACL,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;MACzB;IACD;;IAED,IAAMM,EAAE,GAAGC,WAAW,CAAC;MAAA,OAAMN,aAAa,CAACG,OAAd,EAAN;IAAA,CAAD,EAAgCJ,KAAhC,CAAtB;IAEA,OAAO;MAAA,OAAMQ,aAAa,CAACF,EAAD,CAAnB;IAAA,CAAP;EACD,CAVD,EAUG,CAACN,KAAD,CAVH;AAWD;;AAEM,SAASS,gBAAT,GAA4B;EACjC,IAAAC,sBAAA,EACE,IAAAC,kBAAA,EAAY,YAAM;IAChB,IAAIC,+BAAJ,EAAoBC,sBAAA,CAAUC,kBAAV,CAA6BC,aAA7B,EAAoC,IAApC;;IAEpBF,sBAAA,CAAUG,WAAV,CAAsB,cAAtB,EAAsC,IAAtC;;IACA,OAAO,YAAM;MACX,IAAIJ,+BAAJ,EAAoBC,sBAAA,CAAUC,kBAAV,CAA6BG,cAA7B,EAAqC,IAArC;;MACpBJ,sBAAA,CAAUG,WAAV,CAAsB,eAAtB,EAAuC,IAAvC;IACD,CAHD;EAID,CARD,EAQG,EARH,CADF;AAWD"},"metadata":{},"sourceType":"script"}