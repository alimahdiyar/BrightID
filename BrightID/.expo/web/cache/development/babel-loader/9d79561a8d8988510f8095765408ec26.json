{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Animated from 'react-native-reanimated';\nimport TabBarItem from \"./TabBarItem\";\nimport TabBarIndicator from \"./TabBarIndicator\";\nimport memoize from \"./memoize\";\n\nvar scheduleInNextFrame = function scheduleInNextFrame(cb) {\n  var frame = requestAnimationFrame(function () {\n    frame = requestAnimationFrame(cb);\n  });\n  return function () {\n    return cancelAnimationFrame(frame);\n  };\n};\n\nvar TabBar = function (_React$Component) {\n  _inherits(TabBar, _React$Component);\n\n  var _super = _createSuper(TabBar);\n\n  function TabBar() {\n    var _this;\n\n    _classCallCheck(this, TabBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      layout: {\n        width: 0,\n        height: 0\n      },\n      tabWidths: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"measuredTabWidths\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollAmount\", new Animated.Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollViewRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"cancelNextFrameCb\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"getFlattenedTabWidth\", function (style) {\n      var tabStyle = StyleSheet.flatten(style);\n      return tabStyle ? tabStyle.width : undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getComputedTabWidth\", function (index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      if (flattenedWidth === 'auto') {\n        return tabWidths[routes[index].key] || 0;\n      }\n\n      switch (typeof flattenedWidth) {\n        case 'number':\n          return flattenedWidth;\n\n        case 'string':\n          if (flattenedWidth.endsWith('%')) {\n            var width = parseFloat(flattenedWidth);\n\n            if (Number.isFinite(width)) {\n              return layout.width * (width / 100);\n            }\n          }\n\n      }\n\n      if (scrollEnabled) {\n        return layout.width / 5 * 2;\n      }\n\n      return layout.width / routes.length;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMemoizedTabWidthGettter\", memoize(function (layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      return function (i) {\n        return _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedWidth);\n      };\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getMaxScrollDistance\", function (tabBarWidth, layoutWidth) {\n      return tabBarWidth - layoutWidth;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTabBarWidth\", function (props, state) {\n      var layout = state.layout,\n          tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n          tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      return routes.reduce(function (acc, _, i) {\n        return acc + _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n      }, 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"normalizeScrollValue\", function (props, state, value) {\n      var layout = state.layout;\n\n      var tabBarWidth = _this.getTabBarWidth(props, state);\n\n      var maxDistance = _this.getMaxScrollDistance(tabBarWidth, layout.width);\n\n      var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n      if (Platform.OS === 'android' && I18nManager.isRTL) {\n        return maxDistance - scrollValue;\n      }\n\n      return scrollValue;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getScrollAmount\", function (props, state, index) {\n      var layout = state.layout,\n          tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n          tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      var centerDistance = Array.from({\n        length: index + 1\n      }).reduce(function (total, _, i) {\n        var tabWidth = _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      }, 0);\n      var scrollAmount = centerDistance - layout.width / 2;\n      return _this.normalizeScrollValue(props, state, scrollAmount);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetScroll\", function (index) {\n      if (_this.props.scrollEnabled) {\n        var _this$scrollViewRef$c, _this$scrollViewRef$c2;\n\n        var scrollView = typeof ((_this$scrollViewRef$c = _this.scrollViewRef.current) === null || _this$scrollViewRef$c === void 0 ? void 0 : _this$scrollViewRef$c.scrollTo) === 'function' ? _this.scrollViewRef.current : (_this$scrollViewRef$c2 = _this.scrollViewRef.current) === null || _this$scrollViewRef$c2 === void 0 ? void 0 : _this$scrollViewRef$c2.getNode();\n        scrollView === null || scrollView === void 0 ? void 0 : scrollView.scrollTo({\n          x: _this.getScrollAmount(_this.props, _this.state, index),\n          animated: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _this$cancelNextFrame;\n\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      (_this$cancelNextFrame = _this.cancelNextFrameCb) === null || _this$cancelNextFrame === void 0 ? void 0 : _this$cancelNextFrame.call(_assertThisInitialized(_this));\n      _this.cancelNextFrameCb = scheduleInNextFrame(function () {\n        return _this.setState({\n          layout: {\n            height: height,\n            width: width\n          }\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", memoize(function (scrollAmount, maxScrollDistance) {\n      return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.sub(maxScrollDistance, scrollAmount) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n    }));\n\n    return _this;\n  }\n\n  _createClass(TabBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var navigationState = this.props.navigationState;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          tabWidths = _this$state.tabWidths;\n\n      if (prevProps.navigationState.routes.length !== navigationState.routes.length || prevProps.navigationState.index !== navigationState.index || prevState.layout.width !== layout.width || prevState.tabWidths !== tabWidths) {\n        if (this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' && !(layout.width && navigationState.routes.every(function (r) {\n          return typeof tabWidths[r.key] === 'number';\n        }))) {\n          return;\n        }\n\n        this.resetScroll(navigationState.index);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$cancelNextFrame2;\n\n      (_this$cancelNextFrame2 = this.cancelNextFrameCb) === null || _this$cancelNextFrame2 === void 0 ? void 0 : _this$cancelNextFrame2.call(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          position = _this$props.position,\n          navigationState = _this$props.navigationState,\n          jumpTo = _this$props.jumpTo,\n          scrollEnabled = _this$props.scrollEnabled,\n          bounces = _this$props.bounces,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessible = _this$props.getAccessible,\n          getLabelText = _this$props.getLabelText,\n          getTestID = _this$props.getTestID,\n          renderBadge = _this$props.renderBadge,\n          renderIcon = _this$props.renderIcon,\n          renderLabel = _this$props.renderLabel,\n          renderTabBarItem = _this$props.renderTabBarItem,\n          activeColor = _this$props.activeColor,\n          inactiveColor = _this$props.inactiveColor,\n          pressColor = _this$props.pressColor,\n          pressOpacity = _this$props.pressOpacity,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress,\n          tabStyle = _this$props.tabStyle,\n          labelStyle = _this$props.labelStyle,\n          indicatorStyle = _this$props.indicatorStyle,\n          contentContainerStyle = _this$props.contentContainerStyle,\n          style = _this$props.style,\n          indicatorContainerStyle = _this$props.indicatorContainerStyle;\n      var _this$state2 = this.state,\n          layout = _this$state2.layout,\n          tabWidths = _this$state2.tabWidths;\n      var routes = navigationState.routes;\n      var isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n      var tabBarWidth = this.getTabBarWidth(this.props, this.state);\n      var tabBarWidthPercent = \"\".concat(routes.length * 40, \"%\");\n      var translateX = this.getTranslateX(this.scrollAmount, this.getMaxScrollDistance(tabBarWidth, layout.width));\n      return React.createElement(Animated.View, {\n        onLayout: this.handleLayout,\n        style: [styles.tabBar, style]\n      }, React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.indicatorContainer, scrollEnabled ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : null, tabBarWidth ? {\n          width: tabBarWidth\n        } : scrollEnabled ? {\n          width: tabBarWidthPercent\n        } : null, indicatorContainerStyle]\n      }, this.props.renderIndicator({\n        position: position,\n        layout: layout,\n        navigationState: navigationState,\n        jumpTo: jumpTo,\n        width: isWidthDynamic ? 'auto' : \"\".concat(100 / routes.length, \"%\"),\n        style: indicatorStyle,\n        getTabWidth: this.getMemoizedTabWidthGettter(layout, routes, scrollEnabled, tabWidths, this.getFlattenedTabWidth(tabStyle))\n      })), React.createElement(View, {\n        style: styles.scroll\n      }, React.createElement(Animated.ScrollView, {\n        horizontal: true,\n        accessibilityRole: \"tablist\",\n        keyboardShouldPersistTaps: \"handled\",\n        scrollEnabled: scrollEnabled,\n        bounces: bounces,\n        alwaysBounceHorizontal: false,\n        scrollsToTop: false,\n        showsHorizontalScrollIndicator: false,\n        automaticallyAdjustContentInsets: false,\n        overScrollMode: \"never\",\n        contentContainerStyle: [styles.tabContent, scrollEnabled ? {\n          width: tabBarWidth || tabBarWidthPercent\n        } : styles.container, contentContainerStyle],\n        scrollEventThrottle: 16,\n        onScroll: Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              x: this.scrollAmount\n            }\n          }\n        }]),\n        ref: this.scrollViewRef\n      }, routes.map(function (route) {\n        var props = {\n          key: route.key,\n          position: position,\n          route: route,\n          navigationState: navigationState,\n          getAccessibilityLabel: getAccessibilityLabel,\n          getAccessible: getAccessible,\n          getLabelText: getLabelText,\n          getTestID: getTestID,\n          renderBadge: renderBadge,\n          renderIcon: renderIcon,\n          renderLabel: renderLabel,\n          activeColor: activeColor,\n          inactiveColor: inactiveColor,\n          pressColor: pressColor,\n          pressOpacity: pressOpacity,\n          onLayout: isWidthDynamic ? function (e) {\n            _this2.measuredTabWidths[route.key] = e.nativeEvent.layout.width;\n\n            if (routes.every(function (r) {\n              return typeof _this2.measuredTabWidths[r.key] === 'number';\n            })) {\n              _this2.setState({\n                tabWidths: _objectSpread({}, _this2.measuredTabWidths)\n              });\n            }\n          } : undefined,\n          onPress: function onPress() {\n            var event = {\n              route: route,\n              defaultPrevented: false,\n              preventDefault: function preventDefault() {\n                event.defaultPrevented = true;\n              }\n            };\n            onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n            if (event.defaultPrevented) {\n              return;\n            }\n\n            _this2.props.jumpTo(route.key);\n          },\n          onLongPress: function onLongPress() {\n            return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n              route: route\n            });\n          },\n          labelStyle: labelStyle,\n          style: tabStyle\n        };\n        return renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props);\n      }))));\n    }\n  }]);\n\n  return TabBar;\n}(React.Component);\n\nexport { TabBar as default };\n\n_defineProperty(TabBar, \"defaultProps\", {\n  getLabelText: function getLabelText(_ref) {\n    var route = _ref.route;\n    return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;\n  },\n  getAccessible: function getAccessible(_ref2) {\n    var route = _ref2.route;\n    return typeof route.accessible !== 'undefined' ? route.accessible : true;\n  },\n  getAccessibilityLabel: function getAccessibilityLabel(_ref3) {\n    var route = _ref3.route;\n    return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n  },\n  getTestID: function getTestID(_ref4) {\n    var route = _ref4.route;\n    return route.testID;\n  },\n  renderIndicator: function renderIndicator(props) {\n    return React.createElement(TabBarIndicator, props);\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["TabBar.tsx"],"names":["scheduleInNextFrame","frame","requestAnimationFrame","cancelAnimationFrame","TabBar","React","Component","getLabelText","route","getAccessible","getAccessibilityLabel","getTestID","renderIndicator","props","layout","width","height","tabWidths","componentDidUpdate","navigationState","prevProps","prevState","r","componentWillUnmount","Animated","style","tabStyle","StyleSheet","flattenedWidth","routes","parseFloat","Number","memoize","i","tabBarWidth","state","scrollEnabled","acc","maxDistance","scrollValue","Math","Platform","I18nManager","centerDistance","Array","length","index","tabWidth","total","scrollAmount","scrollView","x","animated","e","render","position","jumpTo","bounces","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","onLayout","styles","pointerEvents","transform","getTabWidth","horizontal","accessibilityRole","keyboardShouldPersistTaps","alwaysBounceHorizontal","scrollsToTop","showsHorizontalScrollIndicator","automaticallyAdjustContentInsets","overScrollMode","scrollEventThrottle","onScroll","nativeEvent","contentOffset","ref","key","onPress","event","defaultPrevented","preventDefault","onLongPress","container","flex","scroll","overflow","default","web","tabBar","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","shadowOffset","zIndex","tabContent","flexDirection","flexWrap","indicatorContainer","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport memoize from './memoize';\nimport {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths: { [key: string]: number };\n};\n\nconst scheduleInNextFrame = (cb: () => void) => {\n  let frame = requestAnimationFrame(() => {\n    frame = requestAnimationFrame(cb);\n  });\n\n  return () => cancelAnimationFrame(frame);\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    getLabelText: ({ route }: Scene<Route>) =>\n      typeof route.title === 'string' ? route.title.toUpperCase() : route.title,\n    getAccessible: ({ route }: Scene<Route>) =>\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\n      typeof route.accessibilityLabel === 'string'\n        ? route.accessibilityLabel\n        : typeof route.title === 'string'\n        ? route.title\n        : undefined,\n    getTestID: ({ route }: Scene<Route>) => route.testID,\n    renderIndicator: (props: IndicatorProps<Route>) => (\n      <TabBarIndicator {...props} />\n    ),\n  };\n\n  state: State = {\n    layout: { width: 0, height: 0 },\n    tabWidths: {},\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    const { navigationState } = this.props;\n    const { layout, tabWidths } = this.state;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n    ) {\n      if (\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' &&\n        !(\n          layout.width &&\n          navigationState.routes.every(\n            (r) => typeof tabWidths[r.key] === 'number'\n          )\n        )\n      ) {\n        // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n        return;\n      }\n\n      this.resetScroll(navigationState.index);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancelNextFrameCb?.();\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private cancelNextFrameCb: (() => void) | undefined = undefined;\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n    const tabStyle = StyleSheet.flatten(style);\n\n    return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n    index: number,\n    layout: Layout,\n    routes: Route[],\n    scrollEnabled: boolean | undefined,\n    tabWidths: { [key: string]: number },\n    flattenedWidth: string | number | undefined\n  ) => {\n    if (flattenedWidth === 'auto') {\n      return tabWidths[routes[index].key] || 0;\n    }\n\n    switch (typeof flattenedWidth) {\n      case 'number':\n        return flattenedWidth;\n      case 'string':\n        if (flattenedWidth.endsWith('%')) {\n          const width = parseFloat(flattenedWidth);\n          if (Number.isFinite(width)) {\n            return layout.width * (width / 100);\n          }\n        }\n    }\n\n    if (scrollEnabled) {\n      return (layout.width / 5) * 2;\n    }\n\n    return layout.width / routes.length;\n  };\n\n  private getMemoizedTabWidthGettter = memoize(\n    (\n      layout: Layout,\n      routes: Route[],\n      scrollEnabled: boolean | undefined,\n      tabWidths: { [key: string]: number },\n      flattenedWidth: string | number | undefined\n    ) => (i: number) =>\n      this.getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedWidth\n      )\n  );\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n    tabBarWidth - layoutWidth;\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    return routes.reduce<number>(\n      (acc, _, i) =>\n        acc +\n        this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        ),\n      0\n    );\n  };\n\n  private normalizeScrollValue = (\n    props: Props<T>,\n    state: State,\n    value: number\n  ) => {\n    const { layout } = state;\n    const tabBarWidth = this.getTabBarWidth(props, state);\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n      return maxDistance - scrollValue;\n    }\n\n    return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n      (total, _, i) => {\n        const tabWidth = this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        );\n\n        // To get the current index centered we adjust scroll amount by width of indexes\n        // 0 through (i - 1) and add half the width of current index i\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      },\n      0\n    );\n\n    const scrollAmount = centerDistance - layout.width / 2;\n\n    return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private resetScroll = (index: number) => {\n    if (this.props.scrollEnabled) {\n      // getNode() is not necessary in newer versions of React Native\n      const scrollView =\n        // @ts-ignore\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\n          ? this.scrollViewRef.current\n          : this.scrollViewRef.current?.getNode();\n\n      // @ts-ignore\n      scrollView?.scrollTo({\n        x: this.getScrollAmount(this.props, this.state, index),\n        animated: true,\n      });\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    // If we don't delay this state update, the UI gets stuck in weird state\n    // Maybe an issue in Reanimated?\n    // https://github.com/satya164/react-native-tab-view/issues/877\n    // Cancel any pending callbacks, since we're scheduling a new one\n    this.cancelNextFrameCb?.();\n    this.cancelNextFrameCb = scheduleInNextFrame(() =>\n      this.setState({\n        layout: {\n          height,\n          width,\n        },\n      })\n    );\n  };\n\n  private getTranslateX = memoize(\n    (scrollAmount: Animated.Node<number>, maxScrollDistance: number) =>\n      Animated.multiply(\n        Platform.OS === 'android' && I18nManager.isRTL\n          ? Animated.sub(maxScrollDistance, scrollAmount)\n          : scrollAmount,\n        I18nManager.isRTL ? 1 : -1\n      )\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      jumpTo,\n      scrollEnabled,\n      bounces,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      activeColor,\n      inactiveColor,\n      pressColor,\n      pressOpacity,\n      onTabPress,\n      onTabLongPress,\n      tabStyle,\n      labelStyle,\n      indicatorStyle,\n      contentContainerStyle,\n      style,\n      indicatorContainerStyle,\n    } = this.props;\n    const { layout, tabWidths } = this.state;\n    const { routes } = navigationState;\n\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n    const tabBarWidthPercent = `${routes.length * 40}%`;\n    const translateX = this.getTranslateX(\n      this.scrollAmount,\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\n    );\n\n    return (\n      <Animated.View\n        onLayout={this.handleLayout}\n        style={[styles.tabBar, style]}\n      >\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            styles.indicatorContainer,\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\n            tabBarWidth\n              ? { width: tabBarWidth }\n              : scrollEnabled\n              ? { width: tabBarWidthPercent }\n              : null,\n            indicatorContainerStyle,\n          ]}\n        >\n          {this.props.renderIndicator({\n            position,\n            layout,\n            navigationState,\n            jumpTo,\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\n            style: indicatorStyle,\n            getTabWidth: this.getMemoizedTabWidthGettter(\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              this.getFlattenedTabWidth(tabStyle)\n            ),\n          })}\n        </Animated.View>\n        <View style={styles.scroll}>\n          <Animated.ScrollView\n            horizontal\n            accessibilityRole=\"tablist\"\n            keyboardShouldPersistTaps=\"handled\"\n            scrollEnabled={scrollEnabled}\n            bounces={bounces}\n            alwaysBounceHorizontal={false}\n            scrollsToTop={false}\n            showsHorizontalScrollIndicator={false}\n            automaticallyAdjustContentInsets={false}\n            overScrollMode=\"never\"\n            contentContainerStyle={[\n              styles.tabContent,\n              scrollEnabled\n                ? { width: tabBarWidth || tabBarWidthPercent }\n                : styles.container,\n              contentContainerStyle,\n            ]}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: this.scrollAmount },\n                },\n              },\n            ])}\n            ref={this.scrollViewRef}\n          >\n            {routes.map((route: T) => {\n              const props: TabBarItemProps<T> & { key: string } = {\n                key: route.key,\n                position: position,\n                route: route,\n                navigationState: navigationState,\n                getAccessibilityLabel: getAccessibilityLabel,\n                getAccessible: getAccessible,\n                getLabelText: getLabelText,\n                getTestID: getTestID,\n                renderBadge: renderBadge,\n                renderIcon: renderIcon,\n                renderLabel: renderLabel,\n                activeColor: activeColor,\n                inactiveColor: inactiveColor,\n                pressColor: pressColor,\n                pressOpacity: pressOpacity,\n                onLayout: isWidthDynamic\n                  ? (e) => {\n                      this.measuredTabWidths[route.key] =\n                        e.nativeEvent.layout.width;\n\n                      // When we have measured widths for all of the tabs, we should updates the state\n                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                      if (\n                        routes.every(\n                          (r) =>\n                            typeof this.measuredTabWidths[r.key] === 'number'\n                        )\n                      ) {\n                        this.setState({\n                          tabWidths: { ...this.measuredTabWidths },\n                        });\n                      }\n                    }\n                  : undefined,\n                onPress: () => {\n                  const event: Scene<T> & Event = {\n                    route,\n                    defaultPrevented: false,\n                    preventDefault: () => {\n                      event.defaultPrevented = true;\n                    },\n                  };\n\n                  onTabPress?.(event);\n\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  this.props.jumpTo(route.key);\n                },\n                onLongPress: () => onTabLongPress?.({ route }),\n                labelStyle: labelStyle,\n                style: tabStyle,\n              };\n\n              return renderTabBarItem ? (\n                renderTabBarItem(props)\n              ) : (\n                <TabBarItem {...props} />\n              );\n            })}\n          </Animated.ScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}