{"ast":null,"code":"import { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nvar socialMediaAdapter = createEntityAdapter({\n  sortComparer: function sortComparer(a, b) {\n    return a.order - b.order;\n  }\n});\nvar socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState: socialMediaAdapter.getInitialState(),\n  reducers: {\n    saveSocialMedia: function saveSocialMedia(state, action) {\n      var _action$payload = action.payload,\n          incomingId = _action$payload.id,\n          incomingOrder = _action$payload.order,\n          incomingProfile = _action$payload.profile,\n          incomingBrightIdSocialAppData = _action$payload.brightIdSocialAppData;\n\n      var _original = original(state),\n          entities = _original.entities,\n          ids = _original.ids;\n\n      var prevEntity = entities[incomingId];\n\n      if (!prevEntity) {\n        socialMediaAdapter.addOne(state, action);\n\n        if (incomingOrder < ids.length) {\n          var entityToRemove = Object.values(entities).find(function (entity) {\n            return entity.order === incomingOrder;\n          });\n          socialMediaAdapter.removeOne(state, entityToRemove.id);\n        }\n      }\n\n      if (prevEntity && prevEntity.order === incomingOrder) {\n        socialMediaAdapter.updateOne(state, {\n          id: incomingId,\n          changes: {\n            profile: incomingProfile,\n            brightIdSocialAppData: incomingBrightIdSocialAppData\n          }\n        });\n      }\n\n      if (prevEntity && prevEntity.order !== incomingOrder) {\n        var shouldIncrement = prevEntity.order > incomingOrder;\n        var shouldDecrement = !shouldIncrement;\n        var updateList = Object.values(entities).map(function (entity) {\n          var order = entity.order,\n              profile = entity.profile,\n              brightIdSocialAppData = entity.brightIdSocialAppData;\n\n          if (entity.id === incomingId) {\n            order = incomingOrder;\n            profile = incomingProfile;\n            brightIdSocialAppData = incomingBrightIdSocialAppData;\n          } else if (shouldIncrement && order >= incomingOrder && order <= prevEntity.order) {\n            order += 1;\n          } else if (shouldDecrement && order <= incomingOrder && order >= prevEntity.order) {\n            order -= 1;\n          }\n\n          return {\n            id: entity.id,\n            changes: {\n              order: order,\n              profile: profile,\n              brightIdSocialAppData: brightIdSocialAppData\n            }\n          };\n        });\n        socialMediaAdapter.updateMany(state, updateList);\n      }\n    },\n    setProfileDisplayWidth: function setProfileDisplayWidth(state, action) {\n      socialMediaAdapter.updateOne(state, {\n        id: action.payload.id,\n        changes: {\n          profileDisplayWidth: action.payload.width\n        }\n      });\n    }\n  }\n});\nvar _socialMediaSlice$act = socialMediaSlice.actions,\n    saveSocialMedia = _socialMediaSlice$act.saveSocialMedia,\n    setProfileDisplayWidth = _socialMediaSlice$act.setProfileDisplayWidth;\nexport { saveSocialMedia, setProfileDisplayWidth };\n\nvar _socialMediaAdapter$g = socialMediaAdapter.getSelectors(function (state) {\n  return state.socialMedia;\n}),\n    selectSocialMediaById = _socialMediaAdapter$g.selectById,\n    selectAllSocialMedia = _socialMediaAdapter$g.selectAll;\n\nexport { selectSocialMediaById, selectAllSocialMedia };\nexport var selectExistingSocialMedia = createSelector(selectAllSocialMedia, function (socialMedias) {\n  return socialMedias.filter(function (socialMedia) {\n    return socialMedia.profile;\n  });\n});\nexport var selectExistingSocialMediaIds = createSelector(selectExistingSocialMedia, function (socialMedias) {\n  return socialMedias.map(function (socialMedia) {\n    return socialMedia.id;\n  });\n});\nexport var selectAllSocialMediaToShare = createSelector(selectExistingSocialMedia, function (socialMedias) {\n  return socialMedias.map(function (socialMedia) {\n    return {\n      id: socialMedia.id,\n      company: socialMedia.company,\n      order: socialMedia.order,\n      profile: socialMedia.profile,\n      profileDisplayWidth: socialMedia.profileDisplayWidth\n    };\n  });\n});\nexport default socialMediaSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/socialMediaSlice.ts"],"names":["socialMediaAdapter","createEntityAdapter","sortComparer","a","b","socialMediaSlice","createSlice","name","initialState","reducers","saveSocialMedia","incomingId","incomingOrder","incomingProfile","incomingBrightIdSocialAppData","action","entities","ids","original","prevEntity","entityToRemove","Object","entity","id","changes","profile","brightIdSocialAppData","shouldIncrement","shouldDecrement","updateList","order","setProfileDisplayWidth","profileDisplayWidth","selectSocialMediaById","selectAllSocialMedia","state","selectExistingSocialMedia","createSelector","socialMedias","socialMedia","selectExistingSocialMediaIds","selectAllSocialMediaToShare","company"],"mappings":"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","sourcesContent":["import {\n  createSlice,\n  createEntityAdapter,\n  PayloadAction,\n  createSelector,\n} from '@reduxjs/toolkit';\n\nimport { original, Draft } from 'immer';\n\nconst socialMediaAdapter = createEntityAdapter<SocialMedia>({\n  sortComparer: (a, b) => a.order - b.order,\n});\n\nconst socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState: socialMediaAdapter.getInitialState(),\n  reducers: {\n    saveSocialMedia: (\n      state: Draft<SocialMediaState>,\n      action: PayloadAction<SocialMedia>,\n    ) => {\n      // incoming payload values\n      const {\n        id: incomingId,\n        order: incomingOrder,\n        profile: incomingProfile,\n        brightIdSocialAppData: incomingBrightIdSocialAppData,\n      } = action.payload;\n\n      // access previous values from the reducer\n      const { entities, ids } = original(state);\n\n      const prevEntity = entities[incomingId];\n\n      // if social media does not already exist, add it to the list,\n      if (!prevEntity) {\n        socialMediaAdapter.addOne(state, action);\n        // if order already exists in list, then the user wants to replace the social media\n        if (incomingOrder < ids.length) {\n          const entityToRemove = Object.values(entities).find(\n            (entity) => entity.order === incomingOrder,\n          );\n\n          socialMediaAdapter.removeOne(state, entityToRemove.id);\n        }\n      }\n\n      // the user is only updating their social media profile\n      if (prevEntity && prevEntity.order === incomingOrder) {\n        socialMediaAdapter.updateOne(state, {\n          id: incomingId,\n          changes: {\n            profile: incomingProfile,\n            brightIdSocialAppData: incomingBrightIdSocialAppData,\n          },\n        });\n      }\n\n      // this indicates the user wants to re-order the list\n      if (prevEntity && prevEntity.order !== incomingOrder) {\n        // only update the order for\n        // 1. incoming id\n        // 2. Entities between previous order and incoming order\n\n        const shouldIncrement = prevEntity.order > incomingOrder;\n        const shouldDecrement = !shouldIncrement;\n\n        const updateList = Object.values(entities).map((entity) => {\n          let { order, profile, brightIdSocialAppData } = entity;\n          if (entity.id === incomingId) {\n            order = incomingOrder;\n            profile = incomingProfile;\n            brightIdSocialAppData = incomingBrightIdSocialAppData;\n          } else if (\n            shouldIncrement &&\n            order >= incomingOrder &&\n            order <= prevEntity.order\n          ) {\n            order += 1;\n          } else if (\n            shouldDecrement &&\n            order <= incomingOrder &&\n            order >= prevEntity.order\n          ) {\n            order -= 1;\n          }\n\n          return {\n            id: entity.id,\n            changes: { order, profile, brightIdSocialAppData },\n          };\n        });\n\n        socialMediaAdapter.updateMany(state, updateList);\n      }\n    },\n    setProfileDisplayWidth: (\n      state: Draft<SocialMediaState>,\n      action: PayloadAction<{ id: string; width: number | string }>,\n    ) => {\n      socialMediaAdapter.updateOne(state, {\n        id: action.payload.id,\n        changes: {\n          profileDisplayWidth: action.payload.width,\n        },\n      });\n    },\n  },\n});\n\nexport const { saveSocialMedia, setProfileDisplayWidth } =\n  socialMediaSlice.actions;\n\nexport const {\n  selectById: selectSocialMediaById,\n  selectAll: selectAllSocialMedia,\n} = socialMediaAdapter.getSelectors((state: State) => state.socialMedia);\n\nexport const selectExistingSocialMedia = createSelector(\n  selectAllSocialMedia,\n  (socialMedias) => socialMedias.filter((socialMedia) => socialMedia.profile),\n);\n\nexport const selectExistingSocialMediaIds = createSelector(\n  selectExistingSocialMedia,\n  (socialMedias) => socialMedias.map((socialMedia) => socialMedia.id),\n);\n\nexport const selectAllSocialMediaToShare = createSelector(\n  selectExistingSocialMedia,\n  (socialMedias) =>\n    socialMedias.map((socialMedia) => ({\n      id: socialMedia.id,\n      company: socialMedia.company,\n      order: socialMedia.order,\n      profile: socialMedia.profile,\n      profileDisplayWidth: socialMedia.profileDisplayWidth,\n    })) as SocialMediaShared[],\n);\nexport default socialMediaSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}