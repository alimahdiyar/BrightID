{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { URL as whatwgUrl } from 'whatwg-url-without-unicode';\nvar BLOB_URL_PREFIX = null;\nvar BlobModule = NativeModules.BlobModule;\n\nif (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {\n  BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';\n\n  if (typeof BlobModule.BLOB_URI_HOST === 'string') {\n    BLOB_URL_PREFIX += \"//\" + BlobModule.BLOB_URI_HOST + \"/\";\n  }\n}\n\nwhatwgUrl.createObjectURL = function createObjectURL(blob) {\n  if (BLOB_URL_PREFIX === null) {\n    throw new Error('Cannot create URL for blob!');\n  }\n\n  return \"\" + BLOB_URL_PREFIX + blob.data.blobId + \"?offset=\" + blob.data.offset + \"&size=\" + blob.size;\n};\n\nwhatwgUrl.revokeObjectURL = function revokeObjectURL(url) {};\n\nexport var URL = whatwgUrl;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-url-polyfill/js/URL.js"],"names":["URL","BLOB_URL_PREFIX","BlobModule","NativeModules","whatwgUrl","blob"],"mappings":";AACA,SAAQA,GAAG,IAAX,SAAA,QAAA,4BAAA;AAEA,IAAIC,eAAe,GAAnB,IAAA;AAEA,IAAOC,UAAP,GAAqBC,aAArB,CAAA,UAAA;;AAEA,IAAID,UAAU,IAAI,OAAOA,UAAU,CAAjB,eAAA,KAAlB,QAAA,EAAkE;EAChED,eAAe,GAAGC,UAAU,CAAVA,eAAAA,GAAlBD,GAAAA;;EACA,IAAI,OAAOC,UAAU,CAAjB,aAAA,KAAJ,QAAA,EAAkD;IAChDD,eAAe,IAAA,OAASC,UAAU,CAAnB,aAAA,GAAfD,GAAAA;EAEH;AA2BDG;;AAAAA,SAAS,CAATA,eAAAA,GAA4B,SAAA,eAAA,CAAA,IAAA,EAA+B;EACzD,IAAIH,eAAe,KAAnB,IAAA,EAA8B;IAC5B,MAAM,IAAA,KAAA,CAAN,6BAAM,CAAN;EAEF;;EAAA,OAAA,KAAA,eAAA,GAA4BI,IAAI,CAAJA,IAAAA,CAA5B,MAAA,GAAA,UAAA,GAAuDA,IAAI,CAAJA,IAAAA,CAAvD,MAAA,GAAA,QAAA,GAAgFA,IAAI,CAApF,IAAA;AAJFD,CAAAA;;AAOAA,SAAS,CAATA,eAAAA,GAA4B,SAAA,eAAA,CAAA,GAAA,EAA8B,CAA1DA,CAAAA;;AAIA,OAAO,IAAMJ,GAAG,GAAT,SAAA","sourcesContent":["import {NativeModules} from 'react-native';\nimport {URL as whatwgUrl} from 'whatwg-url-without-unicode';\n\nlet BLOB_URL_PREFIX = null;\n\nconst {BlobModule} = NativeModules;\n\nif (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {\n  BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';\n  if (typeof BlobModule.BLOB_URI_HOST === 'string') {\n    BLOB_URL_PREFIX += `//${BlobModule.BLOB_URI_HOST}/`;\n  }\n}\n\n/**\n * To allow Blobs be accessed via `content://` URIs,\n * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:\n *\n * ```xml\n * <manifest>\n *   <application>\n *     <provider\n *       android:name=\"com.facebook.react.modules.blob.BlobProvider\"\n *       android:authorities=\"@string/blob_provider_authority\"\n *       android:exported=\"false\"\n *     />\n *   </application>\n * </manifest>\n * ```\n * And then define the `blob_provider_authority` string in `res/values/strings.xml`.\n * Use a dotted name that's entirely unique to your app:\n *\n * ```xml\n * <resources>\n *   <string name=\"blob_provider_authority\">your.app.package.blobs</string>\n * </resources>\n * ```\n */\n\nwhatwgUrl.createObjectURL = function createObjectURL(blob) {\n  if (BLOB_URL_PREFIX === null) {\n    throw new Error('Cannot create URL for blob!');\n  }\n  return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;\n};\n\nwhatwgUrl.revokeObjectURL = function revokeObjectURL(url) {\n  // Do nothing.\n};\n\nexport const URL = whatwgUrl;\n"]},"metadata":{},"sourceType":"module"}