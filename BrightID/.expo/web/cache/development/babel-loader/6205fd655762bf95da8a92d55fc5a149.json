{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext } from 'react';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { WHITE } from \"../../theme/colors\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { confirmPendingConnectionThunk } from \"./actions/pendingConnectionThunks\";\nimport { pendingConnection_states, selectPendingConnectionById } from \"./pendingConnectionSlice\";\nimport { ReconnectView } from \"./ReconnectView\";\nimport { PreviewConnectionView } from \"./PreviewConnectionView\";\nimport { connection_levels, report_sources } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var PreviewConnectionController = function PreviewConnectionController(props) {\n  var pendingConnectionId = props.pendingConnectionId,\n      moveToNext = props.moveToNext;\n  var dispatch = useDispatch();\n  var api = useContext(NodeApiContext);\n  var pendingConnection = useSelector(function (state) {\n    return selectPendingConnectionById(state, pendingConnectionId);\n  });\n  var navigation = useNavigation();\n\n  if (!pendingConnection) {\n    return null;\n  }\n\n  var isReconnect = !!pendingConnection.pendingConnectionData.existingConnection;\n\n  if (pendingConnection.state !== pendingConnection_states.UNCONFIRMED) {\n    isReconnect = false;\n  }\n\n  var setLevelHandler = function setLevelHandler(level) {\n    moveToNext();\n    InteractionManager.runAfterInteractions(function () {\n      dispatch(confirmPendingConnectionThunk(pendingConnection.profileId, level, api));\n    });\n  };\n\n  var abuseHandler = function _callee() {\n    var sharedProfile;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sharedProfile = pendingConnection.pendingConnectionData.sharedProfile;\n            navigation.navigate('ReportReason', {\n              connectionId: sharedProfile.id,\n              connectionName: sharedProfile.name,\n              reporting: true,\n              source: isReconnect ? report_sources.RECONNECT : report_sources.PREVIEW,\n              successCallback: function successCallback(reason) {\n                dispatch(confirmPendingConnectionThunk(pendingConnection.profileId, connection_levels.REPORTED, api, reason));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var photoTouchHandler = function photoTouchHandler() {\n    navigation.navigate('FullScreenPhoto', {\n      photo: pendingConnection.pendingConnectionData.sharedProfile.photo,\n      base64: true\n    });\n  };\n\n  console.log(\"rendering \" + pendingConnection.pendingConnectionData.sharedProfile.name);\n  return _jsx(View, {\n    style: styles.previewContainer,\n    children: isReconnect ? _jsx(ReconnectView, {\n      pendingConnection: pendingConnection,\n      existingConnection: pendingConnection.pendingConnectionData.existingConnection,\n      setLevelHandler: setLevelHandler,\n      abuseHandler: abuseHandler\n    }) : _jsx(PreviewConnectionView, {\n      pendingConnection: pendingConnection,\n      setLevelHandler: setLevelHandler,\n      photoTouchHandler: photoTouchHandler,\n      abuseHandler: abuseHandler\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  previewContainer: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    paddingVertical: 10\n  }\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PreviewConnectionController.tsx"],"names":["PreviewConnectionController","pendingConnectionId","moveToNext","props","dispatch","useDispatch","api","useContext","pendingConnection","useSelector","selectPendingConnectionById","navigation","useNavigation","isReconnect","pendingConnection_states","setLevelHandler","InteractionManager","confirmPendingConnectionThunk","abuseHandler","sharedProfile","connectionId","connectionName","reporting","source","report_sources","successCallback","connection_levels","photoTouchHandler","photo","base64","console","styles","StyleSheet","previewContainer","flex","width","backgroundColor","alignItems","justifyContent","flexDirection","paddingVertical"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { InteractionManager, StyleSheet, View } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { WHITE } from '@/theme/colors';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { confirmPendingConnectionThunk } from './actions/pendingConnectionThunks';\nimport {\n  pendingConnection_states,\n  selectPendingConnectionById,\n  updatePendingConnection,\n} from './pendingConnectionSlice';\nimport { ReconnectView } from './ReconnectView';\nimport { PreviewConnectionView } from './PreviewConnectionView';\nimport { connection_levels, report_sources } from '@/utils/constants';\n\ntype PreviewConnectionProps = {\n  pendingConnectionId: string;\n  moveToNext: () => void;\n};\n\nexport const PreviewConnectionController = (props: PreviewConnectionProps) => {\n  const { pendingConnectionId, moveToNext } = props;\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n  const pendingConnection = useSelector((state: State) =>\n    selectPendingConnectionById(state, pendingConnectionId),\n  ) as PendingConnection;\n\n  const navigation = useNavigation();\n\n  if (!pendingConnection) {\n    // pending connection has vanished. Most likely channel expired.\n    // Just return null, parent components will take care of moving to a different screen.\n    return null;\n  }\n\n  let isReconnect =\n    !!pendingConnection.pendingConnectionData.existingConnection;\n  if (pendingConnection.state !== pendingConnection_states.UNCONFIRMED) {\n    // Don't display reconnect screen for connections that have just been confirmed\n    isReconnect = false;\n  }\n\n  const setLevelHandler = (level: ConnectionLevel) => {\n    // navigates to next view in the viewpager\n    moveToNext();\n    // wait until after finishes navigation before dispatching confirm action\n    InteractionManager.runAfterInteractions(() => {\n      dispatch(\n        confirmPendingConnectionThunk(pendingConnection.profileId, level, api),\n      );\n    });\n  };\n\n  const abuseHandler = async () => {\n    const { sharedProfile } = pendingConnection.pendingConnectionData;\n    navigation.navigate('ReportReason', {\n      connectionId: sharedProfile.id,\n      connectionName: sharedProfile.name,\n      reporting: true,\n      source: isReconnect ? report_sources.RECONNECT : report_sources.PREVIEW,\n      successCallback: (reason) => {\n        dispatch(\n          confirmPendingConnectionThunk(\n            pendingConnection.profileId,\n            connection_levels.REPORTED,\n            api,\n            reason\n          ),\n        );\n      },\n    });\n  };\n\n  const photoTouchHandler = () => {\n    navigation.navigate('FullScreenPhoto', {\n      photo: pendingConnection.pendingConnectionData.sharedProfile.photo,\n      base64: true,\n    });\n  };\n\n  console.log(\n    `rendering ${pendingConnection.pendingConnectionData.sharedProfile.name}`,\n  );\n  return (\n    <View style={styles.previewContainer}>\n      {isReconnect ? (\n        <ReconnectView\n          pendingConnection={pendingConnection}\n          existingConnection={\n            pendingConnection.pendingConnectionData.existingConnection\n          }\n          setLevelHandler={setLevelHandler}\n          abuseHandler={abuseHandler}\n        />\n      ) : (\n        <PreviewConnectionView\n          pendingConnection={pendingConnection}\n          setLevelHandler={setLevelHandler}\n          photoTouchHandler={photoTouchHandler}\n          abuseHandler={abuseHandler}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  previewContainer: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    paddingVertical: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}