{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useState, useEffect, useContext } from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useFocusEffect, useRoute, useNavigation } from '@react-navigation/native';\nimport { Trans, useTranslation } from 'react-i18next';\nimport BarcodeMask from 'react-native-barcode-mask';\nimport Spinner from 'react-native-spinkit';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport i18next from 'i18next';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { ORANGE, WHITE, LIGHT_BLACK, GREY } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { channel_types, closeChannel } from \"./channelSlice\";\nimport { selectAllUnconfirmedConnectionsByChannelIds } from \"./pendingConnectionSlice\";\nimport { parseChannelQrURL } from \"../../utils/channels\";\nimport { joinChannel } from \"./actions/channelThunks\";\nimport { setActiveNotification } from \"../../actions\";\nimport { hash } from \"../../utils/encoding\";\nimport { qrCodeURL_types } from \"../../utils/constants\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { RNCamera } from \"./RNCameraProvider\";\nimport { setRecoveryAesKey, setRecoveryChannel } from \"../Onboarding/RecoveryFlow/recoveryDataSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction validQrString(qrString) {\n  return qrString.length >= 42;\n}\n\nvar NotAuthorizedView = function NotAuthorizedView() {\n  return _jsx(View, {\n    style: styles.cameraPreview,\n    children: _jsx(Text, {\n      style: {\n        fontFamily: 'Poppins-Medium',\n        color: GREY\n      },\n      children: \"Camera not Authorized\"\n    })\n  });\n};\n\nexport var ScanCodeScreen = function ScanCodeScreen() {\n  var route = useRoute();\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      channel = _useState2[0],\n      setChannel = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrData = _useState4[0],\n      setQrData = _useState4[1];\n\n  var name = useSelector(function (state) {\n    return state.user.name;\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n  var pendingConnectionSizeForChannel = useSelector(function (state) {\n    if (channel) {\n      return selectAllUnconfirmedConnectionsByChannelIds(state, [channel.id]).length;\n    } else {\n      return 0;\n    }\n  });\n  useFocusEffect(useCallback(function () {\n    setQrData(undefined);\n    setChannel(null);\n    dispatch(setActiveNotification(null));\n  }, [dispatch]));\n  useEffect(function () {\n    if (channel && pendingConnectionSizeForChannel > 0 && navigation.isFocused()) {\n      switch (channel.type) {\n        case channel_types.SINGLE:\n        case channel_types.STAR:\n          navigation.navigate('PendingConnections');\n          dispatch(closeChannel({\n            channelId: channel.id,\n            background: true\n          }));\n          break;\n\n        case channel_types.GROUP:\n          navigation.navigate('GroupConnection', {\n            channel: channel\n          });\n          break;\n      }\n    }\n  }, [channel, pendingConnectionSizeForChannel, navigation, dispatch]);\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.qrcode) {\n      console.log(\"Got qrcode \" + route.params.qrcode + \" from Deeplink\");\n      setQrData(decodeURIComponent(route.params.qrcode));\n    }\n  }, [route.params, setQrData]);\n  useEffect(function () {\n    var handleQrData = function _callee(qrData) {\n      var channelURL, urlType, aesKey, channelId, _channel;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!qrData.startsWith('brightid://')) {\n                _context.next = 7;\n                break;\n              }\n\n              console.log(\"handleQrData: calling Linking.openURL() with \" + qrData);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Linking.openURL(qrData));\n\n            case 5:\n              _context.next = 33;\n              break;\n\n            case 7:\n              if (!validQrString(qrData)) {\n                _context.next = 32;\n                break;\n              }\n\n              channelURL = new URL(qrData);\n              urlType = channelURL.searchParams.get('t');\n              if (urlType) channelURL.searchParams.delete('t');\n              _context.t0 = urlType;\n              _context.next = _context.t0 === qrCodeURL_types.RECOVERY ? 14 : _context.t0 === qrCodeURL_types.SYNC ? 14 : _context.t0 === qrCodeURL_types.IMPORT ? 14 : _context.t0 === qrCodeURL_types.CONNECTION ? 22 : 22;\n              break;\n\n            case 14:\n              aesKey = channelURL.searchParams.get('aes');\n              channelURL.searchParams.delete('aes');\n              channelId = hash(aesKey);\n              console.log(\"handleQrData: Got type \" + urlType + \" recovery channel \" + channelId + \" at \" + channelURL.href);\n              dispatch(setRecoveryAesKey(aesKey));\n              dispatch(setRecoveryChannel({\n                channelId: channelId,\n                url: channelURL\n              }));\n\n              if (urlType === qrCodeURL_types.RECOVERY) {\n                navigation.navigate('RecoveringConnection');\n              } else if (urlType === qrCodeURL_types.SYNC) {\n                navigation.navigate('Devices', {\n                  syncing: true,\n                  asScanner: true\n                });\n              } else if (urlType === qrCodeURL_types.IMPORT) {\n                navigation.navigate('Add Device');\n              }\n\n              return _context.abrupt(\"break\", 30);\n\n            case 22:\n              console.log(\"handleQrData: Got connection channel at \" + channelURL.href);\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(parseChannelQrURL(channelURL));\n\n            case 25:\n              _channel = _context.sent;\n              setChannel(_channel);\n              _context.next = 29;\n              return _regeneratorRuntime.awrap(dispatch(joinChannel(_channel, api)));\n\n            case 29:\n              return _context.abrupt(\"break\", 30);\n\n            case 30:\n              _context.next = 33;\n              break;\n\n            case 32:\n              throw Error(\"Can not parse QRData \" + qrData);\n\n            case 33:\n              _context.next = 40;\n              break;\n\n            case 35:\n              _context.prev = 35;\n              _context.t1 = _context[\"catch\"](0);\n              console.log(_context.t1.message);\n              Alert.alert(i18next.t('common.alert.error'), i18next.t('pendingConnection.alert.text.errorJoinChannel', {\n                message: \"\" + _context.t1.message\n              }));\n              setQrData(undefined);\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 35]], Promise);\n    };\n\n    if (qrData) {\n      handleQrData(qrData);\n    }\n  }, [api, dispatch, navigation, qrData]);\n\n  var handleBarCodeRead = function handleBarCodeRead(_ref) {\n    var data = _ref.data;\n    console.log(\"Scanned QRCode: \" + data);\n    setQrData(data);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [!qrData ? _jsxs(_Fragment, {\n        children: [_jsx(View, {\n          style: styles.infoTopContainer,\n          children: _jsx(Trans, {\n            i18nKey: \"qrcode.text.scanCode\",\n            components: {\n              text: _jsx(Text, {\n                style: styles.infoTopText\n              })\n            },\n            values: {\n              name: name\n            }\n          })\n        }), _jsx(View, {\n          style: styles.cameraContainer,\n          testID: \"CameraContainer\",\n          children: _jsx(RNCamera, {\n            style: styles.cameraPreview,\n            captureAudio: false,\n            onBarCodeRead: handleBarCodeRead,\n            barCodeTypes: [RNCamera.Constants.BarCodeType.qr],\n            type: RNCamera.Constants.Type.back,\n            flashMode: RNCamera.Constants.FlashMode.off,\n            androidCameraPermissionOptions: {\n              title: t('common.camera.title'),\n              message: t('common.camera.message'),\n              buttonPositive: t('common.camera.ok'),\n              buttonNegative: t('common.camera.cancel')\n            },\n            notAuthorizedView: _jsx(NotAuthorizedView, {}),\n            children: _jsx(BarcodeMask, {\n              edgeColor: ORANGE,\n              animatedLineColor: ORANGE,\n              width: DEVICE_LARGE ? 230 : 190,\n              height: DEVICE_LARGE ? 230 : 190,\n              edgeRadius: 5,\n              edgeBorderWidth: DEVICE_LARGE ? 3 : 2,\n              edgeHeight: DEVICE_LARGE ? 30 : 25,\n              edgeWidth: DEVICE_LARGE ? 30 : 25\n            })\n          })\n        })]\n      }) : _jsx(View, {\n        style: styles.cameraContainer,\n        testID: \"CameraContainer\",\n        children: _jsxs(View, {\n          style: styles.downloadingDataContainer,\n          children: [_jsx(Text, {\n            style: styles.waitingText,\n            children: t('qrcode.text.downloadingConnectionData')\n          }), _jsx(Spinner, {\n            isVisible: true,\n            size: DEVICE_LARGE ? 65 : 52,\n            type: \"ThreeBounce\",\n            color: ORANGE\n          })]\n        })\n      }), _jsx(View, {\n        style: styles.bottomContainer,\n        children: pendingConnectionSizeForChannel < 1 ? _jsxs(_Fragment, {\n          children: [_jsx(Text, {\n            style: styles.infoBottomText,\n            children: t('qrcode.text.canAlso')\n          }), _jsxs(TouchableOpacity, {\n            testID: \"ScanCodeToMyCodeBtn\",\n            style: styles.showQrButton,\n            onPress: function onPress() {\n              navigation.navigate('MyCode');\n            },\n            children: [_jsx(Material, {\n              name: \"qrcode\",\n              size: DEVICE_LARGE ? 22 : 20,\n              color: WHITE\n            }), _jsx(Text, {\n              style: styles.showQrText,\n              children: t('qrcode.button.showCode')\n            })]\n          })]\n        }) : _jsxs(_Fragment, {\n          children: [_jsx(Text, {\n            style: styles.infoBottomText,\n            children: t('qrcode.text.pendingConnections', {\n              count: pendingConnectionSizeForChannel\n            })\n          }), _jsxs(TouchableOpacity, {\n            testID: \"ScanCodeToPendingConnectionsBtn\",\n            style: styles.verifyConnectionsButton,\n            onPress: function onPress() {\n              navigation.navigate('PendingConnections');\n            },\n            children: [_jsx(Material, {\n              name: \"account-multiple-plus-outline\",\n              size: DEVICE_LARGE ? 32 : 26,\n              color: ORANGE\n            }), _jsx(Text, {\n              style: styles.verifyConnectionsText,\n              children: t('qrcode.text.confirmConnections')\n            })]\n          })]\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    zIndex: 10,\n    marginTop: -58\n  },\n  infoTopContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    flexGrow: 0.6,\n    paddingTop: DEVICE_LARGE ? 40 : 25\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK\n  },\n  cameraContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%'\n  },\n  cameraPreview: {\n    flex: 0,\n    overflow: 'hidden',\n    width: DEVICE_LARGE ? 280 : 230,\n    height: DEVICE_LARGE ? 280 : 230,\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10\n  },\n  showQrButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10\n  },\n  showQrText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10\n  },\n  cameraIcon: {\n    marginTop: 2,\n    marginRight: 4\n  },\n  verifyConnectionsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: WHITE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 36,\n    borderWidth: 2,\n    borderColor: ORANGE\n  },\n  verifyConnectionsText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n    marginLeft: 10\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100\n  },\n  waitingText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK\n  },\n  downloadingDataContainer: {\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default ScanCodeScreen;","map":{"version":3,"names":["React","useCallback","useState","useEffect","useContext","useFocusEffect","useRoute","useNavigation","Trans","useTranslation","BarcodeMask","Spinner","Material","i18next","useDispatch","useSelector","DEVICE_LARGE","ORANGE","WHITE","LIGHT_BLACK","GREY","fontSize","channel_types","closeChannel","selectAllUnconfirmedConnectionsByChannelIds","parseChannelQrURL","joinChannel","setActiveNotification","hash","qrCodeURL_types","NodeApiContext","RNCamera","setRecoveryAesKey","setRecoveryChannel","validQrString","qrString","length","NotAuthorizedView","styles","cameraPreview","fontFamily","color","ScanCodeScreen","route","navigation","dispatch","channel","setChannel","undefined","qrData","setQrData","name","state","user","t","api","pendingConnectionSizeForChannel","id","isFocused","type","SINGLE","STAR","navigate","channelId","background","GROUP","params","qrcode","console","log","decodeURIComponent","handleQrData","startsWith","Linking","openURL","channelURL","URL","urlType","searchParams","get","delete","RECOVERY","SYNC","IMPORT","CONNECTION","aesKey","href","url","syncing","asScanner","Error","message","Alert","alert","handleBarCodeRead","data","orangeTop","container","infoTopContainer","text","infoTopText","cameraContainer","Constants","BarCodeType","qr","Type","back","FlashMode","off","title","buttonPositive","buttonNegative","downloadingDataContainer","waitingText","bottomContainer","infoBottomText","showQrButton","showQrText","count","verifyConnectionsButton","verifyConnectionsText","StyleSheet","create","backgroundColor","height","width","zIndex","flex","alignItems","justifyContent","flexDirection","borderTopLeftRadius","borderTopRightRadius","marginTop","flexGrow","paddingTop","textAlign","overflow","aspectRatio","marginBottom","borderRadius","marginLeft","cameraIcon","marginRight","borderWidth","borderColor","minHeight"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/ScanCodeScreen.tsx"],"sourcesContent":["import React, { useCallback, useState, useEffect, useContext } from 'react';\nimport {\n  Linking,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  StatusBar,\n  Alert,\n} from 'react-native';\nimport {\n  useFocusEffect,\n  useRoute,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Trans, useTranslation } from 'react-i18next';\nimport BarcodeMask from 'react-native-barcode-mask';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport i18next from 'i18next';\nimport { BarCodeReadEvent } from 'react-native-camera';\nimport { useDispatch, useSelector } from '@/store';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { ORANGE, WHITE, LIGHT_BLACK, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  channel_types,\n  closeChannel,\n} from '@/components/PendingConnections/channelSlice';\nimport { selectAllUnconfirmedConnectionsByChannelIds } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { parseChannelQrURL } from '@/utils/channels';\nimport { joinChannel } from '@/components/PendingConnections/actions/channelThunks';\nimport { setActiveNotification } from '@/actions';\nimport { hash } from '@/utils/encoding';\nimport { qrCodeURL_types } from '@/utils/constants';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { RNCamera } from './RNCameraProvider';\nimport {\n  setRecoveryAesKey,\n  setRecoveryChannel,\n} from '@/components/Onboarding/RecoveryFlow/recoveryDataSlice';\n\n/**\n * Returns whether the string is a valid QR identifier\n * @param {*} qrString\n */\nfunction validQrString(qrString: string) {\n  return qrString.length >= 42;\n}\n\n/**\n * Scan code screen of BrightID\n * ==================================================================\n * displays a react-native-camera view\n * after scanning qrcode - the rtc id is set\n *\n */\nconst NotAuthorizedView = () => (\n  <View style={styles.cameraPreview}>\n    <Text style={{ fontFamily: 'Poppins-Medium', color: GREY }}>\n      Camera not Authorized\n    </Text>\n  </View>\n);\n\nexport const ScanCodeScreen = () => {\n  const route: { params?: { qrcode: string } } = useRoute() as {\n    params?: { qrcode: string };\n  };\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const [channel, setChannel] = useState(null);\n  const [qrData, setQrData] = useState(undefined);\n  const name = useSelector((state: State) => state.user.name);\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const pendingConnectionSizeForChannel = useSelector((state: State) => {\n    if (channel) {\n      return selectAllUnconfirmedConnectionsByChannelIds(state, [channel.id])\n        .length;\n    } else {\n      return 0;\n    }\n  });\n\n  // always show scanner when navigating to this page\n  useFocusEffect(\n    useCallback(() => {\n      setQrData(undefined);\n      setChannel(null);\n      dispatch(setActiveNotification(null));\n    }, [dispatch]),\n  );\n\n  // navigate to next page if channel has pending connections\n  useEffect(() => {\n    if (\n      channel &&\n      pendingConnectionSizeForChannel > 0 &&\n      navigation.isFocused()\n    ) {\n      switch (channel.type) {\n        case channel_types.SINGLE:\n        case channel_types.STAR:\n          // only one peer connection expected\n          navigation.navigate('PendingConnections');\n          // close single channels to prevent navigation loop\n          dispatch(closeChannel({ channelId: channel.id, background: true }));\n          break;\n        case channel_types.GROUP:\n          // Expect multiple peers, so show group connection screen\n          navigation.navigate('GroupConnection', { channel });\n          break;\n      }\n    }\n  }, [channel, pendingConnectionSizeForChannel, navigation, dispatch]);\n\n  // handle deep links\n  useEffect(() => {\n    if (route.params?.qrcode) {\n      console.log(`Got qrcode ${route.params.qrcode} from Deeplink`);\n      setQrData(decodeURIComponent(route.params.qrcode));\n    }\n  }, [route.params, setQrData]);\n\n  // handle qrcode data\n  useEffect(() => {\n    const handleQrData = async (qrData) => {\n      try {\n        if (qrData.startsWith('brightid://')) {\n          console.log(`handleQrData: calling Linking.openURL() with ${qrData}`);\n          await Linking.openURL(qrData);\n        } else if (validQrString(qrData)) {\n          const channelURL = new URL(qrData);\n          // Pop 'type' parameter from url if it is included\n          const urlType = channelURL.searchParams.get('t');\n          if (urlType) channelURL.searchParams.delete('t');\n\n          switch (urlType) {\n            case qrCodeURL_types.RECOVERY:\n            case qrCodeURL_types.SYNC:\n            case qrCodeURL_types.IMPORT: {\n              // Pop 'aes' parameter from url\n              const aesKey = channelURL.searchParams.get('aes');\n              channelURL.searchParams.delete('aes');\n\n              const channelId = hash(aesKey);\n              console.log(\n                `handleQrData: Got type ${urlType} recovery channel ${channelId} at ${channelURL.href}`,\n              );\n\n              dispatch(setRecoveryAesKey(aesKey));\n              dispatch(\n                setRecoveryChannel({\n                  channelId,\n                  url: channelURL,\n                }),\n              );\n              if (urlType === qrCodeURL_types.RECOVERY) {\n                navigation.navigate('RecoveringConnection');\n              } else if (urlType === qrCodeURL_types.SYNC) {\n                navigation.navigate('Devices', {\n                  syncing: true,\n                  asScanner: true,\n                });\n              } else if (urlType === qrCodeURL_types.IMPORT) {\n                navigation.navigate('Add Device');\n              }\n              break;\n            }\n            case qrCodeURL_types.CONNECTION:\n            default: {\n              // Currently assuming qrcodes without type parameter are connection channels created by previous app\n              // versions. Change this in one of the next releases:\n              // -> Add type parameter 't' to connection channel qrcode\n              // -> Throw an error if no/unknown type is found in qrcode\n              console.log(\n                `handleQrData: Got connection channel at ${channelURL.href}`,\n              );\n              const channel = await parseChannelQrURL(channelURL);\n              setChannel(channel);\n              await dispatch(joinChannel(channel, api));\n              break;\n            }\n          }\n        } else {\n          throw Error(`Can not parse QRData ${qrData}`);\n        }\n      } catch (err) {\n        console.log(err.message);\n        Alert.alert(\n          i18next.t('common.alert.error'),\n          i18next.t('pendingConnection.alert.text.errorJoinChannel', {\n            message: `${err.message}`,\n          }),\n        );\n        setQrData(undefined);\n      }\n    };\n    if (qrData) {\n      handleQrData(qrData);\n    }\n  }, [api, dispatch, navigation, qrData]);\n\n  const handleBarCodeRead = ({ data }: BarCodeReadEvent) => {\n    console.log(`Scanned QRCode: ${data}`);\n    setQrData(data);\n  };\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        {!qrData ? (\n          <>\n            <View style={styles.infoTopContainer}>\n              <Trans\n                i18nKey=\"qrcode.text.scanCode\"\n                components={{ text: <Text style={styles.infoTopText} /> }}\n                values={{ name }}\n              />\n            </View>\n            <View style={styles.cameraContainer} testID=\"CameraContainer\">\n              <RNCamera\n                style={styles.cameraPreview}\n                captureAudio={false}\n                onBarCodeRead={handleBarCodeRead}\n                barCodeTypes={[RNCamera.Constants.BarCodeType.qr]}\n                type={RNCamera.Constants.Type.back}\n                flashMode={RNCamera.Constants.FlashMode.off}\n                androidCameraPermissionOptions={{\n                  title: t('common.camera.title'),\n                  message: t('common.camera.message'),\n                  buttonPositive: t('common.camera.ok'),\n                  buttonNegative: t('common.camera.cancel'),\n                }}\n                notAuthorizedView={<NotAuthorizedView />}\n              >\n                <BarcodeMask\n                  edgeColor={ORANGE}\n                  animatedLineColor={ORANGE}\n                  width={DEVICE_LARGE ? 230 : 190}\n                  height={DEVICE_LARGE ? 230 : 190}\n                  edgeRadius={5}\n                  edgeBorderWidth={DEVICE_LARGE ? 3 : 2}\n                  edgeHeight={DEVICE_LARGE ? 30 : 25}\n                  edgeWidth={DEVICE_LARGE ? 30 : 25}\n                />\n              </RNCamera>\n            </View>\n          </>\n        ) : (\n          <View style={styles.cameraContainer} testID=\"CameraContainer\">\n            <View style={styles.downloadingDataContainer}>\n              <Text style={styles.waitingText}>\n                {t('qrcode.text.downloadingConnectionData')}\n              </Text>\n              <Spinner\n                isVisible={true}\n                size={DEVICE_LARGE ? 65 : 52}\n                type=\"ThreeBounce\"\n                color={ORANGE}\n              />\n            </View>\n          </View>\n        )}\n\n        <View style={styles.bottomContainer}>\n          {pendingConnectionSizeForChannel < 1 ? (\n            <>\n              <Text style={styles.infoBottomText}>\n                {t('qrcode.text.canAlso')}\n              </Text>\n              <TouchableOpacity\n                testID=\"ScanCodeToMyCodeBtn\"\n                style={styles.showQrButton}\n                onPress={() => {\n                  navigation.navigate('MyCode');\n                }}\n              >\n                <Material\n                  name=\"qrcode\"\n                  size={DEVICE_LARGE ? 22 : 20}\n                  color={WHITE}\n                />\n\n                <Text style={styles.showQrText}>\n                  {t('qrcode.button.showCode')}\n                </Text>\n              </TouchableOpacity>\n            </>\n          ) : (\n            <>\n              <Text style={styles.infoBottomText}>\n                {t('qrcode.text.pendingConnections', {\n                  count: pendingConnectionSizeForChannel,\n                })}\n              </Text>\n              <TouchableOpacity\n                testID=\"ScanCodeToPendingConnectionsBtn\"\n                style={styles.verifyConnectionsButton}\n                onPress={() => {\n                  navigation.navigate('PendingConnections');\n                }}\n              >\n                <Material\n                  name=\"account-multiple-plus-outline\"\n                  size={DEVICE_LARGE ? 32 : 26}\n                  color={ORANGE}\n                />\n                <Text style={styles.verifyConnectionsText}>\n                  {t('qrcode.text.confirmConnections')}\n                </Text>\n              </TouchableOpacity>\n            </>\n          )}\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    zIndex: 10,\n    marginTop: -58,\n  },\n  infoTopContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    flexGrow: 0.6,\n    paddingTop: DEVICE_LARGE ? 40 : 25,\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  cameraContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n  },\n  cameraPreview: {\n    flex: 0,\n    overflow: 'hidden',\n    width: DEVICE_LARGE ? 280 : 230,\n    height: DEVICE_LARGE ? 280 : 230,\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10,\n  },\n  showQrButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10,\n  },\n  showQrText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10,\n  },\n  cameraIcon: {\n    marginTop: 2,\n    marginRight: 4,\n  },\n  verifyConnectionsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: WHITE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 36,\n    borderWidth: 2,\n    borderColor: ORANGE,\n  },\n  verifyConnectionsText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n    marginLeft: 10,\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100,\n  },\n  waitingText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  downloadingDataContainer: {\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default ScanCodeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}