{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNewGroup = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _cryptoJs = _interopRequireDefault(require(\"crypto-js\"));\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _filesystem = require(\"../../utils/filesystem\");\n\nvar _invites = require(\"../../utils/invites\");\n\nvar _actions = require(\"../../actions\");\n\nvar _backupService = _interopRequireDefault(require(\"../../api/backupService\"));\n\nvar _encoding = require(\"../../utils/encoding\");\n\nvar _connectionsSlice = require(\"../../reducer/connectionsSlice\");\n\nvar _operationsSlice = require(\"../../reducer/operationsSlice\");\n\nvar _backupThunks = require(\"../Onboarding/RecoveryFlow/thunks/backupThunks\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar createNewGroup = function createNewGroup(photo, name, api, newGroupInvitees, setCreationState) {\n  return function _callee(dispatch, getState) {\n    var _getState, _getState$user, id, backupCompleted, invitees, aesKey, uuidKey, groupId, type, groupData, encryptedGroupData, url, filename, newGroup, createOp, _iterator, _step, inv, _await$api$getProfile, signingKeys, inviteData, inviteOp;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState = getState(), _getState$user = _getState.user, id = _getState$user.id, backupCompleted = _getState$user.backupCompleted;\n            invitees = newGroupInvitees.map(function (inv) {\n              return (0, _connectionsSlice.selectConnectionById)(getState(), inv);\n            });\n            _context.next = 5;\n            return _regenerator.default.awrap((0, _encoding.randomKey)(16));\n\n          case 5:\n            aesKey = _context.sent;\n            _context.next = 8;\n            return _regenerator.default.awrap((0, _encoding.randomKey)(9));\n\n          case 8:\n            uuidKey = _context.sent;\n            groupId = (0, _encoding.hash)(uuidKey);\n            type = 'general';\n            groupData = JSON.stringify({\n              name: name,\n              photo: photo\n            });\n            encryptedGroupData = _cryptoJs.default.AES.encrypt(groupData, aesKey).toString();\n            _context.next = 15;\n            return _regenerator.default.awrap(_backupService.default.putRecovery('immutable', groupId, encryptedGroupData));\n\n          case 15:\n            setCreationState('creatingGroup');\n            url = \"https://recovery.brightid.org/backups/immutable/\" + groupId;\n            filename = null;\n\n            if (!photo) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return _regenerator.default.awrap((0, _filesystem.saveImage)({\n              imageName: groupId,\n              base64Image: photo\n            }));\n\n          case 21:\n            filename = _context.sent;\n\n          case 22:\n            newGroup = {\n              invites: [],\n              joined: 0,\n              timestamp: 0,\n              admins: [id],\n              members: [id],\n              id: groupId,\n              photo: {\n                filename: filename\n              },\n              name: name,\n              url: url,\n              aesKey: aesKey,\n              type: type,\n              state: 'initiated'\n            };\n            _context.next = 25;\n            return _regenerator.default.awrap(api.createGroup(groupId, url, type));\n\n          case 25:\n            createOp = _context.sent;\n            dispatch((0, _operationsSlice.addOperation)(createOp));\n            dispatch((0, _actions.createGroup)(newGroup));\n            _iterator = _createForOfIteratorHelperLoose(invitees);\n\n          case 29:\n            if ((_step = _iterator()).done) {\n              _context.next = 44;\n              break;\n            }\n\n            inv = _step.value;\n            _context.next = 33;\n            return _regenerator.default.awrap(api.getProfile(inv.id));\n\n          case 33:\n            _await$api$getProfile = _context.sent;\n            signingKeys = _await$api$getProfile.signingKeys;\n            _context.next = 37;\n            return _regenerator.default.awrap((0, _invites.encryptAesKey)(aesKey, signingKeys[0]));\n\n          case 37:\n            inviteData = _context.sent;\n            _context.next = 40;\n            return _regenerator.default.awrap(api.invite(inv.id, groupId, inviteData));\n\n          case 40:\n            inviteOp = _context.sent;\n            dispatch((0, _operationsSlice.addOperation)(inviteOp));\n\n          case 42:\n            _context.next = 29;\n            break;\n\n          case 44:\n            if (!backupCompleted) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 47;\n            return _regenerator.default.awrap(dispatch((0, _backupThunks.backupUser)()));\n\n          case 47:\n            if (!filename) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 50;\n            return _regenerator.default.awrap(dispatch((0, _backupThunks.backupPhoto)(groupId, filename)));\n\n          case 50:\n            return _context.abrupt(\"return\", true);\n\n          case 53:\n            _context.prev = 53;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0.message);\n\n            _reactNative.Alert.alert(_i18next.default.t('createGroup.alert.title.createFailed'), _context.t0.message);\n\n            return _context.abrupt(\"return\", false);\n\n          case 58:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 53]], Promise);\n  };\n};\n\nexports.createNewGroup = createNewGroup;","map":{"version":3,"names":["createNewGroup","photo","name","api","newGroupInvitees","setCreationState","dispatch","getState","user","id","backupCompleted","invitees","map","inv","selectConnectionById","randomKey","aesKey","uuidKey","groupId","hash","type","groupData","JSON","stringify","encryptedGroupData","CryptoJS","AES","encrypt","toString","backupApi","putRecovery","url","filename","saveImage","imageName","base64Image","newGroup","invites","joined","timestamp","admins","members","state","createGroup","createOp","addOperation","getProfile","signingKeys","encryptAesKey","inviteData","invite","inviteOp","backupUser","backupPhoto","console","error","message","Alert","alert","i18next","t"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Groups/actions.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport CryptoJS from 'crypto-js';\nimport i18next from 'i18next';\nimport { saveImage } from '@/utils/filesystem';\nimport { encryptAesKey } from '@/utils/invites';\nimport { createGroup } from '@/actions/index';\nimport backupApi from '@/api/backupService';\nimport { hash, randomKey } from '@/utils/encoding';\nimport { selectConnectionById } from '@/reducer/connectionsSlice';\nimport { addOperation } from '@/reducer/operationsSlice';\nimport {\n  backupPhoto,\n  backupUser,\n} from '../Onboarding/RecoveryFlow/thunks/backupThunks';\nimport { NodeApi } from '@/api/brightId';\n\nexport const createNewGroup =\n  (\n    photo: string,\n    name: string,\n    api: NodeApi,\n    newGroupInvitees: Array<string>,\n    setCreationState: (string) => void,\n  ) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        user: { id, backupCompleted },\n      } = getState();\n\n      const invitees = newGroupInvitees.map((inv) =>\n        selectConnectionById(getState(), inv),\n      );\n\n      const aesKey = await randomKey(16);\n      const uuidKey = await randomKey(9);\n      const groupId = hash(uuidKey);\n      const type = 'general';\n\n      const groupData = JSON.stringify({ name, photo });\n\n      const encryptedGroupData = CryptoJS.AES.encrypt(\n        groupData,\n        aesKey,\n      ).toString();\n\n      await backupApi.putRecovery('immutable', groupId, encryptedGroupData);\n      setCreationState('creatingGroup');\n\n      const url = `https://recovery.brightid.org/backups/immutable/${groupId}`;\n\n      let filename = null;\n      if (photo) {\n        filename = await saveImage({\n          imageName: groupId,\n          base64Image: photo,\n        });\n      }\n\n      const newGroup: Group = {\n        invites: [],\n        joined: 0,\n        timestamp: 0,\n        admins: [id],\n        members: [id],\n        id: groupId,\n        photo: { filename },\n        name,\n        url,\n        aesKey,\n        type,\n        state: 'initiated',\n      };\n\n      const createOp = await api.createGroup(groupId, url, type);\n      dispatch(addOperation(createOp));\n      dispatch(createGroup(newGroup));\n\n      for (const inv of invitees) {\n        const { signingKeys } = await api.getProfile(inv.id);\n        const inviteData = await encryptAesKey(aesKey, signingKeys[0]);\n        const inviteOp = await api.invite(inv.id, groupId, inviteData);\n        dispatch(addOperation(inviteOp));\n      }\n\n      if (backupCompleted) {\n        await dispatch(backupUser());\n        if (filename) {\n          await dispatch(backupPhoto(groupId, filename));\n        }\n      }\n      return true;\n    } catch (err) {\n      console.error(err.message);\n      Alert.alert(\n        i18next.t('createGroup.alert.title.createFailed'),\n        err.message,\n      );\n      return false;\n    }\n  };\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAMO,IAAMA,cAAc,GACzB,SADWA,cACX,CACEC,KADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,gBAJF,EAKEC,gBALF;EAAA,OAOA,iBAAOC,QAAP,EAA2BC,QAA3B;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,YAIQA,QAAQ,EAJhB,6BAGMC,IAHN,EAGcC,EAHd,kBAGcA,EAHd,EAGkBC,eAHlB,kBAGkBA,eAHlB;YAMUC,QANV,GAMqBP,gBAAgB,CAACQ,GAAjB,CAAqB,UAACC,GAAD;cAAA,OACpC,IAAAC,sCAAA,EAAqBP,QAAQ,EAA7B,EAAiCM,GAAjC,CADoC;YAAA,CAArB,CANrB;YAAA;YAAA,kCAUyB,IAAAE,mBAAA,EAAU,EAAV,CAVzB;;UAAA;YAUUC,MAVV;YAAA;YAAA,kCAW0B,IAAAD,mBAAA,EAAU,CAAV,CAX1B;;UAAA;YAWUE,OAXV;YAYUC,OAZV,GAYoB,IAAAC,cAAA,EAAKF,OAAL,CAZpB;YAaUG,IAbV,GAaiB,SAbjB;YAeUC,SAfV,GAesBC,IAAI,CAACC,SAAL,CAAe;cAAErB,IAAI,EAAJA,IAAF;cAAQD,KAAK,EAALA;YAAR,CAAf,CAftB;YAiBUuB,kBAjBV,GAiB+BC,iBAAA,CAASC,GAAT,CAAaC,OAAb,CACzBN,SADyB,EAEzBL,MAFyB,EAGzBY,QAHyB,EAjB/B;YAAA;YAAA,kCAsBUC,sBAAA,CAAUC,WAAV,CAAsB,WAAtB,EAAmCZ,OAAnC,EAA4CM,kBAA5C,CAtBV;;UAAA;YAuBInB,gBAAgB,CAAC,eAAD,CAAhB;YAEM0B,GAzBV,wDAyBmEb,OAzBnE;YA2BQc,QA3BR,GA2BmB,IA3BnB;;YAAA,KA4BQ/B,KA5BR;cAAA;cAAA;YAAA;;YAAA;YAAA,kCA6BuB,IAAAgC,qBAAA,EAAU;cACzBC,SAAS,EAAEhB,OADc;cAEzBiB,WAAW,EAAElC;YAFY,CAAV,CA7BvB;;UAAA;YA6BM+B,QA7BN;;UAAA;YAmCUI,QAnCV,GAmC4B;cACtBC,OAAO,EAAE,EADa;cAEtBC,MAAM,EAAE,CAFc;cAGtBC,SAAS,EAAE,CAHW;cAItBC,MAAM,EAAE,CAAC/B,EAAD,CAJc;cAKtBgC,OAAO,EAAE,CAAChC,EAAD,CALa;cAMtBA,EAAE,EAAES,OANkB;cAOtBjB,KAAK,EAAE;gBAAE+B,QAAQ,EAARA;cAAF,CAPe;cAQtB9B,IAAI,EAAJA,IARsB;cAStB6B,GAAG,EAAHA,GATsB;cAUtBf,MAAM,EAANA,MAVsB;cAWtBI,IAAI,EAAJA,IAXsB;cAYtBsB,KAAK,EAAE;YAZe,CAnC5B;YAAA;YAAA,kCAkD2BvC,GAAG,CAACwC,WAAJ,CAAgBzB,OAAhB,EAAyBa,GAAzB,EAA8BX,IAA9B,CAlD3B;;UAAA;YAkDUwB,QAlDV;YAmDItC,QAAQ,CAAC,IAAAuC,6BAAA,EAAaD,QAAb,CAAD,CAAR;YACAtC,QAAQ,CAAC,IAAAqC,oBAAA,EAAYP,QAAZ,CAAD,CAAR;YApDJ,4CAsDsBzB,QAtDtB;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAsDeE,GAtDf;YAAA;YAAA,kCAuDoCV,GAAG,CAAC2C,UAAJ,CAAejC,GAAG,CAACJ,EAAnB,CAvDpC;;UAAA;YAAA;YAuDcsC,WAvDd,yBAuDcA,WAvDd;YAAA;YAAA,kCAwD+B,IAAAC,sBAAA,EAAchC,MAAd,EAAsB+B,WAAW,CAAC,CAAD,CAAjC,CAxD/B;;UAAA;YAwDYE,UAxDZ;YAAA;YAAA,kCAyD6B9C,GAAG,CAAC+C,MAAJ,CAAWrC,GAAG,CAACJ,EAAf,EAAmBS,OAAnB,EAA4B+B,UAA5B,CAzD7B;;UAAA;YAyDYE,QAzDZ;YA0DM7C,QAAQ,CAAC,IAAAuC,6BAAA,EAAaM,QAAb,CAAD,CAAR;;UA1DN;YAAA;YAAA;;UAAA;YAAA,KA6DQzC,eA7DR;cAAA;cAAA;YAAA;;YAAA;YAAA,kCA8DYJ,QAAQ,CAAC,IAAA8C,wBAAA,GAAD,CA9DpB;;UAAA;YAAA,KA+DUpB,QA/DV;cAAA;cAAA;YAAA;;YAAA;YAAA,kCAgEc1B,QAAQ,CAAC,IAAA+C,yBAAA,EAAYnC,OAAZ,EAAqBc,QAArB,CAAD,CAhEtB;;UAAA;YAAA,iCAmEW,IAnEX;;UAAA;YAAA;YAAA;YAqEIsB,OAAO,CAACC,KAAR,CAAc,YAAIC,OAAlB;;YACAC,kBAAA,CAAMC,KAAN,CACEC,gBAAA,CAAQC,CAAR,CAAU,sCAAV,CADF,EAEE,YAAIJ,OAFN;;YAtEJ,iCA0EW,KA1EX;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAPA;AAAA,CADK"},"metadata":{},"sourceType":"script"}