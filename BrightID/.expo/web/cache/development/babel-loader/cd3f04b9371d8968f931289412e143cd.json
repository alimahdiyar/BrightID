{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string' ? value : Number(value);\n}\n\nvar CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n\n  [0, -1, 1, -2, 2].forEach(function (v) {\n    return CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true));\n  });\n}\n\nvar InternalAnimatedValue = function (_AnimatedNode) {\n  _inherits(InternalAnimatedValue, _AnimatedNode);\n\n  var _super = _createSuper(InternalAnimatedValue);\n\n  function InternalAnimatedValue(value) {\n    var _this;\n\n    var constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, InternalAnimatedValue);\n\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    _this = _super.call(this, {\n      type: 'value',\n      value: sanitizeValue(value)\n    });\n    _this._startingValue = _this._value = value;\n    _this._animation = null;\n    _this._constant = constant;\n    return _this;\n  }\n\n  _createClass(InternalAnimatedValue, [{\n    key: \"__detach\",\n    value: function __detach() {\n      var _this2 = this;\n\n      if (!this._constant) {\n        if (ReanimatedModule.getValue) {\n          ReanimatedModule.getValue(this.__nodeID, function (val) {\n            return _this2.__nodeConfig.value = val;\n          });\n        } else {\n          this.__nodeConfig.value = this.__getValue();\n        }\n      }\n\n      this.__detachAnimation(this._animation);\n\n      _get(_getPrototypeOf(InternalAnimatedValue.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__detachAnimation\",\n    value: function __detachAnimation(animation) {\n      animation && animation.__detach();\n\n      if (this._animation === animation) {\n        this._animation = null;\n      }\n    }\n  }, {\n    key: \"__attachAnimation\",\n    value: function __attachAnimation(animation) {\n      this.__detachAnimation(this._animation);\n\n      this._animation = animation;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (this.__inputNodes && this.__inputNodes.length) {\n        this.__inputNodes.forEach(val);\n      }\n\n      return this._value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.__detachAnimation(this._animation);\n\n      this._updateValue(value);\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue(value) {\n      this._value = value;\n\n      this.__forceUpdateCache(value);\n    }\n  }], [{\n    key: \"valueForConstant\",\n    value: function valueForConstant(number) {\n      initializeConstantValues();\n      return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);\n    }\n  }]);\n\n  return InternalAnimatedValue;\n}(AnimatedNode);\n\nexport { InternalAnimatedValue as default };","map":{"version":3,"sources":["InternalAnimatedValue.js"],"names":["value","Number","CONSTANT_VALUES","v","InternalAnimatedValue","AnimatedNode","initializeConstantValues","constructor","constant","invariant","type","sanitizeValue","__detach","ReanimatedModule","val","__detachAnimation","animation","__attachAnimation","__onEvaluate","setValue","_updateValue"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../ReanimatedModule';\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(v =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(\n      value !== null,\n      'Animated.Value cannot be set to the null'\n    );\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          val => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}