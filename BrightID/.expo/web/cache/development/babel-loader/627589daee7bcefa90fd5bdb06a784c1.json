{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nvar VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport var shouldPreventRemove = function shouldPreventRemove(emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) {\n  var _action$VISITED_ROUTE;\n\n  var nextRouteKeys = nextRoutes.map(function (route) {\n    return route.key;\n  });\n  var removedRoutes = currentRoutes.filter(function (route) {\n    return !nextRouteKeys.includes(route.key);\n  }).reverse();\n  var visitedRouteKeys = (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n\n  var beforeRemoveAction = _objectSpread(_objectSpread({}, action), {}, _defineProperty({}, VISITED_ROUTE_KEYS, visitedRouteKeys));\n\n  for (var _iterator = _createForOfIteratorHelperLoose(removedRoutes), _step; !(_step = _iterator()).done;) {\n    var route = _step.value;\n\n    var _beforeRemoveListener;\n\n    if (visitedRouteKeys.has(route.key)) {\n      continue;\n    }\n\n    var isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n    var event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport default function useOnPreventRemove(_ref) {\n  var getState = _ref.getState,\n      emitter = _ref.emitter,\n      beforeRemoveListeners = _ref.beforeRemoveListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addKeyedListener = _React$useContext.addKeyedListener;\n\n  var route = React.useContext(NavigationRouteContext);\n  var routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(function () {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, function (action) {\n        var state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","nextRouteKeys","nextRoutes","route","removedRoutes","currentRoutes","visitedRouteKeys","action","beforeRemoveAction","isPrevented","beforeRemoveListeners","event","emitter","type","target","data","canPreventDefault","getState","addKeyedListener","React","routeKey","state"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAKA,OAAA,wBAAA;AAGA,OAAA,sBAAA;AAUA,IAAMA,kBAAkB,GAAGC,MAAM,CAAjC,oBAAiC,CAAjC;AAEA,OAAO,IAAMC,mBAAmB,GAAnBA,SAAAA,mBAAAA,CAAsB,OAAtBA,EAAsB,qBAAtBA,EAAsB,aAAtBA,EAAsB,UAAtBA,EAAsB,MAAtBA,EAMR;EAAA,IAAA,qBAAA;;EACH,IAAMC,aAAa,GAAGC,UAAU,CAAVA,GAAAA,CAAgBC,UAAD,KAACA,EAAD;IAAA,OAAWA,KAAK,CAAhB,GAAA;EAArC,CAAsBD,CAAtB;EAGA,IAAME,aAAa,GAAGC,aAAa,CAAbA,MAAAA,CACXF,UAAD,KAACA,EAAD;IAAA,OAAW,CAACF,aAAa,CAAbA,QAAAA,CAAuBE,KAAK,CAAxC,GAAYF,CAAZ;EADYI,CAAAA,EAAtB,OAAsBA,EAAtB;EAIA,IAAMC,gBAA6B,GAAA,CAAA,qBAAA,GAEjCC,MAAM,CAF2B,kBAE3B,CAF2B,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAEH,IAFhC,GAEgC,EAFhC;;EAIA,IAAMC,kBAAkB,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,eAAA,CAAA,EAAA,EAAA,kBAAA,EAAxB,gBAAwB,CAAA,CAAxB;;EAKA,KAAA,IAAA,SAAA,GAAA,+BAAA,CAAA,aAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAAmC;IAAxBL,IAAAA,KAAwB,GAAA,KAAA,CAAA,KAAxBA;;IAAwB,IAAA,qBAAA;;IACjC,IAAIG,gBAAgB,CAAhBA,GAAAA,CAAqBH,KAAK,CAA9B,GAAIG,CAAJ,EAAqC;MADJ;IAOjC;;IAAA,IAAMG,WAAW,GAAA,CAAA,qBAAA,GAAGC,qBAAqB,CAACP,KAAK,CAA9B,GAAwB,CAAxB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGO,qBAAAA,CAAAA,IAAAA,CAAAA,qBAAAA,EAApB,kBAAoBA,CAApB;;IAEA,IAAA,WAAA,EAAiB;MACf,OAAA,IAAA;IAGFJ;;IAAAA,gBAAgB,CAAhBA,GAAAA,CAAqBH,KAAK,CAA1BG,GAAAA;IAEA,IAAMK,KAAK,GAAGC,OAAO,CAAPA,IAAAA,CAAa;MACzBC,IAAI,EADqB,cAAA;MAEzBC,MAAM,EAAEX,KAAK,CAFY,GAAA;MAGzBY,IAAI,EAAE;QAAER,MAAM,EAHW;MAGnB,CAHmB;MAIzBS,iBAAiB,EAJnB;IAA2B,CAAbJ,CAAd;;IAOA,IAAID,KAAK,CAAT,gBAAA,EAA4B;MAC1B,OAAA,IAAA;IAEH;EAED;;EAAA,OAlDK,KAkDL;AAlDK,CAAA;AAqDP,eAAe,SAAA,kBAAA,CAAA,IAAA,EAIH;EAHVM,IAAAA,QAGU,GAAA,IAAA,CAHVA,QAAAA;EAAAA,IACAL,OAEU,GAAA,IAAA,CAFVA,OADAK;EAAAA,IAEAP,qBACU,GAAA,IAAA,CADVA,qBAFAO;;EAIA,IAAA,iBAAA,GAA6BE,KAAK,CAALA,UAAAA,CAA7B,wBAA6BA,CAA7B;EAAA,IAAQD,gBAAR,GAAA,iBAAA,CAAA,gBAAA;;EACA,IAAMf,KAAK,GAAGgB,KAAK,CAALA,UAAAA,CAAd,sBAAcA,CAAd;EACA,IAAMC,QAAQ,GAAGjB,KAAH,KAAA,IAAGA,IAAAA,KAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,KAAK,CAAtB,GAAA;EAEAgB,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAA,QAAA,EAAc;MACZ,OAAOD,gBAAP,KAAA,IAAOA,IAAAA,gBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,gBAAgB,CAAA,cAAA,EAAA,QAAA,EAA8BX,UAAD,MAACA,EAAW;QAC9D,IAAMc,KAAK,GAAGJ,QAAd,EAAA;QAEA,OAAOjB,mBAAmB,CAAA,OAAA,EAAA,qBAAA,EAGxBqB,KAAK,CAHmB,MAAA,EAAA,EAAA,EAHL,MAGK,CAA1B;MAHF,CAAuB,CAAvB;IAFJF;EAAAA,CAAAA,EAcG,CAAA,gBAAA,EAAA,qBAAA,EAAA,OAAA,EAAA,QAAA,EAdHA,QAcG,CAdHA;AAeD","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"module"}