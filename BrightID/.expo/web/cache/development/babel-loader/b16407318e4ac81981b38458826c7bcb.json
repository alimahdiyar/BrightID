{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"progress\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from 'react-native-reanimated';\nvar interpolateDeprecated = Animated.interpolate,\n    interpolateNode = Animated.interpolateNode,\n    cond = Animated.cond,\n    greaterThan = Animated.greaterThan;\nvar interpolate = interpolateNode !== null && interpolateNode !== void 0 ? interpolateNode : interpolateDeprecated;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: Platform.OS === 'windows' || Platform.OS === 'macos' ? [0, 1] : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style]\n  }));\n});\nvar overlayStyle = Platform.select({\n  web: {\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\nvar styles = StyleSheet.create({\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  })\n});\nexport default Overlay;","map":{"version":3,"sources":["Overlay.tsx"],"names":["interpolateDeprecated","interpolateNode","cond","greaterThan","Animated","interpolate","PROGRESS_EPSILON","Overlay","React","progress","style","props","animatedStyle","opacity","inputRange","Platform","outputRange","zIndex","ref","styles","overlayStyle","web","WebkitTapHighlightColor","default","StyleSheet","overlay","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,QAAA,MAAA,yBAAA;AAEA,IACeA,qBADf,GAMII,QANJ,CAAA,WAAA;AAAA,IAGEH,eAHF,GAMIG,QANJ,CAAA,eAAA;AAAA,IAIEF,IAJF,GAMIE,QANJ,CAAA,IAAA;AAAA,IAKED,WALF,GAMIC,QANJ,CAAA,WAAA;AAQA,IAAMC,WAAyC,GAC7CJ,eAD6C,KAAA,IAC7CA,IAAAA,eAD6C,KAAA,KAAA,CAC7CA,GAAAA,eAAAA,GADF,qBAAA;AAGA,IAAMK,gBAAgB,GAAtB,IAAA;AAMA,IAAMC,OAAO,GAAGC,KAAK,CAALA,UAAAA,CAAiB,SAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAG/B;EAFEC,IAAAA,QAEF,GAAA,IAAA,CAFEA,QAAAA;EAAAA,IAAUC,KAEZ,GAAA,IAAA,CAFYA,KAAVD;EAAAA,IAAoBE,KAEtB,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAFEF;;EAGF,IAAMG,aAAa,GAAG;IACpBC,OAAO,EAAER,WAAW,CAAA,QAAA,EAAW;MAK7BS,UAAU,EACRC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAA6BA,QAAQ,CAARA,EAAAA,KAA7BA,OAAAA,GACI,CAAA,CAAA,EADJA,CACI,CADJA,GAEI,CAAA,gBAAA,EARuB,CAQvB,CARuB;MAS7BC,WAAW,EAAE,CAAA,CAAA,EAVK,CAUL;IATgB,CAAX,CADA;IAepBC,MAAM,EAAEf,IAAI,CAACC,WAAW,CAAA,QAAA,EAAZ,gBAAY,CAAZ,EAAA,CAAA,EAA6C,CAf3D,CAec;EAfQ,CAAtB;EAkBA,OACEK,KAAAA,CAAAA,aAAAA,CAACJ,QAADI,CAAAA,IAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA;IAEEU,GAAG,EAFLV,GAAAA;IAGEE,KAAK,EAAE,CAACS,MAAM,CAAP,OAAA,EAAA,YAAA,EAAA,aAAA,EA1BGX,KA0BH;EAHTA,CAAAA,CAAAA,CADF;AAtBF,CAAgBA,CAAhB;AA+BA,IAAMY,YAAY,GAAGL,QAAQ,CAARA,MAAAA,CAAwC;EAC3DM,GAAG,EAAE;IAGHC,uBAAuB,EAJkC;EACtD,CADsD;EAM3DC,OAAO,EANT;AAA6D,CAAxCR,CAArB;AASA,IAAMI,MAAM,GAAGK,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,OAAO,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACFD,UAAU,CADR,kBAAA,CAAA,EAAA,EAAA,EAAA;IAELE,eAAe,EAHnB;EACS,CAAA;AADwB,CAAlBF,CAAf;AAOA,eAAA,OAAA","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-expect-error: this property is only present in Reanimated 2\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    />\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}