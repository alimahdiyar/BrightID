{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useOnPreventRemove, { shouldPreventRemove } from \"./useOnPreventRemove\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      actionListeners = _ref.actionListeners,\n      beforeRemoveListeners = _ref.beforeRemoveListeners,\n      routerConfigOptions = _ref.routerConfigOptions,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addListenerParent = _React$useContext.addListener,\n      onDispatchAction = _React$useContext.onDispatchAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          var isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onActionParent","onRouteFocusParent","addListenerParent","onDispatchAction","React","routerConfigOptionsRef","onAction","visitedNavigators","state","action","result","isPrevented","shouldPreventRemove","shouldFocus","i","listener","useOnPreventRemove"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(() => addListenerParent?.('action', onAction), [\n    addListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"module"}