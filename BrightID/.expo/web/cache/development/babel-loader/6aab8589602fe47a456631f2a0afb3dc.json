{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport setValueForStyles from \"../../modules/setValueForStyles\";\n\nvar getRect = function getRect(node) {\n  var _getBoundingClientRec = getBoundingClientRect(node),\n      x = _getBoundingClientRec.x,\n      y = _getBoundingClientRec.y,\n      top = _getBoundingClientRec.top,\n      left = _getBoundingClientRec.left;\n\n  var width = node.offsetWidth;\n  var height = node.offsetHeight;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: top,\n    left: left\n  };\n};\n\nvar _measureLayout = function measureLayout(node, relativeToNativeNode, callback) {\n  var relativeNode = relativeToNativeNode || node && node.parentNode;\n\n  if (node && relativeNode) {\n    setTimeout(function () {\n      var relativeRect = getBoundingClientRect(relativeNode);\n\n      var _getRect = getRect(node),\n          height = _getRect.height,\n          left = _getRect.left,\n          top = _getRect.top,\n          width = _getRect.width;\n\n      var x = left - relativeRect.left;\n      var y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nvar focusableElements = {\n  A: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\nvar UIManager = {\n  blur: function blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n  focus: function focus(node) {\n    try {\n      var name = node.nodeName;\n\n      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n\n      node.focus();\n    } catch (err) {}\n  },\n  measure: function measure(node, callback) {\n    _measureLayout(node, null, callback);\n  },\n  measureInWindow: function measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(function () {\n        var _getRect2 = getRect(node),\n            height = _getRect2.height,\n            left = _getRect2.left,\n            top = _getRect2.top,\n            width = _getRect2.width;\n\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n  measureLayout: function measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    _measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n  updateView: function updateView(node, props) {\n    for (var prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      var value = props[prop];\n\n      switch (prop) {\n        case 'style':\n          {\n            setValueForStyles(node, value);\n            break;\n          }\n\n        case 'class':\n        case 'className':\n          {\n            node.setAttribute('class', value);\n            break;\n          }\n\n        case 'text':\n        case 'value':\n          node.value = value;\n          break;\n\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n  configureNextLayoutAnimation: function configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n  setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental() {}\n};\nexport default UIManager;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/exports/UIManager/index.js"],"names":["getRect","x","y","top","left","getBoundingClientRect","width","node","height","measureLayout","relativeNode","relativeToNativeNode","setTimeout","relativeRect","callback","focusableElements","A","INPUT","SELECT","TEXTAREA","UIManager","blur","focus","name","measure","measureInWindow","updateView","Object","value","props","setValueForStyles","configureNextLayoutAnimation","onAnimationDidEnd","setLayoutAnimationEnabledExperimental"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport setValueForStyles from '../../modules/setValueForStyles';\n\nconst getRect = (node) => {\n  // Unlike the DOM's getBoundingClientRect, React Native layout measurements\n  // for \"height\" and \"width\" ignore scale transforms.\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements\n  const { x, y, top, left } = getBoundingClientRect(node);\n  const width = node.offsetWidth;\n  const height = node.offsetHeight;\n  return { x, y, width, height, top, left };\n};\n\nconst measureLayout = (node, relativeToNativeNode, callback) => {\n  const relativeNode = relativeToNativeNode || (node && node.parentNode);\n  if (node && relativeNode) {\n    setTimeout(() => {\n      const relativeRect = getBoundingClientRect(relativeNode);\n      const { height, left, top, width } = getRect(node);\n      const x = left - relativeRect.left;\n      const y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nconst focusableElements = {\n  A: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\n\nconst UIManager = {\n  blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n\n  focus(node) {\n    try {\n      const name = node.nodeName;\n      // A tabIndex of -1 allows element to be programmatically focused but\n      // prevents keyboard focus, so we don't want to set the value on elements\n      // that support keyboard focus by default.\n      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n      node.focus();\n    } catch (err) {}\n  },\n\n  measure(node, callback) {\n    measureLayout(node, null, callback);\n  },\n\n  measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(() => {\n        const { height, left, top, width } = getRect(node);\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n\n  measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n\n  updateView(node, props) {\n    for (const prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      const value = props[prop];\n      switch (prop) {\n        case 'style': {\n          setValueForStyles(node, value);\n          break;\n        }\n        case 'class':\n        case 'className': {\n          node.setAttribute('class', value);\n          break;\n        }\n        case 'text':\n        case 'value':\n          // native platforms use `text` prop to replace text input value\n          node.value = value;\n          break;\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n\n  configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n\n  // mocks\n  setLayoutAnimationEnabledExperimental() {}\n};\n\nexport default UIManager;\n"]},"metadata":{},"sourceType":"module"}