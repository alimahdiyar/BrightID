{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport store from \"../store\";\nimport { createSelector } from '@reduxjs/toolkit';\nimport { selectAllConnections, selectConnectionById } from \"../reducer/connectionsSlice\";\n\nvar threeKnownMembers = function threeKnownMembers(group) {\n  var _store$getState = store.getState(),\n      _store$getState$user = _store$getState.user,\n      id = _store$getState$user.id,\n      photo = _store$getState$user.photo,\n      name = _store$getState$user.name;\n\n  var connections = selectAllConnections(store.getState());\n  var members = group.members;\n  var connsWithMe = [].concat(_toConsumableArray(connections), [{\n    photo: photo,\n    name: name,\n    id: id\n  }]);\n  return members.map(function (u) {\n    return connsWithMe.find(function (conn) {\n      return conn.id === u;\n    });\n  }).filter(function (u) {\n    return u;\n  }).sort(function (u1) {\n    return group.admins.includes(u1.id) ? -1 : 1;\n  }).slice(0, 3);\n};\n\nexport var groupCirclePhotos = function groupCirclePhotos(group) {\n  return threeKnownMembers(group).map(function (member) {\n    return {\n      photo: member.photo\n    };\n  });\n};\nexport var getGroupName = function getGroupName(group) {\n  return (group == null ? void 0 : group.name) || threeKnownMembers(group).map(function (member) {\n    return member.name.substr(0, 13);\n  }).join(', ');\n};\nexport var ids2connections = function ids2connections(ids) {\n  var _store$getState2 = store.getState(),\n      _store$getState2$user = _store$getState2.user,\n      name = _store$getState2$user.name,\n      id = _store$getState2$user.id,\n      photo = _store$getState2$user.photo;\n\n  return ids.map(function (_id) {\n    if (_id === id) {\n      return {\n        id: id,\n        name: name,\n        photo: photo\n      };\n    }\n\n    var conn = selectConnectionById(store.getState(), _id);\n\n    if (conn) {\n      return conn;\n    } else {\n      return {\n        id: _id,\n        name: 'Stranger'\n      };\n    }\n  });\n};\nexport var knownMemberIDs = function knownMemberIDs(group) {\n  return group.members.filter(function (memberId) {\n    return selectConnectionById(store.getState(), memberId);\n  });\n};\nexport var groupByIdSelector = createSelector(function (state) {\n  return state.groups.groups;\n}, function (_, groupId) {\n  return groupId;\n}, function (groups, groupId) {\n  var group = groups.find(function (group) {\n    return group.id === groupId;\n  });\n  return {\n    group: group,\n    admins: group ? group.admins : [],\n    members: group ? group.members : []\n  };\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/groups.ts"],"names":["threeKnownMembers","id","photo","name","store","connections","selectAllConnections","members","group","connsWithMe","conn","u1","groupCirclePhotos","member","getGroupName","ids2connections","ids","_id","selectConnectionById","knownMemberIDs","groupByIdSelector","createSelector","state","groups","admins"],"mappings":"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","sourcesContent":["import store, {RootState} from '@/store';\nimport {createSelector} from '@reduxjs/toolkit';\nimport {selectAllConnections, selectConnectionById,} from '@/reducer/connectionsSlice';\n\nconst threeKnownMembers = (group: Group): Array<Connection> => {\n  const {\n    user: { id, photo, name },\n  } = store.getState();\n  const connections = selectAllConnections(store.getState());\n  const { members } = group;\n  const connsWithMe = [\n    ...connections,\n    {\n      photo,\n      name,\n      id,\n    },\n  ];\n  return members\n    .map((u) => connsWithMe.find((conn) => conn.id === u))\n    .filter((u) => u)\n    .sort((u1) => (group.admins.includes(u1.id) ? -1 : 1))\n    .slice(0, 3);\n};\n\nexport const groupCirclePhotos = (group: Group) => {\n  return threeKnownMembers(group).map((member) => {\n    return { photo: member.photo };\n  });\n};\n\nexport const getGroupName = (group: Group) => {\n  return (\n    group?.name ||\n    threeKnownMembers(group)\n      .map((member) => member.name.substr(0, 13))\n      .join(', ')\n  );\n};\n\nexport const ids2connections = (ids: Array<string>): Array<Connection> => {\n  const {\n    user: { name, id, photo },\n  } = store.getState();\n\n  return ids.map((_id) => {\n    if (_id === id) {\n      return { id, name, photo };\n    }\n    const conn = selectConnectionById(store.getState(), _id);\n    if (conn) {\n      return conn;\n    } else {\n      return { id: _id, name: 'Stranger' };\n    }\n  });\n};\n\nexport const knownMemberIDs = (group: Group) => {\n  // only members that are in my connections are known\n  return group.members.filter((memberId) =>\n    selectConnectionById(store.getState(), memberId),\n  );\n};\n\nexport const groupByIdSelector = createSelector(\n  (state: RootState) => state.groups.groups,\n  (_, groupId: string) => groupId,\n  (groups: Group[], groupId: string) => {\n    const group = groups.find((group) => group.id === groupId);\n    return {\n      group,\n      admins: group ? group.admins : [],\n      members: group ? group.members : [],\n    };\n  },\n);\n"]},"metadata":{},"sourceType":"module"}