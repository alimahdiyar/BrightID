{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from \"./constants\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\nimport { State } from \"../State\";\n\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(PanGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(PanGestureHandler);\n\n  function PanGestureHandler() {\n    _classCallCheck(this, PanGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PanGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Pan;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var nextState = _get(_getPrototypeOf(PanGestureHandler.prototype), \"getState\", this).call(this, type);\n\n      if (this.previousState === State.UNDETERMINED && nextState === State.ACTIVE) {\n        return State.BEGAN;\n      }\n\n      return nextState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n          activeOffsetXEnd = config.activeOffsetXEnd,\n          activeOffsetYStart = config.activeOffsetYStart,\n          activeOffsetYEnd = config.activeOffsetYEnd,\n          minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n\n      if (!isnan(minDist)) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n      if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n      if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n      if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n      if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n      directions = directions.concat(verticalDirections);\n\n      if (!directions.length) {\n        return Hammer.DIRECTION_NONE;\n      }\n\n      if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      if (horizontalDirections.length && verticalDirections.length) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n          deltaY = _ref2.deltaY,\n          velocity = _ref2.velocity;\n      return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n          scale = _ref3.scale,\n          deltaRotation = _ref3.deltaRotation;\n\n      if (pointerLength <= 1) {\n        return false;\n      }\n\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n\n      if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n\n      if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return isValidNumber(criteria.minDistSq) || isValidNumber(criteria.minVelocityX) || isValidNumber(criteria.minVelocityY) || isValidNumber(criteria.minVelocitySq) || isValidNumber(criteria.activeOffsetXStart) || isValidNumber(criteria.activeOffsetXEnd) || isValidNumber(criteria.activeOffsetYStart) || isValidNumber(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, _recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n\n      if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n\n        return {\n          success: true\n        };\n      }\n\n      return {\n        success: false\n      };\n    }\n  }]);\n\n  return PanGestureHandler;\n}(DraggingGestureHandler);\n\nexport default PanGestureHandler;","map":{"version":3,"sources":["PanGestureHandler.ts"],"names":["PanGestureHandler","DraggingGestureHandler","Hammer","getHammerConfig","direction","getState","nextState","State","getDirection","config","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","isnan","verticalDirections","getConfig","minDistSq","shouldFailUnderCustomCriteria","deltaX","deltaY","criteria","shouldActivateUnderCustomCriteria","velocity","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","shouldMultiFingerPanFail","pointerLength","scale","deltaRotation","deltaScale","Math","absDeltaRotation","updateHasCustomActivationCriteria","isValidNumber","isGestureEnabledForEvent","failed","inputData","success"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart))\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd))\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2)\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart))\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd))\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2)\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"module"}