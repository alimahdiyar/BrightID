{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upsertGroup = exports.updateMemberships = exports.updateGroup = exports.setInvites = exports.setGroups = exports.setGroupSearchOpen = exports.setGroupSearch = exports.searchParamSelector = exports.rejectInvite = exports.leaveGroup = exports.joinGroup = exports.filteredGroupsSelector = exports.dismissFromGroup = exports.deleteGroup = exports.default = exports.createGroup = exports.allGroupsSelector = exports.addAdmin = exports.activeGroupsSelector = exports.acceptInvite = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _resetStore = require(\"../actions/resetStore\");\n\nvar _constants = require(\"../utils/constants\");\n\nvar _strings = require(\"../utils/strings\");\n\nvar _groups = require(\"../utils/groups\");\n\nvar _sortingUtility = require(\"../components/Groups/models/sortingUtility\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar initialState = {\n  groups: [],\n  invites: [],\n  searchParam: '',\n  searchOpen: false\n};\nvar groupsSlice = (0, _toolkit.createSlice)({\n  name: 'groups',\n  initialState: initialState,\n  reducers: {\n    createGroup: function createGroup(state, action) {\n      state.groups.push(action.payload);\n    },\n    updateGroup: function updateGroup(state, action) {\n      var group = state.groups.find(function (group) {\n        return group.id === action.payload.id;\n      });\n      (0, _extends2.default)(group, action.payload);\n    },\n    upsertGroup: function upsertGroup(state, action) {\n      var group = state.groups.find(function (group) {\n        return group.id === action.payload.id;\n      });\n\n      if (group) {\n        (0, _extends2.default)(group, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    deleteGroup: function deleteGroup(state, action) {\n      state.groups = state.groups.filter(function (group) {\n        return group.id !== action.payload.id;\n      });\n    },\n    setGroups: function setGroups(state, action) {\n      state.groups = action.payload;\n    },\n    updateMemberships: function updateMemberships(state, action) {\n      state.groups.forEach(function (group) {\n        var membership = action.payload.find(function (membership) {\n          return membership.id === group.id;\n        });\n\n        if (!membership && group.state === 'verified') {\n          group.state = 'dismissed';\n        }\n      });\n      action.payload.forEach(function (membership) {\n        var group = state.groups.find(function (group) {\n          return group.id === membership.id;\n        });\n\n        if (group) {\n          group.state = 'verified';\n          group.joined = membership.timestamp;\n        } else {\n          state.groups.push({\n            id: membership.id,\n            state: 'verified',\n            joined: membership.timestamp,\n            members: [],\n            admins: []\n          });\n        }\n      });\n    },\n    joinGroup: function joinGroup(state, action) {\n      var newGroup = action.payload;\n      var existingGroup = state.groups.find(function (group) {\n        return group.id === newGroup.id;\n      });\n\n      if (existingGroup) {\n        (0, _extends2.default)(existingGroup, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    leaveGroup: function leaveGroup(state, action) {\n      var groupsToLeave = state.groups.filter(function (group) {\n        return group.id === action.payload.id;\n      });\n\n      for (var _iterator = _createForOfIteratorHelperLoose(groupsToLeave), _step; !(_step = _iterator()).done;) {\n        var group = _step.value;\n        group.state = 'dismissed';\n      }\n\n      if (groupsToLeave.length > 1) {\n        var groupsWithoutDuplicates = state.groups.filter(function (group) {\n          return group.id !== action.payload.id;\n        });\n        groupsWithoutDuplicates.push(groupsToLeave[0]);\n        state.groups = groupsWithoutDuplicates;\n      }\n    },\n    dismissFromGroup: function dismissFromGroup(state, action) {\n      var index = state.groups.findIndex(function (group) {\n        return group.id === action.payload.group.id;\n      });\n\n      if (index !== -1) {\n        state.groups[index].members = state.groups[index].members.filter(function (member) {\n          return member !== action.payload.member;\n        });\n      }\n    },\n    addAdmin: function addAdmin(state, action) {\n      var index = state.groups.findIndex(function (group) {\n        return group.id === action.payload.group.id;\n      });\n\n      if (index !== -1) {\n        var member = action.payload.member;\n        var _state$groups$index = state.groups[index],\n            members = _state$groups$index.members,\n            admins = _state$groups$index.admins;\n\n        if (members.includes(member) && !admins.includes(member)) {\n          state.groups[index].admins.push(member);\n        }\n      }\n    },\n    setInvites: function setInvites(state, action) {\n      state.invites = action.payload;\n    },\n    acceptInvite: function acceptInvite(state, action) {\n      var index = state.invites.findIndex(function (invite) {\n        return invite.id === action.payload;\n      });\n      if (index !== -1) state.invites[index].state = _constants.INVITE_ACCEPTED;\n    },\n    rejectInvite: function rejectInvite(state, action) {\n      var index = state.invites.findIndex(function (invite) {\n        return invite.id === action.payload;\n      });\n      if (index !== -1) state.invites[index].state = _constants.INVITE_REJECTED;\n    },\n    setGroupSearch: function setGroupSearch(state, action) {\n      state.searchParam = action.payload;\n    },\n    setGroupSearchOpen: function setGroupSearchOpen(state, action) {\n      state.searchOpen = action.payload;\n    }\n  },\n  extraReducers: (0, _defineProperty2.default)({}, _resetStore.RESET_STORE, function () {\n    return initialState;\n  })\n});\n\nvar allGroupsSelector = function allGroupsSelector(state) {\n  return state.groups.groups;\n};\n\nexports.allGroupsSelector = allGroupsSelector;\n\nvar activeGroupsSelector = function activeGroupsSelector(state) {\n  return state.groups.groups.filter(function (group) {\n    return group.state === 'initiated' || group.state === 'verified';\n  });\n};\n\nexports.activeGroupsSelector = activeGroupsSelector;\n\nvar searchParamSelector = function searchParamSelector(state) {\n  return state.groups.searchParam;\n};\n\nexports.searchParamSelector = searchParamSelector;\nvar filteredGroupsSelector = (0, _toolkit.createSelector)(activeGroupsSelector, searchParamSelector, function (allGroups, searchParam) {\n  var filteredGroups;\n\n  if (searchParam !== '') {\n    var searchString = (0, _strings.toSearchString)(searchParam);\n    filteredGroups = allGroups.filter(function (group) {\n      if ((0, _strings.toSearchString)((0, _groups.getGroupName)(group)).includes(searchString)) {\n        return true;\n      } else {\n        var allMemberNames = (0, _groups.ids2connections)((0, _groups.knownMemberIDs)(group)).map(function (member) {\n          return (0, _strings.toSearchString)(member.name);\n        });\n\n        for (var _iterator2 = _createForOfIteratorHelperLoose(allMemberNames), _step2; !(_step2 = _iterator2()).done;) {\n          var name = _step2.value;\n\n          if (name.includes(searchString)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    });\n  } else {\n    filteredGroups = allGroups;\n  }\n\n  return filteredGroups.sort(_sortingUtility.compareCreatedDesc);\n});\nexports.filteredGroupsSelector = filteredGroupsSelector;\nvar _groupsSlice$actions = groupsSlice.actions,\n    createGroup = _groupsSlice$actions.createGroup,\n    updateGroup = _groupsSlice$actions.updateGroup,\n    upsertGroup = _groupsSlice$actions.upsertGroup,\n    deleteGroup = _groupsSlice$actions.deleteGroup,\n    setGroups = _groupsSlice$actions.setGroups,\n    updateMemberships = _groupsSlice$actions.updateMemberships,\n    joinGroup = _groupsSlice$actions.joinGroup,\n    leaveGroup = _groupsSlice$actions.leaveGroup,\n    dismissFromGroup = _groupsSlice$actions.dismissFromGroup,\n    addAdmin = _groupsSlice$actions.addAdmin,\n    setInvites = _groupsSlice$actions.setInvites,\n    rejectInvite = _groupsSlice$actions.rejectInvite,\n    acceptInvite = _groupsSlice$actions.acceptInvite,\n    setGroupSearch = _groupsSlice$actions.setGroupSearch,\n    setGroupSearchOpen = _groupsSlice$actions.setGroupSearchOpen;\nexports.setGroupSearchOpen = setGroupSearchOpen;\nexports.setGroupSearch = setGroupSearch;\nexports.acceptInvite = acceptInvite;\nexports.rejectInvite = rejectInvite;\nexports.setInvites = setInvites;\nexports.addAdmin = addAdmin;\nexports.dismissFromGroup = dismissFromGroup;\nexports.leaveGroup = leaveGroup;\nexports.joinGroup = joinGroup;\nexports.updateMemberships = updateMemberships;\nexports.setGroups = setGroups;\nexports.deleteGroup = deleteGroup;\nexports.upsertGroup = upsertGroup;\nexports.updateGroup = updateGroup;\nexports.createGroup = createGroup;\nvar _default = groupsSlice.reducer;\nexports.default = _default;","map":{"version":3,"names":["initialState","groups","invites","searchParam","searchOpen","groupsSlice","createSlice","name","reducers","createGroup","state","action","push","payload","updateGroup","group","find","id","upsertGroup","deleteGroup","filter","setGroups","updateMemberships","forEach","membership","joined","timestamp","members","admins","joinGroup","newGroup","existingGroup","leaveGroup","groupsToLeave","length","groupsWithoutDuplicates","dismissFromGroup","index","findIndex","member","addAdmin","includes","setInvites","acceptInvite","invite","INVITE_ACCEPTED","rejectInvite","INVITE_REJECTED","setGroupSearch","setGroupSearchOpen","extraReducers","RESET_STORE","allGroupsSelector","activeGroupsSelector","searchParamSelector","filteredGroupsSelector","createSelector","allGroups","filteredGroups","searchString","toSearchString","getGroupName","allMemberNames","ids2connections","knownMemberIDs","map","sort","compareCreatedDesc","actions","reducer"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/groupsSlice.ts"],"sourcesContent":["import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\nimport { INVITE_ACCEPTED, INVITE_REJECTED } from '@/utils/constants';\nimport { RootState } from '@/store';\nimport { toSearchString } from '@/utils/strings';\nimport { getGroupName, ids2connections, knownMemberIDs } from '@/utils/groups';\nimport { compareCreatedDesc } from '@/components/Groups/models/sortingUtility';\n\n/* ******** INITIAL STATE ************** */\n\nconst initialState: GroupsState = {\n  groups: [],\n  invites: [],\n  searchParam: '',\n  searchOpen: false,\n};\n\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  reducers: {\n    createGroup(state, action: PayloadAction<Group>) {\n      state.groups.push(action.payload);\n    },\n    updateGroup(state, action: PayloadAction<GroupInfo>) {\n      const group = state.groups.find(\n        (group) => group.id === action.payload.id,\n      );\n      Object.assign(group, action.payload);\n    },\n    upsertGroup(state, action: PayloadAction<GroupInfo>) {\n      const group = state.groups.find(\n        (group) => group.id === action.payload.id,\n      );\n      if (group) {\n        Object.assign(group, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    deleteGroup(state, action: PayloadAction<Group>) {\n      state.groups = state.groups.filter(\n        (group) => group.id !== action.payload.id,\n      );\n    },\n    setGroups(state, action: PayloadAction<Group[]>) {\n      state.groups = action.payload;\n    },\n    updateMemberships(state, action: PayloadAction<MembershipInfo[]>) {\n      state.groups.forEach((group) => {\n        const membership = action.payload.find(\n          (membership) => membership.id === group.id,\n        );\n        if (!membership && group.state === 'verified') {\n          group.state = 'dismissed';\n        }\n      });\n      action.payload.forEach((membership) => {\n        const group = state.groups.find((group) => group.id === membership.id);\n        if (group) {\n          group.state = 'verified';\n          group.joined = membership.timestamp;\n        } else {\n          state.groups.push({\n            id: membership.id,\n            state: 'verified',\n            joined: membership.timestamp,\n            members: [],\n            admins: [],\n          });\n        }\n      });\n    },\n    joinGroup(state, action: PayloadAction<Group>) {\n      const newGroup = action.payload;\n      const existingGroup = state.groups.find(\n        (group) => group.id === newGroup.id,\n      );\n      if (existingGroup) {\n        // replace existing group with new group\n        Object.assign(existingGroup, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    leaveGroup(state, action: PayloadAction<Group>) {\n      // get group to leave (and all potential duplicates, see below)\n      const groupsToLeave = state.groups.filter(\n        (group) => group.id === action.payload.id,\n      );\n      for (const group of groupsToLeave) {\n        group.state = 'dismissed';\n      }\n      if (groupsToLeave.length > 1) {\n        // There was a bug that could result in users having the same group multiple times in state.\n        // To clean this up: When leaving a group we look for duplicates and only keep the first matching group in\n        // state \"dismissed\". The duplicates will be completely removed from state.\n        const groupsWithoutDuplicates = state.groups.filter(\n          (group) => group.id !== action.payload.id,\n        );\n        // only keep first of the duplicates\n        groupsWithoutDuplicates.push(groupsToLeave[0]);\n        state.groups = groupsWithoutDuplicates;\n      }\n    },\n    dismissFromGroup(\n      state,\n      action: PayloadAction<{ member: string; group: Group }>,\n    ) {\n      const index = state.groups.findIndex(\n        (group) => group.id === action.payload.group.id,\n      );\n      if (index !== -1) {\n        state.groups[index].members = state.groups[index].members.filter(\n          (member) => member !== action.payload.member,\n        );\n      }\n    },\n    addAdmin(state, action: PayloadAction<{ member: string; group: Group }>) {\n      const index = state.groups.findIndex(\n        (group) => group.id === action.payload.group.id,\n      );\n      if (index !== -1) {\n        const { member } = action.payload;\n        const { members, admins } = state.groups[index];\n\n        if (members.includes(member) && !admins.includes(member)) {\n          state.groups[index].admins.push(member);\n        }\n      }\n    },\n    setInvites(state, action: PayloadAction<Invite[]>) {\n      state.invites = action.payload;\n    },\n    acceptInvite(state, action: PayloadAction<string>) {\n      const index = state.invites.findIndex(\n        (invite) => invite.id === action.payload,\n      );\n      if (index !== -1) state.invites[index].state = INVITE_ACCEPTED;\n    },\n    rejectInvite(state, action: PayloadAction<string>) {\n      const index = state.invites.findIndex(\n        (invite) => invite.id === action.payload,\n      );\n      if (index !== -1) state.invites[index].state = INVITE_REJECTED;\n    },\n    setGroupSearch(state, action: PayloadAction<string>) {\n      state.searchParam = action.payload;\n    },\n    setGroupSearchOpen(state, action: PayloadAction<boolean>) {\n      state.searchOpen = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\nexport const allGroupsSelector = (state: RootState) => state.groups.groups;\n\nexport const activeGroupsSelector = (state: RootState) =>\n  state.groups.groups.filter(\n    (group) => group.state === 'initiated' || group.state === 'verified',\n  );\n\nexport const searchParamSelector = (state: RootState) =>\n  state.groups.searchParam;\n\nexport const filteredGroupsSelector = createSelector(\n  activeGroupsSelector,\n  searchParamSelector,\n  (allGroups, searchParam) => {\n    let filteredGroups: Array<Group>;\n    if (searchParam !== '') {\n      const searchString = toSearchString(searchParam);\n      filteredGroups = allGroups.filter((group) => {\n        if (toSearchString(getGroupName(group)).includes(searchString)) {\n          // direct group name match\n          return true;\n        } else {\n          // check group members\n          const allMemberNames = ids2connections(knownMemberIDs(group)).map(\n            (member) => toSearchString(member.name),\n          );\n          for (const name of allMemberNames) {\n            if (name.includes(searchString)) {\n              // stop looking if a match is found\n              return true;\n            }\n          }\n          return false;\n        }\n      });\n    } else {\n      filteredGroups = allGroups;\n    }\n    return filteredGroups.sort(compareCreatedDesc);\n  },\n);\n\nexport const {\n  createGroup,\n  updateGroup,\n  upsertGroup,\n  deleteGroup,\n  setGroups,\n  updateMemberships,\n  joinGroup,\n  leaveGroup,\n  dismissFromGroup,\n  addAdmin,\n  setInvites,\n  rejectInvite,\n  acceptInvite,\n  setGroupSearch,\n  setGroupSearchOpen,\n} = groupsSlice.actions;\n\n// Export reducer\nexport default groupsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}