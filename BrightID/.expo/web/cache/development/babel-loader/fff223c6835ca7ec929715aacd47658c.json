{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport IonIcons from \"@expo/vector-icons/Ionicons\";\nimport { isEqual } from 'lodash';\nimport { ApiGateState } from \"./NodeApiGate\";\nimport { BLACK, ORANGE, RED, WHITE } from \"../theme/colors\";\nimport { DEVICE_LARGE } from \"../utils/deviceConstants\";\nimport { fontSize } from \"../theme/fonts\";\nimport { NODE_CHOOSER_TIMEOUT_MS } from \"../utils/constants\";\nimport { resetNodeUrls, selectAllNodeUrls, selectDefaultNodeUrls } from \"../reducer/settingsSlice\";\nimport { useDispatch, useSelector } from \"../store\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar calculateSecondsLeft = function calculateSecondsLeft(startTimestamp) {\n  var endTime = startTimestamp + NODE_CHOOSER_TIMEOUT_MS;\n  var remaining = endTime - Date.now();\n  return Math.ceil(remaining / 1000);\n};\n\nexport var NodeApiGateScreen = function NodeApiGateScreen(_ref) {\n  var gateState = _ref.gateState,\n      startTimestamp = _ref.startTimestamp,\n      retryHandler = _ref.retryHandler;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      stateDescription = _useState2[0],\n      setStateDescription = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondsLeft = _useState4[0],\n      setSecondsLeft = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      iconData = _useState6[0],\n      setIconData = _useState6[1];\n\n  var defaultNodeUrls = useSelector(selectDefaultNodeUrls);\n  var currentNodeUrls = useSelector(selectAllNodeUrls);\n  var dispatch = useDispatch();\n  useEffect(function () {\n    switch (gateState) {\n      case ApiGateState.INITIAL:\n      case ApiGateState.SEARCHING_NODE:\n      case ApiGateState.SEARCH_REQUESTED:\n      case ApiGateState.NODE_AVAILABLE:\n        setIconData(undefined);\n        setStateDescription(t('nodeApiGate.state.connecting'));\n        break;\n\n      case ApiGateState.ERROR_NO_NODE:\n        setIconData({\n          color: RED,\n          name: 'alert-circle-outline'\n        });\n\n        if (currentNodeUrls.length) {\n          setStateDescription(t('nodeApiGate.state.noConnection'));\n        } else {\n          setStateDescription(t('nodeApiGate.state.noNode'));\n        }\n\n        break;\n\n      default:\n        console.log(\"Unhandled gateState \" + gateState + \"!\");\n    }\n  }, [currentNodeUrls.length, gateState, t]);\n  useEffect(function () {\n    var timerId;\n\n    if (startTimestamp > 0) {\n      timerId = setInterval(function () {\n        var remainingSeconds = calculateSecondsLeft(startTimestamp);\n\n        if (remainingSeconds >= 0) {\n          setSecondsLeft(remainingSeconds);\n        }\n      }, 500);\n    }\n\n    return function () {\n      if (timerId) {\n        clearInterval(timerId);\n      }\n    };\n  }, [startTimestamp]);\n\n  var resetHandler = function resetHandler() {\n    dispatch(resetNodeUrls());\n    retryHandler();\n  };\n\n  var resetContainer;\n\n  if (!isEqual(defaultNodeUrls, currentNodeUrls)) {\n    resetContainer = _jsxs(_Fragment, {\n      children: [_jsx(View, {\n        style: styles.resetInfoContainer,\n        children: _jsx(Text, {\n          style: styles.resetInfoText,\n          children: t('nodeApiGate.reset.text')\n        })\n      }), _jsx(TouchableOpacity, {\n        style: styles.resetButton,\n        onPress: resetHandler,\n        children: _jsx(Text, {\n          style: styles.resetButtonText,\n          children: t('nodeApiGate.reset.button')\n        })\n      })]\n    });\n  }\n\n  var retryInfo;\n\n  if (currentNodeUrls.length) {\n    retryInfo = _jsx(TouchableOpacity, {\n      style: styles.retryBtn,\n      onPress: retryHandler,\n      children: _jsx(Text, {\n        style: styles.retryBtnText,\n        children: t('common.button.retry')\n      })\n    });\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsxs(SafeAreaView, {\n      style: styles.container,\n      children: [_jsx(StatusBar, {\n        barStyle: \"dark-content\",\n        backgroundColor: WHITE,\n        animated: true\n      }), _jsx(View, {\n        style: styles.header,\n        children: _jsx(Image, {\n          source: require(\"../static/brightid-final.png\"),\n          accessible: true,\n          accessibilityLabel: \"Home Header Logo\",\n          resizeMode: \"contain\",\n          style: styles.logo\n        })\n      }), _jsxs(View, {\n        style: styles.center,\n        children: [iconData ? _jsx(IonIcons, {\n          style: {\n            alignSelf: 'center'\n          },\n          size: DEVICE_LARGE ? 84 : 72,\n          name: iconData.name,\n          color: iconData.color\n        }) : _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 84 : 72,\n          type: \"Wave\",\n          color: ORANGE\n        }), _jsx(View, {\n          style: styles.infoTextContainer,\n          children: _jsx(Text, {\n            style: styles.infoText,\n            children: stateDescription\n          })\n        }), gateState !== ApiGateState.ERROR_NO_NODE ? _jsx(View, {\n          style: styles.timeoutContainer,\n          children: secondsLeft > 0 && _jsx(Text, {\n            style: styles.infoText,\n            children: t('nodeApiGate.timer.text', {\n              secondsLeft: secondsLeft\n            })\n          })\n        }) : _jsxs(View, {\n          style: styles.buttonContainer,\n          children: [retryInfo, resetContainer]\n        })]\n      })]\n    }), _jsx(View, {\n      style: styles.orangeBottom\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    flexDirection: 'column',\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: DEVICE_LARGE ? 35 : 20,\n    zIndex: 2,\n    overflow: 'hidden'\n  },\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    width: '100%',\n    height: 100,\n    zIndex: 1,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  header: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '15%'\n  },\n  logo: {\n    maxWidth: '40%',\n    maxHeight: 90\n  },\n  center: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  infoTextContainer: {\n    margin: 40\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: 26\n  },\n  timeoutContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70\n  },\n  buttonContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70\n  },\n  retryBtnContainer: {},\n  retryBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 4\n  },\n  retryBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE\n  },\n  resetInfoContainer: {\n    marginBottom: 3,\n    marginTop: 25\n  },\n  resetInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14]\n  },\n  resetButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 4\n  },\n  resetButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 20,\n    marginRight: 20\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","useTranslation","Spinner","IonIcons","isEqual","ApiGateState","BLACK","ORANGE","RED","WHITE","DEVICE_LARGE","fontSize","NODE_CHOOSER_TIMEOUT_MS","resetNodeUrls","selectAllNodeUrls","selectDefaultNodeUrls","useDispatch","useSelector","calculateSecondsLeft","startTimestamp","endTime","remaining","Date","now","Math","ceil","NodeApiGateScreen","gateState","retryHandler","t","stateDescription","setStateDescription","secondsLeft","setSecondsLeft","undefined","iconData","setIconData","defaultNodeUrls","currentNodeUrls","dispatch","INITIAL","SEARCHING_NODE","SEARCH_REQUESTED","NODE_AVAILABLE","ERROR_NO_NODE","color","name","length","console","log","timerId","setInterval","remainingSeconds","clearInterval","resetHandler","resetContainer","styles","resetInfoContainer","resetInfoText","resetButton","resetButtonText","retryInfo","retryBtn","retryBtnText","container","header","require","logo","center","alignSelf","infoTextContainer","infoText","timeoutContainer","buttonContainer","orangeBottom","StyleSheet","create","flex","backgroundColor","alignItems","flexDirection","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","zIndex","overflow","width","height","position","bottom","left","right","justifyContent","marginTop","maxWidth","maxHeight","margin","fontFamily","textAlign","lineHeight","retryBtnContainer","borderRadius","elevation","shadowColor","shadowOffset","shadowRadius","marginLeft","marginRight"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/NodeApiGateScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Image,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport IonIcons from 'react-native-vector-icons/Ionicons';\nimport { isEqual } from 'lodash';\nimport { ApiGateState } from '@/components/NodeApiGate';\nimport { BLACK, LIGHT_BLACK, ORANGE, RED, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { NODE_CHOOSER_TIMEOUT_MS } from '@/utils/constants';\nimport {\n  resetNodeUrls,\n  selectAllNodeUrls,\n  selectDefaultNodeUrls,\n} from '@/reducer/settingsSlice';\nimport { useDispatch, useSelector } from '@/store';\n\nconst calculateSecondsLeft = (startTimestamp: number) => {\n  const endTime = startTimestamp + NODE_CHOOSER_TIMEOUT_MS;\n  const remaining = endTime - Date.now();\n  return Math.ceil(remaining / 1000);\n};\n\nexport const NodeApiGateScreen = ({\n  gateState,\n  startTimestamp,\n  retryHandler,\n}: {\n  gateState: ApiGateState;\n  startTimestamp: number;\n  retryHandler: () => any;\n}) => {\n  const { t } = useTranslation();\n  const [stateDescription, setStateDescription] = useState('');\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const [iconData, setIconData] =\n    useState<{ color: string; name: string }>(undefined);\n  const defaultNodeUrls = useSelector(selectDefaultNodeUrls);\n  const currentNodeUrls = useSelector(selectAllNodeUrls);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    switch (gateState) {\n      case ApiGateState.INITIAL:\n      case ApiGateState.SEARCHING_NODE:\n      case ApiGateState.SEARCH_REQUESTED:\n      case ApiGateState.NODE_AVAILABLE:\n        setIconData(undefined);\n        setStateDescription(t('nodeApiGate.state.connecting'));\n        break;\n      case ApiGateState.ERROR_NO_NODE:\n        setIconData({ color: RED, name: 'alert-circle-outline' });\n        if (currentNodeUrls.length) {\n          setStateDescription(t('nodeApiGate.state.noConnection'));\n        } else {\n          setStateDescription(t('nodeApiGate.state.noNode'));\n        }\n        break;\n      default:\n        console.log(`Unhandled gateState ${gateState}!`);\n    }\n  }, [currentNodeUrls.length, gateState, t]);\n\n  // countdown until timeout reached\n  useEffect(() => {\n    let timerId;\n    if (startTimestamp > 0) {\n      timerId = setInterval(() => {\n        const remainingSeconds = calculateSecondsLeft(startTimestamp);\n        if (remainingSeconds >= 0) {\n          setSecondsLeft(remainingSeconds);\n        }\n      }, 500);\n    }\n    return () => {\n      if (timerId) {\n        clearInterval(timerId);\n      }\n    };\n  }, [startTimestamp]);\n\n  const resetHandler = () => {\n    dispatch(resetNodeUrls());\n    retryHandler();\n  };\n\n  let resetContainer;\n  if (!isEqual(defaultNodeUrls, currentNodeUrls)) {\n    resetContainer = (\n      <>\n        <View style={styles.resetInfoContainer}>\n          <Text style={styles.resetInfoText}>\n            {t('nodeApiGate.reset.text')}\n          </Text>\n        </View>\n        <TouchableOpacity style={styles.resetButton} onPress={resetHandler}>\n          <Text style={styles.resetButtonText}>\n            {t('nodeApiGate.reset.button')}\n          </Text>\n        </TouchableOpacity>\n      </>\n    );\n  }\n\n  let retryInfo;\n  if (currentNodeUrls.length) {\n    retryInfo = (\n      <TouchableOpacity style={styles.retryBtn} onPress={retryHandler}>\n        <Text style={styles.retryBtnText}>{t('common.button.retry')}</Text>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <StatusBar\n          barStyle=\"dark-content\"\n          backgroundColor={WHITE}\n          animated={true}\n        />\n\n        <View style={styles.header}>\n          <Image\n            source={require('@/static/brightid-final.png')}\n            accessible={true}\n            accessibilityLabel=\"Home Header Logo\"\n            resizeMode=\"contain\"\n            style={styles.logo}\n          />\n        </View>\n        <View style={styles.center}>\n          {iconData ? (\n            <IonIcons\n              style={{ alignSelf: 'center' }}\n              size={DEVICE_LARGE ? 84 : 72}\n              name={iconData.name}\n              color={iconData.color}\n            />\n          ) : (\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 84 : 72}\n              type=\"Wave\"\n              color={ORANGE}\n            />\n          )}\n          <View style={styles.infoTextContainer}>\n            <Text style={styles.infoText}>{stateDescription}</Text>\n          </View>\n          {gateState !== ApiGateState.ERROR_NO_NODE ? (\n            <View style={styles.timeoutContainer}>\n              {secondsLeft > 0 && (\n                <Text style={styles.infoText}>\n                  {t('nodeApiGate.timer.text', { secondsLeft })}\n                </Text>\n              )}\n            </View>\n          ) : (\n            <View style={styles.buttonContainer}>\n              {retryInfo}\n              {resetContainer}\n            </View>\n          )}\n        </View>\n      </SafeAreaView>\n      <View style={styles.orangeBottom} />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    flexDirection: 'column',\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: DEVICE_LARGE ? 35 : 20,\n    zIndex: 2,\n    overflow: 'hidden',\n  },\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    width: '100%',\n    height: 100,\n    zIndex: 1,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n  header: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '15%',\n  },\n  logo: {\n    maxWidth: '40%',\n    maxHeight: 90,\n  },\n  center: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  infoTextContainer: {\n    margin: 40,\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: 26,\n  },\n  timeoutContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70,\n  },\n  buttonContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70,\n  },\n  retryBtnContainer: {},\n  retryBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 4,\n  },\n  retryBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE,\n  },\n  resetInfoContainer: {\n    marginBottom: 3,\n    marginTop: 25,\n  },\n  resetInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n  },\n  resetButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 4,\n  },\n  resetButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 20,\n    marginRight: 20,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}