{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Clipboard from '@react-native-community/clipboard';\nimport Svg, { Path } from 'react-native-svg';\nimport qrcode from 'qrcode';\nimport { parseString } from 'xml2js';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useTranslation } from 'react-i18next';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../../store\";\nimport { BLACK, DARKER_GREY, LIGHT_BLACK, ORANGE, WHITE } from \"../../../theme/colors\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { RecoveryErrorType } from \"./RecoveryError\";\nimport { setupRecovery } from \"./thunks/recoveryThunks\";\nimport { buildRecoveryChannelQrUrl } from \"../../../utils/recovery\";\nimport { clearChannel, createChannel, pollChannel } from \"./thunks/channelThunks\";\nimport { resetRecoveryData, uploadCompletedByOtherSide } from \"./recoveryDataSlice\";\nimport { setupSync, createSyncChannel, pollImportChannel, clearImportChannel } from \"../ImportFlow/thunks/channelThunks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar RecoverSteps;\n\n(function (RecoverSteps) {\n  RecoverSteps[RecoverSteps[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n  RecoverSteps[RecoverSteps[\"RUNNING\"] = 1] = \"RUNNING\";\n  RecoverSteps[RecoverSteps[\"ERROR\"] = 2] = \"ERROR\";\n})(RecoverSteps || (RecoverSteps = {}));\n\nvar RecoveryCodeScreen = function RecoveryCodeScreen(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n      action = _route$params.action,\n      urlType = _route$params.urlType;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      qrUrl = _useState2[0],\n      setQrUrl = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrsvg = _useState4[0],\n      setQrsvg = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      alreadyNotified = _useState6[0],\n      setAlreadyNotified = _useState6[1];\n\n  var recoveryData = useSelector(function (state) {\n    return state.recoveryData;\n  });\n  var isScanned = useSelector(function (state) {\n    return uploadCompletedByOtherSide(state) || state.recoveryData.recoveredConnections || state.recoveryData.recoveredGroups || state.recoveryData.recoveredBlindSigs;\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n\n  var _useState7 = useState(RecoverSteps.NOT_STARTED),\n      _useState8 = _slicedToArray(_useState7, 2),\n      step = _useState8[0],\n      setStep = _useState8[1];\n\n  var sigCount = recoveryData.sigs ? Object.values(recoveryData.sigs).length : 0;\n  useEffect(function () {\n    var runRecoveryEffect = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(setupRecovery()));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(dispatch(createChannel()));\n\n            case 4:\n              dispatch(pollChannel());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var runImportEffect = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(setupRecovery()));\n\n            case 2:\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(dispatch(createChannel()));\n\n            case 4:\n              dispatch(pollImportChannel());\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var runSyncEffect = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(setupSync()));\n\n            case 2:\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(dispatch(createSyncChannel()));\n\n            case 4:\n              dispatch(pollImportChannel());\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (step === RecoverSteps.NOT_STARTED) {\n      if (action === 'recovery') {\n        console.log(\"initializing recovery process\");\n        runRecoveryEffect();\n      } else if (action === 'import') {\n        console.log(\"initializing import process\");\n        runImportEffect();\n      } else if (action === 'sync') {\n        console.log(\"initializing sync process\");\n        runSyncEffect();\n      }\n\n      setStep(RecoverSteps.RUNNING);\n    }\n  }, [action, dispatch, recoveryData.aesKey, step]);\n  useEffect(function () {\n    if (recoveryData.channel.url && recoveryData.aesKey) {\n      var newQrUrl = buildRecoveryChannelQrUrl({\n        aesKey: recoveryData.aesKey,\n        url: recoveryData.channel.url,\n        t: urlType\n      });\n      console.log(\"new qrCode url: \" + newQrUrl.href);\n      setQrUrl(newQrUrl);\n\n      var parseQrString = function parseQrString(err, qrsvg) {\n        if (err) return console.log(err);\n        setQrsvg(qrsvg);\n      };\n\n      qrcode.toString(newQrUrl.href, function (err, qr) {\n        if (err) return console.log(err);\n        parseString(qr, parseQrString);\n      });\n    }\n  }, [recoveryData.aesKey, recoveryData.channel.url, urlType]);\n  useEffect(function () {\n    if (recoveryData.errorType !== RecoveryErrorType.NONE) {\n      var message;\n\n      switch (recoveryData.errorType) {\n        case RecoveryErrorType.MISMATCH_ID:\n          message = t('recovery.error.mismatchId', 'Your recovery connections selected different accounts');\n          break;\n\n        case RecoveryErrorType.GENERIC:\n        default:\n          message = recoveryData.errorMessage !== '' ? recoveryData.errorMessage : t('recovery.error.unknown', 'An unknown error occured');\n      }\n\n      Alert.alert(t('recovery.error.title', 'Account recovery failed'), message);\n\n      if (action === 'recovery') {\n        clearChannel();\n      } else if (action === 'import') {\n        clearImportChannel();\n      }\n\n      dispatch(resetRecoveryData());\n      setStep(RecoverSteps.ERROR);\n      navigation.goBack();\n    }\n  }, [action, dispatch, navigation, recoveryData.errorMessage, recoveryData.errorType, t]);\n  useFocusEffect(useCallback(function () {\n    if (action === 'recovery' && !alreadyNotified && sigCount === 1) {\n      Alert.alert(t('common.alert.info'), t('common.alert.text.recoverySigned'));\n      setAlreadyNotified(true);\n    } else if (action === 'recovery' && sigCount > 1) {\n      navigation.navigate('Restore');\n    } else if (action === 'import' && isScanned) {\n      navigation.navigate('Import');\n    } else if (action === 'sync' && isScanned) {\n      navigation.navigate('Devices', {\n        syncing: true,\n        asScanner: false\n      });\n    }\n  }, [action, alreadyNotified, sigCount, isScanned, t, navigation]));\n\n  var copyQr = function copyQr() {\n    var universalLink = \"https://app.brightid.org/connection-code/\" + encodeURIComponent(qrUrl.href);\n    var alertTitle;\n    var alertText;\n    var clipboardMsg;\n\n    switch (action) {\n      case 'recovery':\n        alertTitle = t('recovery.alert.title', 'Recovery link');\n        alertText = t('recovery.alert.text', 'Share this link with your recovery connections.');\n        clipboardMsg = t('recovery.clipboardmessage', {\n          defaultValue: 'Help me recover my BrightID: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      case 'import':\n        alertTitle = t('import.alert.title', 'Import BrightID link');\n        alertText = t('import.alert.text', 'Open this link with the BrightID app that should be imported.');\n        clipboardMsg = t('import.clipboardmessage', {\n          defaultValue: 'Export your BrightID to another device: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      case 'sync':\n        alertTitle = t('sync.alert.title', 'Sync user data');\n        alertText = t('sync.alert.text', 'Open this link with the BrightID app that should be synced.');\n        clipboardMsg = t('sync.clipboardmessage', {\n          defaultValue: 'Sync your BrightID data with another device: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    if (__DEV__) {\n      clipboardMsg = universalLink;\n    }\n\n    Alert.alert(alertTitle, alertText, [{\n      text: t('common.button.copy'),\n      onPress: function onPress() {\n        Clipboard.setString(clipboardMsg);\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(Text, {\n        style: styles.recoveryCodeInfoText,\n        children: [action === 'recovery' && t('recovery.text.askScanning'), action === 'import' && t('import.text.askScanning'), action === 'sync' && t('sync.text.askScanning')]\n      }), qrsvg ? _jsxs(View, {\n        style: styles.qrsvgContainer,\n        children: [_jsx(Text, {\n          style: styles.signatures,\n          children: action === 'recovery' ? t('recovery.text.signatures', {\n            count: sigCount\n          }) : ''\n        }), _jsxs(Svg, {\n          height: DEVICE_LARGE ? '240' : '200',\n          width: DEVICE_LARGE ? '240' : '200',\n          viewBox: path(['svg', '$', 'viewBox'], qrsvg),\n          \"shape-rendering\": \"crispEdges\",\n          children: [_jsx(Path, {\n            fill: WHITE,\n            d: path(['svg', 'path', '0', '$', 'd'], qrsvg)\n          }), _jsx(Path, {\n            stroke: BLACK,\n            d: path(['svg', 'path', '1', '$', 'd'], qrsvg)\n          })]\n        }), _jsxs(TouchableOpacity, {\n          style: styles.copyContainer,\n          onPress: copyQr,\n          children: [_jsx(Material, {\n            size: 24,\n            name: \"content-copy\",\n            color: LIGHT_BLACK,\n            style: {\n              width: 24,\n              height: 24\n            }\n          }), _jsxs(Text, {\n            style: styles.copyText,\n            children: [\" \", t('common.button.copy')]\n          })]\n        }), __DEV__ && _jsx(View, {\n          children: _jsx(Text, {\n            style: {\n              fontSize: 6\n            },\n            testID: \"qrcode\",\n            children: qrUrl == null ? void 0 : qrUrl.href\n          })\n        })]\n      }) : _jsx(View, {\n        style: styles.qrsvgContainer,\n        children: _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 48 : 42,\n          type: \"9CubeGrid\",\n          color: ORANGE\n        })\n      }), _jsxs(Text, {\n        style: styles.additionalInfo,\n        children: [action === 'recovery' && t('recovery.text.additionalInfo'), action === 'import' && t('import.text.additionalInfo'), action === 'sync' && t('sync.text.additionalInfo')]\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  qrsvgContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  recoveryCodeInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n    width: '80%',\n    marginTop: DEVICE_LARGE ? 30 : 26\n  },\n  additionalInfo: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: DARKER_GREY,\n    width: '80%',\n    marginBottom: DEVICE_LARGE ? 50 : 45\n  },\n  signatures: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 25,\n    minWidth: 100\n  },\n  copyText: {\n    color: BLACK,\n    fontFamily: 'Poppins-Medium'\n  }\n});\nexport default RecoveryCodeScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RecoveryCodeScreen.tsx"],"names":["RecoverSteps","RecoveryCodeScreen","route","action","urlType","qrUrl","setQrUrl","useState","qrsvg","setQrsvg","alreadyNotified","setAlreadyNotified","recoveryData","useSelector","state","isScanned","uploadCompletedByOtherSide","t","useTranslation","dispatch","useDispatch","navigation","useNavigation","step","setStep","sigCount","Object","useEffect","runRecoveryEffect","setupRecovery","createChannel","pollChannel","runImportEffect","pollImportChannel","runSyncEffect","setupSync","createSyncChannel","console","newQrUrl","buildRecoveryChannelQrUrl","aesKey","url","parseQrString","qrcode","parseString","RecoveryErrorType","message","Alert","clearChannel","clearImportChannel","resetRecoveryData","useFocusEffect","useCallback","syncing","asScanner","copyQr","universalLink","encodeURIComponent","alertTitle","alertText","clipboardMsg","defaultValue","link","text","onPress","Clipboard","cancelable","styles","count","DEVICE_LARGE","path","width","height","__DEV__","fontSize","StyleSheet","orangeTop","backgroundColor","zIndex","container","flex","alignItems","justifyContent","flexDirection","borderTopLeftRadius","marginTop","overflow","qrsvgContainer","recoveryCodeInfoText","fontFamily","textAlign","color","additionalInfo","marginBottom","signatures","copyContainer","minHeight","minWidth","copyText"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Alert, StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport Clipboard from '@react-native-community/clipboard';\nimport Svg, { Path } from 'react-native-svg';\nimport qrcode from 'qrcode';\nimport { parseString } from 'xml2js';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTranslation } from 'react-i18next';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { BLACK, DARKER_GREY, LIGHT_BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { RecoveryErrorType } from './RecoveryError';\nimport { setupRecovery } from './thunks/recoveryThunks';\nimport { buildRecoveryChannelQrUrl } from '@/utils/recovery';\nimport {\n  clearChannel,\n  createChannel,\n  pollChannel,\n} from './thunks/channelThunks';\nimport {\n  resetRecoveryData,\n  uploadCompletedByOtherSide,\n} from './recoveryDataSlice';\nimport {\n  setupSync,\n  createSyncChannel,\n  pollImportChannel,\n  clearImportChannel,\n} from '../ImportFlow/thunks/channelThunks';\n\n/**\n * Recovery Code screen of BrightID\n *\n * displays a qrcode\n */\nenum RecoverSteps {\n  NOT_STARTED,\n  RUNNING,\n  ERROR,\n}\n\nconst RecoveryCodeScreen = ({ route }) => {\n  const { action, urlType } = route.params;\n  const [qrUrl, setQrUrl] = useState<URL>();\n  const [qrsvg, setQrsvg] = useState('');\n  const [alreadyNotified, setAlreadyNotified] = useState(false);\n  const recoveryData = useSelector((state: State) => state.recoveryData);\n  const isScanned = useSelector(\n    (state: State) =>\n      uploadCompletedByOtherSide(state) ||\n      state.recoveryData.recoveredConnections ||\n      state.recoveryData.recoveredGroups ||\n      state.recoveryData.recoveredBlindSigs,\n  );\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const [step, setStep] = useState<RecoverSteps>(RecoverSteps.NOT_STARTED);\n\n  const sigCount = recoveryData.sigs\n    ? Object.values(recoveryData.sigs).length\n    : 0;\n\n  // create recovery data and start polling channel\n  useEffect(() => {\n    const runRecoveryEffect = async () => {\n      // create publicKey, secretKey, aesKey for user\n      await dispatch(setupRecovery());\n      // create channel and upload new publicKey to get signed by the scanner\n      await dispatch(createChannel());\n      // start polling channel to get sig and mutual info\n      dispatch(pollChannel());\n    };\n    const runImportEffect = async () => {\n      // create publicKey, secretKey, aesKey for user\n      await dispatch(setupRecovery());\n      // create channel and upload new publicKey to be added as a new signing key by the scanner\n      await dispatch(createChannel());\n      // start polling channel to get connections/groups/blindsigs info\n      dispatch(pollImportChannel());\n    };\n    const runSyncEffect = async () => {\n      // create a new aesKey\n      await dispatch(setupSync());\n      // create channel and upload lastSyncTime to the channel if it is not primary device\n      // or poll lastSyncTime from other side if it is and then upload connections/groups/blindsigs\n      // added after lastSyncTime to the channel\n      await dispatch(createSyncChannel());\n      // start polling channel to get new connections/groups/blindsigs info\n      dispatch(pollImportChannel());\n    };\n\n    if (step === RecoverSteps.NOT_STARTED) {\n      if (action === 'recovery') {\n        console.log(`initializing recovery process`);\n        runRecoveryEffect();\n      } else if (action === 'import') {\n        console.log(`initializing import process`);\n        runImportEffect();\n      } else if (action === 'sync') {\n        console.log(`initializing sync process`);\n        runSyncEffect();\n      }\n      setStep(RecoverSteps.RUNNING);\n    }\n  }, [action, dispatch, recoveryData.aesKey, step]);\n\n  // set QRCode and SVG\n  useEffect(() => {\n    if (recoveryData.channel.url && recoveryData.aesKey) {\n      const newQrUrl = buildRecoveryChannelQrUrl({\n        aesKey: recoveryData.aesKey,\n        url: recoveryData.channel.url,\n        t: urlType,\n      });\n      console.log(`new qrCode url: ${newQrUrl.href}`);\n      setQrUrl(newQrUrl);\n\n      const parseQrString = (err, qrsvg) => {\n        if (err) return console.log(err);\n        setQrsvg(qrsvg);\n      };\n\n      qrcode.toString(newQrUrl.href, (err, qr) => {\n        if (err) return console.log(err);\n        parseString(qr, parseQrString);\n      });\n    }\n  }, [recoveryData.aesKey, recoveryData.channel.url, urlType]);\n\n  // track errors\n  useEffect(() => {\n    if (recoveryData.errorType !== RecoveryErrorType.NONE) {\n      // something went wrong. Show error message to user and stop recovery process\n      let message;\n      switch (recoveryData.errorType) {\n        case RecoveryErrorType.MISMATCH_ID:\n          message = t(\n            'recovery.error.mismatchId',\n            'Your recovery connections selected different accounts',\n          );\n          break;\n        case RecoveryErrorType.GENERIC:\n        default:\n          // use untranslated errorMessage from state if available, generic message otherwise\n          message =\n            recoveryData.errorMessage !== ''\n              ? recoveryData.errorMessage\n              : t('recovery.error.unknown', 'An unknown error occured');\n      }\n      Alert.alert(\n        t('recovery.error.title', 'Account recovery failed'),\n        message,\n      );\n      if (action === 'recovery') {\n        clearChannel();\n      } else if (action === 'import') {\n        clearImportChannel();\n      }\n      dispatch(resetRecoveryData());\n      setStep(RecoverSteps.ERROR);\n      navigation.goBack();\n    }\n  }, [\n    action,\n    dispatch,\n    navigation,\n    recoveryData.errorMessage,\n    recoveryData.errorType,\n    t,\n  ]);\n\n  useFocusEffect(\n    useCallback(() => {\n      if (action === 'recovery' && !alreadyNotified && sigCount === 1) {\n        // alert user that one of their sigs exists\n        Alert.alert(\n          t('common.alert.info'),\n          t('common.alert.text.recoverySigned'),\n        );\n        setAlreadyNotified(true);\n      } else if (action === 'recovery' && sigCount > 1) {\n        navigation.navigate('Restore');\n      } else if (action === 'import' && isScanned) {\n        navigation.navigate('Import');\n      } else if (action === 'sync' && isScanned) {\n        navigation.navigate('Devices', { syncing: true, asScanner: false });\n      }\n    }, [action, alreadyNotified, sigCount, isScanned, t, navigation]),\n  );\n\n  const copyQr = () => {\n    const universalLink = `https://app.brightid.org/connection-code/${encodeURIComponent(\n      qrUrl.href,\n    )}`;\n\n    let alertTitle: string;\n    let alertText: string;\n    let clipboardMsg: string;\n    switch (action) {\n      case 'recovery':\n        alertTitle = t('recovery.alert.title', 'Recovery link');\n        alertText = t(\n          'recovery.alert.text',\n          'Share this link with your recovery connections.',\n        );\n        clipboardMsg = t('recovery.clipboardmessage', {\n          defaultValue: 'Help me recover my BrightID: {{link}}',\n          link: universalLink,\n        });\n        break;\n      case 'import':\n        alertTitle = t('import.alert.title', 'Import BrightID link');\n        alertText = t(\n          'import.alert.text',\n          'Open this link with the BrightID app that should be imported.',\n        );\n        clipboardMsg = t('import.clipboardmessage', {\n          defaultValue: 'Export your BrightID to another device: {{link}}',\n          link: universalLink,\n        });\n        break;\n      case 'sync':\n        alertTitle = t('sync.alert.title', 'Sync user data');\n        alertText = t(\n          'sync.alert.text',\n          'Open this link with the BrightID app that should be synced.',\n        );\n        clipboardMsg = t('sync.clipboardmessage', {\n          defaultValue: 'Sync your BrightID data with another device: {{link}}',\n          link: universalLink,\n        });\n        break;\n      default:\n        break;\n    }\n\n    if (__DEV__) {\n      clipboardMsg = universalLink;\n    }\n\n    Alert.alert(\n      alertTitle,\n      alertText,\n      [\n        {\n          text: t('common.button.copy'),\n          onPress: () => {\n            Clipboard.setString(clipboardMsg);\n          },\n        },\n      ],\n      { cancelable: false },\n    );\n  };\n\n  return (\n    <>\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        <Text style={styles.recoveryCodeInfoText}>\n          {action === 'recovery' && t('recovery.text.askScanning')}\n          {action === 'import' && t('import.text.askScanning')}\n          {action === 'sync' && t('sync.text.askScanning')}\n        </Text>\n\n        {qrsvg ? (\n          <View style={styles.qrsvgContainer}>\n            <Text style={styles.signatures}>\n              {action === 'recovery'\n                ? t('recovery.text.signatures', { count: sigCount })\n                : ''}\n            </Text>\n            <Svg\n              height={DEVICE_LARGE ? '240' : '200'}\n              width={DEVICE_LARGE ? '240' : '200'}\n              viewBox={path(['svg', '$', 'viewBox'], qrsvg)}\n              shape-rendering=\"crispEdges\"\n            >\n              <Path\n                fill={WHITE}\n                d={path(['svg', 'path', '0', '$', 'd'], qrsvg)}\n              />\n              <Path\n                stroke={BLACK}\n                d={path(['svg', 'path', '1', '$', 'd'], qrsvg)}\n              />\n            </Svg>\n\n            <TouchableOpacity style={styles.copyContainer} onPress={copyQr}>\n              <Material\n                size={24}\n                name=\"content-copy\"\n                color={LIGHT_BLACK}\n                style={{ width: 24, height: 24 }}\n              />\n              <Text style={styles.copyText}> {t('common.button.copy')}</Text>\n            </TouchableOpacity>\n            {__DEV__ && (\n              <View>\n                <Text style={{ fontSize: 6 }} testID=\"qrcode\">\n                  {qrUrl?.href}\n                </Text>\n              </View>\n            )}\n          </View>\n        ) : (\n          <View style={styles.qrsvgContainer}>\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 48 : 42}\n              type=\"9CubeGrid\"\n              color={ORANGE}\n            />\n          </View>\n        )}\n        <Text style={styles.additionalInfo}>\n          {action === 'recovery' && t('recovery.text.additionalInfo')}\n          {action === 'import' && t('import.text.additionalInfo')}\n          {action === 'sync' && t('sync.text.additionalInfo')}\n        </Text>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  qrsvgContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  recoveryCodeInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n    width: '80%',\n    marginTop: DEVICE_LARGE ? 30 : 26,\n  },\n  additionalInfo: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: DARKER_GREY,\n    width: '80%',\n    marginBottom: DEVICE_LARGE ? 50 : 45,\n  },\n  signatures: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 25,\n    minWidth: 100,\n  },\n  copyText: {\n    color: BLACK,\n    fontFamily: 'Poppins-Medium',\n  },\n});\n\nexport default RecoveryCodeScreen;\n"]},"metadata":{},"sourceType":"module"}