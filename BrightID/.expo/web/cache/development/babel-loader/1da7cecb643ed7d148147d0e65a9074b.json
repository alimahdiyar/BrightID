{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Material from \"@expo/vector-icons/MaterialIcons\";\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation } from '@react-navigation/native';\nimport { connectionLevelColors, connectionLevelStrings } from \"../../utils/connectionLevelStrings\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { BLUE, BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { connection_levels } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction TrustLevelView(_ref) {\n  var level = _ref.level,\n      connectionId = _ref.connectionId;\n  var navigation = useNavigation();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var setLevel = function setLevel() {\n    navigation.navigate('SetTrustlevel', {\n      connectionId: connectionId\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.trustLevelLabel,\n      children: _jsx(Text, {\n        style: styles.trustLevelLabelText,\n        children: t('connectionDetails.label.connectionLevel')\n      })\n    }), _jsx(View, {\n      style: styles.trustLevel,\n      children: _jsx(Text, {\n        testID: \"ConnectionLevelText\",\n        style: [styles.trustLevelText, {\n          color: connectionLevelColors[level]\n        }],\n        children: connectionLevelStrings[level]\n      })\n    }), level !== connection_levels.REPORTED && _jsx(TouchableOpacity, {\n      style: styles.trustLevelButton,\n      testID: \"EditConnectionLevelBtn\",\n      onPress: setLevel,\n      children: _jsx(Material, {\n        name: \"edit\",\n        size: DEVICE_LARGE ? 22 : 20,\n        color: BLUE\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: DEVICE_LARGE ? 22 : 20\n  },\n  trustLevelLabel: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  trustLevelLabelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  trustLevel: {\n    flex: 1,\n    alignItems: 'flex-end',\n    justifyContent: 'center'\n  },\n  trustLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLACK\n  },\n  trustLevelButton: {\n    padding: 5\n  }\n});\nexport default TrustLevelView;","map":{"version":3,"names":["React","Material","useTranslation","useNavigation","connectionLevelColors","connectionLevelStrings","DEVICE_LARGE","BLUE","BLACK","fontSize","connection_levels","TrustLevelView","level","connectionId","navigation","t","setLevel","navigate","styles","container","trustLevelLabel","trustLevelLabelText","trustLevel","trustLevelText","color","REPORTED","trustLevelButton","StyleSheet","create","flexDirection","alignItems","marginBottom","justifyContent","fontFamily","flex","padding"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustLevelView.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialIcons';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  connectionLevelColors,\n  connectionLevelStrings,\n} from '@/utils/connectionLevelStrings';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLUE, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { connection_levels } from '@/utils/constants';\n\ntype Props = {\n  level: ConnectionLevel;\n  connectionId: string;\n};\n\nfunction TrustLevelView({ level, connectionId }: Props) {\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n  const setLevel = () => {\n    navigation.navigate('SetTrustlevel', {\n      connectionId,\n    });\n  };\n  return (\n    <View style={styles.container}>\n      <View style={styles.trustLevelLabel}>\n        <Text style={styles.trustLevelLabelText}>\n          {t('connectionDetails.label.connectionLevel')}\n        </Text>\n      </View>\n\n      <View style={styles.trustLevel}>\n        <Text\n          testID=\"ConnectionLevelText\"\n          style={[\n            styles.trustLevelText,\n            { color: connectionLevelColors[level] },\n          ]}\n        >\n          {connectionLevelStrings[level]}\n        </Text>\n      </View>\n      {level !== connection_levels.REPORTED && (\n        <TouchableOpacity\n          style={styles.trustLevelButton}\n          testID=\"EditConnectionLevelBtn\"\n          onPress={setLevel}\n        >\n          <Material name=\"edit\" size={DEVICE_LARGE ? 22 : 20} color={BLUE} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: DEVICE_LARGE ? 22 : 20,\n  },\n  trustLevelLabel: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  trustLevelLabelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  trustLevel: {\n    flex: 1,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n  },\n  trustLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLACK,\n  },\n  trustLevelButton: {\n    padding: 5,\n  },\n});\n\nexport default TrustLevelView;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,OAAOC,QAAP;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SACEC,qBADF,EAEEC,sBAFF;AAIA,SAASC,YAAT;AACA,SAASC,IAAT,EAAeC,KAAf;AACA,SAASC,QAAT;AACA,SAASC,iBAAT;;;;AAOA,SAASC,cAAT,OAAwD;EAAA,IAA9BC,KAA8B,QAA9BA,KAA8B;EAAA,IAAvBC,YAAuB,QAAvBA,YAAuB;EACtD,IAAMC,UAAU,GAAGX,aAAa,EAAhC;;EACA,sBAAcD,cAAc,EAA5B;EAAA,IAAQa,CAAR,mBAAQA,CAAR;;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;IACrBF,UAAU,CAACG,QAAX,CAAoB,eAApB,EAAqC;MACnCJ,YAAY,EAAZA;IADmC,CAArC;EAGD,CAJD;;EAKA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEK,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,eAApB;MAAA,UACE,KAAC,IAAD;QAAM,KAAK,EAAEF,MAAM,CAACG,mBAApB;QAAA,UACGN,CAAC,CAAC,yCAAD;MADJ;IADF,EADF,EAOE,KAAC,IAAD;MAAM,KAAK,EAAEG,MAAM,CAACI,UAApB;MAAA,UACE,KAAC,IAAD;QACE,MAAM,EAAC,qBADT;QAEE,KAAK,EAAE,CACLJ,MAAM,CAACK,cADF,EAEL;UAAEC,KAAK,EAAEpB,qBAAqB,CAACQ,KAAD;QAA9B,CAFK,CAFT;QAAA,UAOGP,sBAAsB,CAACO,KAAD;MAPzB;IADF,EAPF,EAkBGA,KAAK,KAAKF,iBAAiB,CAACe,QAA5B,IACC,KAAC,gBAAD;MACE,KAAK,EAAEP,MAAM,CAACQ,gBADhB;MAEE,MAAM,EAAC,wBAFT;MAGE,OAAO,EAAEV,QAHX;MAAA,UAKE,KAAC,QAAD;QAAU,IAAI,EAAC,MAAf;QAAsB,IAAI,EAAEV,YAAY,GAAG,EAAH,GAAQ,EAAhD;QAAoD,KAAK,EAAEC;MAA3D;IALF,EAnBJ;EAAA,EADF;AA8BD;;AAED,IAAMW,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;EAC/BT,SAAS,EAAE;IACTU,aAAa,EAAE,KADN;IAETC,UAAU,EAAE,QAFH;IAGTC,YAAY,EAAEzB,YAAY,GAAG,EAAH,GAAQ;EAHzB,CADoB;EAM/Bc,eAAe,EAAE;IACfU,UAAU,EAAE,QADG;IAEfE,cAAc,EAAE;EAFD,CANc;EAU/BX,mBAAmB,EAAE;IACnBY,UAAU,EAAE,gBADO;IAEnBxB,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAFC;IAGnBe,KAAK,EAAEhB;EAHY,CAVU;EAe/Bc,UAAU,EAAE;IACVY,IAAI,EAAE,CADI;IAEVJ,UAAU,EAAE,UAFF;IAGVE,cAAc,EAAE;EAHN,CAfmB;EAoB/BT,cAAc,EAAE;IACdU,UAAU,EAAE,gBADE;IAEdxB,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAFJ;IAGde,KAAK,EAAEhB;EAHO,CApBe;EAyB/BkB,gBAAgB,EAAE;IAChBS,OAAO,EAAE;EADO;AAzBa,CAAlB,CAAf;AA8BA,eAAexB,cAAf"},"metadata":{},"sourceType":"module"}