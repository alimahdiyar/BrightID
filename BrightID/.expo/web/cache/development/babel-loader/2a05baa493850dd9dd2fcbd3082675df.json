{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AccountSteps } from \"./RestoreScreen\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { BLACK, DARKER_GREY, GREEN, ORANGE, RED } from \"../../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport Spinner from 'react-native-spinkit';\nimport IonIcons from \"@expo/vector-icons/Ionicons\";\nimport { useTranslation } from 'react-i18next';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var RecoverAccount = function RecoverAccount(_ref) {\n  var currentStep = _ref.currentStep,\n      errorMessage = _ref.errorMessage,\n      recoveredConnections = _ref.recoveredConnections,\n      recoveredGroups = _ref.recoveredGroups;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      stateDescription = _useState2[0],\n      setStateDescription = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      iconData = _useState4[0],\n      setIconData = _useState4[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  useEffect(function () {\n    switch (currentStep) {\n      case AccountSteps.WAITING_DOWNLOAD:\n      case AccountSteps.DOWNLOAD_COMPLETE:\n        setIconData(undefined);\n        setStateDescription(t('recovery.steps.downloading', 'Downloading data from recovery connections...'));\n        break;\n\n      case AccountSteps.WAITING_OPERATION:\n      case AccountSteps.OPERATION_APPLIED:\n        setIconData(undefined);\n        setStateDescription(t('recovery.steps.recovering', 'Recovering account...'));\n        break;\n\n      case AccountSteps.COMPLETE:\n        setIconData({\n          color: GREEN,\n          name: 'checkmark-circle-outline'\n        });\n        setStateDescription(t('recovery.steps.complete', 'Account recovery complete'));\n        break;\n\n      case AccountSteps.ERROR:\n        setIconData({\n          color: RED,\n          name: 'alert-circle-outline'\n        });\n        setStateDescription(t('recovery.steps.error', 'Account recovery failed'));\n        break;\n\n      default:\n        setStateDescription(\"Unhandled state \" + AccountSteps[currentStep]);\n        break;\n    }\n  }, [currentStep, t]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.headerTextContainer,\n      children: [_jsx(Text, {\n        style: styles.headerText,\n        children: t('recovery.header.text', {\n          defaultValue: 'Part 1: Recover account'\n        })\n      }), _jsx(Text, {\n        style: styles.headerInfoText,\n        children: t('recovery.info', {\n          defaultValue: 'This step will recover your BrightID on this device. Names and photos of connections in common with your recovery connections will be restored.'\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.statusContainer,\n      children: [_jsx(View, {\n        children: iconData ? _jsx(IonIcons, {\n          style: {\n            alignSelf: 'center'\n          },\n          size: DEVICE_LARGE ? 64 : 44,\n          name: iconData.name,\n          color: iconData.color\n        }) : _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 64 : 44,\n          type: \"Wave\",\n          color: ORANGE\n        })\n      }), _jsxs(View, {\n        style: styles.infoTextContainer,\n        children: [_jsx(Text, {\n          style: styles.infoText,\n          children: stateDescription\n        }), _jsx(Text, {\n          style: styles.infoSubText,\n          children: currentStep === AccountSteps.ERROR ? errorMessage : t('recovery.state', {\n            defaultValue: 'Recovered {{recoveredConnections}} connections, {{recoveredGroups}} groups',\n            recoveredConnections: recoveredConnections,\n            recoveredGroups: recoveredGroups\n          })\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%'\n  },\n  headerTextContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  headerText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[20],\n    color: BLACK\n  },\n  headerInfoText: {\n    fontFamily: 'Poppins-Regular',\n    textAlign: 'center',\n    color: DARKER_GREY,\n    fontSize: fontSize[12],\n    maxWidth: '90%'\n  },\n  statusContainer: {\n    flexDirection: 'row',\n    marginTop: 10,\n    marginLeft: 20,\n    alignItems: 'center'\n  },\n  infoTextContainer: {\n    flex: 1,\n    marginLeft: 10\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  infoSubText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[10],\n    color: BLACK\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","AccountSteps","fontSize","BLACK","DARKER_GREY","GREEN","ORANGE","RED","DEVICE_LARGE","Spinner","IonIcons","useTranslation","RecoverAccount","currentStep","errorMessage","recoveredConnections","recoveredGroups","stateDescription","setStateDescription","undefined","iconData","setIconData","t","WAITING_DOWNLOAD","DOWNLOAD_COMPLETE","WAITING_OPERATION","OPERATION_APPLIED","COMPLETE","color","name","ERROR","styles","container","headerTextContainer","headerText","defaultValue","headerInfoText","statusContainer","alignSelf","infoTextContainer","infoText","infoSubText","StyleSheet","create","justifyContent","alignItems","width","fontFamily","textAlign","maxWidth","flexDirection","marginTop","marginLeft","flex"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RecoverAccount.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { AccountSteps } from '@/components/Onboarding/RecoveryFlow/RestoreScreen';\nimport { fontSize } from '@/theme/fonts';\nimport { BLACK, DARKER_GREY, GREEN, ORANGE, RED } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport Spinner from 'react-native-spinkit';\nimport IonIcons from 'react-native-vector-icons/Ionicons';\nimport { useTranslation } from 'react-i18next';\n\n/* Component to track account recovery */\ntype RecoverAccountParams = {\n  currentStep: AccountSteps;\n  errorMessage: string;\n  recoveredGroups: number;\n  recoveredConnections: number;\n};\nexport const RecoverAccount = ({\n  currentStep,\n  errorMessage,\n  recoveredConnections,\n  recoveredGroups,\n}: RecoverAccountParams) => {\n  const [stateDescription, setStateDescription] = useState('');\n  const [iconData, setIconData] = useState<{ color: string; name: string }>(\n    undefined,\n  );\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    switch (currentStep) {\n      case AccountSteps.WAITING_DOWNLOAD:\n      case AccountSteps.DOWNLOAD_COMPLETE:\n        setIconData(undefined);\n        setStateDescription(\n          t(\n            'recovery.steps.downloading',\n            'Downloading data from recovery connections...',\n          ),\n        );\n        break;\n      case AccountSteps.WAITING_OPERATION:\n      case AccountSteps.OPERATION_APPLIED:\n        setIconData(undefined);\n        setStateDescription(\n          t('recovery.steps.recovering', 'Recovering account...'),\n        );\n        break;\n      case AccountSteps.COMPLETE:\n        setIconData({ color: GREEN, name: 'checkmark-circle-outline' });\n        setStateDescription(\n          t('recovery.steps.complete', 'Account recovery complete'),\n        );\n        break;\n      case AccountSteps.ERROR:\n        setIconData({ color: RED, name: 'alert-circle-outline' });\n        setStateDescription(\n          t('recovery.steps.error', 'Account recovery failed'),\n        );\n        break;\n      default:\n        setStateDescription(`Unhandled state ${AccountSteps[currentStep]}`);\n        break;\n    }\n  }, [currentStep, t]);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.headerTextContainer}>\n        <Text style={styles.headerText}>\n          {t('recovery.header.text', {\n            defaultValue: 'Part 1: Recover account',\n          })}\n        </Text>\n\n        <Text style={styles.headerInfoText}>\n          {t('recovery.info', {\n            defaultValue:\n              'This step will recover your BrightID on this device. Names and photos of connections in common with your recovery connections will be restored.',\n          })}\n        </Text>\n      </View>\n      <View style={styles.statusContainer}>\n        <View>\n          {iconData ? (\n            <IonIcons\n              style={{ alignSelf: 'center' }}\n              size={DEVICE_LARGE ? 64 : 44}\n              name={iconData.name}\n              color={iconData.color}\n            />\n          ) : (\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 64 : 44}\n              type=\"Wave\"\n              color={ORANGE}\n            />\n          )}\n        </View>\n        <View style={styles.infoTextContainer}>\n          <Text style={styles.infoText}>{stateDescription}</Text>\n          <Text style={styles.infoSubText}>\n            {currentStep === AccountSteps.ERROR\n              ? errorMessage\n              : t('recovery.state', {\n                  defaultValue:\n                    'Recovered {{recoveredConnections}} connections, {{recoveredGroups}} groups',\n                  recoveredConnections,\n                  recoveredGroups,\n                })}\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  headerTextContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  headerText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[20],\n    color: BLACK,\n  },\n  headerInfoText: {\n    fontFamily: 'Poppins-Regular',\n    textAlign: 'center',\n    color: DARKER_GREY,\n    fontSize: fontSize[12],\n    maxWidth: '90%',\n  },\n  statusContainer: {\n    flexDirection: 'row',\n    marginTop: 10,\n    marginLeft: 20,\n    alignItems: 'center',\n  },\n  infoTextContainer: {\n    flex: 1,\n    marginLeft: 10,\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  infoSubText: {\n    fontFamily: 'Poppins-Regular',\n    fontSize: fontSize[10],\n    color: BLACK,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}