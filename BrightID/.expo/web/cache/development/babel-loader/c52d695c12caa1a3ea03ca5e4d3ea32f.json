{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport IonIcons from \"@expo/vector-icons/Ionicons\";\nimport { isEqual } from 'lodash';\nimport { ApiGateState } from \"./NodeApiGate\";\nimport { BLACK, ORANGE, RED, WHITE } from \"../theme/colors\";\nimport { DEVICE_LARGE } from \"../utils/deviceConstants\";\nimport { fontSize } from \"../theme/fonts\";\nimport { NODE_CHOOSER_TIMEOUT_MS } from \"../utils/constants\";\nimport { resetNodeUrls, selectAllNodeUrls, selectDefaultNodeUrls } from \"../reducer/settingsSlice\";\nimport { useDispatch, useSelector } from \"../store\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar calculateSecondsLeft = function calculateSecondsLeft(startTimestamp) {\n  var endTime = startTimestamp + NODE_CHOOSER_TIMEOUT_MS;\n  var remaining = endTime - Date.now();\n  return Math.ceil(remaining / 1000);\n};\n\nexport var NodeApiGateScreen = function NodeApiGateScreen(_ref) {\n  var gateState = _ref.gateState,\n      startTimestamp = _ref.startTimestamp,\n      retryHandler = _ref.retryHandler;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      stateDescription = _useState2[0],\n      setStateDescription = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondsLeft = _useState4[0],\n      setSecondsLeft = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      iconData = _useState6[0],\n      setIconData = _useState6[1];\n\n  var defaultNodeUrls = useSelector(selectDefaultNodeUrls);\n  var currentNodeUrls = useSelector(selectAllNodeUrls);\n  var dispatch = useDispatch();\n  useEffect(function () {\n    switch (gateState) {\n      case ApiGateState.INITIAL:\n      case ApiGateState.SEARCHING_NODE:\n      case ApiGateState.SEARCH_REQUESTED:\n      case ApiGateState.NODE_AVAILABLE:\n        setIconData(undefined);\n        setStateDescription(t('nodeApiGate.state.connecting'));\n        break;\n\n      case ApiGateState.ERROR_NO_NODE:\n        setIconData({\n          color: RED,\n          name: 'alert-circle-outline'\n        });\n\n        if (currentNodeUrls.length) {\n          setStateDescription(t('nodeApiGate.state.noConnection'));\n        } else {\n          setStateDescription(t('nodeApiGate.state.noNode'));\n        }\n\n        break;\n\n      default:\n        console.log(\"Unhandled gateState \" + gateState + \"!\");\n    }\n  }, [currentNodeUrls.length, gateState, t]);\n  useEffect(function () {\n    var timerId;\n\n    if (startTimestamp > 0) {\n      timerId = setInterval(function () {\n        var remainingSeconds = calculateSecondsLeft(startTimestamp);\n\n        if (remainingSeconds >= 0) {\n          setSecondsLeft(remainingSeconds);\n        }\n      }, 500);\n    }\n\n    return function () {\n      if (timerId) {\n        clearInterval(timerId);\n      }\n    };\n  }, [startTimestamp]);\n\n  var resetHandler = function resetHandler() {\n    dispatch(resetNodeUrls());\n    retryHandler();\n  };\n\n  var resetContainer;\n\n  if (!isEqual(defaultNodeUrls, currentNodeUrls)) {\n    resetContainer = _jsxs(_Fragment, {\n      children: [_jsx(View, {\n        style: styles.resetInfoContainer,\n        children: _jsx(Text, {\n          style: styles.resetInfoText,\n          children: t('nodeApiGate.reset.text')\n        })\n      }), _jsx(TouchableOpacity, {\n        style: styles.resetButton,\n        onPress: resetHandler,\n        children: _jsx(Text, {\n          style: styles.resetButtonText,\n          children: t('nodeApiGate.reset.button')\n        })\n      })]\n    });\n  }\n\n  var retryInfo;\n\n  if (currentNodeUrls.length) {\n    retryInfo = _jsx(TouchableOpacity, {\n      style: styles.retryBtn,\n      onPress: retryHandler,\n      children: _jsx(Text, {\n        style: styles.retryBtnText,\n        children: t('common.button.retry')\n      })\n    });\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsxs(SafeAreaView, {\n      style: styles.container,\n      children: [_jsx(StatusBar, {\n        barStyle: \"dark-content\",\n        backgroundColor: WHITE,\n        animated: true\n      }), _jsx(View, {\n        style: styles.header,\n        children: _jsx(Image, {\n          source: require(\"../static/brightid-final.png\"),\n          accessible: true,\n          accessibilityLabel: \"Home Header Logo\",\n          resizeMode: \"contain\",\n          style: styles.logo\n        })\n      }), _jsxs(View, {\n        style: styles.center,\n        children: [iconData ? _jsx(IonIcons, {\n          style: {\n            alignSelf: 'center'\n          },\n          size: DEVICE_LARGE ? 84 : 72,\n          name: iconData.name,\n          color: iconData.color\n        }) : _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 84 : 72,\n          type: \"Wave\",\n          color: ORANGE\n        }), _jsx(View, {\n          style: styles.infoTextContainer,\n          children: _jsx(Text, {\n            style: styles.infoText,\n            children: stateDescription\n          })\n        }), gateState !== ApiGateState.ERROR_NO_NODE ? _jsx(View, {\n          style: styles.timeoutContainer,\n          children: secondsLeft > 0 && _jsx(Text, {\n            style: styles.infoText,\n            children: t('nodeApiGate.timer.text', {\n              secondsLeft: secondsLeft\n            })\n          })\n        }) : _jsxs(View, {\n          style: styles.buttonContainer,\n          children: [retryInfo, resetContainer]\n        })]\n      })]\n    }), _jsx(View, {\n      style: styles.orangeBottom\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    flexDirection: 'column',\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: DEVICE_LARGE ? 35 : 20,\n    zIndex: 2,\n    overflow: 'hidden'\n  },\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    width: '100%',\n    height: 100,\n    zIndex: 1,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  header: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '15%'\n  },\n  logo: {\n    maxWidth: '40%',\n    maxHeight: 90\n  },\n  center: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  infoTextContainer: {\n    margin: 40\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: 26\n  },\n  timeoutContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70\n  },\n  buttonContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70\n  },\n  retryBtnContainer: {},\n  retryBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 4\n  },\n  retryBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE\n  },\n  resetInfoContainer: {\n    marginBottom: 3,\n    marginTop: 25\n  },\n  resetInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14]\n  },\n  resetButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 4\n  },\n  resetButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 20,\n    marginRight: 20\n  }\n});","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/NodeApiGateScreen.tsx"],"names":["calculateSecondsLeft","endTime","startTimestamp","remaining","Date","Math","NodeApiGateScreen","gateState","retryHandler","t","useTranslation","stateDescription","setStateDescription","useState","secondsLeft","setSecondsLeft","iconData","setIconData","defaultNodeUrls","useSelector","currentNodeUrls","dispatch","useDispatch","useEffect","ApiGateState","color","name","console","timerId","setInterval","remainingSeconds","clearInterval","resetHandler","resetNodeUrls","isEqual","resetContainer","styles","retryInfo","require","alignSelf","DEVICE_LARGE","StyleSheet","container","flex","backgroundColor","alignItems","flexDirection","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","zIndex","overflow","orangeBottom","width","height","position","bottom","left","right","header","justifyContent","marginTop","logo","maxWidth","maxHeight","center","infoTextContainer","margin","infoText","fontFamily","fontSize","textAlign","lineHeight","timeoutContainer","buttonContainer","retryBtnContainer","retryBtn","borderRadius","elevation","shadowColor","shadowOffset","shadowRadius","retryBtnText","resetInfoContainer","resetInfoText","resetButton","resetButtonText","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Image,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport IonIcons from 'react-native-vector-icons/Ionicons';\nimport { isEqual } from 'lodash';\nimport { ApiGateState } from '@/components/NodeApiGate';\nimport { BLACK, LIGHT_BLACK, ORANGE, RED, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { NODE_CHOOSER_TIMEOUT_MS } from '@/utils/constants';\nimport {\n  resetNodeUrls,\n  selectAllNodeUrls,\n  selectDefaultNodeUrls,\n} from '@/reducer/settingsSlice';\nimport { useDispatch, useSelector } from '@/store';\n\nconst calculateSecondsLeft = (startTimestamp: number) => {\n  const endTime = startTimestamp + NODE_CHOOSER_TIMEOUT_MS;\n  const remaining = endTime - Date.now();\n  return Math.ceil(remaining / 1000);\n};\n\nexport const NodeApiGateScreen = ({\n  gateState,\n  startTimestamp,\n  retryHandler,\n}: {\n  gateState: ApiGateState;\n  startTimestamp: number;\n  retryHandler: () => any;\n}) => {\n  const { t } = useTranslation();\n  const [stateDescription, setStateDescription] = useState('');\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const [iconData, setIconData] =\n    useState<{ color: string; name: string }>(undefined);\n  const defaultNodeUrls = useSelector(selectDefaultNodeUrls);\n  const currentNodeUrls = useSelector(selectAllNodeUrls);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    switch (gateState) {\n      case ApiGateState.INITIAL:\n      case ApiGateState.SEARCHING_NODE:\n      case ApiGateState.SEARCH_REQUESTED:\n      case ApiGateState.NODE_AVAILABLE:\n        setIconData(undefined);\n        setStateDescription(t('nodeApiGate.state.connecting'));\n        break;\n      case ApiGateState.ERROR_NO_NODE:\n        setIconData({ color: RED, name: 'alert-circle-outline' });\n        if (currentNodeUrls.length) {\n          setStateDescription(t('nodeApiGate.state.noConnection'));\n        } else {\n          setStateDescription(t('nodeApiGate.state.noNode'));\n        }\n        break;\n      default:\n        console.log(`Unhandled gateState ${gateState}!`);\n    }\n  }, [currentNodeUrls.length, gateState, t]);\n\n  // countdown until timeout reached\n  useEffect(() => {\n    let timerId;\n    if (startTimestamp > 0) {\n      timerId = setInterval(() => {\n        const remainingSeconds = calculateSecondsLeft(startTimestamp);\n        if (remainingSeconds >= 0) {\n          setSecondsLeft(remainingSeconds);\n        }\n      }, 500);\n    }\n    return () => {\n      if (timerId) {\n        clearInterval(timerId);\n      }\n    };\n  }, [startTimestamp]);\n\n  const resetHandler = () => {\n    dispatch(resetNodeUrls());\n    retryHandler();\n  };\n\n  let resetContainer;\n  if (!isEqual(defaultNodeUrls, currentNodeUrls)) {\n    resetContainer = (\n      <>\n        <View style={styles.resetInfoContainer}>\n          <Text style={styles.resetInfoText}>\n            {t('nodeApiGate.reset.text')}\n          </Text>\n        </View>\n        <TouchableOpacity style={styles.resetButton} onPress={resetHandler}>\n          <Text style={styles.resetButtonText}>\n            {t('nodeApiGate.reset.button')}\n          </Text>\n        </TouchableOpacity>\n      </>\n    );\n  }\n\n  let retryInfo;\n  if (currentNodeUrls.length) {\n    retryInfo = (\n      <TouchableOpacity style={styles.retryBtn} onPress={retryHandler}>\n        <Text style={styles.retryBtnText}>{t('common.button.retry')}</Text>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <StatusBar\n          barStyle=\"dark-content\"\n          backgroundColor={WHITE}\n          animated={true}\n        />\n\n        <View style={styles.header}>\n          <Image\n            source={require('@/static/brightid-final.png')}\n            accessible={true}\n            accessibilityLabel=\"Home Header Logo\"\n            resizeMode=\"contain\"\n            style={styles.logo}\n          />\n        </View>\n        <View style={styles.center}>\n          {iconData ? (\n            <IonIcons\n              style={{ alignSelf: 'center' }}\n              size={DEVICE_LARGE ? 84 : 72}\n              name={iconData.name}\n              color={iconData.color}\n            />\n          ) : (\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 84 : 72}\n              type=\"Wave\"\n              color={ORANGE}\n            />\n          )}\n          <View style={styles.infoTextContainer}>\n            <Text style={styles.infoText}>{stateDescription}</Text>\n          </View>\n          {gateState !== ApiGateState.ERROR_NO_NODE ? (\n            <View style={styles.timeoutContainer}>\n              {secondsLeft > 0 && (\n                <Text style={styles.infoText}>\n                  {t('nodeApiGate.timer.text', { secondsLeft })}\n                </Text>\n              )}\n            </View>\n          ) : (\n            <View style={styles.buttonContainer}>\n              {retryInfo}\n              {resetContainer}\n            </View>\n          )}\n        </View>\n      </SafeAreaView>\n      <View style={styles.orangeBottom} />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    flexDirection: 'column',\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: DEVICE_LARGE ? 35 : 20,\n    zIndex: 2,\n    overflow: 'hidden',\n  },\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    width: '100%',\n    height: 100,\n    zIndex: 1,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n  header: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '15%',\n  },\n  logo: {\n    maxWidth: '40%',\n    maxHeight: 90,\n  },\n  center: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  infoTextContainer: {\n    margin: 40,\n  },\n  infoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    lineHeight: 26,\n  },\n  timeoutContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70,\n  },\n  buttonContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: DEVICE_LARGE ? 85 : 70,\n  },\n  retryBtnContainer: {},\n  retryBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 160 : 140,\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 4,\n  },\n  retryBtnText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    color: WHITE,\n  },\n  resetInfoContainer: {\n    marginBottom: 3,\n    marginTop: 25,\n  },\n  resetInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n  },\n  resetButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: DEVICE_LARGE ? 50 : 45,\n    backgroundColor: ORANGE,\n    borderRadius: 100,\n    elevation: 1,\n    shadowColor: BLACK,\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 4,\n  },\n  resetButtonText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 20,\n    marginRight: 20,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}