{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { setInternetCredentials, getGenericPassword, setGenericPassword } from 'react-native-keychain';\nimport { compose } from 'ramda';\nimport { objToUint8, uInt8ArrayToB64, b64ToUint8Array } from \"../../utils/encoding\";\nimport { BACKUP_URL } from \"../../utils/constants\";\nimport { DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { asyncCreateMigrate } from \"./asyncCreateMigrate\";\nvar keyToString = compose(uInt8ArrayToB64, objToUint8);\nvar rootMigrations = {\n  9: function _(state) {\n    var _await$getGenericPass, password;\n\n    return _regeneratorRuntime.async(function _$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!state.user.secretKey || typeof state.user.secretKey !== 'string')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getGenericPassword());\n\n          case 3:\n            _await$getGenericPass = _context.sent;\n            password = _await$getGenericPass.password;\n            state.user.secretKey = password;\n\n          case 6:\n            state.keypair = {\n              publicKey: state.user.publicKey,\n              secretKey: b64ToUint8Array(state.user.secretKey)\n            };\n            delete state.user.publicKey;\n            delete state.user.secretKey;\n\n            if (state.notifications) {\n              delete state.notifications.miscAlreadyNotified;\n            }\n\n            state.user.migrated = true;\n            state.tasks = undefined;\n            return _context.abrupt(\"return\", state);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  8: function _(state) {\n    var linkedContexts, genericPassword, password;\n    return _regeneratorRuntime.async(function _$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            delete state.user.notifications;\n            delete state.connectQrData;\n            delete state.connectUserData;\n            linkedContexts = [];\n\n            if (state.apps.apps) {\n              linkedContexts = state.apps.apps.map(function (app) {\n                return {\n                  dateAdded: app.dateAdded || Date.now(),\n                  contextId: app.contextId,\n                  context: app.name,\n                  state: app.state\n                };\n              });\n            }\n\n            state.apps = {\n              apps: [],\n              linkedContexts: linkedContexts\n            };\n            _context2.prev = 6;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(getGenericPassword());\n\n          case 9:\n            genericPassword = _context2.sent;\n            password = genericPassword.password;\n\n            if (password) {\n              state.user.secretKey = password;\n            }\n\n            _context2.next = 18;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](6);\n            console.log(_context2.t0.message);\n\n            if (state.user.secretKey) {\n              state.user.secretKey = keyToString(state.user.secretKey);\n            }\n\n          case 18:\n            return _context2.abrupt(\"return\", state);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[6, 14]], Promise);\n  },\n  7: function _(state) {\n    return _regeneratorRuntime.async(function _$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            delete state.channels;\n            delete state.pendingConnections;\n            delete state.notifications;\n            state.user.notifications = [];\n            state.connectQrData = {\n              myQrData: undefined,\n              peerQrData: {\n                aesKey: '',\n                ipAddress: '',\n                uuid: '',\n                qrString: '',\n                channel: '',\n                type: ''\n              }\n            };\n            state.connectUserData = {\n              id: '',\n              photo: '',\n              name: '',\n              timestamp: 0,\n              signedMessage: ''\n            };\n            return _context3.abrupt(\"return\", state);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  6: function _(state) {\n    return _regeneratorRuntime.async(function _$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (state.user) {\n              delete state.user.notifications;\n            }\n\n            delete state.connectQrData;\n            delete state.connectUserData;\n            return _context4.abrupt(\"return\", state);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  5: function _(state) {\n    var _state$user, _state$user2, secretKey, opts;\n\n    return _regeneratorRuntime.async(function _$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            secretKey = (_state$user = state.user) == null ? void 0 : _state$user.secretKey;\n\n            if (!(secretKey && Object.keys(secretKey).length && (_state$user2 = state.user) != null && _state$user2.id)) {\n              _context5.next = 13;\n              break;\n            }\n\n            if (!DEVICE_ANDROID) {\n              _context5.next = 9;\n              break;\n            }\n\n            opts = {\n              rules: 'none'\n            };\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(setGenericPassword(state.user.id, keyToString(secretKey), opts));\n\n          case 7:\n            _context5.next = 11;\n            break;\n\n          case 9:\n            _context5.next = 11;\n            return _regeneratorRuntime.awrap(setGenericPassword(state.user.id, keyToString(secretKey)));\n\n          case 11:\n            _context5.next = 13;\n            return _regeneratorRuntime.awrap(setInternetCredentials(BACKUP_URL, state.user.id, state.user.password));\n\n          case 13:\n            _context5.next = 19;\n            break;\n\n          case 15:\n            _context5.prev = 15;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(_context5.t0.message);\n            alert('Unable to access device keychain, please let BrightID core team know about this issue..');\n\n          case 19:\n            state.user.secretKey = keyToString(state.user.secretKey);\n            return _context5.abrupt(\"return\", state);\n\n          case 21:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  }\n};\nexport var rootMigrate = asyncCreateMigrate(rootMigrations, {\n  debug: __DEV__\n});","map":{"version":3,"names":["setInternetCredentials","getGenericPassword","setGenericPassword","compose","objToUint8","uInt8ArrayToB64","b64ToUint8Array","BACKUP_URL","DEVICE_ANDROID","asyncCreateMigrate","keyToString","rootMigrations","state","user","secretKey","password","keypair","publicKey","notifications","miscAlreadyNotified","migrated","tasks","undefined","connectQrData","connectUserData","linkedContexts","apps","map","app","dateAdded","Date","now","contextId","context","name","genericPassword","console","log","message","channels","pendingConnections","myQrData","peerQrData","aesKey","ipAddress","uuid","qrString","channel","type","id","photo","timestamp","signedMessage","Object","keys","length","opts","rules","alert","rootMigrate","debug","__DEV__"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/migrations/root.js"],"sourcesContent":["import {\n  setInternetCredentials,\n  getGenericPassword,\n  setGenericPassword,\n} from 'react-native-keychain';\nimport { compose } from 'ramda';\nimport { objToUint8, uInt8ArrayToB64, b64ToUint8Array } from '@/utils/encoding';\nimport { BACKUP_URL } from '@/utils/constants';\nimport { DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { asyncCreateMigrate } from './asyncCreateMigrate';\n\nconst keyToString = compose(uInt8ArrayToB64, objToUint8);\n\n/** Async migration creators require every version to return a promiseÃŸ */\n\nconst rootMigrations = {\n  9: async (state) => {\n    // extract secretKey if not present\n    if (!state.user.secretKey || typeof state.user.secretKey !== 'string') {\n      let { password } = await getGenericPassword();\n      state.user.secretKey = password;\n    }\n\n    state.keypair = {\n      publicKey: state.user.publicKey,\n      secretKey: b64ToUint8Array(state.user.secretKey),\n    };\n\n    delete state.user.publicKey;\n    delete state.user.secretKey;\n    if (state.notifications) {\n      delete state.notifications.miscAlreadyNotified;\n    }\n\n    // add migration key for deleting AsyncStorage(persist:root)\n    state.user.migrated = true;\n    state.tasks = undefined;\n    return state;\n  },\n  8: async (state) => {\n    delete state.user.notifications;\n    delete state.connectQrData;\n    delete state.connectUserData;\n    // transfer linked contexts\n    let linkedContexts = [];\n    if (state.apps.apps) {\n      linkedContexts = state.apps.apps.map((app) => ({\n        dateAdded: app.dateAdded || Date.now(),\n        contextId: app.contextId,\n        context: app.name,\n        state: app.state,\n      }));\n    }\n\n    state.apps = {\n      apps: [],\n      linkedContexts,\n    };\n\n    // transfer secret key as backup\n    try {\n      let genericPassword = await getGenericPassword();\n      let { password } = genericPassword;\n      if (password) {\n        state.user.secretKey = password;\n      }\n    } catch (err) {\n      console.log(err.message);\n      if (state.user.secretKey) {\n        state.user.secretKey = keyToString(state.user.secretKey);\n      }\n    }\n\n    return state;\n  },\n  7: async (state) => {\n    delete state.channels;\n    delete state.pendingConnections;\n    delete state.notifications;\n    state.user.notifications = [];\n    state.connectQrData = {\n      myQrData: undefined,\n      peerQrData: {\n        aesKey: '',\n        ipAddress: '',\n        uuid: '',\n        qrString: '',\n        channel: '',\n        type: '',\n      },\n    };\n    state.connectUserData = {\n      id: '',\n      photo: '',\n      name: '',\n      timestamp: 0,\n      signedMessage: '',\n    };\n    return state;\n  },\n  6: async (state) => {\n    if (state.user) {\n      delete state.user.notifications;\n    }\n\n    delete state.connectQrData;\n    delete state.connectUserData;\n    return state;\n  },\n  5: async (state) => {\n    try {\n      // secret key defaults to empty object\n      let secretKey = state.user?.secretKey;\n      if (secretKey && Object.keys(secretKey).length && state.user?.id) {\n        // save secret key in keychain storage\n\n        if (DEVICE_ANDROID) {\n          let opts = { rules: 'none' };\n          await setGenericPassword(state.user.id, keyToString(secretKey), opts);\n        } else {\n          await setGenericPassword(state.user.id, keyToString(secretKey));\n        }\n\n        // save backup password\n        await setInternetCredentials(\n          BACKUP_URL,\n          state.user.id,\n          state.user.password,\n        );\n      }\n    } catch (err) {\n      console.log(err.message);\n      alert(\n        'Unable to access device keychain, please let BrightID core team know about this issue..',\n      );\n    }\n    state.user.secretKey = keyToString(state.user.secretKey);\n    return state;\n  },\n};\n\nexport const rootMigrate = asyncCreateMigrate(rootMigrations, {\n  debug: __DEV__,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}