{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateOperation = exports.selectPendingOperations = exports.selectOutdatedOperations = exports.selectOperationsTotal = exports.selectOperationByHash = exports.selectAllOperations = exports.scrubOps = exports.removeManyOperations = exports.default = exports.addOperation = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _resetStore = require(\"../actions/resetStore\");\n\nvar _constants = require(\"../utils/constants\");\n\nvar operationsAdapter = (0, _toolkit.createEntityAdapter)({\n  selectId: function selectId(op) {\n    return op.hash;\n  }\n});\nvar operationsSlice = (0, _toolkit.createSlice)({\n  name: 'operations',\n  initialState: operationsAdapter.getInitialState(),\n  reducers: {\n    addOperation: {\n      reducer: operationsAdapter.addOne,\n      prepare: function prepare(operation) {\n        return {\n          payload: (0, _extends2.default)({}, operation, {\n            state: _constants.operation_states.UNKNOWN\n          })\n        };\n      }\n    },\n    removeOperation: operationsAdapter.removeOne,\n    resetOperations: operationsAdapter.removeAll,\n    updateOperation: operationsAdapter.updateOne,\n    removeManyOperations: operationsAdapter.removeMany\n  },\n  extraReducers: (0, _defineProperty2.default)({}, _resetStore.RESET_STORE, operationsAdapter.removeAll)\n});\nvar _operationsSlice$acti = operationsSlice.actions,\n    addOperation = _operationsSlice$acti.addOperation,\n    updateOperation = _operationsSlice$acti.updateOperation,\n    removeManyOperations = _operationsSlice$acti.removeManyOperations;\nexports.removeManyOperations = removeManyOperations;\nexports.updateOperation = updateOperation;\nexports.addOperation = addOperation;\n\nvar _operationsAdapter$ge = operationsAdapter.getSelectors(function (state) {\n  return state.operations;\n}),\n    selectOperationByHash = _operationsAdapter$ge.selectById,\n    selectAllOperations = _operationsAdapter$ge.selectAll,\n    selectOperationsTotal = _operationsAdapter$ge.selectTotal;\n\nexports.selectOperationsTotal = selectOperationsTotal;\nexports.selectAllOperations = selectAllOperations;\nexports.selectOperationByHash = selectOperationByHash;\nvar pendingStates = [_constants.operation_states.UNKNOWN, _constants.operation_states.INIT, _constants.operation_states.SENT];\nvar selectPendingOperations = (0, _toolkit.createSelector)(selectAllOperations, function (operations) {\n  return operations.filter(function (op) {\n    return pendingStates.includes(op.state);\n  });\n});\nexports.selectPendingOperations = selectPendingOperations;\nvar outdatedStates = [_constants.operation_states.APPLIED, _constants.operation_states.FAILED, _constants.operation_states.EXPIRED];\nvar selectOutdatedOperations = (0, _toolkit.createSelector)(selectAllOperations, function (operations) {\n  var now = Date.now();\n  return operations.filter(function (op) {\n    var timestamp = op.postTimestamp || op.timestamp;\n    return outdatedStates.includes(op.state) && now - timestamp > _constants.LOCAL_OPERATION_KEEP_THRESHOLD;\n  }).map(function (op) {\n    return op.hash;\n  });\n});\nexports.selectOutdatedOperations = selectOutdatedOperations;\n\nvar scrubOps = function scrubOps() {\n  return function (dispatch, getState) {\n    var removeOpIds = selectOutdatedOperations(getState());\n    console.log(\"Scrubbing \" + removeOpIds.length + \" outdated operations: \" + removeOpIds);\n    dispatch(removeManyOperations(removeOpIds));\n  };\n};\n\nexports.scrubOps = scrubOps;\nvar _default = operationsSlice.reducer;\nexports.default = _default;","map":{"version":3,"names":["operationsAdapter","createEntityAdapter","selectId","op","hash","operationsSlice","createSlice","name","initialState","getInitialState","reducers","addOperation","reducer","addOne","prepare","operation","payload","state","operation_states","UNKNOWN","removeOperation","removeOne","resetOperations","removeAll","updateOperation","updateOne","removeManyOperations","removeMany","extraReducers","RESET_STORE","actions","getSelectors","operations","selectOperationByHash","selectById","selectAllOperations","selectAll","selectOperationsTotal","selectTotal","pendingStates","INIT","SENT","selectPendingOperations","createSelector","filter","includes","outdatedStates","APPLIED","FAILED","EXPIRED","selectOutdatedOperations","now","Date","timestamp","postTimestamp","LOCAL_OPERATION_KEEP_THRESHOLD","map","scrubOps","dispatch","getState","removeOpIds","console","log","length"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/operationsSlice.ts"],"sourcesContent":["import {\n  createSlice,\n  createEntityAdapter,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\nimport {\n  LOCAL_OPERATION_KEEP_THRESHOLD,\n  operation_states,\n} from '@/utils/constants';\n\nexport type Operation = SubmittedOp & {\n  state: typeof operation_states[keyof typeof operation_states];\n};\n\nconst operationsAdapter = createEntityAdapter<Operation>({\n  selectId: (op) => op.hash,\n});\n\nconst operationsSlice = createSlice({\n  name: 'operations',\n  initialState: operationsAdapter.getInitialState(),\n  reducers: {\n    addOperation: {\n      reducer: operationsAdapter.addOne,\n      prepare: (operation: SubmittedOp) => {\n        return {\n          payload: {\n            ...operation,\n            state: operation_states.UNKNOWN,\n          },\n        };\n      },\n    },\n    removeOperation: operationsAdapter.removeOne,\n    resetOperations: operationsAdapter.removeAll,\n    updateOperation: operationsAdapter.updateOne,\n    removeManyOperations: operationsAdapter.removeMany,\n  },\n  extraReducers: {\n    [RESET_STORE]: operationsAdapter.removeAll,\n  },\n});\n\n// Export actions\nexport const {\n  addOperation,\n  updateOperation,\n  // removeOperation,\n  // resetOperations,\n  removeManyOperations,\n} = operationsSlice.actions;\n\n// export selectors\nexport const {\n  selectById: selectOperationByHash,\n  selectAll: selectAllOperations,\n  selectTotal: selectOperationsTotal,\n} = operationsAdapter.getSelectors((state: State) => state.operations);\n\nconst pendingStates = [\n  operation_states.UNKNOWN,\n  operation_states.INIT,\n  operation_states.SENT,\n];\n\nexport const selectPendingOperations = createSelector(\n  selectAllOperations,\n  (operations) => operations.filter((op) => pendingStates.includes(op.state)),\n);\n\nconst outdatedStates = [\n  operation_states.APPLIED,\n  operation_states.FAILED,\n  operation_states.EXPIRED,\n];\n\n/* Return IDs of operation entries that are outdated and can be removed from state */\nexport const selectOutdatedOperations = createSelector(\n  selectAllOperations,\n  (operations) => {\n    const now = Date.now();\n    return operations\n      .filter((op) => {\n        // prefer postTimestamp for calculation but use timestamp as fallback solution\n        const timestamp = op.postTimestamp || op.timestamp;\n        return (\n          outdatedStates.includes(op.state) &&\n          now - timestamp > LOCAL_OPERATION_KEEP_THRESHOLD\n        );\n      })\n      .map((op) => op.hash);\n  },\n);\n\nexport const scrubOps = () => (dispatch: dispatch, getState: getState) => {\n  const removeOpIds = selectOutdatedOperations(getState());\n  console.log(\n    `Scrubbing ${removeOpIds.length} outdated operations: ${removeOpIds}`,\n  );\n  dispatch(removeManyOperations(removeOpIds));\n};\n\n// Export reducer\nexport default operationsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}