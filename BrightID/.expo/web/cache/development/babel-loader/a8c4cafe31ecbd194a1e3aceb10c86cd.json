{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"accessibilityActiveDescendant\", \"accessibilityAtomic\", \"accessibilityAutoComplete\", \"accessibilityBusy\", \"accessibilityChecked\", \"accessibilityColumnCount\", \"accessibilityColumnIndex\", \"accessibilityColumnSpan\", \"accessibilityControls\", \"accessibilityCurrent\", \"accessibilityDescribedBy\", \"accessibilityDetails\", \"accessibilityDisabled\", \"accessibilityErrorMessage\", \"accessibilityExpanded\", \"accessibilityFlowTo\", \"accessibilityHasPopup\", \"accessibilityHidden\", \"accessibilityInvalid\", \"accessibilityKeyShortcuts\", \"accessibilityLabel\", \"accessibilityLabelledBy\", \"accessibilityLevel\", \"accessibilityLiveRegion\", \"accessibilityModal\", \"accessibilityMultiline\", \"accessibilityMultiSelectable\", \"accessibilityOrientation\", \"accessibilityOwns\", \"accessibilityPlaceholder\", \"accessibilityPosInSet\", \"accessibilityPressed\", \"accessibilityReadOnly\", \"accessibilityRequired\", \"accessibilityRole\", \"accessibilityRoleDescription\", \"accessibilityRowCount\", \"accessibilityRowIndex\", \"accessibilityRowSpan\", \"accessibilitySelected\", \"accessibilitySetSize\", \"accessibilitySort\", \"accessibilityValueMax\", \"accessibilityValueMin\", \"accessibilityValueNow\", \"accessibilityValueText\", \"classList\", \"dataSet\", \"focusable\", \"nativeID\", \"pointerEvents\", \"style\", \"testID\", \"accessible\", \"accessibilityState\", \"accessibilityValue\"];\nimport AccessibilityUtil from \"../AccessibilityUtil\";\nimport css from \"../../exports/StyleSheet/css\";\nimport StyleSheet from \"../../exports/StyleSheet\";\nimport styleResolver from \"../../exports/StyleSheet/styleResolver\";\nimport { STYLE_GROUPS } from \"../../exports/StyleSheet/constants\";\nvar emptyObject = {};\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar uppercasePattern = /[A-Z]/g;\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase();\n}\n\nfunction hyphenateString(str) {\n  return str.replace(uppercasePattern, toHyphenLower);\n}\n\nfunction processIDRefList(idRefList) {\n  return isArray(idRefList) ? idRefList.join(' ') : idRefList;\n}\n\nvar classes = css.create({\n  reset: {\n    backgroundColor: 'transparent',\n    color: 'inherit',\n    font: 'inherit',\n    listStyle: 'none',\n    margin: 0,\n    textAlign: 'inherit',\n    textDecoration: 'none'\n  },\n  cursor: {\n    cursor: 'pointer'\n  }\n}, STYLE_GROUPS.classicReset);\nvar pointerEventsStyles = StyleSheet.create({\n  auto: {\n    pointerEvents: 'auto'\n  },\n  'box-none': {\n    pointerEvents: 'box-none'\n  },\n  'box-only': {\n    pointerEvents: 'box-only'\n  },\n  none: {\n    pointerEvents: 'none'\n  }\n});\n\nvar createDOMProps = function createDOMProps(elementType, props) {\n  if (!props) {\n    props = emptyObject;\n  }\n\n  var _props = props,\n      accessibilityActiveDescendant = _props.accessibilityActiveDescendant,\n      accessibilityAtomic = _props.accessibilityAtomic,\n      accessibilityAutoComplete = _props.accessibilityAutoComplete,\n      accessibilityBusy = _props.accessibilityBusy,\n      accessibilityChecked = _props.accessibilityChecked,\n      accessibilityColumnCount = _props.accessibilityColumnCount,\n      accessibilityColumnIndex = _props.accessibilityColumnIndex,\n      accessibilityColumnSpan = _props.accessibilityColumnSpan,\n      accessibilityControls = _props.accessibilityControls,\n      accessibilityCurrent = _props.accessibilityCurrent,\n      accessibilityDescribedBy = _props.accessibilityDescribedBy,\n      accessibilityDetails = _props.accessibilityDetails,\n      accessibilityDisabled = _props.accessibilityDisabled,\n      accessibilityErrorMessage = _props.accessibilityErrorMessage,\n      accessibilityExpanded = _props.accessibilityExpanded,\n      accessibilityFlowTo = _props.accessibilityFlowTo,\n      accessibilityHasPopup = _props.accessibilityHasPopup,\n      accessibilityHidden = _props.accessibilityHidden,\n      accessibilityInvalid = _props.accessibilityInvalid,\n      accessibilityKeyShortcuts = _props.accessibilityKeyShortcuts,\n      accessibilityLabel = _props.accessibilityLabel,\n      accessibilityLabelledBy = _props.accessibilityLabelledBy,\n      accessibilityLevel = _props.accessibilityLevel,\n      accessibilityLiveRegion = _props.accessibilityLiveRegion,\n      accessibilityModal = _props.accessibilityModal,\n      accessibilityMultiline = _props.accessibilityMultiline,\n      accessibilityMultiSelectable = _props.accessibilityMultiSelectable,\n      accessibilityOrientation = _props.accessibilityOrientation,\n      accessibilityOwns = _props.accessibilityOwns,\n      accessibilityPlaceholder = _props.accessibilityPlaceholder,\n      accessibilityPosInSet = _props.accessibilityPosInSet,\n      accessibilityPressed = _props.accessibilityPressed,\n      accessibilityReadOnly = _props.accessibilityReadOnly,\n      accessibilityRequired = _props.accessibilityRequired,\n      accessibilityRole = _props.accessibilityRole,\n      accessibilityRoleDescription = _props.accessibilityRoleDescription,\n      accessibilityRowCount = _props.accessibilityRowCount,\n      accessibilityRowIndex = _props.accessibilityRowIndex,\n      accessibilityRowSpan = _props.accessibilityRowSpan,\n      accessibilitySelected = _props.accessibilitySelected,\n      accessibilitySetSize = _props.accessibilitySetSize,\n      accessibilitySort = _props.accessibilitySort,\n      accessibilityValueMax = _props.accessibilityValueMax,\n      accessibilityValueMin = _props.accessibilityValueMin,\n      accessibilityValueNow = _props.accessibilityValueNow,\n      accessibilityValueText = _props.accessibilityValueText,\n      classList = _props.classList,\n      dataSet = _props.dataSet,\n      focusable = _props.focusable,\n      nativeID = _props.nativeID,\n      pointerEvents = _props.pointerEvents,\n      providedStyle = _props.style,\n      testID = _props.testID,\n      accessible = _props.accessible,\n      accessibilityState = _props.accessibilityState,\n      accessibilityValue = _props.accessibilityValue,\n      domProps = _objectWithoutProperties(_props, _excluded);\n\n  var disabled = accessibilityState != null && accessibilityState.disabled === true || accessibilityDisabled;\n  var role = AccessibilityUtil.propsToAriaRole(props);\n\n  if (accessibilityState != null) {\n    for (var prop in accessibilityState) {\n      var value = accessibilityState[prop];\n\n      if (value != null) {\n        if (prop === 'disabled' || prop === 'hidden') {\n          if (value === true) {\n            domProps[\"aria-\" + prop] = value;\n            domProps[prop] = value;\n          }\n        } else {\n          domProps[\"aria-\" + prop] = value;\n        }\n      }\n    }\n  }\n\n  if (accessibilityValue != null) {\n    for (var _prop in accessibilityValue) {\n      var _value = accessibilityValue[_prop];\n\n      if (_value != null) {\n        domProps[\"aria-value\" + _prop] = _value;\n      }\n    }\n  }\n\n  if (accessibilityActiveDescendant != null) {\n    domProps['aria-activedescendant'] = accessibilityActiveDescendant;\n  }\n\n  if (accessibilityAtomic != null) {\n    domProps['aria-atomic'] = accessibilityAtomic;\n  }\n\n  if (accessibilityAutoComplete != null) {\n    domProps['aria-autocomplete'] = accessibilityAutoComplete;\n  }\n\n  if (accessibilityBusy != null) {\n    domProps['aria-busy'] = accessibilityBusy;\n  }\n\n  if (accessibilityChecked != null) {\n    domProps['aria-checked'] = accessibilityChecked;\n  }\n\n  if (accessibilityColumnCount != null) {\n    domProps['aria-colcount'] = accessibilityColumnCount;\n  }\n\n  if (accessibilityColumnIndex != null) {\n    domProps['aria-colindex'] = accessibilityColumnIndex;\n  }\n\n  if (accessibilityColumnSpan != null) {\n    domProps['aria-colspan'] = accessibilityColumnSpan;\n  }\n\n  if (accessibilityControls != null) {\n    domProps['aria-controls'] = processIDRefList(accessibilityControls);\n  }\n\n  if (accessibilityCurrent != null) {\n    domProps['aria-current'] = accessibilityCurrent;\n  }\n\n  if (accessibilityDescribedBy != null) {\n    domProps['aria-describedby'] = processIDRefList(accessibilityDescribedBy);\n  }\n\n  if (accessibilityDetails != null) {\n    domProps['aria-details'] = accessibilityDetails;\n  }\n\n  if (disabled === true) {\n    domProps['aria-disabled'] = true;\n\n    if (elementType === 'button' || elementType === 'form' || elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.disabled = true;\n    }\n  }\n\n  if (accessibilityErrorMessage != null) {\n    domProps['aria-errormessage'] = accessibilityErrorMessage;\n  }\n\n  if (accessibilityExpanded != null) {\n    domProps['aria-expanded'] = accessibilityExpanded;\n  }\n\n  if (accessibilityFlowTo != null) {\n    domProps['aria-flowto'] = processIDRefList(accessibilityFlowTo);\n  }\n\n  if (accessibilityHasPopup != null) {\n    domProps['aria-haspopup'] = accessibilityHasPopup;\n  }\n\n  if (accessibilityHidden === true) {\n    domProps['aria-hidden'] = accessibilityHidden;\n  }\n\n  if (accessibilityInvalid != null) {\n    domProps['aria-invalid'] = accessibilityInvalid;\n  }\n\n  if (accessibilityKeyShortcuts != null && Array.isArray(accessibilityKeyShortcuts)) {\n    domProps['aria-keyshortcuts'] = accessibilityKeyShortcuts.join(' ');\n  }\n\n  if (accessibilityLabel != null) {\n    domProps['aria-label'] = accessibilityLabel;\n  }\n\n  if (accessibilityLabelledBy != null) {\n    domProps['aria-labelledby'] = processIDRefList(accessibilityLabelledBy);\n  }\n\n  if (accessibilityLevel != null) {\n    domProps['aria-level'] = accessibilityLevel;\n  }\n\n  if (accessibilityLiveRegion != null) {\n    domProps['aria-live'] = accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion;\n  }\n\n  if (accessibilityModal != null) {\n    domProps['aria-modal'] = accessibilityModal;\n  }\n\n  if (accessibilityMultiline != null) {\n    domProps['aria-multiline'] = accessibilityMultiline;\n  }\n\n  if (accessibilityMultiSelectable != null) {\n    domProps['aria-multiselectable'] = accessibilityMultiSelectable;\n  }\n\n  if (accessibilityOrientation != null) {\n    domProps['aria-orientation'] = accessibilityOrientation;\n  }\n\n  if (accessibilityOwns != null) {\n    domProps['aria-owns'] = processIDRefList(accessibilityOwns);\n  }\n\n  if (accessibilityPlaceholder != null) {\n    domProps['aria-placeholder'] = accessibilityPlaceholder;\n  }\n\n  if (accessibilityPosInSet != null) {\n    domProps['aria-posinset'] = accessibilityPosInSet;\n  }\n\n  if (accessibilityPressed != null) {\n    domProps['aria-pressed'] = accessibilityPressed;\n  }\n\n  if (accessibilityReadOnly != null) {\n    domProps['aria-readonly'] = accessibilityReadOnly;\n\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.readOnly = true;\n    }\n  }\n\n  if (accessibilityRequired != null) {\n    domProps['aria-required'] = accessibilityRequired;\n\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.required = true;\n    }\n  }\n\n  if (role != null) {\n    domProps['role'] = role === 'none' ? 'presentation' : role;\n  }\n\n  if (accessibilityRoleDescription != null) {\n    domProps['aria-roledescription'] = accessibilityRoleDescription;\n  }\n\n  if (accessibilityRowCount != null) {\n    domProps['aria-rowcount'] = accessibilityRowCount;\n  }\n\n  if (accessibilityRowIndex != null) {\n    domProps['aria-rowindex'] = accessibilityRowIndex;\n  }\n\n  if (accessibilityRowSpan != null) {\n    domProps['aria-rowspan'] = accessibilityRowSpan;\n  }\n\n  if (accessibilitySelected != null) {\n    domProps['aria-selected'] = accessibilitySelected;\n  }\n\n  if (accessibilitySetSize != null) {\n    domProps['aria-setsize'] = accessibilitySetSize;\n  }\n\n  if (accessibilitySort != null) {\n    domProps['aria-sort'] = accessibilitySort;\n  }\n\n  if (accessibilityValueMax != null) {\n    domProps['aria-valuemax'] = accessibilityValueMax;\n  }\n\n  if (accessibilityValueMin != null) {\n    domProps['aria-valuemin'] = accessibilityValueMin;\n  }\n\n  if (accessibilityValueNow != null) {\n    domProps['aria-valuenow'] = accessibilityValueNow;\n  }\n\n  if (accessibilityValueText != null) {\n    domProps['aria-valuetext'] = accessibilityValueText;\n  }\n\n  if (dataSet != null) {\n    for (var dataProp in dataSet) {\n      if (hasOwnProperty.call(dataSet, dataProp)) {\n        var dataName = hyphenateString(dataProp);\n        var dataValue = dataSet[dataProp];\n\n        if (dataValue != null) {\n          domProps[\"data-\" + dataName] = dataValue;\n        }\n      }\n    }\n  }\n\n  var _focusable = focusable != null ? focusable : accessible;\n\n  if (_focusable === false) {\n    domProps.tabIndex = '-1';\n  }\n\n  if (elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n    if (_focusable === false || accessibilityDisabled === true) {\n      domProps.tabIndex = '-1';\n    }\n  } else if (role === 'button' || role === 'checkbox' || role === 'link' || role === 'radio' || role === 'textbox' || role === 'switch') {\n    if (_focusable !== false) {\n      domProps.tabIndex = '0';\n    }\n  } else {\n    if (_focusable === true) {\n      domProps.tabIndex = '0';\n    }\n  }\n\n  var reactNativeStyle = StyleSheet.compose(pointerEvents && pointerEventsStyles[pointerEvents], providedStyle);\n  var needsCursor = (role === 'button' || role === 'link') && !disabled;\n  var needsReset = elementType === 'a' || elementType === 'button' || elementType === 'li' || elementType === 'ul' || role === 'heading';\n  var finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList];\n\n  var _styleResolver$resolv = styleResolver.resolve(reactNativeStyle, finalClassList),\n      className = _styleResolver$resolv.className,\n      style = _styleResolver$resolv.style;\n\n  if (className != null && className !== '') {\n    domProps.className = className;\n  }\n\n  if (style) {\n    domProps.style = style;\n  }\n\n  if (nativeID != null) {\n    domProps.id = nativeID;\n  }\n\n  if (testID != null) {\n    domProps['data-testid'] = testID;\n  }\n\n  return domProps;\n};\n\nexport default createDOMProps;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/createDOMProps/index.js"],"names":["emptyObject","hasOwnProperty","Object","isArray","Array","uppercasePattern","match","str","idRefList","classes","css","reset","backgroundColor","color","font","listStyle","margin","textAlign","textDecoration","cursor","STYLE_GROUPS","pointerEventsStyles","StyleSheet","auto","pointerEvents","none","createDOMProps","props","accessibilityActiveDescendant","accessibilityAtomic","accessibilityAutoComplete","accessibilityBusy","accessibilityChecked","accessibilityColumnCount","accessibilityColumnIndex","accessibilityColumnSpan","accessibilityControls","accessibilityCurrent","accessibilityDescribedBy","accessibilityDetails","accessibilityDisabled","accessibilityErrorMessage","accessibilityExpanded","accessibilityFlowTo","accessibilityHasPopup","accessibilityHidden","accessibilityInvalid","accessibilityKeyShortcuts","accessibilityLabel","accessibilityLabelledBy","accessibilityLevel","accessibilityLiveRegion","accessibilityModal","accessibilityMultiline","accessibilityMultiSelectable","accessibilityOrientation","accessibilityOwns","accessibilityPlaceholder","accessibilityPosInSet","accessibilityPressed","accessibilityReadOnly","accessibilityRequired","accessibilityRole","accessibilityRoleDescription","accessibilityRowCount","accessibilityRowIndex","accessibilityRowSpan","accessibilitySelected","accessibilitySetSize","accessibilitySort","accessibilityValueMax","accessibilityValueMin","accessibilityValueNow","accessibilityValueText","classList","dataSet","focusable","nativeID","providedStyle","testID","accessible","accessibilityState","accessibilityValue","domProps","disabled","role","AccessibilityUtil","value","prop","processIDRefList","elementType","dataName","hyphenateString","dataValue","_focusable","reactNativeStyle","needsCursor","needsReset","finalClassList","className","style","styleResolver"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport AccessibilityUtil from '../AccessibilityUtil';\nimport css from '../../exports/StyleSheet/css';\nimport StyleSheet from '../../exports/StyleSheet';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport { STYLE_GROUPS } from '../../exports/StyleSheet/constants';\n\nconst emptyObject = {};\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst isArray = Array.isArray;\n\nconst uppercasePattern = /[A-Z]/g;\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase();\n}\nfunction hyphenateString(str: string): string {\n  return str.replace(uppercasePattern, toHyphenLower);\n}\nfunction processIDRefList(idRefList: string | Array<string>): string {\n  return isArray(idRefList) ? idRefList.join(' ') : idRefList;\n}\n\n// Reset styles for heading, link, and list DOM elements\nconst classes = css.create(\n  {\n    reset: {\n      backgroundColor: 'transparent',\n      color: 'inherit',\n      font: 'inherit',\n      listStyle: 'none',\n      margin: 0,\n      textAlign: 'inherit',\n      textDecoration: 'none'\n    },\n    cursor: {\n      cursor: 'pointer'\n    }\n  },\n  STYLE_GROUPS.classicReset\n);\n\nconst pointerEventsStyles = StyleSheet.create({\n  auto: {\n    pointerEvents: 'auto'\n  },\n  'box-none': {\n    pointerEvents: 'box-none'\n  },\n  'box-only': {\n    pointerEvents: 'box-only'\n  },\n  none: {\n    pointerEvents: 'none'\n  }\n});\n\nconst createDOMProps = (elementType, props) => {\n  if (!props) {\n    props = emptyObject;\n  }\n\n  const {\n    accessibilityActiveDescendant,\n    accessibilityAtomic,\n    accessibilityAutoComplete,\n    accessibilityBusy,\n    accessibilityChecked,\n    accessibilityColumnCount,\n    accessibilityColumnIndex,\n    accessibilityColumnSpan,\n    accessibilityControls,\n    accessibilityCurrent,\n    accessibilityDescribedBy,\n    accessibilityDetails,\n    accessibilityDisabled,\n    accessibilityErrorMessage,\n    accessibilityExpanded,\n    accessibilityFlowTo,\n    accessibilityHasPopup,\n    accessibilityHidden,\n    accessibilityInvalid,\n    accessibilityKeyShortcuts,\n    accessibilityLabel,\n    accessibilityLabelledBy,\n    accessibilityLevel,\n    accessibilityLiveRegion,\n    accessibilityModal,\n    accessibilityMultiline,\n    accessibilityMultiSelectable,\n    accessibilityOrientation,\n    accessibilityOwns,\n    accessibilityPlaceholder,\n    accessibilityPosInSet,\n    accessibilityPressed,\n    accessibilityReadOnly,\n    accessibilityRequired,\n    /* eslint-disable */\n    accessibilityRole,\n    /* eslint-enable */\n    accessibilityRoleDescription,\n    accessibilityRowCount,\n    accessibilityRowIndex,\n    accessibilityRowSpan,\n    accessibilitySelected,\n    accessibilitySetSize,\n    accessibilitySort,\n    accessibilityValueMax,\n    accessibilityValueMin,\n    accessibilityValueNow,\n    accessibilityValueText,\n    classList,\n    dataSet,\n    focusable,\n    nativeID,\n    pointerEvents,\n    style: providedStyle,\n    testID,\n    // Deprecated\n    accessible,\n    accessibilityState,\n    accessibilityValue,\n    // Rest\n    ...domProps\n  } = props;\n\n  const disabled =\n    (accessibilityState != null && accessibilityState.disabled === true) || accessibilityDisabled;\n\n  const role = AccessibilityUtil.propsToAriaRole(props);\n\n  // DEPRECATED\n  if (accessibilityState != null) {\n    for (const prop in accessibilityState) {\n      const value = accessibilityState[prop];\n      if (value != null) {\n        if (prop === 'disabled' || prop === 'hidden') {\n          if (value === true) {\n            domProps[`aria-${prop}`] = value;\n            // also set prop directly to pick up host elementType behaviour\n            domProps[prop] = value;\n          }\n        } else {\n          domProps[`aria-${prop}`] = value;\n        }\n      }\n    }\n  }\n  if (accessibilityValue != null) {\n    for (const prop in accessibilityValue) {\n      const value = accessibilityValue[prop];\n      if (value != null) {\n        domProps[`aria-value${prop}`] = value;\n      }\n    }\n  }\n\n  // ACCESSIBILITY\n  if (accessibilityActiveDescendant != null) {\n    domProps['aria-activedescendant'] = accessibilityActiveDescendant;\n  }\n  if (accessibilityAtomic != null) {\n    domProps['aria-atomic'] = accessibilityAtomic;\n  }\n  if (accessibilityAutoComplete != null) {\n    domProps['aria-autocomplete'] = accessibilityAutoComplete;\n  }\n  if (accessibilityBusy != null) {\n    domProps['aria-busy'] = accessibilityBusy;\n  }\n  if (accessibilityChecked != null) {\n    domProps['aria-checked'] = accessibilityChecked;\n  }\n  if (accessibilityColumnCount != null) {\n    domProps['aria-colcount'] = accessibilityColumnCount;\n  }\n  if (accessibilityColumnIndex != null) {\n    domProps['aria-colindex'] = accessibilityColumnIndex;\n  }\n  if (accessibilityColumnSpan != null) {\n    domProps['aria-colspan'] = accessibilityColumnSpan;\n  }\n  if (accessibilityControls != null) {\n    domProps['aria-controls'] = processIDRefList(accessibilityControls);\n  }\n  if (accessibilityCurrent != null) {\n    domProps['aria-current'] = accessibilityCurrent;\n  }\n  if (accessibilityDescribedBy != null) {\n    domProps['aria-describedby'] = processIDRefList(accessibilityDescribedBy);\n  }\n  if (accessibilityDetails != null) {\n    domProps['aria-details'] = accessibilityDetails;\n  }\n  if (disabled === true) {\n    domProps['aria-disabled'] = true;\n    // Enhance with native semantics\n    if (\n      elementType === 'button' ||\n      elementType === 'form' ||\n      elementType === 'input' ||\n      elementType === 'select' ||\n      elementType === 'textarea'\n    ) {\n      domProps.disabled = true;\n    }\n  }\n  if (accessibilityErrorMessage != null) {\n    domProps['aria-errormessage'] = accessibilityErrorMessage;\n  }\n  if (accessibilityExpanded != null) {\n    domProps['aria-expanded'] = accessibilityExpanded;\n  }\n  if (accessibilityFlowTo != null) {\n    domProps['aria-flowto'] = processIDRefList(accessibilityFlowTo);\n  }\n  if (accessibilityHasPopup != null) {\n    domProps['aria-haspopup'] = accessibilityHasPopup;\n  }\n  if (accessibilityHidden === true) {\n    domProps['aria-hidden'] = accessibilityHidden;\n  }\n  if (accessibilityInvalid != null) {\n    domProps['aria-invalid'] = accessibilityInvalid;\n  }\n  if (accessibilityKeyShortcuts != null && Array.isArray(accessibilityKeyShortcuts)) {\n    domProps['aria-keyshortcuts'] = accessibilityKeyShortcuts.join(' ');\n  }\n  if (accessibilityLabel != null) {\n    domProps['aria-label'] = accessibilityLabel;\n  }\n  if (accessibilityLabelledBy != null) {\n    domProps['aria-labelledby'] = processIDRefList(accessibilityLabelledBy);\n  }\n  if (accessibilityLevel != null) {\n    domProps['aria-level'] = accessibilityLevel;\n  }\n  if (accessibilityLiveRegion != null) {\n    domProps['aria-live'] = accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion;\n  }\n  if (accessibilityModal != null) {\n    domProps['aria-modal'] = accessibilityModal;\n  }\n  if (accessibilityMultiline != null) {\n    domProps['aria-multiline'] = accessibilityMultiline;\n  }\n  if (accessibilityMultiSelectable != null) {\n    domProps['aria-multiselectable'] = accessibilityMultiSelectable;\n  }\n  if (accessibilityOrientation != null) {\n    domProps['aria-orientation'] = accessibilityOrientation;\n  }\n  if (accessibilityOwns != null) {\n    domProps['aria-owns'] = processIDRefList(accessibilityOwns);\n  }\n  if (accessibilityPlaceholder != null) {\n    domProps['aria-placeholder'] = accessibilityPlaceholder;\n  }\n  if (accessibilityPosInSet != null) {\n    domProps['aria-posinset'] = accessibilityPosInSet;\n  }\n  if (accessibilityPressed != null) {\n    domProps['aria-pressed'] = accessibilityPressed;\n  }\n  if (accessibilityReadOnly != null) {\n    domProps['aria-readonly'] = accessibilityReadOnly;\n    // Enhance with native semantics\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.readOnly = true;\n    }\n  }\n  if (accessibilityRequired != null) {\n    domProps['aria-required'] = accessibilityRequired;\n    // Enhance with native semantics\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.required = true;\n    }\n  }\n  if (role != null) {\n    // 'presentation' synonym has wider browser support\n    domProps['role'] = role === 'none' ? 'presentation' : role;\n  }\n  if (accessibilityRoleDescription != null) {\n    domProps['aria-roledescription'] = accessibilityRoleDescription;\n  }\n  if (accessibilityRowCount != null) {\n    domProps['aria-rowcount'] = accessibilityRowCount;\n  }\n  if (accessibilityRowIndex != null) {\n    domProps['aria-rowindex'] = accessibilityRowIndex;\n  }\n  if (accessibilityRowSpan != null) {\n    domProps['aria-rowspan'] = accessibilityRowSpan;\n  }\n  if (accessibilitySelected != null) {\n    domProps['aria-selected'] = accessibilitySelected;\n  }\n  if (accessibilitySetSize != null) {\n    domProps['aria-setsize'] = accessibilitySetSize;\n  }\n  if (accessibilitySort != null) {\n    domProps['aria-sort'] = accessibilitySort;\n  }\n  if (accessibilityValueMax != null) {\n    domProps['aria-valuemax'] = accessibilityValueMax;\n  }\n  if (accessibilityValueMin != null) {\n    domProps['aria-valuemin'] = accessibilityValueMin;\n  }\n  if (accessibilityValueNow != null) {\n    domProps['aria-valuenow'] = accessibilityValueNow;\n  }\n  if (accessibilityValueText != null) {\n    domProps['aria-valuetext'] = accessibilityValueText;\n  }\n\n  // \"dataSet\" replaced with \"data-*\"\n  if (dataSet != null) {\n    for (const dataProp in dataSet) {\n      if (hasOwnProperty.call(dataSet, dataProp)) {\n        const dataName = hyphenateString(dataProp);\n        const dataValue = dataSet[dataProp];\n        if (dataValue != null) {\n          domProps[`data-${dataName}`] = dataValue;\n        }\n      }\n    }\n  }\n\n  // FOCUS\n  // \"focusable\" indicates that an element may be a keyboard tab-stop.\n  const _focusable = focusable != null ? focusable : accessible;\n  if (_focusable === false) {\n    domProps.tabIndex = '-1';\n  }\n  if (\n    // These native elements are focusable by default\n    elementType === 'a' ||\n    elementType === 'button' ||\n    elementType === 'input' ||\n    elementType === 'select' ||\n    elementType === 'textarea'\n  ) {\n    if (_focusable === false || accessibilityDisabled === true) {\n      domProps.tabIndex = '-1';\n    }\n  } else if (\n    // These roles are made focusable by default\n    role === 'button' ||\n    role === 'checkbox' ||\n    role === 'link' ||\n    role === 'radio' ||\n    role === 'textbox' ||\n    role === 'switch'\n  ) {\n    if (_focusable !== false) {\n      domProps.tabIndex = '0';\n    }\n  } else {\n    // Everything else must explicitly set the prop\n    if (_focusable === true) {\n      domProps.tabIndex = '0';\n    }\n  }\n\n  // STYLE\n  const reactNativeStyle = StyleSheet.compose(\n    pointerEvents && pointerEventsStyles[pointerEvents],\n    providedStyle\n  );\n\n  // Additional style resets for interactive elements\n  const needsCursor = (role === 'button' || role === 'link') && !disabled;\n  const needsReset =\n    elementType === 'a' ||\n    elementType === 'button' ||\n    elementType === 'li' ||\n    elementType === 'ul' ||\n    role === 'heading';\n  // Classic CSS styles\n  const finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList];\n\n  // Resolve styles\n  const { className, style } = styleResolver.resolve(reactNativeStyle, finalClassList);\n\n  if (className != null && className !== '') {\n    domProps.className = className;\n  }\n\n  if (style) {\n    domProps.style = style;\n  }\n\n  // OTHER\n  // Native element ID\n  if (nativeID != null) {\n    domProps.id = nativeID;\n  }\n  // Automated test IDs\n  if (testID != null) {\n    domProps['data-testid'] = testID;\n  }\n\n  return domProps;\n};\n\nexport default createDOMProps;\n"]},"metadata":{},"sourceType":"module"}