{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar RNLocalize = _interopRequireWildcard(require(\"react-native-localize\"));\n\nvar englishTranslation = _interopRequireWildcard(require(\"./locales/en/translation.json\"));\n\nvar frenchTranslation = _interopRequireWildcard(require(\"./locales/fr/translation.json\"));\n\nvar germanTranslation = _interopRequireWildcard(require(\"./locales/de/translation.json\"));\n\nvar spanishTranslation = _interopRequireWildcard(require(\"./locales/es/translation.json\"));\n\nvar hindiTranslation = _interopRequireWildcard(require(\"./locales/hi/translation.json\"));\n\nvar hansTranslation = _interopRequireWildcard(require(\"./locales/zh_Hans/translation.json\"));\n\nvar hantTranslation = _interopRequireWildcard(require(\"./locales/zh_Hant/translation.json\"));\n\nvar russianTranslation = _interopRequireWildcard(require(\"./locales/ru/translation.json\"));\n\nrequire(\"moment/locale/fr\");\n\nrequire(\"moment/locale/de\");\n\nrequire(\"moment/locale/es\");\n\nrequire(\"moment/locale/hi\");\n\nrequire(\"moment/locale/zh-cn\");\n\nrequire(\"moment/locale/zh-tw\");\n\nrequire(\"moment/locale/ru\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar translations = {\n  de: {\n    translation: germanTranslation\n  },\n  en: {\n    translation: englishTranslation\n  },\n  fr: {\n    translation: frenchTranslation\n  },\n  es: {\n    translation: spanishTranslation\n  },\n  hi: {\n    translation: hindiTranslation\n  },\n  'zh-Hans': {\n    translation: hansTranslation\n  },\n  'zh-Hant': {\n    translation: hantTranslation\n  },\n  ru: {\n    translation: russianTranslation\n  }\n};\nvar defaultLanguage = {\n  languageTag: 'en-US',\n  isRTL: false\n};\n\nvar _ref = RNLocalize.findBestAvailableLanguage(Object.keys(translations)) || defaultLanguage,\n    languageTag = _ref.languageTag;\n\n_moment.default.locale(languageTag);\n\n_i18next.default.use(_reactI18next.initReactI18next).init({\n  resources: translations,\n  lng: languageTag,\n  fallbackLng: 'en',\n  returnEmptyString: false,\n  interpolation: {\n    escapeValue: false\n  },\n  compatibilityJSON: 'v3'\n});\n\nvar _default = _i18next.default;\nexports.default = _default;","map":{"version":3,"names":["translations","de","translation","germanTranslation","en","englishTranslation","fr","frenchTranslation","es","spanishTranslation","hi","hindiTranslation","hansTranslation","hantTranslation","ru","russianTranslation","defaultLanguage","languageTag","isRTL","RNLocalize","findBestAvailableLanguage","Object","keys","moment","locale","i18n","use","initReactI18next","init","resources","lng","fallbackLng","returnEmptyString","interpolation","escapeValue","compatibilityJSON"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/i18n.js"],"sourcesContent":["import i18n from 'i18next';\nimport moment from 'moment';\nimport { initReactI18next } from 'react-i18next';\nimport * as RNLocalize from 'react-native-localize';\n\n/**\n * For each supported language, import the corresponding language file.\n * Consumed by i18next.\n */\nimport * as englishTranslation from './locales/en/translation.json';\nimport * as frenchTranslation from './locales/fr/translation.json';\nimport * as germanTranslation from './locales/de/translation.json';\nimport * as spanishTranslation from './locales/es/translation.json';\nimport * as hindiTranslation from './locales/hi/translation.json';\nimport * as hansTranslation from './locales/zh_Hans/translation.json';\nimport * as hantTranslation from './locales/zh_Hant/translation.json';\nimport * as russianTranslation from './locales/ru/translation.json';\n\n/**\n * For each supported language other than English, import the corresponding moment locale\n * Used for time formatting and things like `fromNow()` (\"[...] ago\")\n */\nimport 'moment/locale/fr';\nimport 'moment/locale/de';\nimport 'moment/locale/es';\nimport 'moment/locale/hi';\nimport 'moment/locale/zh-cn'; // simplified chinese\nimport 'moment/locale/zh-tw'; // traditional chinese\nimport 'moment/locale/ru';\n\nconst translations = {\n  de: {\n    translation: germanTranslation,\n  },\n  en: {\n    translation: englishTranslation,\n  },\n  fr: {\n    translation: frenchTranslation,\n  },\n  es: {\n    translation: spanishTranslation,\n  },\n  hi: {\n    translation: hindiTranslation,\n  },\n  'zh-Hans': {\n    translation: hansTranslation,\n  },\n  'zh-Hant': {\n    translation: hantTranslation,\n  },\n  ru: {\n    translation: russianTranslation,\n  },\n};\n\nconst defaultLanguage = {\n  languageTag: 'en-US',\n  isRTL: false,\n};\n\nconst { languageTag } =\n  RNLocalize.findBestAvailableLanguage(Object.keys(translations)) ||\n  defaultLanguage;\n\n// console.log(RNLocalize.getLocales());\n// console.log(`Using languagetag ${languageTag}`);\n\n/**\n * Moment will use detected language throughout the app.\n */\nmoment.locale(languageTag);\n\ni18n\n  .use(initReactI18next) // bind react-i18next to the instance\n  .init({\n    resources: translations,\n    lng: languageTag,\n    fallbackLng: 'en',\n    returnEmptyString: false,\n    interpolation: {\n      escapeValue: false,\n    },\n    compatibilityJSON: 'v3',\n  });\n\nexport default i18n;\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,YAAY,GAAG;EACnBC,EAAE,EAAE;IACFC,WAAW,EAAEC;EADX,CADe;EAInBC,EAAE,EAAE;IACFF,WAAW,EAAEG;EADX,CAJe;EAOnBC,EAAE,EAAE;IACFJ,WAAW,EAAEK;EADX,CAPe;EAUnBC,EAAE,EAAE;IACFN,WAAW,EAAEO;EADX,CAVe;EAanBC,EAAE,EAAE;IACFR,WAAW,EAAES;EADX,CAbe;EAgBnB,WAAW;IACTT,WAAW,EAAEU;EADJ,CAhBQ;EAmBnB,WAAW;IACTV,WAAW,EAAEW;EADJ,CAnBQ;EAsBnBC,EAAE,EAAE;IACFZ,WAAW,EAAEa;EADX;AAtBe,CAArB;AA2BA,IAAMC,eAAe,GAAG;EACtBC,WAAW,EAAE,OADS;EAEtBC,KAAK,EAAE;AAFe,CAAxB;;AAKA,WACEC,UAAU,CAACC,yBAAX,CAAqCC,MAAM,CAACC,IAAP,CAAYtB,YAAZ,CAArC,KACAgB,eAFF;AAAA,IAAQC,WAAR,QAAQA,WAAR;;AAUAM,eAAA,CAAOC,MAAP,CAAcP,WAAd;;AAEAQ,gBAAA,CACGC,GADH,CACOC,8BADP,EAEGC,IAFH,CAEQ;EACJC,SAAS,EAAE7B,YADP;EAEJ8B,GAAG,EAAEb,WAFD;EAGJc,WAAW,EAAE,IAHT;EAIJC,iBAAiB,EAAE,KAJf;EAKJC,aAAa,EAAE;IACbC,WAAW,EAAE;EADA,CALX;EAQJC,iBAAiB,EAAE;AARf,CAFR;;eAaeV,gB"},"metadata":{},"sourceType":"script"}