{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _clipboard = _interopRequireDefault(require(\"@react-native-community/clipboard\"));\n\nvar _reactNativeSvg = _interopRequireWildcard(require(\"react-native-svg\"));\n\nvar _qrcode = _interopRequireDefault(require(\"qrcode\"));\n\nvar _xml2js = require(\"xml2js\");\n\nvar _ramda = require(\"ramda\");\n\nvar _reactNativeSpinkit = _interopRequireDefault(require(\"react-native-spinkit\"));\n\nvar _MaterialCommunityIcons = _interopRequireDefault(require(\"react-native-vector-icons/MaterialCommunityIcons\"));\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _store = require(\"../../../store\");\n\nvar _colors = require(\"../../../theme/colors\");\n\nvar _fonts = require(\"../../../theme/fonts\");\n\nvar _deviceConstants = require(\"../../../utils/deviceConstants\");\n\nvar _RecoveryError = require(\"./RecoveryError\");\n\nvar _recoveryThunks = require(\"./thunks/recoveryThunks\");\n\nvar _recovery = require(\"../../../utils/recovery\");\n\nvar _channelThunks = require(\"./thunks/channelThunks\");\n\nvar _recoveryDataSlice = require(\"./recoveryDataSlice\");\n\nvar _channelThunks2 = require(\"../ImportFlow/thunks/channelThunks\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RecoveryCodeScreen.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar RecoverSteps;\n\n(function (RecoverSteps) {\n  RecoverSteps[RecoverSteps[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n  RecoverSteps[RecoverSteps[\"RUNNING\"] = 1] = \"RUNNING\";\n  RecoverSteps[RecoverSteps[\"ERROR\"] = 2] = \"ERROR\";\n})(RecoverSteps || (RecoverSteps = {}));\n\nvar RecoveryCodeScreen = function RecoveryCodeScreen(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n      action = _route$params.action,\n      urlType = _route$params.urlType;\n\n  var _useState = (0, _react.useState)(),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      qrUrl = _useState2[0],\n      setQrUrl = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(''),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      qrsvg = _useState4[0],\n      setQrsvg = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      alreadyNotified = _useState6[0],\n      setAlreadyNotified = _useState6[1];\n\n  var recoveryData = (0, _store.useSelector)(function (state) {\n    return state.recoveryData;\n  });\n  var isScanned = (0, _store.useSelector)(function (state) {\n    return (0, _recoveryDataSlice.uploadCompletedByOtherSide)(state) || state.recoveryData.recoveredConnections || state.recoveryData.recoveredGroups || state.recoveryData.recoveredBlindSigs;\n  });\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var dispatch = (0, _store.useDispatch)();\n  var navigation = (0, _native.useNavigation)();\n\n  var _useState7 = (0, _react.useState)(RecoverSteps.NOT_STARTED),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      step = _useState8[0],\n      setStep = _useState8[1];\n\n  var sigCount = recoveryData.sigs ? Object.values(recoveryData.sigs).length : 0;\n  (0, _react.useEffect)(function () {\n    var runRecoveryEffect = function _callee() {\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(dispatch((0, _recoveryThunks.setupRecovery)()));\n\n            case 2:\n              _context.next = 4;\n              return _regenerator.default.awrap(dispatch((0, _channelThunks.createChannel)()));\n\n            case 4:\n              dispatch((0, _channelThunks.pollChannel)());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var runImportEffect = function _callee2() {\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(dispatch((0, _recoveryThunks.setupRecovery)()));\n\n            case 2:\n              _context2.next = 4;\n              return _regenerator.default.awrap(dispatch((0, _channelThunks.createChannel)()));\n\n            case 4:\n              dispatch((0, _channelThunks2.pollImportChannel)());\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var runSyncEffect = function _callee3() {\n      return _regenerator.default.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(dispatch((0, _channelThunks2.setupSync)()));\n\n            case 2:\n              _context3.next = 4;\n              return _regenerator.default.awrap(dispatch((0, _channelThunks2.createSyncChannel)()));\n\n            case 4:\n              dispatch((0, _channelThunks2.pollImportChannel)());\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (step === RecoverSteps.NOT_STARTED) {\n      if (action === 'recovery') {\n        console.log(\"initializing recovery process\");\n        runRecoveryEffect();\n      } else if (action === 'import') {\n        console.log(\"initializing import process\");\n        runImportEffect();\n      } else if (action === 'sync') {\n        console.log(\"initializing sync process\");\n        runSyncEffect();\n      }\n\n      setStep(RecoverSteps.RUNNING);\n    }\n  }, [action, dispatch, recoveryData.aesKey, step]);\n  (0, _react.useEffect)(function () {\n    if (recoveryData.channel.url && recoveryData.aesKey) {\n      var newQrUrl = (0, _recovery.buildRecoveryChannelQrUrl)({\n        aesKey: recoveryData.aesKey,\n        url: recoveryData.channel.url,\n        t: urlType\n      });\n      console.log(\"new qrCode url: \" + newQrUrl.href);\n      setQrUrl(newQrUrl);\n\n      var parseQrString = function parseQrString(err, qrsvg) {\n        if (err) return console.log(err);\n        setQrsvg(qrsvg);\n      };\n\n      _qrcode.default.toString(newQrUrl.href, function (err, qr) {\n        if (err) return console.log(err);\n        (0, _xml2js.parseString)(qr, parseQrString);\n      });\n    }\n  }, [recoveryData.aesKey, recoveryData.channel.url, urlType]);\n  (0, _react.useEffect)(function () {\n    if (recoveryData.errorType !== _RecoveryError.RecoveryErrorType.NONE) {\n      var message;\n\n      switch (recoveryData.errorType) {\n        case _RecoveryError.RecoveryErrorType.MISMATCH_ID:\n          message = t('recovery.error.mismatchId', 'Your recovery connections selected different accounts');\n          break;\n\n        case _RecoveryError.RecoveryErrorType.GENERIC:\n        default:\n          message = recoveryData.errorMessage !== '' ? recoveryData.errorMessage : t('recovery.error.unknown', 'An unknown error occured');\n      }\n\n      _reactNative.Alert.alert(t('recovery.error.title', 'Account recovery failed'), message);\n\n      if (action === 'recovery') {\n        (0, _channelThunks.clearChannel)();\n      } else if (action === 'import') {\n        (0, _channelThunks2.clearImportChannel)();\n      }\n\n      dispatch((0, _recoveryDataSlice.resetRecoveryData)());\n      setStep(RecoverSteps.ERROR);\n      navigation.goBack();\n    }\n  }, [action, dispatch, navigation, recoveryData.errorMessage, recoveryData.errorType, t]);\n  (0, _native.useFocusEffect)((0, _react.useCallback)(function () {\n    if (action === 'recovery' && !alreadyNotified && sigCount === 1) {\n      _reactNative.Alert.alert(t('common.alert.info'), t('common.alert.text.recoverySigned'));\n\n      setAlreadyNotified(true);\n    } else if (action === 'recovery' && sigCount > 1) {\n      navigation.navigate('Restore');\n    } else if (action === 'import' && isScanned) {\n      navigation.navigate('Import');\n    } else if (action === 'sync' && isScanned) {\n      navigation.navigate('Devices', {\n        syncing: true,\n        asScanner: false\n      });\n    }\n  }, [action, alreadyNotified, sigCount, isScanned, t, navigation]));\n\n  var copyQr = function copyQr() {\n    var universalLink = \"https://app.brightid.org/connection-code/\" + encodeURIComponent(qrUrl.href);\n    var alertTitle;\n    var alertText;\n    var clipboardMsg;\n\n    switch (action) {\n      case 'recovery':\n        alertTitle = t('recovery.alert.title', 'Recovery link');\n        alertText = t('recovery.alert.text', 'Share this link with your recovery connections.');\n        clipboardMsg = t('recovery.clipboardmessage', {\n          defaultValue: 'Help me recover my BrightID: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      case 'import':\n        alertTitle = t('import.alert.title', 'Import BrightID link');\n        alertText = t('import.alert.text', 'Open this link with the BrightID app that should be imported.');\n        clipboardMsg = t('import.clipboardmessage', {\n          defaultValue: 'Export your BrightID to another device: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      case 'sync':\n        alertTitle = t('sync.alert.title', 'Sync user data');\n        alertText = t('sync.alert.text', 'Open this link with the BrightID app that should be synced.');\n        clipboardMsg = t('sync.clipboardmessage', {\n          defaultValue: 'Sync your BrightID data with another device: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    if (__DEV__) {\n      clipboardMsg = universalLink;\n    }\n\n    _reactNative.Alert.alert(alertTitle, alertText, [{\n      text: t('common.button.copy'),\n      onPress: function onPress() {\n        _clipboard.default.setString(clipboardMsg);\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {\n    style: styles.orangeTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.recoveryCodeInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, action === 'recovery' && t('recovery.text.askScanning'), action === 'import' && t('import.text.askScanning'), action === 'sync' && t('sync.text.askScanning')), qrsvg ? _react.default.createElement(_reactNative.View, {\n    style: styles.qrsvgContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.signatures,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, action === 'recovery' ? t('recovery.text.signatures', {\n    count: sigCount\n  }) : ''), _react.default.createElement(_reactNativeSvg.default, {\n    height: _deviceConstants.DEVICE_LARGE ? '240' : '200',\n    width: _deviceConstants.DEVICE_LARGE ? '240' : '200',\n    viewBox: (0, _ramda.path)(['svg', '$', 'viewBox'], qrsvg),\n    \"shape-rendering\": \"crispEdges\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNativeSvg.Path, {\n    fill: _colors.WHITE,\n    d: (0, _ramda.path)(['svg', 'path', '0', '$', 'd'], qrsvg),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }), _react.default.createElement(_reactNativeSvg.Path, {\n    stroke: _colors.BLACK,\n    d: (0, _ramda.path)(['svg', 'path', '1', '$', 'd'], qrsvg),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  })), _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: styles.copyContainer,\n    onPress: copyQr,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_MaterialCommunityIcons.default, {\n    size: 24,\n    name: \"content-copy\",\n    color: _colors.LIGHT_BLACK,\n    style: {\n      width: 24,\n      height: 24\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 15\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: styles.copyText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 15\n    }\n  }, \" \", t('common.button.copy'))), __DEV__ && _react.default.createElement(_reactNative.View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: {\n      fontSize: 6\n    },\n    testID: \"qrcode\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 17\n    }\n  }, qrUrl == null ? void 0 : qrUrl.href))) : _react.default.createElement(_reactNative.View, {\n    style: styles.qrsvgContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_reactNativeSpinkit.default, {\n    isVisible: true,\n    size: _deviceConstants.DEVICE_LARGE ? 48 : 42,\n    type: \"9CubeGrid\",\n    color: _colors.ORANGE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }\n  })), _react.default.createElement(_reactNative.Text, {\n    style: styles.additionalInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }, action === 'recovery' && t('recovery.text.additionalInfo'), action === 'import' && t('import.text.additionalInfo'), action === 'sync' && t('sync.text.additionalInfo'))));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  orangeTop: {\n    backgroundColor: _colors.ORANGE,\n    height: _deviceConstants.DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    backgroundColor: _colors.WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  qrsvgContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  recoveryCodeInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    textAlign: 'center',\n    color: _colors.BLACK,\n    width: '80%',\n    marginTop: _deviceConstants.DEVICE_LARGE ? 30 : 26\n  },\n  additionalInfo: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    textAlign: 'center',\n    color: _colors.DARKER_GREY,\n    width: '80%',\n    marginBottom: _deviceConstants.DEVICE_LARGE ? 50 : 45\n  },\n  signatures: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[16],\n    textAlign: 'center',\n    color: _colors.BLACK\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 25,\n    minWidth: 100\n  },\n  copyText: {\n    color: _colors.BLACK,\n    fontFamily: 'Poppins-Medium'\n  }\n});\n\nvar _default = RecoveryCodeScreen;\nexports.default = _default;","map":{"version":3,"names":["RecoverSteps","RecoveryCodeScreen","route","params","action","urlType","useState","qrUrl","setQrUrl","qrsvg","setQrsvg","alreadyNotified","setAlreadyNotified","recoveryData","useSelector","state","isScanned","uploadCompletedByOtherSide","recoveredConnections","recoveredGroups","recoveredBlindSigs","useTranslation","t","dispatch","useDispatch","navigation","useNavigation","NOT_STARTED","step","setStep","sigCount","sigs","Object","values","length","useEffect","runRecoveryEffect","setupRecovery","createChannel","pollChannel","runImportEffect","pollImportChannel","runSyncEffect","setupSync","createSyncChannel","console","log","RUNNING","aesKey","channel","url","newQrUrl","buildRecoveryChannelQrUrl","href","parseQrString","err","qrcode","toString","qr","parseString","errorType","RecoveryErrorType","NONE","message","MISMATCH_ID","GENERIC","errorMessage","Alert","alert","clearChannel","clearImportChannel","resetRecoveryData","ERROR","goBack","useFocusEffect","useCallback","navigate","syncing","asScanner","copyQr","universalLink","encodeURIComponent","alertTitle","alertText","clipboardMsg","defaultValue","link","__DEV__","text","onPress","Clipboard","setString","cancelable","styles","orangeTop","container","recoveryCodeInfoText","qrsvgContainer","signatures","count","DEVICE_LARGE","path","WHITE","BLACK","copyContainer","LIGHT_BLACK","width","height","copyText","fontSize","ORANGE","additionalInfo","StyleSheet","create","backgroundColor","zIndex","flex","alignItems","justifyContent","flexDirection","borderTopLeftRadius","marginTop","overflow","fontFamily","textAlign","color","DARKER_GREY","marginBottom","minHeight","minWidth"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RecoveryCodeScreen.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Alert, StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport Clipboard from '@react-native-community/clipboard';\nimport Svg, { Path } from 'react-native-svg';\nimport qrcode from 'qrcode';\nimport { parseString } from 'xml2js';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTranslation } from 'react-i18next';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { BLACK, DARKER_GREY, LIGHT_BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { RecoveryErrorType } from './RecoveryError';\nimport { setupRecovery } from './thunks/recoveryThunks';\nimport { buildRecoveryChannelQrUrl } from '@/utils/recovery';\nimport {\n  clearChannel,\n  createChannel,\n  pollChannel,\n} from './thunks/channelThunks';\nimport {\n  resetRecoveryData,\n  uploadCompletedByOtherSide,\n} from './recoveryDataSlice';\nimport {\n  setupSync,\n  createSyncChannel,\n  pollImportChannel,\n  clearImportChannel,\n} from '../ImportFlow/thunks/channelThunks';\n\n/**\n * Recovery Code screen of BrightID\n *\n * displays a qrcode\n */\nenum RecoverSteps {\n  NOT_STARTED,\n  RUNNING,\n  ERROR,\n}\n\nconst RecoveryCodeScreen = ({ route }) => {\n  const { action, urlType } = route.params;\n  const [qrUrl, setQrUrl] = useState<URL>();\n  const [qrsvg, setQrsvg] = useState('');\n  const [alreadyNotified, setAlreadyNotified] = useState(false);\n  const recoveryData = useSelector((state: State) => state.recoveryData);\n  const isScanned = useSelector(\n    (state: State) =>\n      uploadCompletedByOtherSide(state) ||\n      state.recoveryData.recoveredConnections ||\n      state.recoveryData.recoveredGroups ||\n      state.recoveryData.recoveredBlindSigs,\n  );\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const [step, setStep] = useState<RecoverSteps>(RecoverSteps.NOT_STARTED);\n\n  const sigCount = recoveryData.sigs\n    ? Object.values(recoveryData.sigs).length\n    : 0;\n\n  // create recovery data and start polling channel\n  useEffect(() => {\n    const runRecoveryEffect = async () => {\n      // create publicKey, secretKey, aesKey for user\n      await dispatch(setupRecovery());\n      // create channel and upload new publicKey to get signed by the scanner\n      await dispatch(createChannel());\n      // start polling channel to get sig and mutual info\n      dispatch(pollChannel());\n    };\n    const runImportEffect = async () => {\n      // create publicKey, secretKey, aesKey for user\n      await dispatch(setupRecovery());\n      // create channel and upload new publicKey to be added as a new signing key by the scanner\n      await dispatch(createChannel());\n      // start polling channel to get connections/groups/blindsigs info\n      dispatch(pollImportChannel());\n    };\n    const runSyncEffect = async () => {\n      // create a new aesKey\n      await dispatch(setupSync());\n      // create channel and upload lastSyncTime to the channel if it is not primary device\n      // or poll lastSyncTime from other side if it is and then upload connections/groups/blindsigs\n      // added after lastSyncTime to the channel\n      await dispatch(createSyncChannel());\n      // start polling channel to get new connections/groups/blindsigs info\n      dispatch(pollImportChannel());\n    };\n\n    if (step === RecoverSteps.NOT_STARTED) {\n      if (action === 'recovery') {\n        console.log(`initializing recovery process`);\n        runRecoveryEffect();\n      } else if (action === 'import') {\n        console.log(`initializing import process`);\n        runImportEffect();\n      } else if (action === 'sync') {\n        console.log(`initializing sync process`);\n        runSyncEffect();\n      }\n      setStep(RecoverSteps.RUNNING);\n    }\n  }, [action, dispatch, recoveryData.aesKey, step]);\n\n  // set QRCode and SVG\n  useEffect(() => {\n    if (recoveryData.channel.url && recoveryData.aesKey) {\n      const newQrUrl = buildRecoveryChannelQrUrl({\n        aesKey: recoveryData.aesKey,\n        url: recoveryData.channel.url,\n        t: urlType,\n      });\n      console.log(`new qrCode url: ${newQrUrl.href}`);\n      setQrUrl(newQrUrl);\n\n      const parseQrString = (err, qrsvg) => {\n        if (err) return console.log(err);\n        setQrsvg(qrsvg);\n      };\n\n      qrcode.toString(newQrUrl.href, (err, qr) => {\n        if (err) return console.log(err);\n        parseString(qr, parseQrString);\n      });\n    }\n  }, [recoveryData.aesKey, recoveryData.channel.url, urlType]);\n\n  // track errors\n  useEffect(() => {\n    if (recoveryData.errorType !== RecoveryErrorType.NONE) {\n      // something went wrong. Show error message to user and stop recovery process\n      let message;\n      switch (recoveryData.errorType) {\n        case RecoveryErrorType.MISMATCH_ID:\n          message = t(\n            'recovery.error.mismatchId',\n            'Your recovery connections selected different accounts',\n          );\n          break;\n        case RecoveryErrorType.GENERIC:\n        default:\n          // use untranslated errorMessage from state if available, generic message otherwise\n          message =\n            recoveryData.errorMessage !== ''\n              ? recoveryData.errorMessage\n              : t('recovery.error.unknown', 'An unknown error occured');\n      }\n      Alert.alert(\n        t('recovery.error.title', 'Account recovery failed'),\n        message,\n      );\n      if (action === 'recovery') {\n        clearChannel();\n      } else if (action === 'import') {\n        clearImportChannel();\n      }\n      dispatch(resetRecoveryData());\n      setStep(RecoverSteps.ERROR);\n      navigation.goBack();\n    }\n  }, [\n    action,\n    dispatch,\n    navigation,\n    recoveryData.errorMessage,\n    recoveryData.errorType,\n    t,\n  ]);\n\n  useFocusEffect(\n    useCallback(() => {\n      if (action === 'recovery' && !alreadyNotified && sigCount === 1) {\n        // alert user that one of their sigs exists\n        Alert.alert(\n          t('common.alert.info'),\n          t('common.alert.text.recoverySigned'),\n        );\n        setAlreadyNotified(true);\n      } else if (action === 'recovery' && sigCount > 1) {\n        navigation.navigate('Restore');\n      } else if (action === 'import' && isScanned) {\n        navigation.navigate('Import');\n      } else if (action === 'sync' && isScanned) {\n        navigation.navigate('Devices', { syncing: true, asScanner: false });\n      }\n    }, [action, alreadyNotified, sigCount, isScanned, t, navigation]),\n  );\n\n  const copyQr = () => {\n    const universalLink = `https://app.brightid.org/connection-code/${encodeURIComponent(\n      qrUrl.href,\n    )}`;\n\n    let alertTitle: string;\n    let alertText: string;\n    let clipboardMsg: string;\n    switch (action) {\n      case 'recovery':\n        alertTitle = t('recovery.alert.title', 'Recovery link');\n        alertText = t(\n          'recovery.alert.text',\n          'Share this link with your recovery connections.',\n        );\n        clipboardMsg = t('recovery.clipboardmessage', {\n          defaultValue: 'Help me recover my BrightID: {{link}}',\n          link: universalLink,\n        });\n        break;\n      case 'import':\n        alertTitle = t('import.alert.title', 'Import BrightID link');\n        alertText = t(\n          'import.alert.text',\n          'Open this link with the BrightID app that should be imported.',\n        );\n        clipboardMsg = t('import.clipboardmessage', {\n          defaultValue: 'Export your BrightID to another device: {{link}}',\n          link: universalLink,\n        });\n        break;\n      case 'sync':\n        alertTitle = t('sync.alert.title', 'Sync user data');\n        alertText = t(\n          'sync.alert.text',\n          'Open this link with the BrightID app that should be synced.',\n        );\n        clipboardMsg = t('sync.clipboardmessage', {\n          defaultValue: 'Sync your BrightID data with another device: {{link}}',\n          link: universalLink,\n        });\n        break;\n      default:\n        break;\n    }\n\n    if (__DEV__) {\n      clipboardMsg = universalLink;\n    }\n\n    Alert.alert(\n      alertTitle,\n      alertText,\n      [\n        {\n          text: t('common.button.copy'),\n          onPress: () => {\n            Clipboard.setString(clipboardMsg);\n          },\n        },\n      ],\n      { cancelable: false },\n    );\n  };\n\n  return (\n    <>\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        <Text style={styles.recoveryCodeInfoText}>\n          {action === 'recovery' && t('recovery.text.askScanning')}\n          {action === 'import' && t('import.text.askScanning')}\n          {action === 'sync' && t('sync.text.askScanning')}\n        </Text>\n\n        {qrsvg ? (\n          <View style={styles.qrsvgContainer}>\n            <Text style={styles.signatures}>\n              {action === 'recovery'\n                ? t('recovery.text.signatures', { count: sigCount })\n                : ''}\n            </Text>\n            <Svg\n              height={DEVICE_LARGE ? '240' : '200'}\n              width={DEVICE_LARGE ? '240' : '200'}\n              viewBox={path(['svg', '$', 'viewBox'], qrsvg)}\n              shape-rendering=\"crispEdges\"\n            >\n              <Path\n                fill={WHITE}\n                d={path(['svg', 'path', '0', '$', 'd'], qrsvg)}\n              />\n              <Path\n                stroke={BLACK}\n                d={path(['svg', 'path', '1', '$', 'd'], qrsvg)}\n              />\n            </Svg>\n\n            <TouchableOpacity style={styles.copyContainer} onPress={copyQr}>\n              <Material\n                size={24}\n                name=\"content-copy\"\n                color={LIGHT_BLACK}\n                style={{ width: 24, height: 24 }}\n              />\n              <Text style={styles.copyText}> {t('common.button.copy')}</Text>\n            </TouchableOpacity>\n            {__DEV__ && (\n              <View>\n                <Text style={{ fontSize: 6 }} testID=\"qrcode\">\n                  {qrUrl?.href}\n                </Text>\n              </View>\n            )}\n          </View>\n        ) : (\n          <View style={styles.qrsvgContainer}>\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 48 : 42}\n              type=\"9CubeGrid\"\n              color={ORANGE}\n            />\n          </View>\n        )}\n        <Text style={styles.additionalInfo}>\n          {action === 'recovery' && t('recovery.text.additionalInfo')}\n          {action === 'import' && t('import.text.additionalInfo')}\n          {action === 'sync' && t('sync.text.additionalInfo')}\n        </Text>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  qrsvgContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  recoveryCodeInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n    width: '80%',\n    marginTop: DEVICE_LARGE ? 30 : 26,\n  },\n  additionalInfo: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: DARKER_GREY,\n    width: '80%',\n    marginBottom: DEVICE_LARGE ? 50 : 45,\n  },\n  signatures: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 25,\n    minWidth: 100,\n  },\n  copyText: {\n    color: BLACK,\n    fontFamily: 'Poppins-Medium',\n  },\n});\n\nexport default RecoveryCodeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}