{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { AcquisitionManager as Sdk } from \"code-push/script/acquisition-sdk\";\nimport { Alert } from \"./AlertAdapter\";\nimport requestFetchAdapter from \"./request-fetch-adapter\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport log from \"./logging\";\nimport hoistStatics from 'hoist-non-react-statics';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar NativeCodePush = require(\"react-native-web\").NativeModules.CodePush;\n\nvar PackageMixins = require(\"./package-mixins\")(NativeCodePush);\n\nfunction checkForUpdate() {\n  var deploymentKey,\n      handleBinaryVersionMismatchCallback,\n      nativeConfig,\n      config,\n      sdk,\n      localPackage,\n      queryPackage,\n      update,\n      remotePackage,\n      _args = arguments;\n  return _regeneratorRuntime.async(function checkForUpdate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          deploymentKey = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n          handleBinaryVersionMismatchCallback = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getConfiguration());\n\n        case 4:\n          nativeConfig = _context.sent;\n          config = deploymentKey ? _objectSpread(_objectSpread({}, nativeConfig), {\n            deploymentKey: deploymentKey\n          }) : nativeConfig;\n          sdk = getPromisifiedSdk(requestFetchAdapter, config);\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(module.exports.getCurrentPackage());\n\n        case 9:\n          localPackage = _context.sent;\n\n          if (localPackage) {\n            queryPackage = localPackage;\n          } else {\n            queryPackage = {\n              appVersion: config.appVersion\n            };\n\n            if (Platform.OS === \"ios\" && config.packageHash) {\n              queryPackage.packageHash = config.packageHash;\n            }\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(sdk.queryUpdateWithCurrentPackage(queryPackage));\n\n        case 13:\n          update = _context.sent;\n\n          if (!(!update || update.updateAppVersion || localPackage && update.packageHash === localPackage.packageHash || (!localPackage || localPackage._isDebugOnly) && config.packageHash === update.packageHash)) {\n            _context.next = 19;\n            break;\n          }\n\n          if (update && update.updateAppVersion) {\n            log(\"An update is available but it is not targeting the binary version of your app.\");\n\n            if (handleBinaryVersionMismatchCallback && typeof handleBinaryVersionMismatchCallback === \"function\") {\n              handleBinaryVersionMismatchCallback(update);\n            }\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 19:\n          remotePackage = _objectSpread(_objectSpread({}, update), PackageMixins.remote(sdk.reportStatusDownload));\n          _context.next = 22;\n          return _regeneratorRuntime.awrap(NativeCodePush.isFailedUpdate(remotePackage.packageHash));\n\n        case 22:\n          remotePackage.failedInstall = _context.sent;\n          remotePackage.deploymentKey = deploymentKey || nativeConfig.deploymentKey;\n          return _context.abrupt(\"return\", remotePackage);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar getConfiguration = function () {\n  var config;\n  return function getConfiguration() {\n    return _regeneratorRuntime.async(function getConfiguration$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!config) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", config);\n\n          case 4:\n            if (!testConfig) {\n              _context2.next = 8;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", testConfig);\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(NativeCodePush.getConfiguration());\n\n          case 10:\n            config = _context2.sent;\n            return _context2.abrupt(\"return\", config);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}();\n\nfunction getCurrentPackage() {\n  return _regeneratorRuntime.async(function getCurrentPackage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(getUpdateMetadata(CodePush.UpdateState.LATEST));\n\n        case 2:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUpdateMetadata(updateState) {\n  var updateMetadata;\n  return _regeneratorRuntime.async(function getUpdateMetadata$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(NativeCodePush.getUpdateMetadata(updateState || CodePush.UpdateState.RUNNING));\n\n        case 2:\n          updateMetadata = _context4.sent;\n\n          if (!updateMetadata) {\n            _context4.next = 11;\n            break;\n          }\n\n          updateMetadata = _objectSpread(_objectSpread({}, PackageMixins.local), updateMetadata);\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(NativeCodePush.isFailedUpdate(updateMetadata.packageHash));\n\n        case 7:\n          updateMetadata.failedInstall = _context4.sent;\n          _context4.next = 10;\n          return _regeneratorRuntime.awrap(NativeCodePush.isFirstRun(updateMetadata.packageHash));\n\n        case 10:\n          updateMetadata.isFirstRun = _context4.sent;\n\n        case 11:\n          return _context4.abrupt(\"return\", updateMetadata);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getPromisifiedSdk(requestFetchAdapter, config) {\n  var sdk = new module.exports.AcquisitionSdk(requestFetchAdapter, config);\n\n  sdk.queryUpdateWithCurrentPackage = function (queryPackage) {\n    return new Promise(function (resolve, reject) {\n      module.exports.AcquisitionSdk.prototype.queryUpdateWithCurrentPackage.call(sdk, queryPackage, function (err, update) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(update);\n        }\n      });\n    });\n  };\n\n  sdk.reportStatusDeploy = function (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey) {\n    return new Promise(function (resolve, reject) {\n      module.exports.AcquisitionSdk.prototype.reportStatusDeploy.call(sdk, deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  };\n\n  sdk.reportStatusDownload = function (downloadedPackage) {\n    return new Promise(function (resolve, reject) {\n      module.exports.AcquisitionSdk.prototype.reportStatusDownload.call(sdk, downloadedPackage, function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  };\n\n  return sdk;\n}\n\nvar notifyApplicationReady = function () {\n  var notifyApplicationReadyPromise;\n  return function () {\n    if (!notifyApplicationReadyPromise) {\n      notifyApplicationReadyPromise = notifyApplicationReadyInternal();\n    }\n\n    return notifyApplicationReadyPromise;\n  };\n}();\n\nfunction notifyApplicationReadyInternal() {\n  var statusReport;\n  return _regeneratorRuntime.async(function notifyApplicationReadyInternal$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(NativeCodePush.notifyApplicationReady());\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(NativeCodePush.getNewStatusReport());\n\n        case 4:\n          statusReport = _context5.sent;\n          statusReport && tryReportStatus(statusReport);\n          return _context5.abrupt(\"return\", statusReport);\n\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction tryReportStatus(statusReport, resumeListener) {\n  var config, previousLabelOrAppVersion, previousDeploymentKey, sdk, label, _sdk;\n\n  return _regeneratorRuntime.async(function tryReportStatus$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(getConfiguration());\n\n        case 2:\n          config = _context7.sent;\n          previousLabelOrAppVersion = statusReport.previousLabelOrAppVersion;\n          previousDeploymentKey = statusReport.previousDeploymentKey || config.deploymentKey;\n          _context7.prev = 5;\n\n          if (!statusReport.appVersion) {\n            _context7.next = 15;\n            break;\n          }\n\n          log(\"Reporting binary update (\" + statusReport.appVersion + \")\");\n\n          if (config.deploymentKey) {\n            _context7.next = 10;\n            break;\n          }\n\n          throw new Error(\"Deployment key is missed\");\n\n        case 10:\n          sdk = getPromisifiedSdk(requestFetchAdapter, config);\n          _context7.next = 13;\n          return _regeneratorRuntime.awrap(sdk.reportStatusDeploy(null, null, previousLabelOrAppVersion, previousDeploymentKey));\n\n        case 13:\n          _context7.next = 27;\n          break;\n\n        case 15:\n          label = statusReport.package.label;\n\n          if (!(statusReport.status === \"DeploymentSucceeded\")) {\n            _context7.next = 20;\n            break;\n          }\n\n          log(\"Reporting CodePush update success (\" + label + \")\");\n          _context7.next = 23;\n          break;\n\n        case 20:\n          log(\"Reporting CodePush update rollback (\" + label + \")\");\n          _context7.next = 23;\n          return _regeneratorRuntime.awrap(NativeCodePush.setLatestRollbackInfo(statusReport.package.packageHash));\n\n        case 23:\n          config.deploymentKey = statusReport.package.deploymentKey;\n          _sdk = getPromisifiedSdk(requestFetchAdapter, config);\n          _context7.next = 27;\n          return _regeneratorRuntime.awrap(_sdk.reportStatusDeploy(statusReport.package, statusReport.status, previousLabelOrAppVersion, previousDeploymentKey));\n\n        case 27:\n          NativeCodePush.recordStatusReported(statusReport);\n          resumeListener && AppState.removeEventListener(\"change\", resumeListener);\n          _context7.next = 36;\n          break;\n\n        case 31:\n          _context7.prev = 31;\n          _context7.t0 = _context7[\"catch\"](5);\n          log(\"Report status failed: \" + JSON.stringify(statusReport));\n          NativeCodePush.saveStatusReportForRetry(statusReport);\n\n          if (!resumeListener) {\n            resumeListener = function _callee(newState) {\n              var refreshedStatusReport;\n              return _regeneratorRuntime.async(function _callee$(_context6) {\n                while (1) {\n                  switch (_context6.prev = _context6.next) {\n                    case 0:\n                      if (!(newState !== \"active\")) {\n                        _context6.next = 2;\n                        break;\n                      }\n\n                      return _context6.abrupt(\"return\");\n\n                    case 2:\n                      _context6.next = 4;\n                      return _regeneratorRuntime.awrap(NativeCodePush.getNewStatusReport());\n\n                    case 4:\n                      refreshedStatusReport = _context6.sent;\n\n                      if (refreshedStatusReport) {\n                        tryReportStatus(refreshedStatusReport, resumeListener);\n                      } else {\n                        AppState.removeEventListener(\"change\", resumeListener);\n                      }\n\n                    case 6:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            };\n\n            AppState.addEventListener(\"change\", resumeListener);\n          }\n\n        case 36:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[5, 31]], Promise);\n}\n\nfunction shouldUpdateBeIgnored(remotePackage, syncOptions) {\n  var rollbackRetryOptions, isFailedPackage, latestRollbackInfo, _rollbackRetryOptions, delayInHours, maxRetryAttempts, hoursSinceLatestRollback;\n\n  return _regeneratorRuntime.async(function shouldUpdateBeIgnored$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          rollbackRetryOptions = syncOptions.rollbackRetryOptions;\n          isFailedPackage = remotePackage && remotePackage.failedInstall;\n\n          if (!(!isFailedPackage || !syncOptions.ignoreFailedUpdates)) {\n            _context8.next = 4;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", false);\n\n        case 4:\n          if (rollbackRetryOptions) {\n            _context8.next = 6;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", true);\n\n        case 6:\n          if (typeof rollbackRetryOptions !== \"object\") {\n            rollbackRetryOptions = CodePush.DEFAULT_ROLLBACK_RETRY_OPTIONS;\n          } else {\n            rollbackRetryOptions = _objectSpread(_objectSpread({}, CodePush.DEFAULT_ROLLBACK_RETRY_OPTIONS), rollbackRetryOptions);\n          }\n\n          if (validateRollbackRetryOptions(rollbackRetryOptions)) {\n            _context8.next = 9;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", true);\n\n        case 9:\n          _context8.next = 11;\n          return _regeneratorRuntime.awrap(NativeCodePush.getLatestRollbackInfo());\n\n        case 11:\n          latestRollbackInfo = _context8.sent;\n\n          if (validateLatestRollbackInfo(latestRollbackInfo, remotePackage.packageHash)) {\n            _context8.next = 15;\n            break;\n          }\n\n          log(\"The latest rollback info is not valid.\");\n          return _context8.abrupt(\"return\", true);\n\n        case 15:\n          _rollbackRetryOptions = rollbackRetryOptions, delayInHours = _rollbackRetryOptions.delayInHours, maxRetryAttempts = _rollbackRetryOptions.maxRetryAttempts;\n          hoursSinceLatestRollback = (Date.now() - latestRollbackInfo.time) / (1000 * 60 * 60);\n\n          if (!(hoursSinceLatestRollback >= delayInHours && maxRetryAttempts >= latestRollbackInfo.count)) {\n            _context8.next = 20;\n            break;\n          }\n\n          log(\"Previous rollback should be ignored due to rollback retry options.\");\n          return _context8.abrupt(\"return\", false);\n\n        case 20:\n          return _context8.abrupt(\"return\", true);\n\n        case 21:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction validateLatestRollbackInfo(latestRollbackInfo, packageHash) {\n  return latestRollbackInfo && latestRollbackInfo.time && latestRollbackInfo.count && latestRollbackInfo.packageHash && latestRollbackInfo.packageHash === packageHash;\n}\n\nfunction validateRollbackRetryOptions(rollbackRetryOptions) {\n  if (typeof rollbackRetryOptions.delayInHours !== \"number\") {\n    log(\"The 'delayInHours' rollback retry parameter must be a number.\");\n    return false;\n  }\n\n  if (typeof rollbackRetryOptions.maxRetryAttempts !== \"number\") {\n    log(\"The 'maxRetryAttempts' rollback retry parameter must be a number.\");\n    return false;\n  }\n\n  if (rollbackRetryOptions.maxRetryAttempts < 1) {\n    log(\"The 'maxRetryAttempts' rollback retry parameter cannot be less then 1.\");\n    return false;\n  }\n\n  return true;\n}\n\nvar testConfig;\n\nfunction setUpTestDependencies(testSdk, providedTestConfig, testNativeBridge) {\n  if (testSdk) module.exports.AcquisitionSdk = testSdk;\n  if (providedTestConfig) testConfig = providedTestConfig;\n  if (testNativeBridge) NativeCodePush = testNativeBridge;\n}\n\nfunction restartApp() {\n  var onlyIfUpdateIsPending,\n      _args9 = arguments;\n  return _regeneratorRuntime.async(function restartApp$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          onlyIfUpdateIsPending = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : false;\n          NativeCodePush.restartApp(onlyIfUpdateIsPending);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar sync = function () {\n  var syncInProgress = false;\n\n  var setSyncCompleted = function setSyncCompleted() {\n    syncInProgress = false;\n  };\n\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var syncStatusChangeCallback = arguments.length > 1 ? arguments[1] : undefined;\n    var downloadProgressCallback = arguments.length > 2 ? arguments[2] : undefined;\n    var handleBinaryVersionMismatchCallback = arguments.length > 3 ? arguments[3] : undefined;\n    var syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch;\n\n    if (typeof syncStatusChangeCallback === \"function\") {\n      syncStatusCallbackWithTryCatch = function syncStatusCallbackWithTryCatch() {\n        try {\n          syncStatusChangeCallback.apply(void 0, arguments);\n        } catch (error) {\n          log(\"An error has occurred : \" + error.stack);\n        }\n      };\n    }\n\n    if (typeof downloadProgressCallback === \"function\") {\n      downloadProgressCallbackWithTryCatch = function downloadProgressCallbackWithTryCatch() {\n        try {\n          downloadProgressCallback.apply(void 0, arguments);\n        } catch (error) {\n          log(\"An error has occurred: \" + error.stack);\n        }\n      };\n    }\n\n    if (syncInProgress) {\n      typeof syncStatusCallbackWithTryCatch === \"function\" ? syncStatusCallbackWithTryCatch(CodePush.SyncStatus.SYNC_IN_PROGRESS) : log(\"Sync already in progress.\");\n      return Promise.resolve(CodePush.SyncStatus.SYNC_IN_PROGRESS);\n    }\n\n    syncInProgress = true;\n    var syncPromise = syncInternal(options, syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch, handleBinaryVersionMismatchCallback);\n    syncPromise.then(setSyncCompleted).catch(setSyncCompleted);\n    return syncPromise;\n  };\n}();\n\nfunction syncInternal() {\n  var options,\n      syncStatusChangeCallback,\n      downloadProgressCallback,\n      handleBinaryVersionMismatchCallback,\n      resolvedInstallMode,\n      syncOptions,\n      remotePackage,\n      doDownloadAndInstall,\n      updateShouldBeIgnored,\n      currentPackage,\n      _args11 = arguments;\n  return _regeneratorRuntime.async(function syncInternal$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n          syncStatusChangeCallback = _args11.length > 1 ? _args11[1] : undefined;\n          downloadProgressCallback = _args11.length > 2 ? _args11[2] : undefined;\n          handleBinaryVersionMismatchCallback = _args11.length > 3 ? _args11[3] : undefined;\n          syncOptions = _objectSpread({\n            deploymentKey: null,\n            ignoreFailedUpdates: true,\n            rollbackRetryOptions: null,\n            installMode: CodePush.InstallMode.ON_NEXT_RESTART,\n            mandatoryInstallMode: CodePush.InstallMode.IMMEDIATE,\n            minimumBackgroundDuration: 0,\n            updateDialog: null\n          }, options);\n          syncStatusChangeCallback = typeof syncStatusChangeCallback === \"function\" ? syncStatusChangeCallback : function (syncStatus) {\n            switch (syncStatus) {\n              case CodePush.SyncStatus.CHECKING_FOR_UPDATE:\n                log(\"Checking for update.\");\n                break;\n\n              case CodePush.SyncStatus.AWAITING_USER_ACTION:\n                log(\"Awaiting user action.\");\n                break;\n\n              case CodePush.SyncStatus.DOWNLOADING_PACKAGE:\n                log(\"Downloading package.\");\n                break;\n\n              case CodePush.SyncStatus.INSTALLING_UPDATE:\n                log(\"Installing update.\");\n                break;\n\n              case CodePush.SyncStatus.UP_TO_DATE:\n                log(\"App is up to date.\");\n                break;\n\n              case CodePush.SyncStatus.UPDATE_IGNORED:\n                log(\"User cancelled the update.\");\n                break;\n\n              case CodePush.SyncStatus.UPDATE_INSTALLED:\n                if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESTART) {\n                  log(\"Update is installed and will be run on the next app restart.\");\n                } else if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESUME) {\n                  if (syncOptions.minimumBackgroundDuration > 0) {\n                    log(\"Update is installed and will be run after the app has been in the background for at least \" + syncOptions.minimumBackgroundDuration + \" seconds.\");\n                  } else {\n                    log(\"Update is installed and will be run when the app next resumes.\");\n                  }\n                }\n\n                break;\n\n              case CodePush.SyncStatus.UNKNOWN_ERROR:\n                log(\"An unknown error occurred.\");\n                break;\n            }\n          };\n          _context11.prev = 6;\n          _context11.next = 9;\n          return _regeneratorRuntime.awrap(CodePush.notifyApplicationReady());\n\n        case 9:\n          syncStatusChangeCallback(CodePush.SyncStatus.CHECKING_FOR_UPDATE);\n          _context11.next = 12;\n          return _regeneratorRuntime.awrap(checkForUpdate(syncOptions.deploymentKey, handleBinaryVersionMismatchCallback));\n\n        case 12:\n          remotePackage = _context11.sent;\n\n          doDownloadAndInstall = function _callee2() {\n            var localPackage;\n            return _regeneratorRuntime.async(function _callee2$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    syncStatusChangeCallback(CodePush.SyncStatus.DOWNLOADING_PACKAGE);\n                    _context10.next = 3;\n                    return _regeneratorRuntime.awrap(remotePackage.download(downloadProgressCallback));\n\n                  case 3:\n                    localPackage = _context10.sent;\n                    resolvedInstallMode = localPackage.isMandatory ? syncOptions.mandatoryInstallMode : syncOptions.installMode;\n                    syncStatusChangeCallback(CodePush.SyncStatus.INSTALLING_UPDATE);\n                    _context10.next = 8;\n                    return _regeneratorRuntime.awrap(localPackage.install(resolvedInstallMode, syncOptions.minimumBackgroundDuration, function () {\n                      syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);\n                    }));\n\n                  case 8:\n                    return _context10.abrupt(\"return\", CodePush.SyncStatus.UPDATE_INSTALLED);\n\n                  case 9:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          _context11.next = 16;\n          return _regeneratorRuntime.awrap(shouldUpdateBeIgnored(remotePackage, syncOptions));\n\n        case 16:\n          updateShouldBeIgnored = _context11.sent;\n\n          if (!(!remotePackage || updateShouldBeIgnored)) {\n            _context11.next = 31;\n            break;\n          }\n\n          if (updateShouldBeIgnored) {\n            log(\"An update is available, but it is being ignored due to having been previously rolled back.\");\n          }\n\n          _context11.next = 21;\n          return _regeneratorRuntime.awrap(CodePush.getCurrentPackage());\n\n        case 21:\n          currentPackage = _context11.sent;\n\n          if (!(currentPackage && currentPackage.isPending)) {\n            _context11.next = 27;\n            break;\n          }\n\n          syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);\n          return _context11.abrupt(\"return\", CodePush.SyncStatus.UPDATE_INSTALLED);\n\n        case 27:\n          syncStatusChangeCallback(CodePush.SyncStatus.UP_TO_DATE);\n          return _context11.abrupt(\"return\", CodePush.SyncStatus.UP_TO_DATE);\n\n        case 29:\n          _context11.next = 41;\n          break;\n\n        case 31:\n          if (!syncOptions.updateDialog) {\n            _context11.next = 38;\n            break;\n          }\n\n          if (typeof syncOptions.updateDialog !== \"object\") {\n            syncOptions.updateDialog = CodePush.DEFAULT_UPDATE_DIALOG;\n          } else {\n            syncOptions.updateDialog = _objectSpread(_objectSpread({}, CodePush.DEFAULT_UPDATE_DIALOG), syncOptions.updateDialog);\n          }\n\n          _context11.next = 35;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            var message = null;\n            var installButtonText = null;\n            var dialogButtons = [];\n\n            if (remotePackage.isMandatory) {\n              message = syncOptions.updateDialog.mandatoryUpdateMessage;\n              installButtonText = syncOptions.updateDialog.mandatoryContinueButtonLabel;\n            } else {\n              message = syncOptions.updateDialog.optionalUpdateMessage;\n              installButtonText = syncOptions.updateDialog.optionalInstallButtonLabel;\n              dialogButtons.push({\n                text: syncOptions.updateDialog.optionalIgnoreButtonLabel,\n                onPress: function onPress() {\n                  syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_IGNORED);\n                  resolve(CodePush.SyncStatus.UPDATE_IGNORED);\n                }\n              });\n            }\n\n            dialogButtons.push({\n              text: installButtonText,\n              onPress: function onPress() {\n                doDownloadAndInstall().then(resolve, reject);\n              }\n            });\n\n            if (syncOptions.updateDialog.appendReleaseDescription && remotePackage.description) {\n              message += syncOptions.updateDialog.descriptionPrefix + \" \" + remotePackage.description;\n            }\n\n            syncStatusChangeCallback(CodePush.SyncStatus.AWAITING_USER_ACTION);\n            Alert.alert(syncOptions.updateDialog.title, message, dialogButtons);\n          }));\n\n        case 35:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 38:\n          _context11.next = 40;\n          return _regeneratorRuntime.awrap(doDownloadAndInstall());\n\n        case 40:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 41:\n          _context11.next = 48;\n          break;\n\n        case 43:\n          _context11.prev = 43;\n          _context11.t0 = _context11[\"catch\"](6);\n          syncStatusChangeCallback(CodePush.SyncStatus.UNKNOWN_ERROR);\n          log(_context11.t0.message);\n          throw _context11.t0;\n\n        case 48:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, [[6, 43]], Promise);\n}\n\n;\nvar CodePush;\n\nfunction codePushify() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var React;\n\n  var ReactNative = require(\"react-native-web/dist/index\");\n\n  try {\n    React = require(\"react\");\n  } catch (e) {}\n\n  if (!React) {\n    try {\n      React = ReactNative.React;\n    } catch (e) {}\n\n    if (!React) {\n      throw new Error(\"Unable to find the 'React' module.\");\n    }\n  }\n\n  if (!React.Component) {\n    throw new Error(\"Unable to find the \\\"Component\\\" class, please either:\\n1. Upgrade to a newer version of React Native that supports it, or\\n2. Call the codePush.sync API in your component instead of using the @codePush decorator\");\n  }\n\n  var decorator = function decorator(RootComponent) {\n    var extended = function (_React$Component) {\n      _inherits(CodePushComponent, _React$Component);\n\n      var _super = _createSuper(CodePushComponent);\n\n      function CodePushComponent() {\n        _classCallCheck(this, CodePushComponent);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(CodePushComponent, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          if (options.checkFrequency === CodePush.CheckFrequency.MANUAL) {\n            CodePush.notifyAppReady();\n          } else {\n            var rootComponentInstance = this.refs.rootComponent;\n            var syncStatusCallback;\n\n            if (rootComponentInstance && rootComponentInstance.codePushStatusDidChange) {\n              syncStatusCallback = rootComponentInstance.codePushStatusDidChange;\n\n              if (rootComponentInstance instanceof React.Component) {\n                syncStatusCallback = syncStatusCallback.bind(rootComponentInstance);\n              }\n            }\n\n            var _downloadProgressCallback;\n\n            if (rootComponentInstance && rootComponentInstance.codePushDownloadDidProgress) {\n              _downloadProgressCallback = rootComponentInstance.codePushDownloadDidProgress;\n\n              if (rootComponentInstance instanceof React.Component) {\n                _downloadProgressCallback = _downloadProgressCallback.bind(rootComponentInstance);\n              }\n            }\n\n            var handleBinaryVersionMismatchCallback;\n\n            if (rootComponentInstance && rootComponentInstance.codePushOnBinaryVersionMismatch) {\n              handleBinaryVersionMismatchCallback = rootComponentInstance.codePushOnBinaryVersionMismatch;\n\n              if (rootComponentInstance instanceof React.Component) {\n                handleBinaryVersionMismatchCallback = handleBinaryVersionMismatchCallback.bind(rootComponentInstance);\n              }\n            }\n\n            CodePush.sync(options, syncStatusCallback, _downloadProgressCallback, handleBinaryVersionMismatchCallback);\n\n            if (options.checkFrequency === CodePush.CheckFrequency.ON_APP_RESUME) {\n              ReactNative.AppState.addEventListener(\"change\", function (newState) {\n                newState === \"active\" && CodePush.sync(options, syncStatusCallback, _downloadProgressCallback);\n              });\n            }\n          }\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var props = _objectSpread({}, this.props);\n\n          if (RootComponent.prototype.render) {\n            props.ref = \"rootComponent\";\n          }\n\n          return _jsx(RootComponent, _objectSpread({}, props));\n        }\n      }]);\n\n      return CodePushComponent;\n    }(React.Component);\n\n    return hoistStatics(extended, RootComponent);\n  };\n\n  if (typeof options === \"function\") {\n    return decorator(options);\n  } else {\n    return decorator;\n  }\n}\n\nif (NativeCodePush) {\n  CodePush = codePushify;\n\n  _extends(CodePush, {\n    AcquisitionSdk: Sdk,\n    checkForUpdate: checkForUpdate,\n    getConfiguration: getConfiguration,\n    getCurrentPackage: getCurrentPackage,\n    getUpdateMetadata: getUpdateMetadata,\n    log: log,\n    notifyAppReady: notifyApplicationReady,\n    notifyApplicationReady: notifyApplicationReady,\n    restartApp: restartApp,\n    setUpTestDependencies: setUpTestDependencies,\n    sync: sync,\n    disallowRestart: NativeCodePush.disallow,\n    allowRestart: NativeCodePush.allow,\n    clearUpdates: NativeCodePush.clearUpdates,\n    InstallMode: {\n      IMMEDIATE: NativeCodePush.codePushInstallModeImmediate,\n      ON_NEXT_RESTART: NativeCodePush.codePushInstallModeOnNextRestart,\n      ON_NEXT_RESUME: NativeCodePush.codePushInstallModeOnNextResume,\n      ON_NEXT_SUSPEND: NativeCodePush.codePushInstallModeOnNextSuspend\n    },\n    SyncStatus: {\n      UP_TO_DATE: 0,\n      UPDATE_INSTALLED: 1,\n      UPDATE_IGNORED: 2,\n      UNKNOWN_ERROR: 3,\n      SYNC_IN_PROGRESS: 4,\n      CHECKING_FOR_UPDATE: 5,\n      AWAITING_USER_ACTION: 6,\n      DOWNLOADING_PACKAGE: 7,\n      INSTALLING_UPDATE: 8\n    },\n    CheckFrequency: {\n      ON_APP_START: 0,\n      ON_APP_RESUME: 1,\n      MANUAL: 2\n    },\n    UpdateState: {\n      RUNNING: NativeCodePush.codePushUpdateStateRunning,\n      PENDING: NativeCodePush.codePushUpdateStatePending,\n      LATEST: NativeCodePush.codePushUpdateStateLatest\n    },\n    DeploymentStatus: {\n      FAILED: \"DeploymentFailed\",\n      SUCCEEDED: \"DeploymentSucceeded\"\n    },\n    DEFAULT_UPDATE_DIALOG: {\n      appendReleaseDescription: false,\n      descriptionPrefix: \" Description: \",\n      mandatoryContinueButtonLabel: \"Continue\",\n      mandatoryUpdateMessage: \"An update is available that must be installed.\",\n      optionalIgnoreButtonLabel: \"Ignore\",\n      optionalInstallButtonLabel: \"Install\",\n      optionalUpdateMessage: \"An update is available. Would you like to install it?\",\n      title: \"Update available\"\n    },\n    DEFAULT_ROLLBACK_RETRY_OPTIONS: {\n      delayInHours: 24,\n      maxRetryAttempts: 1\n    }\n  });\n} else {\n  log(\"The CodePush module doesn't appear to be properly installed. Please double-check that everything is setup correctly.\");\n}\n\nmodule.exports = CodePush;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-code-push/CodePush.js"],"names":["AcquisitionManager","NativeCodePush","require","PackageMixins","deploymentKey","handleBinaryVersionMismatchCallback","nativeConfig","getConfiguration","config","sdk","getPromisifiedSdk","localPackage","module","queryPackage","appVersion","Platform","update","log","remotePackage","getUpdateMetadata","CodePush","updateMetadata","updateState","reject","resolve","notifyApplicationReady","notifyApplicationReadyPromise","notifyApplicationReadyInternal","statusReport","tryReportStatus","previousLabelOrAppVersion","previousDeploymentKey","label","resumeListener","AppState","JSON","newState","refreshedStatusReport","rollbackRetryOptions","syncOptions","isFailedPackage","validateRollbackRetryOptions","latestRollbackInfo","validateLatestRollbackInfo","delayInHours","maxRetryAttempts","hoursSinceLatestRollback","Date","testConfig","onlyIfUpdateIsPending","sync","syncInProgress","setSyncCompleted","options","syncStatusChangeCallback","downloadProgressCallback","syncStatusCallbackWithTryCatch","error","downloadProgressCallbackWithTryCatch","Promise","syncPromise","syncInternal","ignoreFailedUpdates","installMode","mandatoryInstallMode","minimumBackgroundDuration","updateDialog","resolvedInstallMode","checkForUpdate","doDownloadAndInstall","updateShouldBeIgnored","shouldUpdateBeIgnored","currentPackage","message","installButtonText","dialogButtons","text","onPress","Alert","React","ReactNative","decorator","extended","rootComponentInstance","syncStatusCallback","props","RootComponent","hoistStatics","AcquisitionSdk","getCurrentPackage","notifyAppReady","restartApp","setUpTestDependencies","disallowRestart","allowRestart","clearUpdates","InstallMode","IMMEDIATE","ON_NEXT_RESTART","ON_NEXT_RESUME","ON_NEXT_SUSPEND","SyncStatus","UP_TO_DATE","UPDATE_INSTALLED","UPDATE_IGNORED","UNKNOWN_ERROR","SYNC_IN_PROGRESS","CHECKING_FOR_UPDATE","AWAITING_USER_ACTION","DOWNLOADING_PACKAGE","INSTALLING_UPDATE","CheckFrequency","ON_APP_START","ON_APP_RESUME","MANUAL","UpdateState","RUNNING","PENDING","LATEST","DeploymentStatus","FAILED","SUCCEEDED","DEFAULT_UPDATE_DIALOG","appendReleaseDescription","descriptionPrefix","mandatoryContinueButtonLabel","mandatoryUpdateMessage","optionalIgnoreButtonLabel","optionalInstallButtonLabel","optionalUpdateMessage","title","DEFAULT_ROLLBACK_RETRY_OPTIONS"],"mappings":"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","sourcesContent":["import { AcquisitionManager as Sdk } from \"code-push/script/acquisition-sdk\";\nimport { Alert } from \"./AlertAdapter\";\nimport requestFetchAdapter from \"./request-fetch-adapter\";\nimport { AppState, Platform } from \"react-native\";\nimport log from \"./logging\";\nimport hoistStatics from 'hoist-non-react-statics';\n\nlet NativeCodePush = require(\"react-native\").NativeModules.CodePush;\nconst PackageMixins = require(\"./package-mixins\")(NativeCodePush);\n\nasync function checkForUpdate(deploymentKey = null, handleBinaryVersionMismatchCallback = null) {\n  /*\n   * Before we ask the server if an update exists, we\n   * need to retrieve three pieces of information from the\n   * native side: deployment key, app version (e.g. 1.0.1)\n   * and the hash of the currently running update (if there is one).\n   * This allows the client to only receive updates which are targetted\n   * for their specific deployment and version and which are actually\n   * different from the CodePush update they have already installed.\n   */\n  const nativeConfig = await getConfiguration();\n  /*\n   * If a deployment key was explicitly provided,\n   * then let's override the one we retrieved\n   * from the native-side of the app. This allows\n   * dynamically \"redirecting\" end-users at different\n   * deployments (e.g. an early access deployment for insiders).\n   */\n  const config = deploymentKey ? { ...nativeConfig, ...{ deploymentKey } } : nativeConfig;\n  const sdk = getPromisifiedSdk(requestFetchAdapter, config);\n\n  // Use dynamically overridden getCurrentPackage() during tests.\n  const localPackage = await module.exports.getCurrentPackage();\n\n  /*\n   * If the app has a previously installed update, and that update\n   * was targetted at the same app version that is currently running,\n   * then we want to use its package hash to determine whether a new\n   * release has been made on the server. Otherwise, we only need\n   * to send the app version to the server, since we are interested\n   * in any updates for current binary version, regardless of hash.\n   */\n  let queryPackage;\n  if (localPackage) {\n    queryPackage = localPackage;\n  } else {\n    queryPackage = { appVersion: config.appVersion };\n    if (Platform.OS === \"ios\" && config.packageHash) {\n      queryPackage.packageHash = config.packageHash;\n    }\n  }\n\n  const update = await sdk.queryUpdateWithCurrentPackage(queryPackage);\n\n  /*\n   * There are four cases where checkForUpdate will resolve to null:\n   * ----------------------------------------------------------------\n   * 1) The server said there isn't an update. This is the most common case.\n   * 2) The server said there is an update but it requires a newer binary version.\n   *    This would occur when end-users are running an older binary version than\n   *    is available, and CodePush is making sure they don't get an update that\n   *    potentially wouldn't be compatible with what they are running.\n   * 3) The server said there is an update, but the update's hash is the same as\n   *    the currently running update. This should _never_ happen, unless there is a\n   *    bug in the server, but we're adding this check just to double-check that the\n   *    client app is resilient to a potential issue with the update check.\n   * 4) The server said there is an update, but the update's hash is the same as that\n   *    of the binary's currently running version. This should only happen in Android -\n   *    unlike iOS, we don't attach the binary's hash to the updateCheck request\n   *    because we want to avoid having to install diff updates against the binary's\n   *    version, which we can't do yet on Android.\n   */\n  if (!update || update.updateAppVersion ||\n      localPackage && (update.packageHash === localPackage.packageHash) ||\n      (!localPackage || localPackage._isDebugOnly) && config.packageHash === update.packageHash) {\n    if (update && update.updateAppVersion) {\n      log(\"An update is available but it is not targeting the binary version of your app.\");\n      if (handleBinaryVersionMismatchCallback && typeof handleBinaryVersionMismatchCallback === \"function\") {\n        handleBinaryVersionMismatchCallback(update)\n      }\n    }\n\n    return null;\n  } else {\n    const remotePackage = { ...update, ...PackageMixins.remote(sdk.reportStatusDownload) };\n    remotePackage.failedInstall = await NativeCodePush.isFailedUpdate(remotePackage.packageHash);\n    remotePackage.deploymentKey = deploymentKey || nativeConfig.deploymentKey;\n    return remotePackage;\n  }\n}\n\nconst getConfiguration = (() => {\n  let config;\n  return async function getConfiguration() {\n    if (config) {\n      return config;\n    } else if (testConfig) {\n      return testConfig;\n    } else {\n      config = await NativeCodePush.getConfiguration();\n      return config;\n    }\n  }\n})();\n\nasync function getCurrentPackage() {\n  return await getUpdateMetadata(CodePush.UpdateState.LATEST);\n}\n\nasync function getUpdateMetadata(updateState) {\n  let updateMetadata = await NativeCodePush.getUpdateMetadata(updateState || CodePush.UpdateState.RUNNING);\n  if (updateMetadata) {\n    updateMetadata = {...PackageMixins.local, ...updateMetadata};\n    updateMetadata.failedInstall = await NativeCodePush.isFailedUpdate(updateMetadata.packageHash);\n    updateMetadata.isFirstRun = await NativeCodePush.isFirstRun(updateMetadata.packageHash);\n  }\n  return updateMetadata;\n}\n\nfunction getPromisifiedSdk(requestFetchAdapter, config) {\n  // Use dynamically overridden AcquisitionSdk during tests.\n  const sdk = new module.exports.AcquisitionSdk(requestFetchAdapter, config);\n  sdk.queryUpdateWithCurrentPackage = (queryPackage) => {\n    return new Promise((resolve, reject) => {\n      module.exports.AcquisitionSdk.prototype.queryUpdateWithCurrentPackage.call(sdk, queryPackage, (err, update) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(update);\n        }\n      });\n    });\n  };\n\n  sdk.reportStatusDeploy = (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey) => {\n    return new Promise((resolve, reject) => {\n      module.exports.AcquisitionSdk.prototype.reportStatusDeploy.call(sdk, deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  };\n\n  sdk.reportStatusDownload = (downloadedPackage) => {\n    return new Promise((resolve, reject) => {\n      module.exports.AcquisitionSdk.prototype.reportStatusDownload.call(sdk, downloadedPackage, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  };\n\n  return sdk;\n}\n\n// This ensures that notifyApplicationReadyInternal is only called once\n// in the lifetime of this module instance.\nconst notifyApplicationReady = (() => {\n  let notifyApplicationReadyPromise;\n  return () => {\n    if (!notifyApplicationReadyPromise) {\n      notifyApplicationReadyPromise = notifyApplicationReadyInternal();\n    }\n\n    return notifyApplicationReadyPromise;\n  };\n})();\n\nasync function notifyApplicationReadyInternal() {\n  await NativeCodePush.notifyApplicationReady();\n  const statusReport = await NativeCodePush.getNewStatusReport();\n  statusReport && tryReportStatus(statusReport); // Don't wait for this to complete.\n\n  return statusReport;\n}\n\nasync function tryReportStatus(statusReport, resumeListener) {\n  const config = await getConfiguration();\n  const previousLabelOrAppVersion = statusReport.previousLabelOrAppVersion;\n  const previousDeploymentKey = statusReport.previousDeploymentKey || config.deploymentKey;\n  try {\n    if (statusReport.appVersion) {\n      log(`Reporting binary update (${statusReport.appVersion})`);\n\n      if (!config.deploymentKey) {\n        throw new Error(\"Deployment key is missed\");\n      }\n\n      const sdk = getPromisifiedSdk(requestFetchAdapter, config);\n      await sdk.reportStatusDeploy(/* deployedPackage */ null, /* status */ null, previousLabelOrAppVersion, previousDeploymentKey);\n    } else {\n      const label = statusReport.package.label;\n      if (statusReport.status === \"DeploymentSucceeded\") {\n        log(`Reporting CodePush update success (${label})`);\n      } else {\n        log(`Reporting CodePush update rollback (${label})`);\n        await NativeCodePush.setLatestRollbackInfo(statusReport.package.packageHash);\n      }\n\n      config.deploymentKey = statusReport.package.deploymentKey;\n      const sdk = getPromisifiedSdk(requestFetchAdapter, config);\n      await sdk.reportStatusDeploy(statusReport.package, statusReport.status, previousLabelOrAppVersion, previousDeploymentKey);\n    }\n\n    NativeCodePush.recordStatusReported(statusReport);\n    resumeListener && AppState.removeEventListener(\"change\", resumeListener);\n  } catch (e) {\n    log(`Report status failed: ${JSON.stringify(statusReport)}`);\n    NativeCodePush.saveStatusReportForRetry(statusReport);\n    // Try again when the app resumes\n    if (!resumeListener) {\n      resumeListener = async (newState) => {\n        if (newState !== \"active\") return;\n        const refreshedStatusReport = await NativeCodePush.getNewStatusReport();\n        if (refreshedStatusReport) {\n          tryReportStatus(refreshedStatusReport, resumeListener);\n        } else {\n          AppState.removeEventListener(\"change\", resumeListener);\n        }\n      };\n      AppState.addEventListener(\"change\", resumeListener);\n    }\n  }\n}\n\nasync function shouldUpdateBeIgnored(remotePackage, syncOptions) {\n  let { rollbackRetryOptions } = syncOptions;\n\n  const isFailedPackage = remotePackage && remotePackage.failedInstall;\n  if (!isFailedPackage || !syncOptions.ignoreFailedUpdates) {\n    return false;\n  }\n\n  if (!rollbackRetryOptions) {\n    return true;\n  }\n\n  if (typeof rollbackRetryOptions !== \"object\") {\n    rollbackRetryOptions = CodePush.DEFAULT_ROLLBACK_RETRY_OPTIONS;\n  } else {\n    rollbackRetryOptions = { ...CodePush.DEFAULT_ROLLBACK_RETRY_OPTIONS, ...rollbackRetryOptions };\n  }\n\n  if (!validateRollbackRetryOptions(rollbackRetryOptions)) {\n    return true;\n  }\n\n  const latestRollbackInfo = await NativeCodePush.getLatestRollbackInfo();\n  if (!validateLatestRollbackInfo(latestRollbackInfo, remotePackage.packageHash)) {\n    log(\"The latest rollback info is not valid.\");\n    return true;\n  }\n\n  const { delayInHours, maxRetryAttempts } = rollbackRetryOptions;\n  const hoursSinceLatestRollback = (Date.now() - latestRollbackInfo.time) / (1000 * 60 * 60);\n  if (hoursSinceLatestRollback >= delayInHours && maxRetryAttempts >= latestRollbackInfo.count) {\n    log(\"Previous rollback should be ignored due to rollback retry options.\");\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateLatestRollbackInfo(latestRollbackInfo, packageHash) {\n  return latestRollbackInfo &&\n    latestRollbackInfo.time &&\n    latestRollbackInfo.count &&\n    latestRollbackInfo.packageHash &&\n    latestRollbackInfo.packageHash === packageHash;\n}\n\nfunction validateRollbackRetryOptions(rollbackRetryOptions) {\n  if (typeof rollbackRetryOptions.delayInHours !== \"number\") {\n    log(\"The 'delayInHours' rollback retry parameter must be a number.\");\n    return false;\n  }\n\n  if (typeof rollbackRetryOptions.maxRetryAttempts !== \"number\") {\n    log(\"The 'maxRetryAttempts' rollback retry parameter must be a number.\");\n    return false;\n  }\n\n  if (rollbackRetryOptions.maxRetryAttempts < 1) {\n    log(\"The 'maxRetryAttempts' rollback retry parameter cannot be less then 1.\");\n    return false;\n  }\n\n  return true;\n}\n\nvar testConfig;\n\n// This function is only used for tests. Replaces the default SDK, configuration and native bridge\nfunction setUpTestDependencies(testSdk, providedTestConfig, testNativeBridge) {\n  if (testSdk) module.exports.AcquisitionSdk = testSdk;\n  if (providedTestConfig) testConfig = providedTestConfig;\n  if (testNativeBridge) NativeCodePush = testNativeBridge;\n}\n\nasync function restartApp(onlyIfUpdateIsPending = false) {\n  NativeCodePush.restartApp(onlyIfUpdateIsPending);\n}\n\n// This function allows only one syncInternal operation to proceed at any given time.\n// Parallel calls to sync() while one is ongoing yields CodePush.SyncStatus.SYNC_IN_PROGRESS.\nconst sync = (() => {\n  let syncInProgress = false;\n  const setSyncCompleted = () => { syncInProgress = false; };\n\n  return (options = {}, syncStatusChangeCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback) => {\n    let syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch;\n    if (typeof syncStatusChangeCallback === \"function\") {\n      syncStatusCallbackWithTryCatch = (...args) => {\n        try {\n          syncStatusChangeCallback(...args);\n        } catch (error) {\n          log(`An error has occurred : ${error.stack}`);\n        }\n      }\n    }\n\n    if (typeof downloadProgressCallback === \"function\") {\n      downloadProgressCallbackWithTryCatch = (...args) => {\n        try {\n          downloadProgressCallback(...args);\n        } catch (error) {\n          log(`An error has occurred: ${error.stack}`);\n        }\n      }\n    }\n\n    if (syncInProgress) {\n      typeof syncStatusCallbackWithTryCatch === \"function\"\n        ? syncStatusCallbackWithTryCatch(CodePush.SyncStatus.SYNC_IN_PROGRESS)\n        : log(\"Sync already in progress.\");\n      return Promise.resolve(CodePush.SyncStatus.SYNC_IN_PROGRESS);\n    }\n\n    syncInProgress = true;\n    const syncPromise = syncInternal(options, syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch, handleBinaryVersionMismatchCallback);\n    syncPromise\n      .then(setSyncCompleted)\n      .catch(setSyncCompleted);\n\n    return syncPromise;\n  };\n})();\n\n/*\n * The syncInternal method provides a simple, one-line experience for\n * incorporating the check, download and installation of an update.\n *\n * It simply composes the existing API methods together and adds additional\n * support for respecting mandatory updates, ignoring previously failed\n * releases, and displaying a standard confirmation UI to the end-user\n * when an update is available.\n */\nasync function syncInternal(options = {}, syncStatusChangeCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback) {\n  let resolvedInstallMode;\n  const syncOptions = {\n    deploymentKey: null,\n    ignoreFailedUpdates: true,\n    rollbackRetryOptions: null,\n    installMode: CodePush.InstallMode.ON_NEXT_RESTART,\n    mandatoryInstallMode: CodePush.InstallMode.IMMEDIATE,\n    minimumBackgroundDuration: 0,\n    updateDialog: null,\n    ...options\n  };\n\n  syncStatusChangeCallback = typeof syncStatusChangeCallback === \"function\"\n    ? syncStatusChangeCallback\n    : (syncStatus) => {\n        switch(syncStatus) {\n          case CodePush.SyncStatus.CHECKING_FOR_UPDATE:\n            log(\"Checking for update.\");\n            break;\n          case CodePush.SyncStatus.AWAITING_USER_ACTION:\n            log(\"Awaiting user action.\");\n            break;\n          case CodePush.SyncStatus.DOWNLOADING_PACKAGE:\n            log(\"Downloading package.\");\n            break;\n          case CodePush.SyncStatus.INSTALLING_UPDATE:\n            log(\"Installing update.\");\n            break;\n          case CodePush.SyncStatus.UP_TO_DATE:\n            log(\"App is up to date.\");\n            break;\n          case CodePush.SyncStatus.UPDATE_IGNORED:\n            log(\"User cancelled the update.\");\n            break;\n          case CodePush.SyncStatus.UPDATE_INSTALLED:\n            if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESTART) {\n              log(\"Update is installed and will be run on the next app restart.\");\n            } else if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESUME) {\n              if (syncOptions.minimumBackgroundDuration > 0) {\n                log(`Update is installed and will be run after the app has been in the background for at least ${syncOptions.minimumBackgroundDuration} seconds.`);\n              } else {\n                log(\"Update is installed and will be run when the app next resumes.\");\n              }\n            }\n            break;\n          case CodePush.SyncStatus.UNKNOWN_ERROR:\n            log(\"An unknown error occurred.\");\n            break;\n        }\n      };\n\n  try {\n    await CodePush.notifyApplicationReady();\n\n    syncStatusChangeCallback(CodePush.SyncStatus.CHECKING_FOR_UPDATE);\n    const remotePackage = await checkForUpdate(syncOptions.deploymentKey, handleBinaryVersionMismatchCallback);\n\n    const doDownloadAndInstall = async () => {\n      syncStatusChangeCallback(CodePush.SyncStatus.DOWNLOADING_PACKAGE);\n      const localPackage = await remotePackage.download(downloadProgressCallback);\n\n      // Determine the correct install mode based on whether the update is mandatory or not.\n      resolvedInstallMode = localPackage.isMandatory ? syncOptions.mandatoryInstallMode : syncOptions.installMode;\n\n      syncStatusChangeCallback(CodePush.SyncStatus.INSTALLING_UPDATE);\n      await localPackage.install(resolvedInstallMode, syncOptions.minimumBackgroundDuration, () => {\n        syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);\n      });\n\n      return CodePush.SyncStatus.UPDATE_INSTALLED;\n    };\n\n    const updateShouldBeIgnored = await shouldUpdateBeIgnored(remotePackage, syncOptions);\n\n    if (!remotePackage || updateShouldBeIgnored) {\n      if (updateShouldBeIgnored) {\n          log(\"An update is available, but it is being ignored due to having been previously rolled back.\");\n      }\n\n      const currentPackage = await CodePush.getCurrentPackage();\n      if (currentPackage && currentPackage.isPending) {\n        syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);\n        return CodePush.SyncStatus.UPDATE_INSTALLED;\n      } else {\n        syncStatusChangeCallback(CodePush.SyncStatus.UP_TO_DATE);\n        return CodePush.SyncStatus.UP_TO_DATE;\n      }\n    } else if (syncOptions.updateDialog) {\n      // updateDialog supports any truthy value (e.g. true, \"goo\", 12),\n      // but we should treat a non-object value as just the default dialog\n      if (typeof syncOptions.updateDialog !== \"object\") {\n        syncOptions.updateDialog = CodePush.DEFAULT_UPDATE_DIALOG;\n      } else {\n        syncOptions.updateDialog = { ...CodePush.DEFAULT_UPDATE_DIALOG, ...syncOptions.updateDialog };\n      }\n\n      return await new Promise((resolve, reject) => {\n        let message = null;\n        let installButtonText = null;\n\n        const dialogButtons = [];\n\n        if (remotePackage.isMandatory) {\n          message = syncOptions.updateDialog.mandatoryUpdateMessage;\n          installButtonText = syncOptions.updateDialog.mandatoryContinueButtonLabel;\n        } else {\n          message = syncOptions.updateDialog.optionalUpdateMessage;\n          installButtonText = syncOptions.updateDialog.optionalInstallButtonLabel;\n          // Since this is an optional update, add a button\n          // to allow the end-user to ignore it\n          dialogButtons.push({\n            text: syncOptions.updateDialog.optionalIgnoreButtonLabel,\n            onPress: () => {\n              syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_IGNORED);\n              resolve(CodePush.SyncStatus.UPDATE_IGNORED);\n            }\n          });\n        }\n        \n        // Since the install button should be placed to the \n        // right of any other button, add it last\n        dialogButtons.push({\n          text: installButtonText,\n          onPress:() => {\n            doDownloadAndInstall()\n              .then(resolve, reject);\n          }\n        })\n\n        // If the update has a description, and the developer\n        // explicitly chose to display it, then set that as the message\n        if (syncOptions.updateDialog.appendReleaseDescription && remotePackage.description) {\n          message += `${syncOptions.updateDialog.descriptionPrefix} ${remotePackage.description}`;\n        }\n\n        syncStatusChangeCallback(CodePush.SyncStatus.AWAITING_USER_ACTION);\n        Alert.alert(syncOptions.updateDialog.title, message, dialogButtons);\n      });\n    } else {\n      return await doDownloadAndInstall();\n    }\n  } catch (error) {\n    syncStatusChangeCallback(CodePush.SyncStatus.UNKNOWN_ERROR);\n    log(error.message);\n    throw error;\n  }\n};\n\nlet CodePush;\n\nfunction codePushify(options = {}) {\n  let React;\n  let ReactNative = require(\"react-native\");\n\n  try { React = require(\"react\"); } catch (e) { }\n  if (!React) {\n    try { React = ReactNative.React; } catch (e) { }\n    if (!React) {\n      throw new Error(\"Unable to find the 'React' module.\");\n    }\n  }\n\n  if (!React.Component) {\n    throw new Error(\n`Unable to find the \"Component\" class, please either:\n1. Upgrade to a newer version of React Native that supports it, or\n2. Call the codePush.sync API in your component instead of using the @codePush decorator`\n    );\n  }\n\n  var decorator = (RootComponent) => {\n    const extended = class CodePushComponent extends React.Component {\n      componentDidMount() {\n        if (options.checkFrequency === CodePush.CheckFrequency.MANUAL) {\n          CodePush.notifyAppReady();\n        } else {\n          let rootComponentInstance = this.refs.rootComponent;\n\n          let syncStatusCallback;\n          if (rootComponentInstance && rootComponentInstance.codePushStatusDidChange) {\n            syncStatusCallback = rootComponentInstance.codePushStatusDidChange;\n            if (rootComponentInstance instanceof React.Component) {\n              syncStatusCallback = syncStatusCallback.bind(rootComponentInstance);\n            }\n          }\n\n          let downloadProgressCallback;\n          if (rootComponentInstance && rootComponentInstance.codePushDownloadDidProgress) {\n            downloadProgressCallback = rootComponentInstance.codePushDownloadDidProgress;\n            if (rootComponentInstance instanceof React.Component) {\n              downloadProgressCallback = downloadProgressCallback.bind(rootComponentInstance);\n            }\n          }\n\n          let handleBinaryVersionMismatchCallback;\n          if (rootComponentInstance && rootComponentInstance.codePushOnBinaryVersionMismatch) {\n            handleBinaryVersionMismatchCallback = rootComponentInstance.codePushOnBinaryVersionMismatch;\n            if (rootComponentInstance instanceof React.Component) {\n              handleBinaryVersionMismatchCallback = handleBinaryVersionMismatchCallback.bind(rootComponentInstance);\n            }\n          }\n\n          CodePush.sync(options, syncStatusCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback);\n          if (options.checkFrequency === CodePush.CheckFrequency.ON_APP_RESUME) {\n            ReactNative.AppState.addEventListener(\"change\", (newState) => {\n              newState === \"active\" && CodePush.sync(options, syncStatusCallback, downloadProgressCallback);\n            });\n          }\n        }\n      }\n\n      render() {\n        const props = {...this.props};\n\n        // we can set ref property on class components only (not stateless)\n        // check it by render method\n        if (RootComponent.prototype.render) {\n          props.ref = \"rootComponent\";\n        }\n\n        return <RootComponent {...props} />\n      }\n    }\n\n    return hoistStatics(extended, RootComponent);\n  }\n\n  if (typeof options === \"function\") {\n    // Infer that the root component was directly passed to us.\n    return decorator(options);\n  } else {\n    return decorator;\n  }\n}\n\n// If the \"NativeCodePush\" variable isn't defined, then\n// the app didn't properly install the native module,\n// and therefore, it doesn't make sense initializing\n// the JS interface when it wouldn't work anyways.\nif (NativeCodePush) {\n  CodePush = codePushify;\n  Object.assign(CodePush, {\n    AcquisitionSdk: Sdk,\n    checkForUpdate,\n    getConfiguration,\n    getCurrentPackage,\n    getUpdateMetadata,\n    log,\n    notifyAppReady: notifyApplicationReady,\n    notifyApplicationReady,\n    restartApp,\n    setUpTestDependencies,\n    sync,\n    disallowRestart: NativeCodePush.disallow,\n    allowRestart: NativeCodePush.allow,\n    clearUpdates: NativeCodePush.clearUpdates,\n    InstallMode: {\n      IMMEDIATE: NativeCodePush.codePushInstallModeImmediate, // Restart the app immediately\n      ON_NEXT_RESTART: NativeCodePush.codePushInstallModeOnNextRestart, // Don't artificially restart the app. Allow the update to be \"picked up\" on the next app restart\n      ON_NEXT_RESUME: NativeCodePush.codePushInstallModeOnNextResume, // Restart the app the next time it is resumed from the background\n      ON_NEXT_SUSPEND: NativeCodePush.codePushInstallModeOnNextSuspend // Restart the app _while_ it is in the background,\n      // but only after it has been in the background for \"minimumBackgroundDuration\" seconds (0 by default),\n      // so that user context isn't lost unless the app suspension is long enough to not matter\n    },\n    SyncStatus: {\n      UP_TO_DATE: 0, // The running app is up-to-date\n      UPDATE_INSTALLED: 1, // The app had an optional/mandatory update that was successfully downloaded and is about to be installed.\n      UPDATE_IGNORED: 2, // The app had an optional update and the end-user chose to ignore it\n      UNKNOWN_ERROR: 3,\n      SYNC_IN_PROGRESS: 4, // There is an ongoing \"sync\" operation in progress.\n      CHECKING_FOR_UPDATE: 5,\n      AWAITING_USER_ACTION: 6,\n      DOWNLOADING_PACKAGE: 7,\n      INSTALLING_UPDATE: 8\n    },\n    CheckFrequency: {\n      ON_APP_START: 0,\n      ON_APP_RESUME: 1,\n      MANUAL: 2\n    },\n    UpdateState: {\n      RUNNING: NativeCodePush.codePushUpdateStateRunning,\n      PENDING: NativeCodePush.codePushUpdateStatePending,\n      LATEST: NativeCodePush.codePushUpdateStateLatest\n    },\n    DeploymentStatus: {\n      FAILED: \"DeploymentFailed\",\n      SUCCEEDED: \"DeploymentSucceeded\",\n    },\n    DEFAULT_UPDATE_DIALOG: {\n      appendReleaseDescription: false,\n      descriptionPrefix: \" Description: \",\n      mandatoryContinueButtonLabel: \"Continue\",\n      mandatoryUpdateMessage: \"An update is available that must be installed.\",\n      optionalIgnoreButtonLabel: \"Ignore\",\n      optionalInstallButtonLabel: \"Install\",\n      optionalUpdateMessage: \"An update is available. Would you like to install it?\",\n      title: \"Update available\"\n    },\n    DEFAULT_ROLLBACK_RETRY_OPTIONS: {\n      delayInHours: 24,\n      maxRetryAttempts: 1\n    }\n  });\n} else {\n  log(\"The CodePush module doesn't appear to be properly installed. Please double-check that everything is setup correctly.\");\n}\n\nmodule.exports = CodePush;\n"]},"metadata":{},"sourceType":"module"}