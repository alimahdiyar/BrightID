{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"to\", \"action\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useLinkProps from \"./useLinkProps\";\nexport default function Link(_ref) {\n  var to = _ref.to,\n      action = _ref.action,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var props = useLinkProps({\n    to: to,\n    action: action\n  });\n\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, _objectSpread(_objectSpread(_objectSpread({}, props), rest), Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  })));\n}","map":{"version":3,"sources":["Link.tsx"],"names":["to","action","rest","props","useLinkProps","onPress","React","Platform","web","onClick","default"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAGA,OAAA,YAAA;AAmBA,eAAe,SAAA,IAAA,CAAA,IAAA,EAA8C;EAA9BA,IAAAA,EAA8B,GAAA,IAAA,CAA9BA,EAAAA;EAAAA,IAAIC,MAA0B,GAAA,IAAA,CAA1BA,MAAJD;EAAAA,IAAeE,IAAe,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAA9BF;;EAC7B,IAAMG,KAAK,GAAGC,YAAY,CAAC;IAAEJ,EAAF,EAAA,EAAA;IAAMC,MAAAA,EAAjC;EAA2B,CAAD,CAA1B;;EAEA,IAAMI,OAAO,GAAPA,SAAAA,OAAAA,CAAU,CAAVA,EAED;IACH,IAAI,aAAJ,IAAA,EAAuB;MAAA,IAAA,aAAA;;MACrB,CAAA,aAAA,GAAA,IAAI,CAAJ,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;IAGFF;;IAAAA,KAAK,CAALA,OAAAA,CAPF,CAOEA;EAPF,CAAA;;EAUA,OAAOG,KAAK,CAALA,aAAAA,CAAAA,IAAAA,EAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,IAAAA,CAAAA,EAGFC,QAAQ,CAARA,MAAAA,CAAgB;IACjBC,GAAG,EAAE;MAAEC,OAAO,EADG;IACZ,CADY;IAEjBC,OAAO,EAAE;MAAEL,OAAAA,EALf;IAKa;EAFQ,CAAhBE,CAHED,CAAAA,CAAP;AAQD","sourcesContent":["import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}