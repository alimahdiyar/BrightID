{"ast":null,"code":"'use strict';\n\nimport Platform from \"../../../exports/Platform\";\nimport UIManager from \"../../../exports/UIManager\";\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction configureNext(config, onAnimationDidEnd) {\n  if (!Platform.isTesting) {\n    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd !== null && onAnimationDidEnd !== void 0 ? onAnimationDidEnd : function () {}, function () {});\n  }\n}\n\nfunction create(duration, type, property) {\n  return {\n    duration: duration,\n    create: {\n      type: type,\n      property: property\n    },\n    update: {\n      type: type\n    },\n    delete: {\n      type: type,\n      property: property\n    }\n  };\n}\n\nvar Presets = {\n  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),\n  linear: create(500, 'linear', 'opacity'),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity'\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity'\n    }\n  }\n};\nvar LayoutAnimation = {\n  configureNext: configureNext,\n  create: create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard'\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY'\n  }),\n  checkConfig: function checkConfig() {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets: Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring)\n};\nexport default LayoutAnimation;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/vendor/react-native/LayoutAnimation/index.js"],"names":["__DEV__","process","Platform","UIManager","onAnimationDidEnd","duration","create","type","property","update","delete","Presets","easeInEaseOut","linear","spring","springDamping","LayoutAnimation","configureNext","Types","Object","easeIn","easeOut","keyboard","Properties","opacity","scaleX","scaleY","scaleXY","checkConfig","console"],"mappings":"AASA;;AAEA,OAAA,QAAA;AACA,OAAA,SAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAd,YAAA;;AAEA,SAAA,aAAA,CAAA,MAAA,EAAA,iBAAA,EAAkD;EAChD,IAAI,CAACC,QAAQ,CAAb,SAAA,EAAyB;IACvBC,SAAS,CAATA,4BAAAA,CAAAA,MAAAA,EAA+CC,iBAAiB,KAAjBA,IAAAA,IAA8BA,iBAAiB,KAAK,KAApDA,CAAAA,GAAAA,iBAAAA,GAAiF,YAAY,CAA5ID,CAAAA,EAAgJ,YAAY,CAA5JA,CAAAA;EAIH;AAED;;AAAA,SAAA,MAAA,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAA0C;EACxC,OAAO;IACLE,QAAQ,EADH,QAAA;IAELC,MAAM,EAAE;MACNC,IAAI,EADE,IAAA;MAENC,QAAQ,EAJL;IAEG,CAFH;IAMLC,MAAM,EAAE;MACNF,IAAI,EAPD;IAMG,CANH;IASLG,MAAM,EAAE;MACNH,IAAI,EADE,IAAA;MAENC,QAAQ,EAXZ;IASU;EATH,CAAP;AAgBF;;AAAA,IAAIG,OAAO,GAAG;EACZC,aAAa,EAAEN,MAAM,CAAA,GAAA,EAAA,eAAA,EADT,SACS,CADT;EAEZO,MAAM,EAAEP,MAAM,CAAA,GAAA,EAAA,QAAA,EAFF,SAEE,CAFF;EAGZQ,MAAM,EAAE;IACNT,QAAQ,EADF,GAAA;IAENC,MAAM,EAAE;MACNC,IAAI,EADE,QAAA;MAENC,QAAQ,EAJJ;IAEE,CAFF;IAMNC,MAAM,EAAE;MACNF,IAAI,EADE,QAAA;MAENQ,aAAa,EART;IAME,CANF;IAUNL,MAAM,EAAE;MACNH,IAAI,EADE,QAAA;MAENC,QAAQ,EAfd;IAaY;EAVF;AAHI,CAAd;AA8BA,IAAIQ,eAAe,GAAG;EAcpBC,aAAa,EAdO,aAAA;EAmBpBX,MAAM,EAnBc,MAAA;EAoBpBY,KAAK,EAAEC,MAAM,CAANA,MAAAA,CAAc;IACnBL,MAAM,EADa,QAAA;IAEnBD,MAAM,EAFa,QAAA;IAGnBD,aAAa,EAHM,eAAA;IAInBQ,MAAM,EAJa,QAAA;IAKnBC,OAAO,EALY,SAAA;IAMnBC,QAAQ,EA1BU;EAoBC,CAAdH,CApBa;EA4BpBI,UAAU,EAAEJ,MAAM,CAANA,MAAAA,CAAc;IACxBK,OAAO,EADiB,SAAA;IAExBC,MAAM,EAFkB,QAAA;IAGxBC,MAAM,EAHkB,QAAA;IAIxBC,OAAO,EAhCW;EA4BM,CAAdR,CA5BQ;EAkCpBS,WAAW,EAAE,SAAA,WAAA,GAAuB;IAClCC,OAAO,CAAPA,KAAAA,CAAAA,qDAAAA;EAnCkB,CAAA;EAqCpBlB,OAAO,EArCa,OAAA;EAsCpBC,aAAa,EAAEK,aAAa,CAAbA,IAAAA,CAAAA,IAAAA,EAAyBN,OAAO,CAtC3B,aAsCLM,CAtCK;EAuCpBJ,MAAM,EAAEI,aAAa,CAAbA,IAAAA,CAAAA,IAAAA,EAAyBN,OAAO,CAvCpB,MAuCZM,CAvCY;EAwCpBH,MAAM,EAAEG,aAAa,CAAbA,IAAAA,CAAAA,IAAAA,EAAyBN,OAAO,CAxC1C,MAwCUM;AAxCY,CAAtB;AA0CA,eAAA,eAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport UIManager from '../../../exports/UIManager';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction configureNext(config, onAnimationDidEnd) {\n  if (!Platform.isTesting) {\n    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd !== null && onAnimationDidEnd !== void 0 ? onAnimationDidEnd : function () {}, function () {}\n    /* unused onError */\n    );\n  }\n}\n\nfunction create(duration, type, property) {\n  return {\n    duration: duration,\n    create: {\n      type: type,\n      property: property\n    },\n    update: {\n      type: type\n    },\n    delete: {\n      type: type,\n      property: property\n    }\n  };\n}\n\nvar Presets = {\n  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),\n  linear: create(500, 'linear', 'opacity'),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity'\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity'\n    }\n  }\n};\n/**\n * Automatically animates views to their new positions when the\n * next layout happens.\n *\n * A common way to use this API is to call it before calling `setState`.\n *\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\n *\n *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n */\n\nvar LayoutAnimation = {\n  /**\n   * Schedules an animation to happen on the next layout.\n   *\n   * @param config Specifies animation properties:\n   *\n   *   - `duration` in milliseconds\n   *   - `create`, `AnimationConfig` for animating in new views\n   *   - `update`, `AnimationConfig` for animating views that have been updated\n   *\n   * @param onAnimationDidEnd Called when the animation finished.\n   * Only supported on iOS.\n   * @param onError Called on error. Only supported on iOS.\n   */\n  configureNext: configureNext,\n\n  /**\n   * Helper for creating a config for `configureNext`.\n   */\n  create: create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard'\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY'\n  }),\n  checkConfig: function checkConfig() {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets: Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring)\n};\nexport default LayoutAnimation;"]},"metadata":{},"sourceType":"module"}