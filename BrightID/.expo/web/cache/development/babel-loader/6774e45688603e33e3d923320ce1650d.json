{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { NavigationHelpersContext, StackActions } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  var _super = _createSuper(StackView);\n\n  function StackView() {\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n\n      if (descriptor) {\n        var _descriptor$options = descriptor.options,\n            gestureEnabled = _descriptor$options.gestureEnabled,\n            animationEnabled = _descriptor$options.animationEnabled;\n\n        if (animationEnabled === false) {\n          return false;\n        }\n\n        return gestureEnabled !== false;\n      }\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n          closingRouteKeys = _this$state2.closingRouteKeys,\n          replacingRouteKeys = _this$state2.replacingRouteKeys;\n\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref5) {\n      var route = _ref5.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref7, closing) {\n      var route = _ref7.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStart\", function (_ref8) {\n      var route = _ref8.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEnd\", function (_ref9) {\n      var route = _ref9.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureCancel\", function (_ref10) {\n      var route = _ref10.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          navigation = _this$props3.navigation,\n          keyboardHandlingEnabled = _this$props3.keyboardHandlingEnabled,\n          _this$props3$mode = _this$props3.mode,\n          mode = _this$props3$mode === void 0 ? 'card' : _this$props3$mode,\n          _this$props3$headerMo = _this$props3.headerMode,\n          headerMode = _this$props3$headerMo === void 0 ? mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen' : _this$props3$headerMo,\n          _ = _this$props3.descriptors,\n          rest = _objectWithoutProperties(_this$props3, _excluded);\n\n      var _this$state3 = this.state,\n          routes = _this$state3.routes,\n          descriptors = _this$state3.descriptors,\n          openingRouteKeys = _this$state3.openingRouteKeys,\n          closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(NavigationHelpersContext.Provider, {\n        value: navigation\n      }, React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaConsumer, null, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              mode: mode,\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              getPreviousRoute: _this2.getPreviousRoute,\n              getGesturesEnabled: _this2.getGesturesEnabled,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              headerMode: headerMode,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest, props));\n          });\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n\n        routes = routes.slice();\n\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref11) {\n          var key = _ref11.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","isArrayEqual","a","b","it","StackView","React","Component","props","state","r","routes","previousRoutes","descriptors","previousDescriptors","acc","route","map","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","getAnimationTypeForReplace","key","gestureEnabled","animationEnabled","index","navigation","StackActions","source","target","type","data","closing","render","keyboardHandlingEnabled","mode","headerMode","Platform","_","rest","NavigationHelpersContext","value","style","styles","insets","enabled","HeaderShownContext","isParentHeaderShown","getPreviousRoute","getGesturesEnabled","onOpenRoute","onCloseRoute","onTransitionStart","onTransitionEnd","renderHeader","renderScene","onGestureStart","onGestureEnd","onGestureCancel","StyleSheet","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  StackActions,\n  StackNavigationState,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== false;\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}