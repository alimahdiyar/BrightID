{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            var _action$payload = action.payload,\n                name = _action$payload.name,\n                key = _action$payload.key,\n                params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            var route = action.payload.name && action.payload.key ? state.routes.find(function (route) {\n              return route.name === action.payload.name && route.key === action.payload.key;\n            }) : id ? state.routes.find(function (route) {\n              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              }));\n            }) : undefined;\n            var routes;\n\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push(_objectSpread(_objectSpread({}, route), {}, {\n                params: action.payload.params !== undefined ? _objectSpread(_objectSpread({}, route.params), action.payload.params) : route.params\n              }));\n            } else {\n              var _action$payload$key;\n\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n\n              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            var _index2 = -1;\n\n            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n\n            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({\n              params: action.payload.params\n            });\n\n            if (_id) {\n              _index2 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({\n                  params: route.params\n                }));\n              });\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              var _action$payload$key2;\n\n              var _routes2 = [].concat(_toConsumableArray(state.routes), [{\n                key: (_action$payload$key2 = action.payload.key) !== null && _action$payload$key2 !== void 0 ? _action$payload$key2 : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes2,\n                index: _routes2.length - 1\n              });\n            }\n\n            var _route = state.routes[_index2];\n\n            var _params;\n\n            if (action.payload.merge === false) {\n              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]), action.payload.params) : action.payload.params;\n            } else {\n              _params = action.payload.params ? _objectSpread(_objectSpread({}, _route.params), action.payload.params) : _route.params;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [_params !== _route.params ? _objectSpread(_objectSpread({}, _route), {}, {\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n\n  return router;\n}","map":{"version":3,"sources":["StackRouter.tsx"],"names":["StackActions","replace","type","payload","name","params","push","pop","count","popToTop","router","getInitialState","routeNames","routeParamList","initialRouteName","options","stale","key","nanoid","index","routes","getRehydratedState","state","route","getStateForRouteNamesChange","Math","getStateForRouteFocus","r","getStateForAction","action","i","getId","id","target","source","BaseRouter","actionCreators"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,SAAA,MAAA,QAAA,mBAAA;AACA,OAAA,UAAA;AAkFA,OAAO,IAAMA,YAAY,GAAG;EAC1BC,OAD0B,EAAA,SAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAC8B;IACtD,OAAO;MAAEC,IAAI,EAAN,SAAA;MAAmBC,OAAO,EAAE;QAAEC,IAAF,EAAA,IAAA;QAAQC,MAAAA,EAFnB;MAEW;IAA5B,CAAP;EAFwB,CAAA;EAI1BC,IAJ0B,EAAA,SAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAI2B;IACnD,OAAO;MAAEJ,IAAI,EAAN,MAAA;MAAgBC,OAAO,EAAE;QAAEC,IAAF,EAAA,IAAA;QAAQC,MAAAA,EALhB;MAKQ;IAAzB,CAAP;EALwB,CAAA;EAO1BE,GAP0B,EAAA,SAAA,GAAA,GAOc;IAApCC,IAAAA,KAAoC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAApB,CAAhBA;IACF,OAAO;MAAEN,IAAI,EAAN,KAAA;MAAeC,OAAO,EAAE;QAAEK,KAAAA,EART;MAQO;IAAxB,CAAP;EARwB,CAAA;EAU1BC,QAV0B,EAAA,SAAA,QAAA,GAUE;IAC1B,OAAO;MAAEP,IAAI,EAAb;IAAO,CAAP;EAXG;AAAqB,CAArB;AAeP,eAAe,SAAA,WAAA,CAAA,OAAA,EAAkD;EAC/D,IAAMQ,MAGL,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA;IAGCR,IAAI,EAHL,OAAA;IAKCS,eALD,EAAA,SAAA,eAAA,CAAA,IAAA,EAKiD;MAA9BC,IAAAA,UAA8B,GAAA,IAAA,CAA9BA,UAAAA;MAAAA,IAAYC,cAAkB,GAAA,IAAA,CAAlBA,cAAZD;MAChB,IAAME,gBAAgB,GACpBC,OAAO,CAAPA,gBAAAA,KAAAA,SAAAA,IACAH,UAAU,CAAVA,QAAAA,CAAoBG,OAAO,CAD3BA,gBACAH,CADAG,GAEIA,OAAO,CAFXA,gBAAAA,GAGIH,UAAU,CAJhB,CAIgB,CAJhB;MAMA,OAAO;QACLI,KAAK,EADA,KAAA;QAELd,IAAI,EAFC,OAAA;QAGLe,GAAG,EAAA,SAAA,MAAA,CAAWC,MAHT,EAGF,CAHE;QAILC,KAAK,EAJA,CAAA;QAKLP,UALK,EAAA,UAAA;QAMLQ,MAAM,EAAE,CACN;UACEH,GAAG,EAAA,GAAA,MAAA,CAAA,gBAAA,EAAA,GAAA,EAAA,MAAA,CAAyBC,MAD9B,EACK,CADL;UAEEd,IAAI,EAFN,gBAAA;UAGEC,MAAM,EAAEQ,cAAc,CAtB5B,gBAsB4B;QAHxB,CADM;MANH,CAAP;IAZH,CAAA;IA4BCQ,kBA5BD,EAAA,SAAA,kBAAA,CAAA,YAAA,EAAA,KAAA,EA4BkE;MAA9BT,IAAAA,UAA8B,GAAA,KAAA,CAA9BA,UAAAA;MAAAA,IAAYC,cAAkB,GAAA,KAAA,CAAlBA,cAAZD;MACjC,IAAIU,KAAK,GAAT,YAAA;;MAEA,IAAIA,KAAK,CAALA,KAAAA,KAAJ,KAAA,EAA2B;QACzB,OAAA,KAAA;MAGF;;MAAA,IAAMF,MAAM,GAAGE,KAAK,CAALA,MAAAA,CAAAA,MAAAA,CACJC,UAAD,KAACA,EAAD;QAAA,OAAWX,UAAU,CAAVA,QAAAA,CAAoBW,KAAK,CAApC,IAAWX,CAAX;MADKU,CAAAA,EAAAA,GAAAA,CAGVC,UAAD,KAACA,EAAD;QAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;UAGIN,GAAG,EAAEM,KAAK,CAALA,GAAAA,IAAAA,GAAAA,MAAAA,CAAgBA,KAAK,CAArBA,IAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAA8BL,MAHvC,EAGSK,CAHT;UAIIlB,MAAM,EACJQ,cAAc,CAACU,KAAK,CAApBV,IAAc,CAAdA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESA,cAAc,CAACU,KAAK,CAF7BV,IAEuB,CAFvBA,CAAAA,EAGSU,KAAK,CAHdV,MAAAA,CAAAA,GAKIU,KAAK,CAVf;QAAA,CAAA,CAAA;MAHJ,CAAeD,CAAf;;MAiBA,IAAIF,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB;QACvB,IAAMN,gBAAgB,GACpBC,OAAO,CAAPA,gBAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,gBAAAA,GAEIH,UAAU,CAHhB,CAGgB,CAHhB;QAKAQ,MAAM,CAANA,IAAAA,CAAY;UACVH,GAAG,EAAA,GAAA,MAAA,CAAA,gBAAA,EAAA,GAAA,EAAA,MAAA,CAAyBC,MADlB,EACP,CADO;UAEVd,IAAI,EAFM,gBAAA;UAGVC,MAAM,EAAEQ,cAAc,CAHxBO,gBAGwB;QAHZ,CAAZA;MAOF;;MAAA,OAAO;QACLJ,KAAK,EADA,KAAA;QAELd,IAAI,EAFC,OAAA;QAGLe,GAAG,EAAA,SAAA,MAAA,CAAWC,MAHT,EAGF,CAHE;QAILC,KAAK,EAAEC,MAAM,CAANA,MAAAA,GAJF,CAAA;QAKLR,UALK,EAAA,UAAA;QAMLQ,MAAAA,EAvEF;MAiEO,CAAP;IAjEH,CAAA;IA2ECI,2BA3ED,EAAA,SAAA,2BAAA,CAAA,KAAA,EAAA,KAAA,EA2EoE;MAA9BZ,IAAAA,UAA8B,GAAA,KAAA,CAA9BA,UAAAA;MAAAA,IAAYC,cAAkB,GAAA,KAAA,CAAlBA,cAAZD;MACnC,IAAMQ,MAAM,GAAGE,KAAK,CAALA,MAAAA,CAAAA,MAAAA,CAAqBC,UAAD,KAACA,EAAD;QAAA,OACjCX,UAAU,CAAVA,QAAAA,CAAoBW,KAAK,CADQ,IACjCX,CADiC;MAAnC,CAAeU,CAAf;;MAIA,IAAIF,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB;QACvB,IAAMN,gBAAgB,GACpBC,OAAO,CAAPA,gBAAAA,KAAAA,SAAAA,IACAH,UAAU,CAAVA,QAAAA,CAAoBG,OAAO,CAD3BA,gBACAH,CADAG,GAEIA,OAAO,CAFXA,gBAAAA,GAGIH,UAAU,CAJhB,CAIgB,CAJhB;QAMAQ,MAAM,CAANA,IAAAA,CAAY;UACVH,GAAG,EAAA,GAAA,MAAA,CAAA,gBAAA,EAAA,GAAA,EAAA,MAAA,CAAyBC,MADlB,EACP,CADO;UAEVd,IAAI,EAFM,gBAAA;UAGVC,MAAM,EAAEQ,cAAc,CAHxBO,gBAGwB;QAHZ,CAAZA;MAOF;;MAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;QAEER,UAFK,EAAP,UAAA;QAGEQ,MAHK,EAAP,MAAA;QAIED,KAAK,EAAEM,IAAI,CAAJA,GAAAA,CAASH,KAAK,CAAdG,KAAAA,EAAsBL,MAAM,CAANA,MAAAA,GAlG/B,CAkGSK;MAJT,CAAA,CAAA;IA9FH,CAAA;IAsGCC,qBAtGD,EAAA,SAAA,qBAAA,CAAA,KAAA,EAAA,GAAA,EAsGmC;MAChC,IAAMP,KAAK,GAAGG,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBK,UAAD,CAACA,EAAD;QAAA,OAAOA,CAAC,CAADA,GAAAA,KAAP,GAAA;MAArC,CAAcL,CAAd;;MAEA,IAAIH,KAAK,KAAK,CAAVA,CAAAA,IAAgBA,KAAK,KAAKG,KAAK,CAAnC,KAAA,EAA2C;QACzC,OAAA,KAAA;MAGF;;MAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;QAEEH,KAFK,EAAP,KAAA;QAGEC,MAAM,EAAEE,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAsBH,KAAK,GAhHrC,CAgHUG;MAHV,CAAA,CAAA;IA7GH,CAAA;IAoHCM,iBApHD,EAAA,SAAA,iBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAoH2C;MACxC,IAAQf,cAAR,GAA2BE,OAA3B,CAAA,cAAA;;MAEA,QAAQc,MAAM,CAAd,IAAA;QACE,KAAA,SAAA;UAAgB;YACd,IAAMV,KAAK,GACTU,MAAM,CAANA,MAAAA,KAAkBP,KAAK,CAAvBO,GAAAA,IAA+BA,MAAM,CAArCA,MAAAA,GACIP,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBK,UAAD,CAACA,EAAD;cAAA,OAAOA,CAAC,CAADA,GAAAA,KAAUE,MAAM,CAAvB,MAAA;YAD3BA,CACIP,CADJO,GAEIP,KAAK,CAHX,KAAA;;YAKA,IAAIH,KAAK,KAAK,CAAd,CAAA,EAAkB;cAChB,OAAA,IAAA;YAGF;;YAAA,IAAA,eAAA,GAA8BU,MAAM,CAApC,OAAA;YAAA,IAAQzB,IAAR,GAAA,eAAA,CAAA,IAAA;YAAA,IAAca,GAAd,GAAA,eAAA,CAAA,GAAA;YAAA,IAAmBZ,MAAnB,GAAA,eAAA,CAAA,MAAA;;YAEA,IAAI,CAACiB,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAAL,IAAKA,CAAL,EAAsC;cACpC,OAAA,IAAA;YAGF;;YAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;cAEEF,MAAM,EAAEE,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAA;gBAAA,OACvBQ,CAAC,KAADA,KAAAA,GACI;kBACEb,GAAG,EAAEA,GAAG,KAAHA,SAAAA,GAAAA,GAAAA,GAAAA,GAAAA,MAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAAqCC,MAD5C,EACOD,CADP;kBAEEb,IAFF,EAAA,IAAA;kBAGEC,MAAM,EACJQ,cAAc,CAAdA,IAAc,CAAdA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESA,cAAc,CAFvBA,IAEuB,CAFvBA,CAAAA,EAAAA,MAAAA,CAAAA,GALRiB;gBACI,CADJA,GADuB,KAAA;cAF3B,CAEUR;YAFV,CAAA,CAAA;UAoBF;;QAAA,KAAA,MAAA;UACE,IAAIA,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BO,MAAM,CAANA,OAAAA,CAA9B,IAAIP,CAAJ,EAAoD;YAClD,IAAMS,KAAK,GAAGhB,OAAO,CAAPA,cAAAA,CAAuBc,MAAM,CAANA,OAAAA,CAArC,IAAcd,CAAd;YACA,IAAMiB,EAAE,GAAGD,KAAH,KAAA,IAAGA,IAAAA,KAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,KAAK,CAAG;cAAE1B,MAAM,EAAEwB,MAAM,CAANA,OAAAA,CAA7B;YAAmB,CAAH,CAAhB;YAEA,IAAMN,KAAK,GACTM,MAAM,CAANA,OAAAA,CAAAA,IAAAA,IAAuBA,MAAM,CAANA,OAAAA,CAAvBA,GAAAA,GACIP,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CACGC,UAAD,KAACA,EAAD;cAAA,OACEA,KAAK,CAALA,IAAAA,KAAeM,MAAM,CAANA,OAAAA,CAAfN,IAAAA,IACAA,KAAK,CAALA,GAAAA,KAAcM,MAAM,CAANA,OAAAA,CAFhB,GAAA;YAFNA,CACIP,CADJO,GAMIG,EAAE,GACFV,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CACGC,UAAD,KAACA,EAAD;cAAA,OACEA,KAAK,CAALA,IAAAA,KAAeM,MAAM,CAANA,OAAAA,CAAfN,IAAAA,IACAS,EAAE,MAAKD,KAAL,KAAA,IAAKA,IAAAA,KAAL,KAAA,KAAA,CAAKA,GAAL,KAAA,CAAKA,GAAAA,KAAK,CAAG;gBAAE1B,MAAM,EAAEkB,KAAK,CAFhC;cAEiB,CAAH,CAAV,CAFJ;YAFA,CACFD,CADE,GAPR,SAAA;YAeA,IAAA,MAAA;;YAEA,IAAA,KAAA,EAAW;cACTF,MAAM,GAAGE,KAAK,CAALA,MAAAA,CAAAA,MAAAA,CAAqBK,UAAD,CAACA,EAAD;gBAAA,OAAOA,CAAC,CAADA,GAAAA,KAAUJ,KAAK,CAAtB,GAAA;cAA7BH,CAASE,CAATF;cACAA,MAAM,CAANA,IAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,EAAAA,EAAAA;gBAEEf,MAAM,EACJwB,MAAM,CAANA,OAAAA,CAAAA,MAAAA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESN,KAAK,CAFdM,MAAAA,CAAAA,EAGSA,MAAM,CAANA,OAAAA,CAHTA,MAAAA,CAAAA,GAKIN,KAAK,CAVf;cAEEH,CAAAA,CAAAA;YAFF,CAAA,MAYO;cAAA,IAAA,mBAAA;;cACLA,MAAM,GAAA,GAAA,MAAA,CAAA,kBAAA,CACDE,KAAK,CADJ,MAAA,CAAA,EAAA,CAEJ;gBACEL,GAAG,EAAA,CAAA,mBAAA,GACDY,MAAM,CAANA,OAAAA,CADC,GAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,mBAAA,GAAA,GAAA,MAAA,CACwBA,MAAM,CAANA,OAAAA,CADxB,IAAA,EAAA,GAAA,EAAA,MAAA,CAC+CX,MAFpD,EACK,CADL;gBAGEd,IAAI,EAAEyB,MAAM,CAANA,OAAAA,CAHR,IAAA;gBAIExB,MAAM,EACJQ,cAAc,CAACgB,MAAM,CAANA,OAAAA,CAAfhB,IAAc,CAAdA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESA,cAAc,CAACgB,MAAM,CAANA,OAAAA,CAFxBhB,IAEuB,CAFvBA,CAAAA,EAGSgB,MAAM,CAANA,OAAAA,CAHThB,MAAAA,CAAAA,GAKIgB,MAAM,CAANA,OAAAA,CAZVT;cAEE,CAFI,CAAA,CAANA;YAiBF;;YAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;cAEED,KAAK,EAAEC,MAAM,CAANA,MAAAA,GAFT,CAAA;cAGEA,MAAAA,EAHF;YAAA,CAAA,CAAA;UAOF;;UAAA,OAAA,IAAA;;QAEF,KAAA,KAAA;UAAY;YACV,IAAMD,MAAK,GACTU,MAAM,CAANA,MAAAA,KAAkBP,KAAK,CAAvBO,GAAAA,IAA+BA,MAAM,CAArCA,MAAAA,GACIP,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBK,UAAD,CAACA,EAAD;cAAA,OAAOA,CAAC,CAADA,GAAAA,KAAUE,MAAM,CAAvB,MAAA;YAD3BA,CACIP,CADJO,GAEIP,KAAK,CAHX,KAAA;;YAKA,IAAIH,MAAK,GAAT,CAAA,EAAe;cACb,IAAMX,KAAK,GAAGiB,IAAI,CAAJA,GAAAA,CAASN,MAAK,GAAGU,MAAM,CAANA,OAAAA,CAARV,KAAAA,GAATM,CAAAA,EAAd,CAAcA,CAAd;;cACA,IAAML,OAAM,GAAGE,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAELA,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAmBH,MAAK,GAFlC,CAEUG,CAFKA,CAAf;;cAIA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;gBAEEH,KAAK,EAAEC,OAAM,CAANA,MAAAA,GAFT,CAAA;gBAGEA,MAAAA,EAHF;cAAA,CAAA,CAAA;YAOF;;YAAA,OAAA,IAAA;UAGF;;QAAA,KAAA,YAAA;UACE,OAAOV,MAAM,CAANA,iBAAAA,CAAAA,KAAAA,EAEL;YACER,IAAI,EADN,KAAA;YAEEC,OAAO,EAAE;cAAEK,KAAK,EAAEc,KAAK,CAALA,MAAAA,CAAAA,MAAAA,GAJfZ;YAIM;UAFX,CAFKA,EAAP,OAAOA,CAAP;;QASF,KAAA,UAAA;UACE,IACEmB,MAAM,CAANA,OAAAA,CAAAA,IAAAA,KAAAA,SAAAA,IACA,CAACP,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BO,MAAM,CAANA,OAAAA,CAF7B,IAEGP,CAFH,EAGE;YACA,OAAA,IAAA;UAGF;;UAAA,IAAIO,MAAM,CAANA,OAAAA,CAAAA,GAAAA,IAAsBA,MAAM,CAANA,OAAAA,CAA1B,IAAA,EAA+C;YAE7C,IAAIV,OAAK,GAAG,CAAZ,CAAA;;YAEA,IAAMY,MAAK,GAETF,MAAM,CAANA,OAAAA,CAAAA,GAAAA,KAAAA,SAAAA,IACAA,MAAM,CAANA,OAAAA,CAAAA,IAAAA,KADAA,SAAAA,GAEId,OAAO,CAAPA,cAAAA,CAAuBc,MAAM,CAANA,OAAAA,CAF3BA,IAEId,CAFJc,GAFF,SAAA;;YAMA,IAAMG,GAAE,GAAGD,MAAH,KAAA,IAAGA,IAAAA,MAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,MAAK,CAAG;cAAE1B,MAAM,EAAEwB,MAAM,CAANA,OAAAA,CAA7B;YAAmB,CAAH,CAAhB;;YAEA,IAAA,GAAA,EAAQ;cACNV,OAAK,GAAGG,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACLC,UAAD,KAACA,EAAD;gBAAA,OACEA,KAAK,CAALA,IAAAA,KAAeM,MAAM,CAANA,OAAAA,CAAfN,IAAAA,IACAS,GAAE,MAAKD,MAAL,KAAA,IAAKA,IAAAA,MAAL,KAAA,KAAA,CAAKA,GAAL,KAAA,CAAKA,GAAAA,MAAK,CAAG;kBAAE1B,MAAM,EAAEkB,KAAK,CAFhC;gBAEiB,CAAH,CAAV,CAFJ;cAFJ,CACUD,CAARH;YADF,CAAA,MAMO,IACJG,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAAA,IAAAA,KAAmCO,MAAM,CAANA,OAAAA,CAAnCP,IAAAA,IACCO,MAAM,CAANA,OAAAA,CAAAA,GAAAA,KADDP,SAAAA,IAEDA,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAAA,GAAAA,KAAkCO,MAAM,CAANA,OAAAA,CAH7B,GAAA,EAIL;cACAV,OAAK,GAAGG,KAAK,CALR,KAKLH;YALK,CAAA,MAMA;cACL,KAAK,IAAIW,CAAC,GAAGR,KAAK,CAALA,MAAAA,CAAAA,MAAAA,GAAb,CAAA,EAAsCQ,CAAC,IAAvC,CAAA,EAA8CA,CAA9C,EAAA,EAAmD;gBACjD,IACGR,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAAAA,IAAAA,KAAyBO,MAAM,CAANA,OAAAA,CAAzBP,IAAAA,IACCO,MAAM,CAANA,OAAAA,CAAAA,GAAAA,KADDP,SAAAA,IAEDA,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAAAA,GAAAA,KAAwBO,MAAM,CAANA,OAAAA,CAH1B,GAAA,EAIE;kBACAV,OAAK,GAALA,CAAAA;kBACA;gBAEH;cACF;YAED;;YAAA,IACEA,OAAK,KAAK,CAAVA,CAAAA,IACAU,MAAM,CAANA,OAAAA,CADAV,GAAAA,IAEAU,MAAM,CAANA,OAAAA,CAAAA,IAAAA,KAHF,SAAA,EAIE;cACA,OAAA,IAAA;YAGF;;YAAA,IAAIV,OAAK,KAAK,CAAVA,CAAAA,IAAgBU,MAAM,CAANA,OAAAA,CAAAA,IAAAA,KAApB,SAAA,EAAuD;cAAA,IAAA,oBAAA;;cACrD,IAAMT,QAAM,GAAA,GAAA,MAAA,CAAA,kBAAA,CACPE,KAAK,CADE,MAAA,CAAA,EAAA,CAEV;gBACEL,GAAG,EAAA,CAAA,oBAAA,GACDY,MAAM,CAANA,OAAAA,CADC,GAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,oBAAA,GAAA,GAAA,MAAA,CACwBA,MAAM,CAANA,OAAAA,CADxB,IAAA,EAAA,GAAA,EAAA,MAAA,CAC+CX,MAFpD,EACK,CADL;gBAGEd,IAAI,EAAEyB,MAAM,CAANA,OAAAA,CAHR,IAAA;gBAIExB,MAAM,EACJQ,cAAc,CAACgB,MAAM,CAANA,OAAAA,CAAfhB,IAAc,CAAdA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESA,cAAc,CAACgB,MAAM,CAANA,OAAAA,CAFxBhB,IAEuB,CAFvBA,CAAAA,EAGSgB,MAAM,CAANA,OAAAA,CAHThB,MAAAA,CAAAA,GAKIgB,MAAM,CAANA,OAAAA,CAZV;cAEE,CAFU,CAAA,CAAZ;;cAgBA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;gBAEET,MAFK,EAAP,QAAA;gBAGED,KAAK,EAAEC,QAAM,CAANA,MAAAA,GAHT;cAAA,CAAA,CAAA;YAOF;;YAAA,IAAMG,MAAK,GAAGD,KAAK,CAALA,MAAAA,CAAd,OAAcA,CAAd;;YAEA,IAAA,OAAA;;YAEA,IAAIO,MAAM,CAANA,OAAAA,CAAAA,KAAAA,KAAJ,KAAA,EAAoC;cAClCxB,OAAM,GACJQ,cAAc,CAACU,MAAK,CAApBV,IAAc,CAAdA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESA,cAAc,CAACU,MAAK,CAF7BV,IAEuB,CAFvBA,CAAAA,EAGSgB,MAAM,CAANA,OAAAA,CAHThB,MAAAA,CAAAA,GAKIgB,MAAM,CAANA,OAAAA,CAPR,MACExB;YADF,CAAA,MAQO;cACLA,OAAM,GAAGwB,MAAM,CAANA,OAAAA,CAAAA,MAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAEAN,MAAK,CAFLM,MAAAA,CAAAA,EAGAA,MAAM,CAANA,OAAAA,CAHAA,MAAAA,CAAAA,GAKLN,MAAK,CALTlB,MAAAA;YAQF;;YAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;cAEEc,KAFK,EAAP,OAAA;cAGEC,MAAM,EAAA,GAAA,MAAA,CAAA,kBAAA,CACDE,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EADC,OACDA,CADC,CAAA,EAAA,CAEJjB,OAAM,KAAKkB,MAAK,CAAhBlB,MAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAAA,EAAAA,EAAAA,EAAAA;gBACgBA,MAAAA,EADhBA;cAAAA,CAAAA,CAAAA,GAEIiB,KAAK,CAALA,MAAAA,CAPR,OAOQA,CAJA,CAAA;YAHR,CAAA,CAAA;UAYF;;UAAA,OAAA,IAAA;;QAEF,KAAA,SAAA;UACE,IAAIA,KAAK,CAALA,KAAAA,GAAJ,CAAA,EAAqB;YACnB,OAAOZ,MAAM,CAANA,iBAAAA,CAAAA,KAAAA,EAEL;cACER,IAAI,EADN,KAAA;cAEEC,OAAO,EAAE;gBAAEK,KAAK,EAFlB;cAEW,CAFX;cAGEyB,MAAM,EAAEJ,MAAM,CAHhB,MAAA;cAIEK,MAAM,EAAEL,MAAM,CANXnB;YAEL,CAFKA,EAAP,OAAOA,CAAP;UAYF;;UAAA,OAAA,IAAA;;QAEF;UACE,OAAOyB,UAAU,CAAVA,iBAAAA,CAAAA,KAAAA,EA1XX,MA0XWA,CAAP;MAnQJ;IAvHH,CAAA;IA8XCC,cAAc,EAjYhB;EAGC,CAAA,CAHD;;EAoYA,OAAA,MAAA;AACD","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<\n  ParamList extends ParamListBase\n> = NavigationState<ParamList> & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route =\n              action.payload.name && action.payload.key\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      route.key === action.payload.key\n                  )\n                : id\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      id === getId?.({ params: route.params })\n                  )\n                : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  action.payload.params !== undefined\n                    ? {\n                        ...route.params,\n                        ...action.payload.params,\n                      }\n                    : route.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge === false) {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            } else {\n              params = action.payload.params\n                ? {\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params\n                  ? { ...route, params }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}