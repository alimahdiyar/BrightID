{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useContext, useEffect, useLayoutEffect, useState } from 'react';\nimport { useFocusEffect, useNavigation, useRoute } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../store\";\nimport ConnectionTestButton from \"../../utils/connectionTestButton\";\nimport { getVerificationPatches } from \"../../utils/verifications\";\nimport { selectConnectionById, selectAllConnections, setConnectionVerifications } from \"../../reducer/connectionsSlice\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport ConnectionScreen from \"./ConnectionScreen\";\nimport stringSimilarity from \"../../utils/stringSimilarity\";\nimport { MAX_CONNECTIONS_DUPLICATE_SEARCH, POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ConnectionScreenController() {\n  var navigation = useNavigation();\n  var route = useRoute();\n  var dispatch = useDispatch();\n  var connectionId = route.params.connectionId;\n  var api = useContext(NodeApiContext);\n  var connection = useSelector(function (state) {\n    return selectConnectionById(state, connectionId);\n  });\n  var myConnections = useSelector(selectAllConnections);\n  var myGroups = useSelector(function (state) {\n    return state.groups.groups;\n  });\n  var me = useSelector(function (state) {\n    return state.user;\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      mutualGroups = _useState2[0],\n      setMutualGroups = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mutualConnections = _useState4[0],\n      setMutualConnections = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      recoveryConnections = _useState6[0],\n      setRecoveryConnections = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      verificationsTexts = _useState8[0],\n      setVerificationsTexts = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      possibleDuplicates = _useState10[0],\n      setPossibleDuplicates = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      connectedAt = _useState12[0],\n      setConnectedAt = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var _useState15 = useState(undefined),\n      _useState16 = _slicedToArray(_useState15, 2),\n      connectionProfile = _useState16[0],\n      setConnectionProfile = _useState16[1];\n\n  useFocusEffect(useCallback(function () {\n    var fetchData = function _callee(connectionId) {\n      var profile, texts;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              console.log(\"fetching connection info for \" + connectionId);\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(api.getProfile(connectionId));\n\n            case 5:\n              profile = _context.sent;\n              setConnectionProfile(profile);\n              console.log(\"Updating verifications for \" + profile.id);\n              texts = getVerificationPatches(profile.verifications).map(function (patch) {\n                return patch.text;\n              });\n              setVerificationsTexts(texts);\n              dispatch(setConnectionVerifications({\n                id: connectionId,\n                verifications: profile.verifications\n              }));\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(\"Error getting profile for \" + connectionId + \": \" + _context.t0);\n\n            case 16:\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    };\n\n    if (connectionId !== undefined) {\n      fetchData(connectionId);\n    }\n  }, [api, connectionId, dispatch]));\n  useEffect(function () {\n    if (connectionProfile) {\n      console.log(\"Updating mutual groups etc. for \" + connectionProfile.id);\n      setConnectedAt(connectionProfile.connectedAt);\n      setMutualConnections(myConnections.filter(function (conn) {\n        return connectionProfile.mutualConnections.includes(conn.id);\n      }));\n      setMutualGroups(myGroups.filter(function (g) {\n        return connectionProfile.mutualGroups.includes(g.id);\n      }));\n\n      var _recoveryConnections = connectionProfile.recoveryConnections.map(function (rc) {\n        if (rc.id === me.id) {\n          rc.conn = me;\n        } else {\n          rc.conn = myConnections.find(function (c) {\n            return rc.id === c.id;\n          });\n        }\n\n        return rc;\n      });\n\n      setRecoveryConnections(_recoveryConnections);\n    }\n  }, [connectionProfile, me, myConnections, myGroups]);\n  useEffect(function () {\n    console.log(\"Searching possible duplicates for \" + (connection == null ? void 0 : connection.id));\n\n    if (connection && myConnections.length <= MAX_CONNECTIONS_DUPLICATE_SEARCH) {\n      setPossibleDuplicates(myConnections.filter(function (conn) {\n        return stringSimilarity(conn.name, connection.name) >= POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE && conn.id !== connection.id;\n      }));\n    } else {\n      setPossibleDuplicates([]);\n    }\n  }, [connection, myConnections]);\n  useEffect(function () {\n    if (!connection) {\n      navigation.goBack();\n    }\n  }, [navigation, connection]);\n  useLayoutEffect(function () {\n    if (__DEV__) {\n      navigation.setOptions({\n        headerRight: function headerRight() {\n          return _jsx(ConnectionTestButton, {\n            connectionId: connectionId\n          });\n        }\n      });\n    }\n  }, [navigation, connectionId]);\n\n  if (!connection) {\n    return null;\n  }\n\n  return _jsx(ConnectionScreen, {\n    connection: connection,\n    verificationsTexts: verificationsTexts,\n    loading: loading,\n    connectedAt: connectedAt,\n    mutualConnections: mutualConnections,\n    mutualGroups: mutualGroups,\n    recoveryConnections: recoveryConnections,\n    possibleDuplicates: possibleDuplicates\n  });\n}\n\nexport default ConnectionScreenController;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/ConnectionScreenController.tsx"],"names":["navigation","useNavigation","route","useRoute","dispatch","useDispatch","connectionId","api","useContext","connection","useSelector","selectConnectionById","myConnections","myGroups","state","me","mutualGroups","setMutualGroups","useState","mutualConnections","setMutualConnections","recoveryConnections","setRecoveryConnections","verificationsTexts","setVerificationsTexts","possibleDuplicates","setPossibleDuplicates","connectedAt","setConnectedAt","loading","setLoading","connectionProfile","setConnectionProfile","useFocusEffect","useCallback","fetchData","console","profile","texts","getVerificationPatches","patch","setConnectionVerifications","id","verifications","useEffect","conn","g","rc","c","stringSimilarity","useLayoutEffect","headerRight"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  useFocusEffect,\n  useNavigation,\n  useRoute,\n  RouteProp,\n} from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport ConnectionTestButton from '@/utils/connectionTestButton';\nimport { getVerificationPatches } from '@/utils/verifications';\nimport {\n  selectConnectionById,\n  selectAllConnections,\n  setConnectionVerifications,\n} from '@/reducer/connectionsSlice';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport ConnectionScreen from './ConnectionScreen';\nimport stringSimilarity from '@/utils/stringSimilarity';\nimport {\n  MAX_CONNECTIONS_DUPLICATE_SEARCH,\n  POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE,\n} from '@/utils/constants';\n\ntype ConnectionRoute = RouteProp<\n  { Connection: { connectionId: string } },\n  'Connection'\n>;\n\ntype DetailedRecoveryConnection = RecoveryConnection & { conn?: Connection };\n\nfunction ConnectionScreenController() {\n  const navigation = useNavigation();\n  const route = useRoute<ConnectionRoute>();\n  const dispatch = useDispatch();\n  const { connectionId } = route.params;\n  const api = useContext(NodeApiContext);\n  const connection = useSelector((state: State) =>\n    selectConnectionById(state, connectionId),\n  );\n  const myConnections = useSelector(selectAllConnections);\n  const myGroups = useSelector((state: State) => state.groups.groups);\n  const me = useSelector((state: State) => state.user);\n  const [mutualGroups, setMutualGroups] = useState<Array<Group>>([]);\n  const [mutualConnections, setMutualConnections] = useState<Array<Connection>>(\n    [],\n  );\n  const [recoveryConnections, setRecoveryConnections] = useState<\n    Array<DetailedRecoveryConnection>\n  >([]);\n  const [verificationsTexts, setVerificationsTexts] = useState<Array<string>>(\n    [],\n  );\n  const [possibleDuplicates, setPossibleDuplicates] = useState<\n    Array<Connection>\n  >([]);\n  const [connectedAt, setConnectedAt] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [connectionProfile, setConnectionProfile] = useState<\n    ProfileInfo | undefined\n  >(undefined);\n\n  useFocusEffect(\n    useCallback(() => {\n      const fetchData = async (connectionId) => {\n        setLoading(true);\n        console.log(`fetching connection info for ${connectionId}`);\n        try {\n          const profile: ProfileInfo = await api.getProfile(connectionId);\n          setConnectionProfile(profile);\n          console.log(`Updating verifications for ${profile.id}`);\n          const texts = getVerificationPatches(profile.verifications).map(\n            (patch) => patch.text,\n          );\n          setVerificationsTexts(texts);\n          // TODO: This causes unnecessary rerender by replacing the verifications array in redux\n          //  store, although contents are most likely identical\n          dispatch(\n            setConnectionVerifications({\n              id: connectionId,\n              verifications: profile.verifications,\n            }),\n          );\n        } catch (e) {\n          console.log(`Error getting profile for ${connectionId}: ${e}`);\n        }\n        setLoading(false);\n      };\n      if (connectionId !== undefined) {\n        fetchData(connectionId);\n      }\n    }, [api, connectionId, dispatch]),\n  );\n\n  // Update mutual groups etc. in local state\n  useEffect(() => {\n    if (connectionProfile) {\n      console.log(`Updating mutual groups etc. for ${connectionProfile.id}`);\n      setConnectedAt(connectionProfile.connectedAt);\n      setMutualConnections(\n        myConnections.filter((conn) => {\n          return connectionProfile.mutualConnections.includes(conn.id);\n        }),\n      );\n      setMutualGroups(\n        myGroups.filter((g) => {\n          return connectionProfile.mutualGroups.includes(g.id);\n        }),\n      );\n      const recoveryConnections: Array<DetailedRecoveryConnection> =\n        connectionProfile.recoveryConnections.map(\n          (rc: DetailedRecoveryConnection) => {\n            if (rc.id === me.id) {\n              rc.conn = me;\n            } else {\n              rc.conn = myConnections.find((c) => rc.id === c.id);\n            }\n            return rc;\n          },\n        );\n      setRecoveryConnections(recoveryConnections);\n    }\n  }, [connectionProfile, me, myConnections, myGroups]);\n\n  // get possible duplicates\n  useEffect(() => {\n    console.log(`Searching possible duplicates for ${connection?.id}`);\n    // Prevent high system load: Don't try to search duplicates if we have too many connections\n    if (\n      connection &&\n      myConnections.length <= MAX_CONNECTIONS_DUPLICATE_SEARCH\n    ) {\n      setPossibleDuplicates(\n        myConnections.filter(\n          (conn) =>\n            stringSimilarity(conn.name, connection.name) >=\n              POSSIBLE_DUPLICATE_STRING_SIMILARITY_RATE &&\n            conn.id !== connection.id,\n        ),\n      );\n    } else {\n      setPossibleDuplicates([]);\n    }\n  }, [connection, myConnections]);\n\n  useEffect(() => {\n    if (!connection) {\n      // connection not there anymore.\n      navigation.goBack();\n    }\n  }, [navigation, connection]);\n\n  // Add fake user functionality in DEV mode\n  useLayoutEffect(() => {\n    if (__DEV__) {\n      navigation.setOptions({\n        headerRight: () => <ConnectionTestButton connectionId={connectionId} />,\n      });\n    }\n  }, [navigation, connectionId]);\n\n  if (!connection) {\n    return null;\n  }\n\n  return (\n    <ConnectionScreen\n      connection={connection}\n      verificationsTexts={verificationsTexts}\n      loading={loading}\n      connectedAt={connectedAt}\n      mutualConnections={mutualConnections}\n      mutualGroups={mutualGroups}\n      recoveryConnections={recoveryConnections}\n      possibleDuplicates={possibleDuplicates}\n    />\n  );\n}\n\nexport default ConnectionScreenController;\n"]},"metadata":{},"sourceType":"module"}