{"ast":null,"code":"'use strict';\n\nimport InteractionManager from \"../../../exports/InteractionManager\";\nimport TouchHistoryMath from \"../TouchHistoryMath\";\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\nvar PanResponder = {\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    gestureState._accountsForMovesUpTo = 0;\n  },\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n  create: function create(config) {\n    var interactionState = {\n      handle: null,\n      shouldCancelClick: false,\n      timeout: null\n    };\n    var gestureState = {\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory;\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        if (interactionState.timeout) {\n          clearInteractionTimeout(interactionState);\n        }\n\n        interactionState.shouldCancelClick = true;\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        }\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject: function onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(event) {\n        var touchHistory = event.touchHistory;\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      },\n      onClickCapture: function onClickCapture(event) {\n        if (interactionState.shouldCancelClick === true) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nfunction clearInteractionTimeout(interactionState) {\n  clearTimeout(interactionState.timeout);\n}\n\nfunction setInteractionTimeout(interactionState) {\n  interactionState.timeout = setTimeout(function () {\n    interactionState.shouldCancelClick = false;\n  }, 250);\n}\n\nexport default PanResponder;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js"],"names":["currentCentroidXOfTouchesChangedAfter","TouchHistoryMath","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","create","interactionState","handle","shouldCancelClick","timeout","stateID","Math","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","panHandlers","onStartShouldSetResponder","config","onMoveShouldSetResponder","onStartShouldSetResponderCapture","event","onMoveShouldSetResponderCapture","onResponderGrant","InteractionManager","clearInteractionTimeout","onResponderReject","clearInteractionHandle","onResponderRelease","setInteractionTimeout","onResponderStart","onResponderMove","onResponderEnd","onResponderTerminate","onResponderTerminationRequest","onClickCapture","getInteractionHandle","callback","clearTimeout","setTimeout"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null,\n      shouldCancelClick: false,\n      timeout: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        if (interactionState.timeout) {\n          clearInteractionTimeout(interactionState);\n        }\n\n        interactionState.shouldCancelClick = true;\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject: function onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      },\n      // We do not want to trigger 'click' activated gestures or native behaviors\n      // on any pan target that is under a mouse cursor when it is released.\n      // Browsers will natively cancel 'click' events on a target if a non-mouse\n      // active pointer moves.\n      onClickCapture: function onClickCapture(event) {\n        if (interactionState.shouldCancelClick === true) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nfunction clearInteractionTimeout(interactionState) {\n  clearTimeout(interactionState.timeout);\n}\n\nfunction setInteractionTimeout(interactionState) {\n  interactionState.timeout = setTimeout(function () {\n    interactionState.shouldCancelClick = false;\n  }, 250);\n}\n\nexport default PanResponder;"]},"metadata":{},"sourceType":"module"}