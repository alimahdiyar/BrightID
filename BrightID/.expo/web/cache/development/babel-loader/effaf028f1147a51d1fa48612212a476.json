{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport i18next from 'i18next';\nimport store from \"../store\";\nimport { updateLinkedContext, addConnection, updateMemberships, updateOperation, selectPendingOperations } from \"../actions\";\nimport { checkTasks } from \"../components/Tasks/TasksSlice\";\nimport { operation_states, OPERATION_TRACE_TIME } from \"./constants\";\nimport { NodeApi } from \"../api/brightId\";\n\nvar handleOpUpdate = function handleOpUpdate(store, op, state, result, api) {\n  var showDefaultError = false;\n\n  switch (op.name) {\n    case 'Link ContextId':\n      store.dispatch(updateLinkedContext({\n        context: op.context,\n        contextId: op.contextId,\n        state: state\n      }));\n\n      if (state === operation_states.APPLIED) {\n        Alert.alert(i18next.t('apps.alert.title.linkSuccess'), i18next.t('apps.alert.text.linkSuccess', {\n          context: \"\" + op.context\n        }));\n      } else {\n        Alert.alert(i18next.t('apps.alert.title.linkFailure'), i18next.t('apps.alert.text.linkFailure', {\n          context: \"\" + op.context,\n          result: \"\" + result.message\n        }));\n      }\n\n      break;\n\n    case 'Connect':\n      if (op.id1 !== store.getState().user.id) {\n        break;\n      }\n\n      if (state === operation_states.APPLIED) {\n        store.dispatch(addConnection({\n          id: op.id2,\n          status: 'verified'\n        }));\n      } else {\n        api.getProfile(op.id2).then(function (profile) {\n          var _profile$reports$find;\n\n          var conn = {\n            id: profile.id,\n            level: profile.level,\n            timestamp: profile.connectedAt,\n            reportReason: (_profile$reports$find = profile.reports.find(function (r) {\n              return r.id === op.id1;\n            })) == null ? void 0 : _profile$reports$find.reason\n          };\n          store.dispatch(addConnection(conn));\n        });\n        showDefaultError = true;\n      }\n\n      break;\n\n    case 'Add Group':\n    case 'Add Membership':\n    case 'Remove Membership':\n      if (state === operation_states.FAILED) {\n        if (op.id && op.id !== store.getState().user.id) {\n          showDefaultError = false;\n        } else {\n          showDefaultError = true;\n          api.getMemberships(op.id).then(function (memberships) {\n            store.dispatch(updateMemberships(memberships));\n          });\n        }\n      }\n\n      break;\n\n    default:\n      if (state === operation_states.FAILED) {\n        showDefaultError = true;\n      }\n\n  }\n\n  if (showDefaultError) {\n    Alert.alert(i18next.t('common.alert.error'), i18next.t('common.alert.text.failedOp', {\n      name: op.name,\n      message: result.message\n    }));\n  }\n};\n\nexport var pollOperations = function _callee(api) {\n  var operations, shouldUpdateTasks, _iterator, _step, op, queryApi, id, secretKey, _await$queryApi$getOp, state, result;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          operations = selectPendingOperations(store.getState());\n          shouldUpdateTasks = false;\n          _context.prev = 2;\n          _iterator = _createForOfIteratorHelperLoose(operations);\n\n        case 4:\n          if ((_step = _iterator()).done) {\n            _context.next = 30;\n            break;\n          }\n\n          op = _step.value;\n          queryApi = api;\n\n          if (op.apiUrl) {\n            id = store.getState().user.id;\n            secretKey = store.getState().keypair.secretKey;\n            queryApi = new NodeApi({\n              url: op.apiUrl,\n              id: id,\n              secretKey: secretKey\n            });\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(queryApi.getOperationState(op.hash));\n\n        case 10:\n          _await$queryApi$getOp = _context.sent;\n          state = _await$queryApi$getOp.state;\n          result = _await$queryApi$getOp.result;\n\n          if (!(op.state !== state)) {\n            _context.next = 27;\n            break;\n          }\n\n          _context.t0 = state;\n          _context.next = _context.t0 === operation_states.UNKNOWN ? 17 : _context.t0 === operation_states.INIT ? 19 : _context.t0 === operation_states.SENT ? 19 : _context.t0 === operation_states.APPLIED ? 20 : _context.t0 === operation_states.FAILED ? 20 : 22;\n          break;\n\n        case 17:\n          console.log(\"operation \" + op.name + \" (\" + op.hash + \") unknown on server\");\n          return _context.abrupt(\"break\", 23);\n\n        case 19:\n          return _context.abrupt(\"break\", 23);\n\n        case 20:\n          handleOpUpdate(store, op, state, result, api);\n          return _context.abrupt(\"break\", 23);\n\n        case 22:\n          console.log(\"Op \" + op.name + \" (\" + op.hash + \") has invalid state '\" + state + \"'!\");\n\n        case 23:\n          store.dispatch(updateOperation({\n            id: op.hash,\n            changes: {\n              state: state\n            }\n          }));\n\n          if (state === operation_states.APPLIED) {\n            shouldUpdateTasks = true;\n          }\n\n          _context.next = 28;\n          break;\n\n        case 27:\n          if ((op.postTimestamp || op.timestamp) + OPERATION_TRACE_TIME < Date.now()) {\n            store.dispatch(updateOperation({\n              id: op.hash,\n              changes: {\n                state: operation_states.EXPIRED\n              }\n            }));\n          }\n\n        case 28:\n          _context.next = 4;\n          break;\n\n        case 30:\n          _context.next = 35;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t1 = _context[\"catch\"](2);\n\n          if (_context.t1 instanceof Error) {\n            console.warn(_context.t1.message);\n          } else {\n            console.warn(_context.t1);\n          }\n\n        case 35:\n          _context.prev = 35;\n\n          if (shouldUpdateTasks) {\n            store.dispatch(checkTasks());\n          }\n\n          return _context.finish(35);\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 32, 35, 38]], Promise);\n};","map":{"version":3,"names":["i18next","store","updateLinkedContext","addConnection","updateMemberships","updateOperation","selectPendingOperations","checkTasks","operation_states","OPERATION_TRACE_TIME","NodeApi","handleOpUpdate","op","state","result","api","showDefaultError","name","dispatch","context","contextId","APPLIED","Alert","alert","t","message","id1","getState","user","id","id2","status","getProfile","then","profile","conn","level","timestamp","connectedAt","reportReason","reports","find","r","reason","FAILED","getMemberships","memberships","pollOperations","operations","shouldUpdateTasks","queryApi","apiUrl","secretKey","keypair","url","getOperationState","hash","UNKNOWN","INIT","SENT","console","log","changes","postTimestamp","Date","now","EXPIRED","Error","warn"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/operations.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport i18next from 'i18next';\nimport store from '@/store';\nimport {\n  updateLinkedContext,\n  addConnection,\n  updateMemberships,\n  updateOperation,\n  selectPendingOperations,\n} from '@/actions';\nimport { checkTasks } from '@/components/Tasks/TasksSlice';\nimport { operation_states, OPERATION_TRACE_TIME } from '@/utils/constants';\nimport { NodeApi } from '@/api/brightId';\n\nconst handleOpUpdate = (store, op, state, result, api) => {\n  let showDefaultError = false;\n  switch (op.name) {\n    case 'Link ContextId':\n      store.dispatch(\n        updateLinkedContext({\n          context: op.context,\n          contextId: op.contextId,\n          state,\n        }),\n      );\n      if (state === operation_states.APPLIED) {\n        Alert.alert(\n          i18next.t('apps.alert.title.linkSuccess'),\n          i18next.t('apps.alert.text.linkSuccess', {\n            context: `${op.context}`,\n          }),\n        );\n      } else {\n        Alert.alert(\n          i18next.t('apps.alert.title.linkFailure'),\n          i18next.t('apps.alert.text.linkFailure', {\n            context: `${op.context}`,\n            result: `${result.message}`,\n          }),\n        );\n      }\n      break;\n\n    case 'Connect':\n      if (op.id1 !== store.getState().user.id) {\n        // ignore other side of dummy test connections\n        break;\n      }\n      if (state === operation_states.APPLIED) {\n        store.dispatch(addConnection({ id: op.id2, status: 'verified' }));\n      } else {\n        api.getProfile(op.id2).then((profile) => {\n          const conn = {\n            id: profile.id,\n            level: profile.level,\n            timestamp: profile.connectedAt,\n            reportReason: profile.reports.find((r) => r.id === op.id1)?.reason,\n          };\n          store.dispatch(addConnection(conn));\n        });\n        showDefaultError = true;\n      }\n      break;\n\n    case 'Add Group':\n    case 'Add Membership':\n    case 'Remove Membership':\n      if (state === operation_states.FAILED) {\n        if (op.id && op.id !== store.getState().user.id) {\n          // the operation was triggered by e2e-tests, using a fake userID. Ignore error.\n          showDefaultError = false;\n        } else {\n          showDefaultError = true;\n          api.getMemberships(op.id).then((memberships) => {\n            store.dispatch(updateMemberships(memberships));\n          });\n        }\n      }\n      break;\n    default:\n      if (state === operation_states.FAILED) {\n        showDefaultError = true;\n      }\n  }\n\n  if (showDefaultError) {\n    Alert.alert(\n      i18next.t('common.alert.error'),\n      i18next.t('common.alert.text.failedOp', {\n        name: op.name,\n        message: result.message,\n      }),\n    );\n  }\n};\n\nexport const pollOperations = async (api) => {\n  const operations = selectPendingOperations(store.getState());\n  let shouldUpdateTasks = false;\n  try {\n    for (const op of operations) {\n      let queryApi = api;\n      if (op.apiUrl) {\n        // If the op has an apiUrl attached, use that instead of the default one.\n        // Background: Some operations like \"link context\" require to query a specific\n        // api endpoint as the op is only known on that node\n        const { id } = store.getState().user;\n        const { secretKey } = store.getState().keypair;\n        queryApi = new NodeApi({ url: op.apiUrl, id, secretKey });\n      }\n      const { state, result } = await queryApi.getOperationState(op.hash);\n\n      if (op.state !== state) {\n        switch (state) {\n          case operation_states.UNKNOWN:\n            // Op not found on server. It might appear in a future poll cycle, so do nothing.\n            console.log(`operation ${op.name} (${op.hash}) unknown on server`);\n            break;\n          case operation_states.INIT:\n          case operation_states.SENT:\n            // Op still waiting to be processed. Do nothing.\n            break;\n          case operation_states.APPLIED:\n          case operation_states.FAILED:\n            handleOpUpdate(store, op, state, result, api);\n            break;\n          default:\n            console.log(\n              `Op ${op.name} (${op.hash}) has invalid state '${state}'!`,\n            );\n        }\n        store.dispatch(updateOperation({ id: op.hash, changes: { state } }));\n        if (state === operation_states.APPLIED) {\n          // if an op was applied we should check achievements\n          shouldUpdateTasks = true;\n        }\n      } else {\n        // stop polling for op if trace time is expired\n        if (\n          (op.postTimestamp || op.timestamp) + OPERATION_TRACE_TIME <\n          Date.now()\n        ) {\n          store.dispatch(\n            updateOperation({\n              id: op.hash,\n              changes: { state: operation_states.EXPIRED },\n            }),\n          );\n        }\n      }\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      console.warn(err.message);\n    } else {\n      console.warn(err);\n    }\n  } finally {\n    if (shouldUpdateTasks) {\n      store.dispatch(checkTasks());\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}