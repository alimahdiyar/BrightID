{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport createElement from \"../createElement\";\nimport css from \"../StyleSheet/css\";\nimport * as forwardedProps from \"../../modules/forwardedProps\";\nimport pick from \"../../modules/pick\";\nimport useElementLayout from \"../../modules/useElementLayout\";\nimport useLayoutEffect from \"../../modules/useLayoutEffect\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePlatformMethods from \"../../modules/usePlatformMethods\";\nimport useResponderEvents from \"../../modules/useResponderEvents\";\nimport StyleSheet from \"../StyleSheet\";\nimport TextInputState from \"../../modules/TextInputState\";\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, forwardedProps.defaultProps), forwardedProps.accessibilityProps), forwardedProps.clickProps), forwardedProps.focusProps), forwardedProps.keyboardProps), forwardedProps.mouseProps), forwardedProps.touchProps), forwardedProps.styleProps), {}, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n};\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = React.forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(function () {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        hostNode.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n  var style = StyleSheet.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList;\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  return createElement(component, supportedProps);\n});\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default TextInput;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/exports/TextInput/index.js"],"names":["keys","Object","symbols","i","arguments","source","ownKeys","_defineProperty","key","value","enumerable","configurable","writable","obj","isSelectionStale","selectionEnd","node","selectionStart","start","selection","end","setSelection","forwardPropsList","_objectSpread","forwardedProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","type","pickProps","pick","nativeEvent","focusTimeout","TextInput","React","_props$autoCapitalize","props","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","inputMode","dimensions","height","width","hostRef","handleContentSizeChange","hostNode","newHeight","newWidth","contentSize","imperativeRef","TextInputState","e","text","clearTimeout","setTimeout","blurOnSubmitDefault","shouldBlurOnSubmit","isComposing","isEventComposing","useLayoutEffect","document","component","classList","classes","style","StyleSheet","useElementLayout","useResponderEvents","supportedProps","platformMethodsRef","usePlatformMethods","setRef","useMergeRefs","createElement","css","textinput","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport css from '../StyleSheet/css';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, forwardedProps.defaultProps), forwardedProps.accessibilityProps), forwardedProps.clickProps), forwardedProps.focusProps), forwardedProps.keyboardProps), forwardedProps.mouseProps), forwardedProps.touchProps), forwardedProps.styleProps), {}, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n}; // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      // TextInput needs to add more methods to the hostNode in addition to those\n      // added by `usePlatformMethods`. This is temporarily until an API like\n      // `TextInput.clear(hostRef)` is added to React Native.\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(function () {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\n\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        hostNode.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n  var style = StyleSheet.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  return createElement(component, supportedProps);\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default TextInput;"]},"metadata":{},"sourceType":"module"}