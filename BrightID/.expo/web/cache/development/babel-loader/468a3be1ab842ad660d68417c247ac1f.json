{"ast":null,"code":"import * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport Header from \"./Header\";\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      gestureDirection = _ref.gestureDirection,\n      styleInterpolator = _ref.styleInterpolator,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentPreviousScene = React.useContext(PreviousSceneContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _getPreviousScene;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var _ref2 = scene.descriptor.options || {},\n        header = _ref2.header,\n        _ref2$headerShown = _ref2.headerShown,\n        headerShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n        headerTransparent = _ref2.headerTransparent;\n\n    if (!headerShown) {\n      return null;\n    }\n\n    var isFocused = focusedRoute.key === scene.route.key;\n    var previous = (_getPreviousScene = getPreviousScene({\n      route: scene.route\n    })) !== null && _getPreviousScene !== void 0 ? _getPreviousScene : parentPreviousScene;\n    var previousScene = self[i - 1];\n    var nextScene = self[i + 1];\n\n    var _ref3 = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {},\n        _ref3$headerShown = _ref3.headerShown,\n        previousHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown;\n\n    var _ref4 = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {},\n        _ref4$headerShown = _ref4.headerShown,\n        nextHeaderShown = _ref4$headerShown === void 0 ? true : _ref4$headerShown;\n\n    var isHeaderStatic = previousHeaderShown === false && !nextScene || nextHeaderShown === false;\n    var props = {\n      mode: mode,\n      layout: layout,\n      insets: insets,\n      scene: scene,\n      previous: previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["mode","scenes","layout","insets","getPreviousScene","getFocusedRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","parentPreviousScene","React","Animated","pointerEvents","i","self","header","headerShown","headerTransparent","scene","isFocused","previous","route","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","navigation","NavigationContext","key","value","NavigationRouteContext","onLayout","e","height","accessibilityElementsHidden","importantForAccessibility","styles","StyleSheet","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { header, headerShown = true, headerTransparent } =\n          scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previous =\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const { headerShown: previousHeaderShown = true } =\n          previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = true } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}