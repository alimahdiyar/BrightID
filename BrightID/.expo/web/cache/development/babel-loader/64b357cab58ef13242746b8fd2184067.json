{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from 'apisauce';\nimport { CHANNEL_UPLOAD_RETRY_COUNT, CHANNEL_UPLOAD_RETRY_INTERVAL } from \"../utils/constants\";\n\nvar ChannelAPI = function () {\n  function ChannelAPI(baseURL) {\n    _classCallCheck(this, ChannelAPI);\n\n    this.api = create({\n      baseURL: baseURL,\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    });\n  }\n\n  _createClass(ChannelAPI, [{\n    key: \"upload\",\n    value: function upload(params) {\n      var _this = this;\n\n      var channelId, data, dataId, requestedTtl, requestedTtlSecs, body, retries, result, _loop;\n\n      return _regeneratorRuntime.async(function upload$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              channelId = params.channelId, data = params.data, dataId = params.dataId, requestedTtl = params.requestedTtl;\n              requestedTtlSecs = requestedTtl ? Math.floor(requestedTtl / 1000) : undefined;\n              body = JSON.stringify({\n                data: data,\n                uuid: dataId,\n                requestedTtl: requestedTtlSecs\n              });\n              retries = 0;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(this.api.post(\"/upload/\" + channelId, body));\n\n            case 6:\n              result = _context2.sent;\n\n              _loop = function _callee() {\n                var retryDelay;\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        retries++;\n                        retryDelay = CHANNEL_UPLOAD_RETRY_INTERVAL * retries;\n                        console.log(\"Uploading \" + dataId + \" to \" + channelId + \" failed with status \" + result.status + \" at try \" + (retries - 1) + \". Retrying in \" + retryDelay + \"ms.\");\n                        _context.next = 5;\n                        return _regeneratorRuntime.awrap(new Promise(function (r) {\n                          return setTimeout(r, retryDelay);\n                        }));\n\n                      case 5:\n                        _context.next = 7;\n                        return _regeneratorRuntime.awrap(_this.api.post(\"/upload/\" + channelId, body));\n\n                      case 7:\n                        result = _context.sent;\n\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              };\n\n            case 8:\n              if (!(!result.ok && retries < CHANNEL_UPLOAD_RETRY_COUNT)) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(_loop());\n\n            case 11:\n              _context2.next = 8;\n              break;\n\n            case 13:\n              ChannelAPI.throwOnError(result);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"list\",\n    value: function list(channelId) {\n      var result;\n      return _regeneratorRuntime.async(function list$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.api.get(\"/list/\" + channelId));\n\n            case 2:\n              result = _context3.sent;\n              ChannelAPI.throwOnError(result);\n\n              if (!(result.data && result.data.profileIds)) {\n                _context3.next = 8;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", result.data.profileIds);\n\n            case 8:\n              throw new Error(\"list for channel \" + channelId + \": Unexpected response format\");\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"download\",\n    value: function download(params) {\n      var channelId, dataId, deleteAfterDownload, result;\n      return _regeneratorRuntime.async(function download$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              channelId = params.channelId, dataId = params.dataId, deleteAfterDownload = params.deleteAfterDownload;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.api.get(\"/download/\" + channelId + \"/\" + dataId));\n\n            case 3:\n              result = _context4.sent;\n              ChannelAPI.throwOnError(result);\n\n              if (!deleteAfterDownload) {\n                _context4.next = 14;\n                break;\n              }\n\n              _context4.prev = 6;\n              _context4.next = 9;\n              return _regeneratorRuntime.awrap(this.api.delete(\"/\" + channelId + \"/\" + dataId));\n\n            case 9:\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](6);\n              console.log(\"Ignoring error while deleting \" + dataId + \" from channel \" + channelId + \": \" + _context4.t0);\n\n            case 14:\n              if (!(result.data && result.data.data)) {\n                _context4.next = 18;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", result.data.data);\n\n            case 18:\n              throw new Error(\"download \" + dataId + \" from channel \" + channelId + \": Unexpected response format\");\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[6, 11]], Promise);\n    }\n  }], [{\n    key: \"throwOnError\",\n    value: function throwOnError(response) {\n      if (response.ok) {\n        return;\n      }\n\n      if (response.data && response.data.error) {\n        throw new Error(response.data.error);\n      }\n\n      throw new Error(response.problem);\n    }\n  }]);\n\n  return ChannelAPI;\n}();\n\nexport default ChannelAPI;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/api/channelService.ts"],"names":["ChannelAPI","create","baseURL","headers","response","channelId","data","dataId","requestedTtl","params","requestedTtlSecs","Math","body","JSON","uuid","retries","result","retryDelay","CHANNEL_UPLOAD_RETRY_INTERVAL","console","setTimeout","deleteAfterDownload"],"mappings":"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","sourcesContent":["/*\n    Channel Service API\n\n    Operations:\n\n    - Upload data with unique ID to channel\n        -> POST /profile/upload/${channelID}\n    - Get list of data IDs in channel\n        -> GET /profile/list/${channelID}\n    - Download data from channel\n        -> GET /profile/download/${channelID}/${dataID}\n\n    We need to support multiple different hosts, so\n    we can not use a global API instance. Instead it needs to be created per channel.\n */\nimport { create, ApisauceInstance, ApiResponse } from 'apisauce';\nimport {\n  CHANNEL_UPLOAD_RETRY_COUNT,\n  CHANNEL_UPLOAD_RETRY_INTERVAL,\n} from '@/utils/constants';\n\ntype UploadParams = {\n  channelId: string;\n  data: any;\n  dataId: string;\n  // Use requestedTtl to override default channel TTL on the backend. Only taken into account when\n  // creating a channel (upload of first entry).\n  requestedTtl?: number;\n};\n\ntype DownloadParams = {\n  channelId: string;\n  dataId: string;\n  deleteAfterDownload?: boolean;\n};\n\nclass ChannelAPI {\n  api: ApisauceInstance;\n\n  constructor(baseURL: string) {\n    this.api = create({\n      baseURL,\n      headers: { 'Cache-Control': 'no-cache' },\n    });\n  }\n\n  static throwOnError(response: ApiResponse<any>) {\n    if (response.ok) {\n      return;\n    }\n    if (response.data && response.data.error) {\n      throw new Error(response.data.error);\n    }\n    throw new Error(response.problem);\n  }\n\n  async upload(params: UploadParams) {\n    const { channelId, data, dataId, requestedTtl } = params;\n\n    // convert TTL from ms to seconds\n    const requestedTtlSecs = requestedTtl\n      ? Math.floor(requestedTtl / 1000)\n      : undefined;\n\n    const body = JSON.stringify({\n      data,\n      uuid: dataId,\n      requestedTtl: requestedTtlSecs,\n    });\n\n    let retries = 0;\n    let result = await this.api.post(`/upload/${channelId}`, body);\n\n    // Upload failed. Wait to try again with increasing delay, give up after max attempts\n    while (!result.ok && retries < CHANNEL_UPLOAD_RETRY_COUNT) {\n      retries++;\n      const retryDelay = CHANNEL_UPLOAD_RETRY_INTERVAL * retries;\n      console.log(\n        `Uploading ${dataId} to ${channelId} failed with status ${\n          result.status\n        } at try ${retries - 1}. Retrying in ${retryDelay}ms.`,\n      );\n      await new Promise((r) => setTimeout(r, retryDelay));\n      result = await this.api.post(`/upload/${channelId}`, body);\n    }\n\n    ChannelAPI.throwOnError(result);\n  }\n\n  async list(channelId: string) {\n    const result = await this.api.get<{ profileIds: string[] }>(\n      `/list/${channelId}`,\n    );\n    ChannelAPI.throwOnError(result);\n    if (result.data && result.data.profileIds) {\n      return result.data.profileIds;\n    } else {\n      throw new Error(\n        `list for channel ${channelId}: Unexpected response format`,\n      );\n    }\n  }\n\n  async download(params: DownloadParams) {\n    const { channelId, dataId, deleteAfterDownload } = params;\n    const result = await this.api.get<{ data: any }>(\n      `/download/${channelId}/${dataId}`,\n    );\n    ChannelAPI.throwOnError(result);\n    if (deleteAfterDownload) {\n      try {\n        await this.api.delete(`/${channelId}/${dataId}`);\n      } catch (e) {\n        console.log(\n          `Ignoring error while deleting ${dataId} from channel ${channelId}: ${e}`,\n        );\n      }\n    }\n    if (result.data && result.data.data) {\n      return result.data.data;\n    } else {\n      throw new Error(\n        `download ${dataId} from channel ${channelId}: Unexpected response format`,\n      );\n    }\n  }\n}\n\nexport default ChannelAPI;\n"]},"metadata":{},"sourceType":"module"}