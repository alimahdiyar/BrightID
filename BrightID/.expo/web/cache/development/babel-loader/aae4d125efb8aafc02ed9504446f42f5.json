{"ast":null,"code":"import compareVersions from 'compare-versions';\nimport { CodedError } from \"./errors/CodedError\";\nvar postedWarnings = {};\nexport default function deprecate(library, deprecatedAPI) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var currentVersion = options.currentVersion,\n      versionToRemove = options.versionToRemove,\n      replacement = options.replacement;\n  var code = codeFromLibrary(library);\n  var key = code + \":\" + deprecatedAPI + \":\" + replacement;\n\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (!currentVersion || !versionToRemove || compareVersions(currentVersion, versionToRemove) >= 0) {\n    var _message = \"`\" + deprecatedAPI + \"` has been removed\";\n\n    if (versionToRemove) {\n      _message = _message + \" as of version \\\"\" + versionToRemove + \"\\\"\";\n    }\n\n    if (replacement && replacement.length) {\n      _message = _message + \" please migrate to: `\" + replacement + \"`\";\n    }\n\n    throw new CodedError(\"ERR_DEPRECATED_API\", prependLibrary(library, _message));\n  }\n\n  var message = \"`\" + deprecatedAPI + \"` has been deprecated\";\n\n  if (replacement && replacement.length) {\n    message = message + \" in favor of `\" + replacement + \"`\";\n  }\n\n  if (versionToRemove && versionToRemove.length) {\n    message = message + \" and will be removed in version \\\"\" + versionToRemove + \"\\\"\";\n  }\n\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library, message) {\n  return library + \": \" + message;\n}\n\nfunction codeFromLibrary(library) {\n  var code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":{"version":3,"sources":["../src/deprecate.ts"],"names":["postedWarnings","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","compareVersions","message","prependLibrary","console","library"],"mappings":"AAAA,OAAA,eAAA,MAAA,kBAAA;AAEA,SAAA,UAAA;AAEA,IAAMA,cAAc,GAApB,EAAA;AAKA,eAAc,SAAA,SAAA,CAAA,OAAA,EAAA,aAAA,EAON;EAJNC,IAAAA,OAIM,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAF,EAJJA;EAMA,IAAQC,cAAR,GAAyDD,OAAzD,CAAA,cAAA;EAAA,IAAwBE,eAAxB,GAAyDF,OAAzD,CAAA,eAAA;EAAA,IAAyCG,WAAzC,GAAyDH,OAAzD,CAAA,WAAA;EACA,IAAMI,IAAI,GAAGC,eAAe,CAA5B,OAA4B,CAA5B;EACA,IAAMC,GAAG,GAAMF,IAAN,GAAA,GAAMA,GAAN,aAAMA,GAAN,GAAMA,GAAf,WAAA;;EACA,IAAI,CAACL,cAAc,CAAnB,GAAmB,CAAnB,EAA0B;IACxBA,cAAc,CAAdA,GAAc,CAAdA,GAAAA,IAAAA;EAGF;;EAAA,IACE,CAAA,cAAA,IACA,CADA,eAAA,IAEAQ,eAAe,CAAA,cAAA,EAAfA,eAAe,CAAfA,IAHF,CAAA,EAIE;IACA,IAAIC,QAAO,GAAA,MAAA,aAAA,GAAX,oBAAA;;IACA,IAAA,eAAA,EAAqB;MACnBA,QAAO,GAAMA,QAAN,GAAA,mBAAMA,GAAN,eAAMA,GAAbA,IAAAA;IAEF;;IAAA,IAAIL,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;MACrCK,QAAO,GAAMA,QAAN,GAAA,uBAAMA,GAAN,WAAMA,GAAbA,GAAAA;IAGF;;IAAA,MAAM,IAAA,UAAA,CAAA,oBAAA,EAAqCC,cAAc,CAAA,OAAA,EAAzD,QAAyD,CAAnD,CAAN;EAGF;;EAAA,IAAID,OAAO,GAAA,MAAA,aAAA,GAAX,uBAAA;;EACA,IAAIL,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;IACrCK,OAAO,GAAMA,OAAN,GAAA,gBAAMA,GAAN,WAAMA,GAAbA,GAAAA;EAEF;;EAAA,IAAIN,eAAe,IAAIA,eAAe,CAAtC,MAAA,EAA+C;IAC7CM,OAAO,GAAMA,OAAN,GAAA,oCAAMA,GAAN,eAAMA,GAAbA,IAAAA;EAEFE;;EAAAA,OAAO,CAAPA,IAAAA,CAAaD,cAAc,CAAA,OAAA,EAA3BC,OAA2B,CAA3BA;AAGF;;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,OAAA,EAAwD;EACtD,OAAUC,OAAV,GAAA,IAAUA,GAAV,OAAA;AAQF;;AAAA,SAAA,eAAA,CAAA,OAAA,EAAwC;EACtC,IAAMP,IAAI,GAAGO,OAAO,CAAPA,OAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAb,WAAaA,EAAb;EACA,OAAA,IAAA;AACD","sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}