{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar SceneView = function (_React$Component) {\n  _inherits(SceneView, _React$Component);\n\n  var _super = _createSuper(SceneView);\n\n  function SceneView() {\n    var _this;\n\n    _classCallCheck(this, SceneView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: Math.abs(_this.props.navigationState.index - _this.props.index) > _this.props.lazyPreloadDistance\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (value) {\n      var index = _this.props.index;\n\n      if (value === index && _this.state.loading) {\n        _this.setState({\n          loading: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(SceneView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.lazy) {\n        this.props.addListener('enter', this.handleEnter);\n      } else if (this.state.loading) {\n        setTimeout(function () {\n          return _this2.setState({\n            loading: false\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.lazy !== prevProps.lazy || this.state.loading !== prevState.loading) {\n        if (this.props.lazy && this.state.loading) {\n          this.props.addListener('enter', this.handleEnter);\n        } else {\n          this.props.removeListener('enter', this.handleEnter);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeListener('enter', this.handleEnter);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          navigationState = _this$props.navigationState,\n          index = _this$props.index,\n          layout = _this$props.layout,\n          style = _this$props.style;\n      var loading = this.state.loading;\n      var focused = navigationState.index === index;\n      return React.createElement(View, {\n        accessibilityElementsHidden: !focused,\n        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n        style: [styles.route, layout.width ? {\n          width: layout.width\n        } : focused ? StyleSheet.absoluteFill : null, style]\n      }, focused || layout.width ? this.props.children({\n        loading: loading\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.loading && Math.abs(props.navigationState.index - props.index) <= props.lazyPreloadDistance) {\n        return {\n          loading: false\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return SceneView;\n}(React.Component);\n\nexport { SceneView as default };\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","React","Component","state","Math","props","loading","componentDidMount","setTimeout","componentDidUpdate","prevProps","prevState","componentWillUnmount","value","index","render","navigationState","layout","style","focused","accessibilityElementsHidden","importantForAccessibility","styles","width","StyleSheet","route","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\ntype State = {\n  loading: boolean;\n};\n\nexport default class SceneView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static getDerivedStateFromProps(props: Props<Route>, state: State) {\n    if (\n      state.loading &&\n      Math.abs(props.navigationState.index - props.index) <=\n        props.lazyPreloadDistance\n    ) {\n      // Always render the route when it becomes focused\n      return { loading: false };\n    }\n\n    return null;\n  }\n\n  state = {\n    loading:\n      Math.abs(this.props.navigationState.index - this.props.index) >\n      this.props.lazyPreloadDistance,\n  };\n\n  componentDidMount() {\n    if (this.props.lazy) {\n      // If lazy mode is enabled, listen to when we enter screens\n      this.props.addListener('enter', this.handleEnter);\n    } else if (this.state.loading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      setTimeout(() => this.setState({ loading: false }), 0);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    if (\n      this.props.lazy !== prevProps.lazy ||\n      this.state.loading !== prevState.loading\n    ) {\n      // We only need the listener if the tab hasn't loaded yet and lazy is enabled\n      if (this.props.lazy && this.state.loading) {\n        this.props.addListener('enter', this.handleEnter);\n      } else {\n        this.props.removeListener('enter', this.handleEnter);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeListener('enter', this.handleEnter);\n  }\n\n  private handleEnter = (value: number) => {\n    const { index } = this.props;\n\n    // If we're entering the current route, we need to load it\n    if (value === index && this.state.loading) {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { navigationState, index, layout, style } = this.props;\n    const { loading } = this.state;\n\n    const focused = navigationState.index === index;\n\n    return (\n      <View\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        style={[\n          styles.route,\n          // If we don't have the layout yet, make the focused screen fill the container\n          // This avoids delay before we are able to render pages side by side\n          layout.width\n            ? { width: layout.width }\n            : focused\n            ? StyleSheet.absoluteFill\n            : null,\n          style,\n        ]}\n      >\n        {\n          // Only render the route only if it's either focused or layout is available\n          // When layout is not available, we must not render unfocused routes\n          // so that the focused route can fill the screen\n          focused || layout.width ? this.props.children({ loading }) : null\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}