{"ast":null,"code":"import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport { isEqual } from 'lodash';\n\nfunction isArrayOfStrings(value) {\n  return Array.isArray(value) && value.every(function (item) {\n    return typeof item === 'string';\n  });\n}\n\nexport var createDeepEqualStringArraySelector = createSelectorCreator(defaultMemoize, function (a, b) {\n  if (isArrayOfStrings(a) && isArrayOfStrings(b)) {\n    return isEqual(a, b);\n  } else {\n    return a === b;\n  }\n});\nexport var createDeepEqualSelector = createSelectorCreator(defaultMemoize, isEqual);","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/createDeepEqualStringArraySelector.ts"],"names":["Array","value","createDeepEqualStringArraySelector","createSelectorCreator","isArrayOfStrings","isEqual","a","createDeepEqualSelector"],"mappings":"AAAA,SAAA,qBAAA,EAAA,cAAA,QAAA,UAAA;AACA,SAAA,OAAA,QAAA,QAAA;;AAEA,SAAA,gBAAA,CAAA,KAAA,EAAsC;EACpC,OACEA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwBC,KAAK,CAALA,KAAAA,CAAY,UAAA,IAAA,EAAA;IAAA,OAAU,OAAA,IAAA,KAAV,QAAA;EADtC,CAC0BA,CAD1B;AAUF;;AAAA,OAAO,IAAMC,kCAAkC,GAAGC,qBAAqB,CAAA,cAAA,EAErE,UAAA,CAAA,EAAA,CAAA,EAAU;EACR,IAAIC,gBAAgB,CAAhBA,CAAgB,CAAhBA,IAAuBA,gBAAgB,CAA3C,CAA2C,CAA3C,EAAgD;IAE9C,OAAOC,OAAO,CAAA,CAAA,EAAd,CAAc,CAAd;EAFF,CAAA,MAGO;IACL,OAAOC,CAAC,KAAR,CAAA;EAEH;AATI,CAAgE,CAAhE;AAaP,OAAO,IAAMC,uBAAuB,GAAGJ,qBAAqB,CAAA,cAAA,EAArD,OAAqD,CAArD","sourcesContent":["import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport { isEqual } from 'lodash';\n\nfunction isArrayOfStrings(value: any) {\n  return (\n    Array.isArray(value) && value.every((item) => typeof item === 'string')\n  );\n}\n\n/*\n`DeepEqualStringArraySelector` will use\n  - deep equality check for arrays of strings\n  - referential equality check for all other inputs.\n */\nexport const createDeepEqualStringArraySelector = createSelectorCreator(\n  defaultMemoize,\n  (a, b) => {\n    if (isArrayOfStrings(a) && isArrayOfStrings(b)) {\n      // got two arrays of strings. Do deep-equal comparison\n      return isEqual(a, b);\n    } else {\n      return a === b;\n    }\n  },\n);\n\n// create a \"selector creator\" that uses lodash.isequal instead of ===\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  isEqual,\n);\n"]},"metadata":{},"sourceType":"module"}