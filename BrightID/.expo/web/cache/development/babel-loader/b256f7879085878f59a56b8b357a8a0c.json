{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.MyCodeScreen = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _store = require(\"../../store\");\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _MaterialCommunityIcons = _interopRequireDefault(require(\"react-native-vector-icons/MaterialCommunityIcons\"));\n\nvar _ChannelSwitch = _interopRequireDefault(require(\"../Helpers/ChannelSwitch\"));\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _Camera = _interopRequireDefault(require(\"../Icons/Camera\"));\n\nvar _channelSlice = require(\"./channelSlice\");\n\nvar _pendingConnectionSlice = require(\"./pendingConnectionSlice\");\n\nvar _channelThunks = require(\"./actions/channelThunks\");\n\nvar _actions = require(\"../../actions\");\n\nvar _NodeApiGate = require(\"../NodeApiGate\");\n\nvar _QrCode = require(\"./QrCode\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/MyCodeScreen.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar FakeConnectionBtn = function FakeConnectionBtn() {\n  return null;\n};\n\nvar addFakeConnection = function addFakeConnection() {\n  return null;\n};\n\nif (__DEV__) {\n  addFakeConnection = require(\"../../actions/fakeContact\").addFakeConnection;\n\n  FakeConnectionBtn = function FakeConnectionBtn() {\n    var dispatch = (0, _store.useDispatch)();\n    return _react.default.createElement(_reactNative.TouchableOpacity, {\n      testID: \"fakeConnectionBtn\",\n      style: {\n        marginRight: 11\n      },\n      onPress: function onPress() {\n        dispatch(addFakeConnection());\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_MaterialCommunityIcons.default, {\n      name: \"ghost\",\n      size: 32,\n      color: _colors.WHITE,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }));\n  };\n}\n\nvar PENDING_GROUP_TIMEOUT = 45000;\n\nvar MyCodeScreen = function MyCodeScreen() {\n  var navigation = (0, _native.useNavigation)();\n  var dispatch = (0, _store.useDispatch)();\n\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  var api = (0, _react.useContext)(_NodeApiGate.NodeApiContext);\n\n  var _useState = (0, _react.useState)(0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      channelErr = _useState2[0],\n      setChannelErr = _useState2[1];\n\n  var displayChannelType = (0, _store.useSelector)(function (state) {\n    return state.channels.displayChannelType;\n  });\n  var myChannel = (0, _store.useSelector)(function (state) {\n    return (0, _channelSlice.selectChannelById)(state, state.channels.myChannelIds[displayChannelType]);\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var activeChannelIds = (0, _store.useSelector)(function (state) {\n    return (0, _channelSlice.selectAllActiveChannelIdsByType)(state, displayChannelType);\n  });\n  console.log('activeChannelIds', activeChannelIds);\n  var pendingConnectionSize = (0, _store.useSelector)(function (state) {\n    if (myChannel) {\n      return (0, _pendingConnectionSlice.selectAllPendingConnectionsByChannelIds)(state, [myChannel.id]).length;\n    } else {\n      return 0;\n    }\n  });\n  var unconfirmedConnectionSize = (0, _store.useSelector)(function (state) {\n    return (0, _pendingConnectionSlice.selectAllUnconfirmedConnectionsByChannelIds)(state, activeChannelIds).length;\n  });\n  (0, _native.useFocusEffect)((0, _react.useCallback)(function () {\n    if (!navigation.isFocused()) return;\n\n    if ((!myChannel || (myChannel == null ? void 0 : myChannel.state) !== _channelSlice.channel_states.OPEN) && channelErr < 3) {\n      _reactNative.InteractionManager.runAfterInteractions(function () {\n        dispatch((0, _channelThunks.createChannel)(displayChannelType, api)).catch(function (err) {\n          console.log(\"error creating channel: \" + err.message);\n\n          if (channelErr === 2) {\n            _reactNative.Alert.alert(t('common.alert.error'), t('pendingConnection.alert.text.errorCreateChannel', {\n              message: \"\" + err.message\n            }));\n          }\n\n          setChannelErr(function (c) {\n            return c + 1;\n          });\n        });\n      });\n    }\n\n    dispatch((0, _actions.setActiveNotification)(null));\n  }, [navigation, myChannel, channelErr, dispatch, displayChannelType, api, t]));\n  (0, _react.useEffect)(function () {\n    var timer;\n\n    if (unconfirmedConnectionSize > 0 && (myChannel == null ? void 0 : myChannel.state) === _channelSlice.channel_states.OPEN) {\n      switch (displayChannelType) {\n        case _channelSlice.channel_types.SINGLE:\n          navigation.navigate('PendingConnections');\n          dispatch((0, _channelSlice.closeChannel)({\n            channelId: myChannel == null ? void 0 : myChannel.id,\n            background: true\n          }));\n          break;\n\n        case _channelSlice.channel_types.GROUP:\n        case _channelSlice.channel_types.STAR:\n          timer = setTimeout(function () {\n            navigation.navigate('PendingConnections');\n          }, PENDING_GROUP_TIMEOUT);\n          break;\n      }\n    }\n\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [displayChannelType, dispatch, navigation, unconfirmedConnectionSize, myChannel]);\n  (0, _react.useLayoutEffect)(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return unconfirmedConnectionSize > 0 ? _react.default.createElement(_reactNative.TouchableOpacity, {\n          style: {\n            width: _deviceConstants.DEVICE_LARGE ? 60 : 50\n          },\n          onPress: function onPress() {\n            navigation.navigate('PendingConnections');\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 11\n          }\n        }, _react.default.createElement(_MaterialCommunityIcons.default, {\n          name: \"account-supervisor-circle\",\n          size: 32,\n          color: _colors.WHITE,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }\n        }), _react.default.createElement(_reactNative.View, {\n          style: {\n            backgroundColor: _colors.ORANGE,\n            width: 9,\n            height: 9,\n            borderRadius: 5,\n            position: 'absolute',\n            top: 2,\n            left: 21\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }\n        })) : _react.default.createElement(FakeConnectionBtn, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }\n        });\n      },\n      headerTitle: function headerTitle() {\n        var ConnectionTitle = function ConnectionTitle() {\n          return _react.default.createElement(_reactNative.Text, {\n            style: styles.headerTitle,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 11\n            }\n          }, t('qrcode.header.connections', {\n            count: pendingConnectionSize + 1\n          }));\n        };\n\n        var group_types = [_channelSlice.channel_types.GROUP, _channelSlice.channel_types.STAR];\n        return group_types.includes(myChannel == null ? void 0 : myChannel.type) ? __DEV__ ? _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n          onPress: function onPress() {\n            dispatch(addFakeConnection());\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }\n        }, _react.default.createElement(ConnectionTitle, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }\n        }))) : _react.default.createElement(ConnectionTitle, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }\n        }) : null;\n      },\n      headerTitleAlign: 'center'\n    });\n  }, [myChannel, dispatch, navigation, pendingConnectionSize, unconfirmedConnectionSize, t]);\n\n  var toggleChannelType = function toggleChannelType() {\n    dispatch((0, _channelSlice.setDisplayChannelType)(displayChannelType === _channelSlice.channel_types.SINGLE ? _channelSlice.channel_types.GROUP : _channelSlice.channel_types.SINGLE));\n  };\n\n  var setStarChannelType = function setStarChannelType() {\n    console.log(\"LongPress\");\n    dispatch((0, _channelSlice.setDisplayChannelType)(_channelSlice.channel_types.STAR));\n  };\n\n  var displayOneToOneInfo = function displayOneToOneInfo() {\n    _reactNative.Alert.alert(t('qrcode.alert.title.codeSingle'), t('qrcode.alert.text.codeSingle'));\n  };\n\n  var displayManyToManyInfo = function displayManyToManyInfo() {\n    _reactNative.Alert.alert(t('qrcode.alert.title.codeGroup'), t('qrcode.alert.text.codeGroup'));\n  };\n\n  var displayOneToManyInfo = function displayOneToManyInfo() {\n    _reactNative.Alert.alert(t('qrcode.alert.title.codeStar', 'Star code'), t('qrcode.alert.text.codeStar', 'This QR code is designed to connect many people with one person.'));\n  };\n\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: _colors.ORANGE,\n    animated: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.orangeTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    testID: \"MyCodeScreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.infoTopContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, displayChannelType === _channelSlice.channel_types.STAR ? _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: styles.starContainer,\n    onPress: toggleChannelType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"star\",\n    size: 30,\n    color: _colors.WHITE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 15\n    }\n  })) : _react.default.createElement(_ChannelSwitch.default, {\n    onValueChange: toggleChannelType,\n    value: displayChannelType === _channelSlice.channel_types.SINGLE,\n    onLongPress: setStarChannelType,\n    testID: \"ChannelSwitch\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: styles.infoTopContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.infoTopText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 11\n    }\n  }, t('qrcode.label.connectionType'), ' '), displayChannelType === _channelSlice.channel_types.GROUP && _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: {\n      flexDirection: 'row'\n    },\n    onPress: displayManyToManyInfo,\n    testID: \"ConnectionInfoGroupBtn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    testID: \"group-code\",\n    style: styles.infoTopText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 15\n    }\n  }, t('qrcode.text.codeGroup')), _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"information-variant\",\n    size: 18,\n    color: _colors.LIGHT_BLACK,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 15\n    }\n  })), displayChannelType === _channelSlice.channel_types.SINGLE && _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: {\n      flexDirection: 'row'\n    },\n    onPress: displayOneToOneInfo,\n    testID: \"ConnectionInfoSingleBtn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    testID: \"single-use-code\",\n    style: styles.infoTopText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 15\n    }\n  }, t('qrcode.text.codeSingle')), _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"information-variant\",\n    size: 18,\n    color: _colors.LIGHT_BLACK,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  })), displayChannelType === _channelSlice.channel_types.STAR && _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: {\n      flexDirection: 'row'\n    },\n    onPress: displayOneToManyInfo,\n    testID: \"ConnectionInfoStarBtn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    testID: \"star-code\",\n    style: styles.infoTopText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 15\n    }\n  }, t('qrcode.text.codeStar', 'Star code')), _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"information-variant\",\n    size: 18,\n    color: _colors.LIGHT_BLACK,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 15\n    }\n  }))), _react.default.createElement(_reactNative.View, {\n    style: {\n      flexGrow: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_QrCode.QrCode, {\n    channel: myChannel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: styles.bottomContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.infoBottomText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  }, t('qrcode.text.canAlso')), _react.default.createElement(_reactNative.TouchableOpacity, {\n    testID: \"MyCodeToScanCodeBtn\",\n    style: styles.scanCodeButton,\n    onPress: function onPress() {\n      navigation.navigate('ScanCode');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_Camera.default, {\n    color: _colors.WHITE,\n    width: _deviceConstants.DEVICE_LARGE ? 22 : 20,\n    height: _deviceConstants.DEVICE_LARGE ? 22 : 20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: styles.scanCodeText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }\n  }, t('qrcode.button.scanCode'))))));\n};\n\nexports.MyCodeScreen = MyCodeScreen;\n\nvar styles = _reactNative.StyleSheet.create({\n  orangeTop: {\n    backgroundColor: _colors.ORANGE,\n    height: _deviceConstants.DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: _colors.WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n    paddingTop: 20\n  },\n  headerTitle: {\n    color: _colors.WHITE,\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16]\n  },\n  infoTopContainer: {\n    width: '100%',\n    flexGrow: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[14],\n    textAlign: 'center',\n    color: _colors.LIGHT_BLACK\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[12],\n    marginBottom: 10\n  },\n  scanCodeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: _deviceConstants.DEVICE_LARGE ? 42 : 36,\n    backgroundColor: _colors.ORANGE,\n    borderRadius: 60,\n    width: _deviceConstants.DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10\n  },\n  scanCodeText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[14],\n    color: _colors.WHITE,\n    marginLeft: 10\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: _deviceConstants.DEVICE_LARGE ? 308 : 244\n  },\n  starContainer: {\n    flexDirection: 'row',\n    width: _deviceConstants.DEVICE_LARGE ? 80 : 70,\n    height: _deviceConstants.DEVICE_LARGE ? 40 : 32,\n    borderRadius: _deviceConstants.DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: _colors.ORANGE,\n    borderColor: _colors.DARK_GREY\n  }\n});\n\nvar _default = MyCodeScreen;\nexports.default = _default;","map":{"version":3,"names":["FakeConnectionBtn","addFakeConnection","__DEV__","require","dispatch","useDispatch","marginRight","WHITE","PENDING_GROUP_TIMEOUT","MyCodeScreen","navigation","useNavigation","useTranslation","t","api","useContext","NodeApiContext","useState","channelErr","setChannelErr","displayChannelType","useSelector","state","channels","myChannel","selectChannelById","myChannelIds","a","b","id","activeChannelIds","selectAllActiveChannelIdsByType","console","log","pendingConnectionSize","selectAllPendingConnectionsByChannelIds","length","unconfirmedConnectionSize","selectAllUnconfirmedConnectionsByChannelIds","useFocusEffect","useCallback","isFocused","channel_states","OPEN","InteractionManager","runAfterInteractions","createChannel","catch","err","message","Alert","alert","c","setActiveNotification","useEffect","timer","channel_types","SINGLE","navigate","closeChannel","channelId","background","GROUP","STAR","setTimeout","clearTimeout","useLayoutEffect","setOptions","headerRight","width","DEVICE_LARGE","backgroundColor","ORANGE","height","borderRadius","position","top","left","headerTitle","ConnectionTitle","styles","count","group_types","includes","type","headerTitleAlign","toggleChannelType","setDisplayChannelType","setStarChannelType","displayOneToOneInfo","displayManyToManyInfo","displayOneToManyInfo","orangeTop","container","infoTopContainer","starContainer","infoTopText","flexDirection","LIGHT_BLACK","flexGrow","bottomContainer","infoBottomText","scanCodeButton","scanCodeText","StyleSheet","create","zIndex","flex","alignItems","justifyContent","borderTopLeftRadius","borderTopRightRadius","marginTop","overflow","paddingTop","color","fontFamily","fontSize","textAlign","minHeight","marginBottom","marginLeft","emptyQr","borderColor","DARK_GREY"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/MyCodeScreen.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  Alert,\n  InteractionManager,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { useTranslation } from 'react-i18next';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ChannelSwitch from '@/components/Helpers/ChannelSwitch';\nimport { DARK_GREY, LIGHT_BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport Camera from '@/components/Icons/Camera';\nimport {\n  channel_states,\n  channel_types,\n  closeChannel,\n  selectAllActiveChannelIdsByType,\n  selectChannelById,\n  setDisplayChannelType,\n} from '@/components/PendingConnections/channelSlice';\nimport {\n  selectAllPendingConnectionsByChannelIds,\n  selectAllUnconfirmedConnectionsByChannelIds,\n} from '@/components/PendingConnections/pendingConnectionSlice';\n\nimport { createChannel } from '@/components/PendingConnections/actions/channelThunks';\nimport { setActiveNotification } from '@/actions';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { QrCode } from './QrCode';\n\n/**\n * My Code screen of BrightID\n *\n * USERA represents this user\n * ==================================================================\n * displays a qrcode\n *\n */\nlet FakeConnectionBtn = () => null;\nlet addFakeConnection = () => null;\nif (__DEV__) {\n  addFakeConnection = require('@/actions/fakeContact').addFakeConnection;\n\n  FakeConnectionBtn = () => {\n    const dispatch = useDispatch();\n    return (\n      <TouchableOpacity\n        testID=\"fakeConnectionBtn\"\n        style={{ marginRight: 11 }}\n        onPress={() => {\n          dispatch(addFakeConnection());\n        }}\n      >\n        <Material name=\"ghost\" size={32} color={WHITE} />\n      </TouchableOpacity>\n    );\n  };\n}\n\nconst PENDING_GROUP_TIMEOUT = 45000;\n\nexport const MyCodeScreen = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const [channelErr, setChannelErr] = useState(0);\n\n  // GROUP / SINGLE / STAR\n  const displayChannelType = useSelector(\n    (state: State) => state.channels.displayChannelType,\n  );\n  // current channel displayed by QRCode\n  const myChannel = useSelector(\n    (state: State) =>\n      selectChannelById(state, state.channels.myChannelIds[displayChannelType]),\n    (a, b) => a?.id === b?.id,\n  );\n\n  // All channels with current displayChannelType actively polling profile service\n  const activeChannelIds = useSelector((state: State) =>\n    selectAllActiveChannelIdsByType(state, displayChannelType),\n  );\n\n  console.log('activeChannelIds', activeChannelIds);\n\n  // pending connections attached to active channel\n  const pendingConnectionSize = useSelector((state: State) => {\n    if (myChannel) {\n      return selectAllPendingConnectionsByChannelIds(state, [myChannel.id])\n        .length;\n    } else {\n      return 0;\n    }\n  });\n\n  const unconfirmedConnectionSize = useSelector(\n    (state) =>\n      selectAllUnconfirmedConnectionsByChannelIds(state, activeChannelIds)\n        .length,\n  );\n\n  // create channel if none exists\n  useFocusEffect(\n    useCallback(() => {\n      if (!navigation.isFocused()) return;\n      if (\n        (!myChannel || myChannel?.state !== channel_states.OPEN) &&\n        channelErr < 3\n      ) {\n        InteractionManager.runAfterInteractions(() => {\n          dispatch(createChannel(displayChannelType, api)).catch((err) => {\n            console.log(`error creating channel: ${err.message}`);\n            if (channelErr === 2) {\n              Alert.alert(\n                t('common.alert.error'),\n                t('pendingConnection.alert.text.errorCreateChannel', {\n                  message: `${err.message}`,\n                }),\n              );\n            }\n            setChannelErr((c) => c + 1);\n          });\n        });\n      }\n      dispatch(setActiveNotification(null));\n    }, [\n      navigation,\n      myChannel,\n      channelErr,\n      dispatch,\n      displayChannelType,\n      api,\n      t,\n    ]),\n  );\n\n  // Navigate to next screen if QRCode has been scanned\n  useEffect(() => {\n    let timer;\n    if (\n      unconfirmedConnectionSize > 0 &&\n      myChannel?.state === channel_states.OPEN\n    ) {\n      switch (displayChannelType) {\n        case channel_types.SINGLE:\n          // navigate immediately to pending connections\n          navigation.navigate('PendingConnections');\n          // close channel to prevent navigation loop\n          dispatch(\n            closeChannel({ channelId: myChannel?.id, background: true }),\n          );\n          break;\n        case channel_types.GROUP:\n        case channel_types.STAR:\n          timer = setTimeout(() => {\n            navigation.navigate('PendingConnections');\n          }, PENDING_GROUP_TIMEOUT);\n          break;\n      }\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [\n    displayChannelType,\n    dispatch,\n    navigation,\n    unconfirmedConnectionSize,\n    myChannel,\n  ]);\n\n  // dev button\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () =>\n        unconfirmedConnectionSize > 0 ? (\n          <TouchableOpacity\n            style={{ width: DEVICE_LARGE ? 60 : 50 }}\n            onPress={() => {\n              navigation.navigate('PendingConnections');\n            }}\n          >\n            <Material\n              name=\"account-supervisor-circle\"\n              size={32}\n              color={WHITE}\n            />\n\n            <View\n              style={{\n                backgroundColor: ORANGE,\n                width: 9,\n                height: 9,\n                borderRadius: 5,\n                position: 'absolute',\n                top: 2,\n                left: 21,\n              }}\n            />\n          </TouchableOpacity>\n        ) : (\n          <FakeConnectionBtn />\n        ),\n      headerTitle: () => {\n        const ConnectionTitle = () => (\n          <Text style={styles.headerTitle}>\n            {t('qrcode.header.connections', {\n              count: pendingConnectionSize + 1,\n            })}\n          </Text>\n        );\n        const group_types: Array<string> = [\n          channel_types.GROUP,\n          channel_types.STAR,\n        ];\n        return group_types.includes(myChannel?.type) ? (\n          __DEV__ ? (\n            <TouchableWithoutFeedback\n              onPress={() => {\n                dispatch(addFakeConnection());\n              }}\n            >\n              <View>\n                <ConnectionTitle />\n              </View>\n            </TouchableWithoutFeedback>\n          ) : (\n            <ConnectionTitle />\n          )\n        ) : null;\n      },\n      headerTitleAlign: 'center',\n    });\n  }, [\n    myChannel,\n    dispatch,\n    navigation,\n    pendingConnectionSize,\n    unconfirmedConnectionSize,\n    t,\n  ]);\n\n  // when\n  const toggleChannelType = () => {\n    // toggle switch\n    dispatch(\n      setDisplayChannelType(\n        displayChannelType === channel_types.SINGLE\n          ? channel_types.GROUP\n          : channel_types.SINGLE,\n      ),\n    );\n  };\n\n  const setStarChannelType = () => {\n    console.log(`LongPress`);\n    dispatch(setDisplayChannelType(channel_types.STAR));\n  };\n\n  const displayOneToOneInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeSingle'),\n      t('qrcode.alert.text.codeSingle'),\n    );\n  };\n\n  const displayManyToManyInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeGroup'),\n      t('qrcode.alert.text.codeGroup'),\n    );\n  };\n\n  const displayOneToManyInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeStar', 'Star code'),\n      t(\n        'qrcode.alert.text.codeStar',\n        'This QR code is designed to connect many people with one person.',\n      ),\n    );\n  };\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"MyCodeScreen\">\n        <View style={styles.infoTopContainer}>\n          {displayChannelType === channel_types.STAR ? (\n            <TouchableOpacity\n              style={styles.starContainer}\n              onPress={toggleChannelType}\n            >\n              <Material name=\"star\" size={30} color={WHITE} />\n            </TouchableOpacity>\n          ) : (\n            <ChannelSwitch\n              onValueChange={toggleChannelType}\n              value={displayChannelType === channel_types.SINGLE}\n              onLongPress={setStarChannelType}\n              testID=\"ChannelSwitch\"\n            />\n          )}\n        </View>\n        <View style={styles.infoTopContainer}>\n          <Text style={styles.infoTopText}>\n            {t('qrcode.label.connectionType')}{' '}\n          </Text>\n          {displayChannelType === channel_types.GROUP && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayManyToManyInfo}\n              testID=\"ConnectionInfoGroupBtn\"\n            >\n              <Text testID=\"group-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeGroup')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n          {displayChannelType === channel_types.SINGLE && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayOneToOneInfo}\n              testID=\"ConnectionInfoSingleBtn\"\n            >\n              <Text testID=\"single-use-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeSingle')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n          {displayChannelType === channel_types.STAR && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayOneToManyInfo}\n              testID=\"ConnectionInfoStarBtn\"\n            >\n              <Text testID=\"star-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeStar', 'Star code')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n        </View>\n        <View style={{ flexGrow: 2 }}>\n          <QrCode channel={myChannel} />\n        </View>\n\n        <View style={styles.bottomContainer}>\n          <Text style={styles.infoBottomText}>{t('qrcode.text.canAlso')}</Text>\n          <TouchableOpacity\n            testID=\"MyCodeToScanCodeBtn\"\n            style={styles.scanCodeButton}\n            onPress={() => {\n              navigation.navigate('ScanCode');\n            }}\n          >\n            <Camera\n              color={WHITE}\n              width={DEVICE_LARGE ? 22 : 20}\n              height={DEVICE_LARGE ? 22 : 20}\n            />\n            <Text style={styles.scanCodeText}>\n              {t('qrcode.button.scanCode')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n    paddingTop: 20,\n  },\n  headerTitle: {\n    color: WHITE,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n  },\n  infoTopContainer: {\n    width: '100%',\n    flexGrow: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100,\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10,\n  },\n  scanCodeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10,\n  },\n  scanCodeText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10,\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244,\n  },\n  starContainer: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY,\n  },\n});\n\nexport default MyCodeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}