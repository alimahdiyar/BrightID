{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _levelsWithoutRecover;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport i18next from 'i18next';\nimport Slider from '@react-native-community/slider';\nimport { connection_levels } from \"../../utils/constants\";\nimport { WIDTH, DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { ORANGE, BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { connectionLevelColors, connectionLevelStrings } from \"../../utils/connectionLevelStrings\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar levelsWithoutRecovery = (_levelsWithoutRecover = {}, _defineProperty(_levelsWithoutRecover, connection_levels.SUSPICIOUS, {\n  description: i18next.t('connectionDetails.text.levelSuspicious')\n}), _defineProperty(_levelsWithoutRecover, connection_levels.JUST_MET, {\n  description: i18next.t('connectionDetails.text.levelJustMet')\n}), _defineProperty(_levelsWithoutRecover, connection_levels.ALREADY_KNOWN, {\n  description: i18next.t('connectionDetails.text.levelAlreadyKnown')\n}), _levelsWithoutRecover);\n\nvar levelsWithRecovery = _objectSpread(_objectSpread({}, levelsWithoutRecovery), {}, _defineProperty({}, connection_levels.RECOVERY, {\n  description: i18next.t('connectionDetails.text.levelRecovery')\n}));\n\nvar TrustlevelSlider = function TrustlevelSlider(_ref) {\n  var currentLevel = _ref.currentLevel,\n      incomingLevel = _ref.incomingLevel,\n      changeLevelHandler = _ref.changeLevelHandler,\n      verbose = _ref.verbose;\n  var includeRecovery = Array(connection_levels.ALREADY_KNOWN, connection_levels.RECOVERY).includes(incomingLevel);\n  var trustLevelDetails = includeRecovery ? levelsWithRecovery : levelsWithoutRecovery;\n  var minValue = 0;\n  var maxValue = Object.keys(trustLevelDetails).length - 1;\n\n  if (currentLevel === connection_levels.REPORTED) {\n    currentLevel = connection_levels.SUSPICIOUS;\n  }\n\n  var initialValue = Object.keys(trustLevelDetails).indexOf(currentLevel);\n\n  var valueChangeHandler = function valueChangeHandler(value) {\n    console.log(\"Slider value: \" + value);\n    changeLevelHandler(Object.keys(trustLevelDetails)[value]);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    testID: \"ConnectionLevelSliderPopup\",\n    children: [_jsx(View, {\n      style: styles.label,\n      children: _jsx(Text, {\n        testID: \"ConnectionLevelSliderText\",\n        style: [styles.labelText, {\n          color: connectionLevelColors[currentLevel]\n        }],\n        children: connectionLevelStrings[currentLevel]\n      })\n    }), verbose && _jsx(View, {\n      style: styles.description,\n      children: _jsxs(Text, {\n        style: styles.descriptionText,\n        children: [\"\\\"\", trustLevelDetails[currentLevel].description, \"\\\"\"]\n      })\n    }), _jsx(Slider, {\n      testID: \"ConnectionLevelSlider\",\n      style: styles.slider,\n      value: initialValue,\n      minimumValue: minValue,\n      maximumValue: maxValue,\n      step: 1,\n      minimumTrackTintColor: connectionLevelColors[connection_levels.RECOVERY],\n      maximumTrackTintColor: connectionLevelColors[connection_levels.REPORTED],\n      thumbTintColor: ORANGE,\n      onValueChange: valueChangeHandler\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  label: {\n    marginBottom: DEVICE_LARGE ? 10 : 8\n  },\n  labelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[17],\n    color: BLACK\n  },\n  description: {\n    minHeight: 50,\n    marginBottom: DEVICE_LARGE ? 10 : 5\n  },\n  descriptionText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n    textAlign: 'center'\n  },\n  slider: {\n    marginBottom: DEVICE_LARGE ? 13 : 11,\n    width: WIDTH * 0.9 * 0.8,\n    height: DEVICE_LARGE ? 50 : 45\n  }\n});\nexport default TrustlevelSlider;","map":{"version":3,"names":["React","i18next","Slider","connection_levels","WIDTH","DEVICE_LARGE","ORANGE","BLACK","fontSize","connectionLevelColors","connectionLevelStrings","levelsWithoutRecovery","SUSPICIOUS","description","t","JUST_MET","ALREADY_KNOWN","levelsWithRecovery","RECOVERY","TrustlevelSlider","currentLevel","incomingLevel","changeLevelHandler","verbose","includeRecovery","Array","includes","trustLevelDetails","minValue","maxValue","Object","keys","length","REPORTED","initialValue","indexOf","valueChangeHandler","value","console","log","styles","container","label","labelText","color","descriptionText","slider","StyleSheet","create","flexDirection","justifyContent","alignItems","marginBottom","fontFamily","minHeight","textAlign","width","height"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/TrustlevelSlider.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport i18next from 'i18next';\nimport Slider from '@react-native-community/slider';\nimport { connection_levels } from '@/utils/constants';\nimport { WIDTH, DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { ORANGE, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  connectionLevelColors,\n  connectionLevelStrings,\n} from '@/utils/connectionLevelStrings';\n\nconst levelsWithoutRecovery = {\n  [connection_levels.SUSPICIOUS]: {\n    description: i18next.t('connectionDetails.text.levelSuspicious'),\n  },\n  [connection_levels.JUST_MET]: {\n    description: i18next.t('connectionDetails.text.levelJustMet'),\n  },\n  [connection_levels.ALREADY_KNOWN]: {\n    description: i18next.t('connectionDetails.text.levelAlreadyKnown'),\n  },\n};\n\nconst levelsWithRecovery = {\n  ...levelsWithoutRecovery,\n  [connection_levels.RECOVERY]: {\n    description: i18next.t('connectionDetails.text.levelRecovery'),\n  },\n};\n\ntype TrustlevelSliderProps = {\n  currentLevel: ConnectionLevel;\n  incomingLevel: ConnectionLevel;\n  changeLevelHandler: (newLevel: ConnectionLevel) => any;\n  verbose: boolean;\n};\n\nconst TrustlevelSlider = ({\n  currentLevel,\n  incomingLevel,\n  changeLevelHandler,\n  verbose,\n}: TrustlevelSliderProps) => {\n  const includeRecovery = Array<ConnectionLevel>(\n    connection_levels.ALREADY_KNOWN,\n    connection_levels.RECOVERY,\n  ).includes(incomingLevel);\n  const trustLevelDetails = includeRecovery\n    ? levelsWithRecovery\n    : levelsWithoutRecovery;\n  const minValue = 0;\n  const maxValue = Object.keys(trustLevelDetails).length - 1;\n\n  // TODO - Quick workaround to catch connections that just changed from \"REPORTED\" to something else, but are not\n  // confirmed on the backend yet. This can happen when you report someone and later reconnect. Proper solution is\n  // to not allow changing level again until the last operation actually confirmed.\n  // RESPONSE: The connection slider will not be avail for users who are marked as REPORTED, because we are no longer deleting reported connections, but I will keep this here in case we run into this issue in the future\n  if (currentLevel === connection_levels.REPORTED) {\n    currentLevel = connection_levels.SUSPICIOUS;\n  }\n\n  // map connectionLevel to index value\n  const initialValue = Object.keys(trustLevelDetails).indexOf(currentLevel);\n  const valueChangeHandler = (value: number) => {\n    console.log(`Slider value: ${value}`);\n    // map index value back to connectionLevel\n    changeLevelHandler(\n      Object.keys(trustLevelDetails)[value] as ConnectionLevel,\n    );\n  };\n\n  return (\n    <View style={styles.container} testID=\"ConnectionLevelSliderPopup\">\n      <View style={styles.label}>\n        <Text\n          testID=\"ConnectionLevelSliderText\"\n          style={[\n            styles.labelText,\n            { color: connectionLevelColors[currentLevel] },\n          ]}\n        >\n          {connectionLevelStrings[currentLevel]}\n        </Text>\n      </View>\n      {verbose && (\n        <View style={styles.description}>\n          <Text style={styles.descriptionText}>\n            \"{trustLevelDetails[currentLevel].description}\"\n          </Text>\n        </View>\n      )}\n      <Slider\n        testID=\"ConnectionLevelSlider\"\n        style={styles.slider}\n        value={initialValue}\n        minimumValue={minValue}\n        maximumValue={maxValue}\n        step={1}\n        minimumTrackTintColor={\n          connectionLevelColors[connection_levels.RECOVERY]\n        }\n        maximumTrackTintColor={\n          connectionLevelColors[connection_levels.REPORTED]\n        }\n        thumbTintColor={ORANGE}\n        onValueChange={valueChangeHandler}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  label: {\n    marginBottom: DEVICE_LARGE ? 10 : 8,\n  },\n  labelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[17],\n    color: BLACK,\n  },\n  description: {\n    // set minimum height so the slider does not jump when the description\n    // text changes between 1 and 2 lines\n    minHeight: 50,\n    marginBottom: DEVICE_LARGE ? 10 : 5,\n  },\n  descriptionText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n    textAlign: 'center',\n  },\n  slider: {\n    marginBottom: DEVICE_LARGE ? 13 : 11,\n    // slider only supports absolute width, so have to calculate manually:\n    // width = deviceWidth * modalWidth (90%) * sliderWidth (80% of modal width)\n    width: WIDTH * 0.9 * 0.8,\n    height: DEVICE_LARGE ? 50 : 45,\n  },\n});\n\nexport default TrustlevelSlider;\n"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,iBAAT;AACA,SAASC,KAAT,EAAgBC,YAAhB;AACA,SAASC,MAAT,EAAiBC,KAAjB;AACA,SAASC,QAAT;AACA,SACEC,qBADF,EAEEC,sBAFF;;;AAKA,IAAMC,qBAAqB,uEACxBR,iBAAiB,CAACS,UADM,EACO;EAC9BC,WAAW,EAAEZ,OAAO,CAACa,CAAR,CAAU,wCAAV;AADiB,CADP,0CAIxBX,iBAAiB,CAACY,QAJM,EAIK;EAC5BF,WAAW,EAAEZ,OAAO,CAACa,CAAR,CAAU,qCAAV;AADe,CAJL,0CAOxBX,iBAAiB,CAACa,aAPM,EAOU;EACjCH,WAAW,EAAEZ,OAAO,CAACa,CAAR,CAAU,0CAAV;AADoB,CAPV,yBAA3B;;AAYA,IAAMG,kBAAkB,mCACnBN,qBADmB,2BAErBR,iBAAiB,CAACe,QAFG,EAEQ;EAC5BL,WAAW,EAAEZ,OAAO,CAACa,CAAR,CAAU,sCAAV;AADe,CAFR,EAAxB;;AAcA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,OAKI;EAAA,IAJ3BC,YAI2B,QAJ3BA,YAI2B;EAAA,IAH3BC,aAG2B,QAH3BA,aAG2B;EAAA,IAF3BC,kBAE2B,QAF3BA,kBAE2B;EAAA,IAD3BC,OAC2B,QAD3BA,OAC2B;EAC3B,IAAMC,eAAe,GAAGC,KAAK,CAC3BtB,iBAAiB,CAACa,aADS,EAE3Bb,iBAAiB,CAACe,QAFS,CAAL,CAGtBQ,QAHsB,CAGbL,aAHa,CAAxB;EAIA,IAAMM,iBAAiB,GAAGH,eAAe,GACrCP,kBADqC,GAErCN,qBAFJ;EAGA,IAAMiB,QAAQ,GAAG,CAAjB;EACA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,EAA+BK,MAA/B,GAAwC,CAAzD;;EAMA,IAAIZ,YAAY,KAAKjB,iBAAiB,CAAC8B,QAAvC,EAAiD;IAC/Cb,YAAY,GAAGjB,iBAAiB,CAACS,UAAjC;EACD;;EAGD,IAAMsB,YAAY,GAAGJ,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,EAA+BQ,OAA/B,CAAuCf,YAAvC,CAArB;;EACA,IAAMgB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAmB;IAC5CC,OAAO,CAACC,GAAR,oBAA6BF,KAA7B;IAEAf,kBAAkB,CAChBQ,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,EAA+BU,KAA/B,CADgB,CAAlB;EAGD,CAND;;EAQA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEG,MAAM,CAACC,SAApB;IAA+B,MAAM,EAAC,4BAAtC;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,KAApB;MAAA,UACE,KAAC,IAAD;QACE,MAAM,EAAC,2BADT;QAEE,KAAK,EAAE,CACLF,MAAM,CAACG,SADF,EAEL;UAAEC,KAAK,EAAEnC,qBAAqB,CAACW,YAAD;QAA9B,CAFK,CAFT;QAAA,UAOGV,sBAAsB,CAACU,YAAD;MAPzB;IADF,EADF,EAYGG,OAAO,IACN,KAAC,IAAD;MAAM,KAAK,EAAEiB,MAAM,CAAC3B,WAApB;MAAA,UACE,MAAC,IAAD;QAAM,KAAK,EAAE2B,MAAM,CAACK,eAApB;QAAA,iBACIlB,iBAAiB,CAACP,YAAD,CAAjB,CAAgCP,WADpC;MAAA;IADF,EAbJ,EAmBE,KAAC,MAAD;MACE,MAAM,EAAC,uBADT;MAEE,KAAK,EAAE2B,MAAM,CAACM,MAFhB;MAGE,KAAK,EAAEZ,YAHT;MAIE,YAAY,EAAEN,QAJhB;MAKE,YAAY,EAAEC,QALhB;MAME,IAAI,EAAE,CANR;MAOE,qBAAqB,EACnBpB,qBAAqB,CAACN,iBAAiB,CAACe,QAAnB,CARzB;MAUE,qBAAqB,EACnBT,qBAAqB,CAACN,iBAAiB,CAAC8B,QAAnB,CAXzB;MAaE,cAAc,EAAE3B,MAblB;MAcE,aAAa,EAAE8B;IAdjB,EAnBF;EAAA,EADF;AAsCD,CAxED;;AA0EA,IAAMI,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;EAC/BP,SAAS,EAAE;IACTQ,aAAa,EAAE,QADN;IAETC,cAAc,EAAE,QAFP;IAGTC,UAAU,EAAE;EAHH,CADoB;EAM/BT,KAAK,EAAE;IACLU,YAAY,EAAE/C,YAAY,GAAG,EAAH,GAAQ;EAD7B,CANwB;EAS/BsC,SAAS,EAAE;IACTU,UAAU,EAAE,cADH;IAET7C,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAFT;IAGToC,KAAK,EAAErC;EAHE,CAToB;EAc/BM,WAAW,EAAE;IAGXyC,SAAS,EAAE,EAHA;IAIXF,YAAY,EAAE/C,YAAY,GAAG,EAAH,GAAQ;EAJvB,CAdkB;EAoB/BwC,eAAe,EAAE;IACfQ,UAAU,EAAE,gBADG;IAEf7C,QAAQ,EAAEA,QAAQ,CAAC,EAAD,CAFH;IAGfoC,KAAK,EAAErC,KAHQ;IAIfgD,SAAS,EAAE;EAJI,CApBc;EA0B/BT,MAAM,EAAE;IACNM,YAAY,EAAE/C,YAAY,GAAG,EAAH,GAAQ,EAD5B;IAINmD,KAAK,EAAEpD,KAAK,GAAG,GAAR,GAAc,GAJf;IAKNqD,MAAM,EAAEpD,YAAY,GAAG,EAAH,GAAQ;EALtB;AA1BuB,CAAlB,CAAf;AAmCA,eAAec,gBAAf"},"metadata":{},"sourceType":"module"}