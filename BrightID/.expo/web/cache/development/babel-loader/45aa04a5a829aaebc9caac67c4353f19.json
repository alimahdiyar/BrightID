{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getGenericPassword, setGenericPassword, resetGenericPassword } from 'react-native-keychain';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { b64ToUint8Array, uInt8ArrayToB64 } from \"../../utils/encoding\";\n\nvar getItem = function _callee(key) {\n  var _await$getGenericPass, username, password, _JSON$parse, publicKey, version, secretKey, data, _JSON$parse2, _publicKey, _secretKey, _persist;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getGenericPassword());\n\n        case 3:\n          _await$getGenericPass = _context.sent;\n          username = _await$getGenericPass.username;\n          password = _await$getGenericPass.password;\n          _JSON$parse = JSON.parse(username), publicKey = _JSON$parse.publicKey, version = _JSON$parse.version;\n\n          if (!(!publicKey || !password)) {\n            _context.next = 9;\n            break;\n          }\n\n          throw new Error(\"keypair does not exist in keychain!\");\n\n        case 9:\n          secretKey = b64ToUint8Array(password);\n          return _context.abrupt(\"return\", {\n            publicKey: publicKey,\n            secretKey: secretKey,\n            _persist: {\n              version: version,\n              rehydrated: true\n            }\n          });\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 17:\n          data = _context.sent;\n\n          if (!data) {\n            _context.next = 25;\n            break;\n          }\n\n          console.error(\"react-native-keychain is not accessible\");\n          _JSON$parse2 = JSON.parse(data), _publicKey = _JSON$parse2.publicKey, _secretKey = _JSON$parse2.secretKey, _persist = _JSON$parse2._persist;\n          _secretKey = b64ToUint8Array(_secretKey);\n          return _context.abrupt(\"return\", {\n            publicKey: _publicKey,\n            secretKey: _secretKey,\n            _persist: _persist\n          });\n\n        case 25:\n          throw _context.t0;\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nvar setItem = function _callee2(key, keypair) {\n  var password, username, opts;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          password = uInt8ArrayToB64(keypair.secretKey);\n          _context2.prev = 1;\n          username = JSON.stringify({\n            version: keypair._persist.version,\n            publicKey: keypair.publicKey\n          });\n\n          if (!DEVICE_ANDROID) {\n            _context2.next = 9;\n            break;\n          }\n\n          opts = {\n            rules: 'none'\n          };\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(setGenericPassword(username, password, opts));\n\n        case 7:\n          _context2.next = 11;\n          break;\n\n        case 9:\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(setGenericPassword(username, password));\n\n        case 11:\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, JSON.stringify({\n            publicKey: keypair.publicKey,\n            secretKey: password,\n            _persist: keypair._persist\n          })));\n\n        case 13:\n          return _context2.abrupt(\"return\", true);\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.error(_context2.t0.message);\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, JSON.stringify({\n            publicKey: keypair.publicKey,\n            secretKey: password,\n            _persist: keypair._persist\n          })));\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 16]], Promise);\n};\n\nvar removeItem = function _callee3(key) {\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(resetGenericPassword());\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 5:\n          return _context3.abrupt(\"return\", true);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0.message);\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar KeychainStorage = {\n  getItem: getItem,\n  setItem: setItem,\n  removeItem: removeItem\n};\nexport default KeychainStorage;","map":{"version":3,"names":["getGenericPassword","setGenericPassword","resetGenericPassword","AsyncStorage","DEVICE_ANDROID","b64ToUint8Array","uInt8ArrayToB64","getItem","key","username","password","JSON","parse","publicKey","version","Error","secretKey","_persist","rehydrated","data","console","error","setItem","keypair","stringify","opts","rules","message","removeItem","KeychainStorage"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/storage/keychainAdapter.js"],"sourcesContent":["import {\n  getGenericPassword,\n  setGenericPassword,\n  resetGenericPassword,\n} from 'react-native-keychain';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { b64ToUint8Array, uInt8ArrayToB64 } from '@/utils/encoding';\n\n/**\n *\n * @param {string} key\n * @returns\n */\nconst getItem = async (key) => {\n  try {\n    let { username, password } = await getGenericPassword();\n    let { publicKey, version } = JSON.parse(username);\n    if (!publicKey || !password) {\n      throw new Error(`keypair does not exist in keychain!`);\n    }\n    let secretKey = b64ToUint8Array(password);\n    return {\n      publicKey,\n      secretKey,\n      _persist: { version, rehydrated: true },\n    };\n  } catch (err) {\n    let data = await AsyncStorage.getItem(key);\n    if (data) {\n      console.error(`react-native-keychain is not accessible`);\n      let { publicKey, secretKey, _persist } = JSON.parse(data);\n      secretKey = b64ToUint8Array(secretKey);\n      return { publicKey, secretKey, _persist };\n    } else {\n      throw err;\n    }\n  }\n};\n\n/**\n *\n * @param {string} key\n * @param {{\n *   publicKey: string;\n *   secretKey: Uint8Array;\n *   _persist: { version: number };\n * }} keypair\n * @returns {Promise<boolean>}\n */\nconst setItem = async (key, keypair) => {\n  let password = uInt8ArrayToB64(keypair.secretKey);\n  try {\n    let username = JSON.stringify({\n      version: keypair._persist.version,\n      publicKey: keypair.publicKey,\n    });\n\n    if (DEVICE_ANDROID) {\n      let opts = { rules: 'none' };\n      await setGenericPassword(username, password, opts);\n    } else {\n      await setGenericPassword(username, password);\n    }\n    // we can remove this later once we have better metrics for react-native-keychain\n    await AsyncStorage.setItem(\n      key,\n      JSON.stringify({\n        publicKey: keypair.publicKey,\n        secretKey: password,\n        _persist: keypair._persist,\n      }),\n    );\n    return true;\n  } catch (err) {\n    console.error(err.message);\n    await AsyncStorage.setItem(\n      key,\n      JSON.stringify({\n        publicKey: keypair.publicKey,\n        secretKey: password,\n        _persist: keypair._persist,\n      }),\n    );\n  }\n};\n\nconst removeItem = async (key) => {\n  try {\n    await resetGenericPassword();\n    await AsyncStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    console.error(err.message);\n    await AsyncStorage.removeItem(key);\n  }\n};\n\nconst KeychainStorage = {\n  getItem,\n  setItem,\n  removeItem,\n};\n\nexport default KeychainStorage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}