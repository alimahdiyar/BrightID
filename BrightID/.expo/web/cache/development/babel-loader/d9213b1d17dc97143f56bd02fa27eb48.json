{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar from \"./TabBar\";\nimport SceneView from \"./SceneView\";\nimport Pager from \"./Pager\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar TabView = function (_React$Component) {\n  _inherits(TabView, _React$Component);\n\n  var _super = _createSuper(TabView);\n\n  function TabView() {\n    var _this;\n\n    _classCallCheck(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      layout: _objectSpread({\n        width: 0,\n        height: 0\n      }, _this.props.initialLayout)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"jumpToIndex\", function (index) {\n      if (index !== _this.props.navigationState.index) {\n        _this.props.onIndexChange(index);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          positionListener = _this$props.position,\n          onSwipeStart = _this$props.onSwipeStart,\n          onSwipeEnd = _this$props.onSwipeEnd,\n          navigationState = _this$props.navigationState,\n          lazy = _this$props.lazy,\n          lazyPreloadDistance = _this$props.lazyPreloadDistance,\n          removeClippedSubviews = _this$props.removeClippedSubviews,\n          keyboardDismissMode = _this$props.keyboardDismissMode,\n          swipeEnabled = _this$props.swipeEnabled,\n          swipeVelocityImpact = _this$props.swipeVelocityImpact,\n          timingConfig = _this$props.timingConfig,\n          springConfig = _this$props.springConfig,\n          tabBarPosition = _this$props.tabBarPosition,\n          renderTabBar = _this$props.renderTabBar,\n          renderScene = _this$props.renderScene,\n          renderLazyPlaceholder = _this$props.renderLazyPlaceholder,\n          sceneContainerStyle = _this$props.sceneContainerStyle,\n          style = _this$props.style,\n          gestureHandlerProps = _this$props.gestureHandlerProps,\n          springVelocityScale = _this$props.springVelocityScale,\n          renderPager = _this$props.renderPager;\n      var layout = this.state.layout;\n      return React.createElement(GestureHandlerWrapper, {\n        onLayout: this.handleLayout,\n        style: [styles.pager, style]\n      }, renderPager({\n        navigationState: navigationState,\n        layout: layout,\n        keyboardDismissMode: keyboardDismissMode,\n        swipeEnabled: swipeEnabled,\n        swipeVelocityImpact: swipeVelocityImpact,\n        timingConfig: timingConfig,\n        springConfig: springConfig,\n        onSwipeStart: onSwipeStart,\n        onSwipeEnd: onSwipeEnd,\n        onIndexChange: this.jumpToIndex,\n        springVelocityScale: springVelocityScale,\n        removeClippedSubviews: removeClippedSubviews,\n        gestureHandlerProps: gestureHandlerProps,\n        children: function children(_ref) {\n          var position = _ref.position,\n              render = _ref.render,\n              addListener = _ref.addListener,\n              removeListener = _ref.removeListener,\n              jumpTo = _ref.jumpTo;\n          var sceneRendererProps = {\n            position: position,\n            layout: layout,\n            jumpTo: jumpTo\n          };\n          return React.createElement(React.Fragment, null, positionListener ? React.createElement(Animated.Code, {\n            exec: Animated.set(positionListener, position)\n          }) : null, tabBarPosition === 'top' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n            navigationState: navigationState\n          })), render(navigationState.routes.map(function (route, i) {\n            return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n              addListener: addListener,\n              removeListener: removeListener,\n              key: route.key,\n              index: i,\n              lazy: lazy,\n              lazyPreloadDistance: lazyPreloadDistance,\n              navigationState: navigationState,\n              style: sceneContainerStyle\n            }), function (_ref2) {\n              var loading = _ref2.loading;\n              return loading ? renderLazyPlaceholder({\n                route: route\n              }) : renderScene(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n                route: route\n              }));\n            });\n          })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n            navigationState: navigationState\n          })));\n        }\n      }));\n    }\n  }]);\n\n  return TabView;\n}(React.Component);\n\nexport { TabView as default };\n\n_defineProperty(TabView, \"defaultProps\", {\n  tabBarPosition: 'top',\n  renderTabBar: function renderTabBar(props) {\n    return React.createElement(TabBar, props);\n  },\n  renderLazyPlaceholder: function renderLazyPlaceholder() {\n    return null;\n  },\n  keyboardDismissMode: 'auto',\n  swipeEnabled: true,\n  lazy: false,\n  lazyPreloadDistance: 0,\n  removeClippedSubviews: false,\n  springConfig: {},\n  timingConfig: {},\n  gestureHandlerProps: {},\n  renderPager: function renderPager(props) {\n    return React.createElement(Pager, props);\n  }\n});\n\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","TabView","React","Component","tabBarPosition","renderTabBar","props","renderLazyPlaceholder","keyboardDismissMode","swipeEnabled","lazy","lazyPreloadDistance","removeClippedSubviews","springConfig","timingConfig","gestureHandlerProps","renderPager","layout","width","height","index","e","render","positionListener","onSwipeStart","onSwipeEnd","navigationState","swipeVelocityImpact","renderScene","sceneContainerStyle","style","springVelocityScale","onLayout","styles","onIndexChange","children","position","addListener","removeListener","jumpTo","sceneRendererProps","Animated","exec","key","route","loading","StyleSheet","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\nimport Pager, { Props as ChildProps } from './Pager';\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <GestureHandlerWrapper\n        onLayout={this.handleLayout}\n        style={[styles.pager, style]}\n      >\n        {renderPager({\n          navigationState,\n          layout,\n          keyboardDismissMode,\n          swipeEnabled,\n          swipeVelocityImpact,\n          timingConfig,\n          springConfig,\n          onSwipeStart,\n          onSwipeEnd,\n          onIndexChange: this.jumpToIndex,\n          springVelocityScale,\n          removeClippedSubviews,\n          gestureHandlerProps,\n          children: ({\n            position,\n            render,\n            addListener,\n            removeListener,\n            jumpTo,\n          }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          },\n        })}\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}