{"ast":null,"code":"import React, { useCallback } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { useDispatch, useSelector } from \"../../store\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\nimport { DEVICE_LARGE, DEVICE_IOS } from \"../../utils/deviceConstants\";\nimport { GREY, WHITE } from \"../../theme/colors\";\nimport { useTranslation } from 'react-i18next';\nimport TaskCardController from \"./TaskCardController\";\nimport { TasksProgress } from \"./TasksProgress\";\nimport { selectTaskIds, selectCompletedTaskIds, checkTasks } from \"./TasksSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar FlatListItemSeparator = function FlatListItemSeparator() {\n  return _jsx(View, {\n    style: {\n      height: StyleSheet.hairlineWidth,\n      backgroundColor: GREY\n    }\n  });\n};\n\nexport var TasksScreen = function TasksScreen() {\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var taskIds = useSelector(selectTaskIds);\n  var completedTaskIds = useSelector(selectCompletedTaskIds);\n  var headerHeight = useHeaderHeight();\n\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n\n  var isDrawerOpen = useIsDrawerOpen();\n  var refreshTasks = useCallback(function () {\n    dispatch(checkTasks());\n  }, [dispatch]);\n  useFocusEffect(refreshTasks);\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TaskCardController, {\n      taskId: item\n    });\n  };\n\n  return _jsxs(View, {\n    style: [styles.container, {\n      marginTop: headerHeight\n    }, !isDrawerOpen && styles.shadow],\n    testID: \"tasksScreen\",\n    children: [_jsx(TasksProgress, {\n      currentSteps: completedTaskIds.length,\n      totalSteps: taskIds.length,\n      label: t('achievements.progress.title')\n    }), _jsx(FlatList, {\n      data: taskIds,\n      contentContainerStyle: {\n        paddingBottom: 50,\n        flexGrow: 1\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item;\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      ItemSeparatorComponent: FlatListItemSeparator,\n      renderItem: renderItem,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: false,\n        onRefresh: refreshTasks\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: DEVICE_LARGE ? 50 : 40,\n    paddingLeft: 42,\n    paddingRight: 18\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  }\n});\nexport default TasksScreen;","map":{"version":3,"names":["React","useCallback","useDispatch","useSelector","useFocusEffect","useHeaderHeight","useIsDrawerOpen","DEVICE_LARGE","DEVICE_IOS","GREY","WHITE","useTranslation","TaskCardController","TasksProgress","selectTaskIds","selectCompletedTaskIds","checkTasks","FlatListItemSeparator","height","StyleSheet","hairlineWidth","backgroundColor","TasksScreen","dispatch","t","taskIds","completedTaskIds","headerHeight","isDrawerOpen","refreshTasks","renderItem","item","styles","container","marginTop","shadow","length","paddingBottom","flexGrow","create","flex","borderTopLeftRadius","paddingLeft","paddingRight","shadowColor","shadowOpacity","shadowRadius","elevation","shadowOffset","width"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Tasks/TasksScreen.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { FlatList, StyleSheet, View, RefreshControl } from 'react-native';\nimport { useDispatch, useSelector } from '@/store';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport { useIsDrawerOpen } from '@react-navigation/drawer';\nimport { DEVICE_LARGE, DEVICE_IOS } from '@/utils/deviceConstants';\nimport { GREY, WHITE } from '@/theme/colors';\nimport { useTranslation } from 'react-i18next';\nimport TaskCardController from './TaskCardController';\nimport { TasksProgress } from './TasksProgress';\nimport {\n  selectTaskIds,\n  selectCompletedTaskIds,\n  checkTasks,\n} from './TasksSlice';\n\nconst FlatListItemSeparator = () => {\n  return (\n    <View\n      style={{\n        height: StyleSheet.hairlineWidth,\n        backgroundColor: GREY,\n      }}\n    />\n  );\n};\n\nexport const TasksScreen = function () {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const taskIds = useSelector(selectTaskIds);\n  const completedTaskIds = useSelector(selectCompletedTaskIds);\n  let headerHeight = useHeaderHeight();\n  if (DEVICE_IOS && DEVICE_LARGE) {\n    headerHeight += 7;\n  }\n  const isDrawerOpen = useIsDrawerOpen();\n\n  const refreshTasks = useCallback(() => {\n    dispatch(checkTasks());\n  }, [dispatch]);\n\n  useFocusEffect(refreshTasks);\n\n  const renderItem = ({ item }) => <TaskCardController taskId={item} />;\n\n  return (\n    <View\n      style={[\n        styles.container,\n        { marginTop: headerHeight },\n        !isDrawerOpen && styles.shadow,\n      ]}\n      testID=\"tasksScreen\"\n    >\n      <TasksProgress\n        currentSteps={completedTaskIds.length}\n        totalSteps={taskIds.length}\n        label={t('achievements.progress.title')}\n      />\n      <FlatList\n        data={taskIds}\n        contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}\n        keyExtractor={(item) => item}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={FlatListItemSeparator}\n        renderItem={renderItem}\n        refreshControl={\n          <RefreshControl refreshing={false} onRefresh={refreshTasks} />\n        }\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: DEVICE_LARGE ? 50 : 40,\n    paddingLeft: 42,\n    paddingRight: 18,\n  },\n  shadow: {\n    shadowColor: 'rgba(196, 196, 196, 0.25)',\n    shadowOpacity: 1,\n    shadowRadius: 15,\n    elevation: 15,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n  },\n});\n\nexport default TasksScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}