{"ast":null,"code":"import { useContext } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useActionSheet } from '@expo/react-native-action-sheet';\nimport { useDispatch } from \"../store\";\nimport { BLUE, WHITE } from \"../theme/colors\";\nimport { NodeApiContext } from \"../components/NodeApiGate\";\nimport { connectWithOtherFakeConnections, joinAllGroups, reconnectFakeConnection } from \"../actions/fakeContact\";\nimport { connection_levels } from \"./constants\";\nimport { connectionLevelStrings } from \"./connectionLevelStrings\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar btnOptions = ['Accept all group invites', 'Reconnect with changed profile', 'Reconnect with identical profile', \"Connect with all other fake connections - \" + connectionLevelStrings[connection_levels.JUST_MET], \"Connect with all other fake connections - \" + connectionLevelStrings[connection_levels.ALREADY_KNOWN], \"Connect with all other fake connections - \" + connectionLevelStrings[connection_levels.RECOVERY], 'cancel'];\n\nvar ConnectionTestButton = function ConnectionTestButton(_ref) {\n  var connectionId = _ref.connectionId;\n\n  var _useActionSheet = useActionSheet(),\n      showActionSheetWithOptions = _useActionSheet.showActionSheetWithOptions;\n\n  var dispatch = useDispatch();\n  var api = useContext(NodeApiContext);\n\n  var performAction = function performAction(index) {\n    switch (index) {\n      case 0:\n        console.log(\"Joining all groups\");\n        dispatch(joinAllGroups(connectionId, api));\n        break;\n\n      case 1:\n        console.log(\"Reconnecting with different profile\");\n        dispatch(reconnectFakeConnection(connectionId, true));\n        break;\n\n      case 2:\n        console.log(\"Reconnecting with same profile\");\n        dispatch(reconnectFakeConnection(connectionId, false));\n        break;\n\n      case 3:\n        console.log(\"Connecting to other fake connections - JUST MET\");\n        dispatch(connectWithOtherFakeConnections(connectionId, api, connection_levels.JUST_MET));\n        break;\n\n      case 4:\n        console.log(\"Connecting to other fake connections - ALREADY KNOWN\");\n        dispatch(connectWithOtherFakeConnections(connectionId, api, connection_levels.ALREADY_KNOWN));\n        break;\n\n      case 5:\n        console.log(\"Connecting to other fake connections - RECOVERY\");\n        dispatch(connectWithOtherFakeConnections(connectionId, api, connection_levels.RECOVERY));\n        break;\n\n      case 6:\n        console.log(\"Cancelled\");\n        break;\n\n      default:\n        console.log(\"Unhandled action index \" + index);\n    }\n  };\n\n  var handleButton = function handleButton() {\n    showActionSheetWithOptions({\n      options: btnOptions,\n      cancelButtonIndex: btnOptions.length - 1,\n      title: \"Connection Test options\",\n      showSeparators: true,\n      textStyle: {\n        color: BLUE,\n        textAlign: 'center',\n        width: '100%'\n      },\n      titleTextStyle: {\n        textAlign: 'center',\n        width: '100%'\n      }\n    }, performAction);\n  };\n\n  return _jsx(TouchableOpacity, {\n    testID: \"connectionTestBtn\",\n    style: {\n      marginRight: 11\n    },\n    onPress: handleButton,\n    children: _jsx(Material, {\n      name: \"ghost\",\n      size: 30,\n      color: WHITE\n    })\n  });\n};\n\nexport default ConnectionTestButton;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/connectionTestButton.tsx"],"names":["btnOptions","connectionLevelStrings","connection_levels","ConnectionTestButton","connectionId","showActionSheetWithOptions","useActionSheet","dispatch","useDispatch","api","useContext","performAction","console","joinAllGroups","reconnectFakeConnection","connectWithOtherFakeConnections","handleButton","options","cancelButtonIndex","title","showSeparators","textStyle","color","textAlign","width","titleTextStyle","marginRight"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useActionSheet } from '@expo/react-native-action-sheet';\nimport { useDispatch } from '@/store';\nimport { BLUE, WHITE } from '@/theme/colors';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport {\n  connectWithOtherFakeConnections,\n  joinAllGroups,\n  reconnectFakeConnection,\n} from '../actions/fakeContact';\nimport { connection_levels } from '@/utils/constants';\nimport { connectionLevelStrings } from '@/utils/connectionLevelStrings';\n\n/*\nReturn a button that opens actionsheet with test methods\n */\nconst btnOptions = [\n  'Accept all group invites',\n  'Reconnect with changed profile',\n  'Reconnect with identical profile',\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.JUST_MET]\n  }`,\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.ALREADY_KNOWN]\n  }`,\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.RECOVERY]\n  }`,\n  'cancel',\n];\n\nconst ConnectionTestButton = ({ connectionId }: { connectionId: string }) => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n\n  const performAction = (index: number) => {\n    switch (index) {\n      case 0:\n        console.log(`Joining all groups`);\n        dispatch(joinAllGroups(connectionId, api));\n        break;\n      case 1:\n        console.log(`Reconnecting with different profile`);\n        dispatch(reconnectFakeConnection(connectionId, true));\n        break;\n      case 2:\n        console.log(`Reconnecting with same profile`);\n        dispatch(reconnectFakeConnection(connectionId, false));\n        break;\n      case 3:\n        console.log(`Connecting to other fake connections - JUST MET`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.JUST_MET,\n          ),\n        );\n        break;\n      case 4:\n        console.log(`Connecting to other fake connections - ALREADY KNOWN`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.ALREADY_KNOWN,\n          ),\n        );\n        break;\n      case 5:\n        console.log(`Connecting to other fake connections - RECOVERY`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.RECOVERY,\n          ),\n        );\n        break;\n      case 6:\n        console.log(`Cancelled`);\n        break;\n      default:\n        console.log(`Unhandled action index ${index}`);\n    }\n  };\n\n  const handleButton = () => {\n    showActionSheetWithOptions(\n      {\n        options: btnOptions,\n        cancelButtonIndex: btnOptions.length - 1,\n        title: `Connection Test options`,\n        showSeparators: true,\n        textStyle: {\n          color: BLUE,\n          textAlign: 'center',\n          width: '100%',\n        },\n        titleTextStyle: {\n          textAlign: 'center',\n          width: '100%',\n        },\n      },\n      performAction,\n    );\n  };\n\n  return (\n    <TouchableOpacity\n      testID=\"connectionTestBtn\"\n      style={{ marginRight: 11 }}\n      onPress={handleButton}\n    >\n      <Material name=\"ghost\" size={30} color={WHITE} />\n    </TouchableOpacity>\n  );\n};\n\nexport default ConnectionTestButton;\n"]},"metadata":{},"sourceType":"module"}