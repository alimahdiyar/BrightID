{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedDebug = createAnimatedDebug;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _val = require(\"../val\");\n\nvar _AnimatedBlock = require(\"./AnimatedBlock\");\n\nvar _AnimatedCall = require(\"./AnimatedCall\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AnimatedDebug = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedDebug, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedDebug);\n\n  function AnimatedDebug(message, value) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedDebug);\n    (0, _invariant.default)(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));\n    (0, _invariant.default)(value instanceof _AnimatedNode2.default, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'debug',\n      message: message,\n      value: value\n    }, [value]);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_message\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_value\", void 0);\n\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedDebug, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedDebug, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = (0, _val.val)(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n  return AnimatedDebug;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return (0, _AnimatedBlock.createAnimatedBlock)([(0, _AnimatedCall.createAnimatedCall)([value], function (_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n            a = _ref2[0];\n\n        return console.log(\"\".concat(message, \" \").concat(a));\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, (0, _AnimatedBlock.adapt)(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["AnimatedDebug.js"],"names":["constructor","invariant","value","type","message","toString","__onEvaluate","val","console","runningInRemoteDebugger","runningInExpoShell","global","block","call","adapt"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;IAEA,a;;;;;EAIEA,uBAAW,OAAXA,EAAW,KAAXA,EAA4B;IAAA;;IAAA;IAC1BC,IAAAA,kBAAAA,EACE,OAAA,OAAA,KADO,QAATA,EAAS,mFAAA,MAAA,CAATA,OAAS,CAATA;IAIAA,IAAAA,kBAAAA,EACEC,KAAK,YADE,sBAATD,EAAS,0FAAA,MAAA,CAATA,KAAS,CAATA;IAIA,0BAAM;MAAEE,IAAI,EAAN,OAAA;MAAiBC,OAAjB,EAAiBA,OAAjB;MAA0BF,KAAAA,EAAAA;IAA1B,CAAN,EAAyC,CAAzC,KAAyC,CAAzC;;IAT0B,eAAA,8CAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,8CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;IAU1B,MAAA,QAAA,GAAA,OAAA;IACA,MAAA,MAAA,GAAA,KAAA;IAX0B;EAY3B;;;;WAEDG,oBAAW;MACT,OAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;IACD;;;WAEDC,wBAAe;MACb,IAAMJ,KAAK,GAAGK,IAAAA,QAAAA,EAAI,KAAlB,MAAcA,CAAd;MACAC,OAAO,CAAPA,GAAAA,CAAY,KAAZA,QAAAA,EAAAA,KAAAA;MACA,OAAA,KAAA;IACD;;;EA1BH,sB;;AA6BO,SAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,EAA6C;EAClD,IAAA,OAAA,EAAa;IACX,IAAMC,uBAAuB,GAAG,OAAA,IAAA,KADrB,WACX;IAIA,IAAMC,kBAAkB,GACtBC,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,CAAAA,YAAAA,KADjB,YAAA;;IAGA,IAAIF,uBAAuB,IAA3B,kBAAA,EAAmD;MAGjD,OAAOG,IAAAA,kCAAAA,EAAM,CACXC,IAAAA,gCAAAA,EAAK,CAAD,KAAC,CAALA,EAAc;QAAA;QAAA,IAAA,CAAA;;QAAA,OAASL,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CADZ,CACYA,CAAAA,CAAT;MAAA,CAAdK,CADW,EAAb,KAAa,CAAND,CAAP;IAHF,CAAA,MAOO;MACL,OAAO,IAAA,aAAA,CAAA,OAAA,EAA2BE,IAAAA,oBAAAA,EAAlC,KAAkCA,CAA3B,CAAP;IACD;EAlB+C;;EAqBlD,OAAA,KAAA;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"script"}