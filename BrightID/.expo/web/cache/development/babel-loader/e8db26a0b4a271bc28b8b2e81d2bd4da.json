{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport moment from 'moment';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { BLACK, DARKER_GREY, ORANGE, RED, WHITE } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport TrustlevelSlider from \"../Connections/TrustlevelSlider\";\nimport { retrieveImage } from \"../../utils/filesystem\";\nimport { connection_levels, RECOVERY_COOLDOWN_EXEMPTION } from \"../../utils/constants\";\nimport { useSelector } from \"../../store\";\nimport { ConnectionStats } from \"./ConnectionStats\";\nimport { ProfileCard } from \"./ProfileCard\";\nimport { firstRecoveryTimeSelector } from \"../../reducer/connectionsSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar REPORTED_PERCENTAGE = 0.1;\nexport var ReconnectView = function ReconnectView(_ref) {\n  var pendingConnection = _ref.pendingConnection,\n      existingConnection = _ref.existingConnection,\n      setLevelHandler = _ref.setLevelHandler,\n      abuseHandler = _ref.abuseHandler;\n  var _pendingConnection$pe = pendingConnection.pendingConnectionData,\n      sharedProfile = _pendingConnection$pe.sharedProfile,\n      profileInfo = _pendingConnection$pe.profileInfo;\n  var navigation = useNavigation();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      identicalProfile = _useState2[0],\n      setIdenticalProfile = _useState2[1];\n\n  var _useState3 = useState(existingConnection.level),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connectionLevel = _useState4[0],\n      setConnectionLevel = _useState4[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      id = _useSelector.id;\n\n  var firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  var userReported = profileInfo.reports.find(function (report) {\n    return report.id === id;\n  });\n  var reported = !userReported && profileInfo.reports.length / (profileInfo.connectionsNum || 1) >= REPORTED_PERCENTAGE;\n  useEffect(function () {\n    var compareProfiles = function _callee() {\n      var existingPhoto;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(sharedProfile.name !== existingConnection.name)) {\n                _context.next = 3;\n                break;\n              }\n\n              setIdenticalProfile(false);\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(retrieveImage(existingConnection.photo.filename));\n\n            case 5:\n              existingPhoto = _context.sent;\n\n              if (!(existingPhoto !== sharedProfile.photo)) {\n                _context.next = 9;\n                break;\n              }\n\n              setIdenticalProfile(false);\n              return _context.abrupt(\"return\");\n\n            case 9:\n              setIdenticalProfile(true);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    compareProfiles();\n  }, [existingConnection, sharedProfile.name, sharedProfile.photo]);\n\n  var photoTouchHandler = function photoTouchHandler(photo, type) {\n    navigation.navigate('FullScreenPhoto', {\n      photo: photo,\n      base64: type === 'base64'\n    });\n  };\n\n  var updateLevel = function updateLevel() {\n    if (existingConnection.level !== connectionLevel && (existingConnection.level === connection_levels.RECOVERY || connectionLevel === connection_levels.RECOVERY) && firstRecoveryTime && Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION) {\n      navigation.navigate('RecoveryCooldownInfo', {\n        successCallback: function successCallback() {\n          setLevelHandler(connectionLevel);\n        }\n      });\n    } else {\n      setLevelHandler(connectionLevel);\n    }\n  };\n\n  if (identicalProfile) {\n    var _profileInfo$mutualCo;\n\n    return _jsxs(_Fragment, {\n      children: [_jsxs(View, {\n        style: styles.header,\n        testID: \"ReconnectScreen\",\n        children: [_jsx(Text, {\n          style: styles.subheaderText,\n          children: t('connections.text.alreadyConnectedWith', {\n            name: sharedProfile.name\n          })\n        }), _jsx(Text, {\n          style: styles.lastConnectedText,\n          children: t('connections.tag.lastConnected', {\n            date: moment(parseInt(String(profileInfo.connectedAt), 10)).fromNow()\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.profiles,\n        children: _jsx(View, {\n          testID: \"identicalProfileView\",\n          style: styles.profile,\n          children: _jsx(ProfileCard, {\n            name: sharedProfile.name,\n            photo: sharedProfile.photo,\n            photoSize: \"large\",\n            photoType: \"base64\",\n            photoTouchHandler: photoTouchHandler,\n            reported: reported,\n            userReported: userReported\n          })\n        })\n      }), _jsx(View, {\n        style: styles.countsContainer,\n        children: _jsx(ConnectionStats, {\n          connectionsNum: profileInfo.connectionsNum,\n          groupsNum: profileInfo.groupsNum,\n          mutualConnectionsNum: ((_profileInfo$mutualCo = profileInfo.mutualConnections) == null ? void 0 : _profileInfo$mutualCo.length) || 0\n        })\n      }), _jsxs(View, {\n        style: styles.connectionLevel,\n        children: [_jsx(View, {\n          style: styles.connectionLevelLabel,\n          children: _jsx(Text, {\n            style: styles.connectionLevelLabelText,\n            children: t('connections.label.currentConnectionLevel')\n          })\n        }), _jsx(View, {\n          style: styles.connectionLevel,\n          testID: \"ReconnectSliderView\",\n          children: _jsx(TrustlevelSlider, {\n            currentLevel: connectionLevel,\n            changeLevelHandler: setConnectionLevel,\n            incomingLevel: existingConnection.incomingLevel,\n            verbose: false\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.actionButtons,\n        children: _jsx(TouchableOpacity, {\n          style: styles.updateButton,\n          onPress: updateLevel,\n          testID: \"updateBtn\",\n          children: _jsx(Text, {\n            style: styles.updateButtonLabel,\n            children: t('connections.button.reconnect')\n          })\n        })\n      })]\n    });\n  } else {\n    var _profileInfo$mutualCo2;\n\n    return _jsxs(_Fragment, {\n      children: [_jsxs(View, {\n        style: styles.header,\n        testID: \"ReconnectScreen\",\n        children: [_jsx(Text, {\n          style: styles.subheaderText,\n          children: t('connections.text.alreadyConnectedWith', {\n            name: sharedProfile.name\n          })\n        }), _jsx(Text, {\n          style: styles.lastConnectedText,\n          children: t('connections.tag.lastConnected', {\n            date: moment(parseInt(String(existingConnection.timestamp), 10)).fromNow()\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.profiles,\n        children: [_jsxs(View, {\n          testID: \"oldProfileView\",\n          style: [styles.profile, styles.verticalDivider],\n          children: [_jsx(View, {\n            style: styles.profileHeader,\n            children: _jsx(Text, {\n              style: styles.profileHeaderText,\n              children: t('connections.label.oldProfile')\n            })\n          }), _jsx(ProfileCard, {\n            name: existingConnection.name,\n            photo: existingConnection.photo.filename,\n            photoSize: \"small\",\n            photoType: \"file\",\n            photoTouchHandler: photoTouchHandler,\n            reported: reported,\n            userReported: userReported\n          })]\n        }), _jsxs(View, {\n          testID: \"newProfileView\",\n          style: styles.profile,\n          children: [_jsx(View, {\n            style: styles.profileHeader,\n            children: _jsx(Text, {\n              style: styles.profileHeaderText,\n              children: t('connections.label.newProfile')\n            })\n          }), _jsx(ProfileCard, {\n            name: sharedProfile.name,\n            photo: sharedProfile.photo,\n            photoSize: \"small\",\n            photoType: \"base64\",\n            photoTouchHandler: photoTouchHandler,\n            reported: reported,\n            userReported: userReported\n          })]\n        })]\n      }), _jsx(View, {\n        style: styles.countsContainer,\n        children: _jsx(ConnectionStats, {\n          connectionsNum: profileInfo.connectionsNum,\n          groupsNum: profileInfo.groupsNum,\n          mutualConnectionsNum: ((_profileInfo$mutualCo2 = profileInfo.mutualConnections) == null ? void 0 : _profileInfo$mutualCo2.length) || 0\n        })\n      }), _jsxs(View, {\n        style: styles.connectionLevel,\n        children: [_jsx(View, {\n          style: styles.connectionLevelLabel,\n          children: _jsx(Text, {\n            style: styles.connectionLevelLabelText,\n            children: t('connections.label.currentConnectionLevel')\n          })\n        }), _jsx(View, {\n          style: styles.connectionLevel,\n          testID: \"ReconnectSliderView\",\n          children: _jsx(TrustlevelSlider, {\n            currentLevel: connectionLevel,\n            changeLevelHandler: setConnectionLevel,\n            incomingLevel: existingConnection.incomingLevel,\n            verbose: false\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.actionButtons,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.abuseButton,\n          onPress: abuseHandler,\n          testID: \"reportAbuseBtn\",\n          children: _jsx(Text, {\n            style: styles.abuseButtonLabel,\n            children: t('connections.button.reportConnection')\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.updateButton,\n          onPress: updateLevel,\n          testID: \"updateBtn\",\n          children: _jsx(Text, {\n            style: styles.updateButtonLabel,\n            children: t('connections.button.updateConnection')\n          })\n        })]\n      })]\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  header: {\n    marginTop: DEVICE_LARGE ? 10 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 5\n  },\n  subheaderText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY\n  },\n  lastConnectedText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY\n  },\n  profiles: {\n    flexDirection: 'row',\n    marginTop: 8,\n    marginBottom: 0\n  },\n  profileHeader: {\n    marginTop: 8,\n    marginBottom: 10\n  },\n  profileHeaderText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK\n  },\n  profile: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  verticalDivider: {\n    borderRightWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    height: '100%'\n  },\n  countsContainer: {\n    width: '88%',\n    paddingTop: 6,\n    paddingBottom: 6,\n    marginTop: 8,\n    marginBottom: 16,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    justifyContent: 'space-evenly',\n    flexDirection: 'row'\n  },\n  connectionLevel: {\n    alignItems: 'center'\n  },\n  connectionLevelLabel: {\n    marginBottom: 10\n  },\n  connectionLevelLabelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK\n  },\n  connectionLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginBottom: 5\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    width: '88%'\n  },\n  abuseButton: {\n    backgroundColor: RED,\n    flex: 1,\n    marginRight: 5,\n    borderRadius: 60,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9\n  },\n  abuseButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE\n  },\n  updateButton: {\n    backgroundColor: WHITE,\n    borderColor: ORANGE,\n    borderWidth: 1,\n    borderRadius: 60,\n    flex: 1,\n    marginLeft: 5,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9\n  },\n  updateButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","moment","useNavigation","useTranslation","DEVICE_LARGE","BLACK","DARKER_GREY","ORANGE","RED","WHITE","fontSize","TrustlevelSlider","retrieveImage","connection_levels","RECOVERY_COOLDOWN_EXEMPTION","useSelector","ConnectionStats","ProfileCard","firstRecoveryTimeSelector","REPORTED_PERCENTAGE","ReconnectView","pendingConnection","existingConnection","setLevelHandler","abuseHandler","pendingConnectionData","sharedProfile","profileInfo","navigation","identicalProfile","setIdenticalProfile","level","connectionLevel","setConnectionLevel","t","state","user","id","firstRecoveryTime","userReported","reports","find","report","reported","length","connectionsNum","compareProfiles","name","photo","filename","existingPhoto","photoTouchHandler","type","navigate","base64","updateLevel","RECOVERY","Date","now","successCallback","styles","header","subheaderText","lastConnectedText","date","parseInt","String","connectedAt","fromNow","profiles","profile","countsContainer","groupsNum","mutualConnections","connectionLevelLabel","connectionLevelLabelText","incomingLevel","actionButtons","updateButton","updateButtonLabel","timestamp","verticalDivider","profileHeader","profileHeaderText","abuseButton","abuseButtonLabel","StyleSheet","create","marginTop","justifyContent","alignItems","marginBottom","fontFamily","textAlign","color","flexDirection","flex","borderRightWidth","hairlineWidth","borderColor","height","width","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","connectionLevelText","backgroundColor","marginRight","borderRadius","borderWidth","marginLeft"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/ReconnectView.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport moment from 'moment';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { BLACK, DARKER_GREY, ORANGE, RED, WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport TrustlevelSlider from '@/components/Connections/TrustlevelSlider';\nimport { retrieveImage } from '@/utils/filesystem';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { useSelector } from '@/store';\nimport { ConnectionStats } from './ConnectionStats';\nimport { ProfileCard } from './ProfileCard';\nimport { firstRecoveryTimeSelector } from '@/reducer/connectionsSlice';\n\n// percentage determines reported warning\nconst REPORTED_PERCENTAGE = 0.1;\n// Reported is currently not displayed inside of the reconnect view\n\ntype ReconnectViewProps = {\n  pendingConnection: PendingConnection;\n  existingConnection: Connection;\n  setLevelHandler: (level: ConnectionLevel) => any;\n  abuseHandler: () => any;\n};\n\nexport const ReconnectView = ({\n  pendingConnection,\n  existingConnection,\n  setLevelHandler,\n  abuseHandler,\n}: ReconnectViewProps) => {\n  const {\n    pendingConnectionData: { sharedProfile, profileInfo },\n  } = pendingConnection;\n\n  const navigation = useNavigation();\n  const [identicalProfile, setIdenticalProfile] = useState(true);\n  const [connectionLevel, setConnectionLevel] = useState(\n    existingConnection.level,\n  );\n  const { t } = useTranslation();\n  const { id } = useSelector((state) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n\n  const userReported = profileInfo.reports.find((report) => report.id === id);\n\n  const reported =\n    !userReported &&\n    profileInfo.reports.length / (profileInfo.connectionsNum || 1) >=\n      REPORTED_PERCENTAGE;\n\n  useEffect(() => {\n    const compareProfiles = async () => {\n      if (sharedProfile.name !== existingConnection.name) {\n        setIdenticalProfile(false);\n        return;\n      }\n      const existingPhoto = await retrieveImage(\n        existingConnection.photo.filename,\n      );\n      if (existingPhoto !== sharedProfile.photo) {\n        setIdenticalProfile(false);\n        return;\n      }\n      // name and photo are equal\n      setIdenticalProfile(true);\n    };\n    compareProfiles();\n  }, [existingConnection, sharedProfile.name, sharedProfile.photo]);\n\n  const photoTouchHandler = (photo: string, type: 'base64' | 'file') => {\n    navigation.navigate('FullScreenPhoto', {\n      photo,\n      base64: type === 'base64',\n    });\n  };\n\n  const updateLevel = () => {\n    if (\n      existingConnection.level !== connectionLevel &&\n      (existingConnection.level === connection_levels.RECOVERY ||\n        connectionLevel === connection_levels.RECOVERY) &&\n      firstRecoveryTime &&\n      Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n    ) {\n      // show info about cooldown period\n      navigation.navigate('RecoveryCooldownInfo', {\n        successCallback: () => {\n          setLevelHandler(connectionLevel);\n        },\n      });\n    } else {\n      setLevelHandler(connectionLevel);\n    }\n  };\n\n  if (identicalProfile) {\n    return (\n      <>\n        <View style={styles.header} testID=\"ReconnectScreen\">\n          <Text style={styles.subheaderText}>\n            {t('connections.text.alreadyConnectedWith', {\n              name: sharedProfile.name,\n            })}\n          </Text>\n          <Text style={styles.lastConnectedText}>\n            {t('connections.tag.lastConnected', {\n              date: moment(\n                parseInt(String(profileInfo.connectedAt), 10),\n              ).fromNow(),\n            })}\n          </Text>\n        </View>\n        <View style={styles.profiles}>\n          <View testID=\"identicalProfileView\" style={styles.profile}>\n            <ProfileCard\n              name={sharedProfile.name}\n              photo={sharedProfile.photo}\n              photoSize=\"large\"\n              photoType=\"base64\"\n              photoTouchHandler={photoTouchHandler}\n              reported={reported}\n              userReported={userReported}\n            />\n          </View>\n        </View>\n        <View style={styles.countsContainer}>\n          <ConnectionStats\n            connectionsNum={profileInfo.connectionsNum}\n            groupsNum={profileInfo.groupsNum}\n            mutualConnectionsNum={profileInfo.mutualConnections?.length || 0}\n          />\n        </View>\n        <View style={styles.connectionLevel}>\n          <View style={styles.connectionLevelLabel}>\n            <Text style={styles.connectionLevelLabelText}>\n              {t('connections.label.currentConnectionLevel')}\n            </Text>\n          </View>\n          <View style={styles.connectionLevel} testID=\"ReconnectSliderView\">\n            <TrustlevelSlider\n              currentLevel={connectionLevel}\n              changeLevelHandler={setConnectionLevel}\n              incomingLevel={existingConnection.incomingLevel}\n              verbose={false}\n            />\n          </View>\n        </View>\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={styles.updateButton}\n            onPress={updateLevel}\n            testID=\"updateBtn\"\n          >\n            <Text style={styles.updateButtonLabel}>\n              {t('connections.button.reconnect')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <View style={styles.header} testID=\"ReconnectScreen\">\n          <Text style={styles.subheaderText}>\n            {t('connections.text.alreadyConnectedWith', {\n              name: sharedProfile.name,\n            })}\n          </Text>\n          <Text style={styles.lastConnectedText}>\n            {t('connections.tag.lastConnected', {\n              date: moment(\n                parseInt(String(existingConnection.timestamp), 10),\n              ).fromNow(),\n            })}\n          </Text>\n        </View>\n\n        <View style={styles.profiles}>\n          <View\n            testID=\"oldProfileView\"\n            style={[styles.profile, styles.verticalDivider]}\n          >\n            <View style={styles.profileHeader}>\n              <Text style={styles.profileHeaderText}>\n                {t('connections.label.oldProfile')}\n              </Text>\n            </View>\n            <ProfileCard\n              name={existingConnection.name}\n              photo={existingConnection.photo.filename}\n              photoSize=\"small\"\n              photoType=\"file\"\n              photoTouchHandler={photoTouchHandler}\n              reported={reported}\n              userReported={userReported}\n            />\n          </View>\n          <View testID=\"newProfileView\" style={styles.profile}>\n            <View style={styles.profileHeader}>\n              <Text style={styles.profileHeaderText}>\n                {t('connections.label.newProfile')}\n              </Text>\n            </View>\n            <ProfileCard\n              name={sharedProfile.name}\n              photo={sharedProfile.photo}\n              photoSize=\"small\"\n              photoType=\"base64\"\n              photoTouchHandler={photoTouchHandler}\n              reported={reported}\n              userReported={userReported}\n            />\n          </View>\n        </View>\n        <View style={styles.countsContainer}>\n          <ConnectionStats\n            connectionsNum={profileInfo.connectionsNum}\n            groupsNum={profileInfo.groupsNum}\n            mutualConnectionsNum={profileInfo.mutualConnections?.length || 0}\n          />\n        </View>\n        <View style={styles.connectionLevel}>\n          <View style={styles.connectionLevelLabel}>\n            <Text style={styles.connectionLevelLabelText}>\n              {t('connections.label.currentConnectionLevel')}\n            </Text>\n          </View>\n          <View style={styles.connectionLevel} testID=\"ReconnectSliderView\">\n            <TrustlevelSlider\n              currentLevel={connectionLevel}\n              changeLevelHandler={setConnectionLevel}\n              incomingLevel={existingConnection.incomingLevel}\n              verbose={false}\n            />\n          </View>\n        </View>\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={styles.abuseButton}\n            onPress={abuseHandler}\n            testID=\"reportAbuseBtn\"\n          >\n            <Text style={styles.abuseButtonLabel}>\n              {t('connections.button.reportConnection')}\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={styles.updateButton}\n            onPress={updateLevel}\n            testID=\"updateBtn\"\n          >\n            <Text style={styles.updateButtonLabel}>\n              {t('connections.button.updateConnection')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    marginTop: DEVICE_LARGE ? 10 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 5,\n  },\n  subheaderText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY,\n  },\n  lastConnectedText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    textAlign: 'center',\n    color: DARKER_GREY,\n  },\n  profiles: {\n    flexDirection: 'row',\n    marginTop: 8,\n    marginBottom: 0,\n  },\n  profileHeader: {\n    marginTop: 8,\n    marginBottom: 10,\n  },\n  profileHeaderText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK,\n  },\n  profile: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  verticalDivider: {\n    borderRightWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    height: '100%',\n  },\n  countsContainer: {\n    width: '88%',\n    paddingTop: 6,\n    paddingBottom: 6,\n    marginTop: 8,\n    marginBottom: 16,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: ORANGE,\n    justifyContent: 'space-evenly',\n    flexDirection: 'row',\n  },\n  connectionLevel: {\n    alignItems: 'center',\n  },\n  connectionLevelLabel: {\n    marginBottom: 10,\n  },\n  connectionLevelLabelText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: BLACK,\n  },\n  connectionLevelText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginBottom: 5,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    width: '88%',\n  },\n  abuseButton: {\n    backgroundColor: RED,\n    flex: 1,\n    marginRight: 5,\n    borderRadius: 60,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9,\n  },\n  abuseButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n  },\n  updateButton: {\n    backgroundColor: WHITE,\n    borderColor: ORANGE,\n    borderWidth: 1,\n    borderRadius: 60,\n    flex: 1,\n    marginLeft: 5,\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 9,\n  },\n  updateButtonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: ORANGE,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}