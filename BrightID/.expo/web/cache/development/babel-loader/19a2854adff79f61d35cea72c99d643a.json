{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from 'apisauce';\nimport { b64ToUrlSafeB64 } from \"../utils/encoding\";\nvar recoveryUrl = 'https://recovery.brightid.org';\n\nvar BackupService = function () {\n  function BackupService() {\n    _classCallCheck(this, BackupService);\n\n    this.recoveryApi = create({\n      baseURL: recoveryUrl\n    });\n  }\n\n  _createClass(BackupService, [{\n    key: \"getRecovery\",\n    value: function getRecovery(key1, key2) {\n      var res;\n      return _regeneratorRuntime.async(function getRecovery$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.recoveryApi.get(\"/backups/\" + b64ToUrlSafeB64(key1) + \"/\" + b64ToUrlSafeB64(key2)));\n\n            case 2:\n              res = _context.sent;\n              BackupService.throwOnError(res);\n              return _context.abrupt(\"return\", res);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"putRecovery\",\n    value: function putRecovery(key1, key2, data) {\n      var res;\n      return _regeneratorRuntime.async(function putRecovery$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.recoveryApi.put(\"/backups/\" + b64ToUrlSafeB64(key1) + \"/\" + b64ToUrlSafeB64(key2), {\n                data: data\n              }));\n\n            case 2:\n              res = _context2.sent;\n              BackupService.throwOnError(res);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }], [{\n    key: \"throwOnError\",\n    value: function throwOnError(response) {\n      if (response.ok) {\n        return;\n      }\n\n      if (response.data && response.data.errorMessage) {\n        throw new Error(response.data.errorMessage);\n      }\n\n      console.log(\"backupApi response error: \" + response.status + \" - \" + response.problem);\n      throw new Error(response.problem);\n    }\n  }]);\n\n  return BackupService;\n}();\n\nvar backupService = new BackupService();\nexport default backupService;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/api/backupService.ts"],"names":["recoveryUrl","BackupService","create","baseURL","response","console","res","b64ToUrlSafeB64","data","backupService"],"mappings":";;;AAAA,SAAA,MAAA,QAAA,UAAA;AACA,SAAA,eAAA;AAEA,IAAMA,WAAW,GAAjB,+BAAA;;AAEMC,IAAAA,a;EAGJ,SAAA,aAAA,GAAc;IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;IACZ,KAAA,WAAA,GAAmBC,MAAM,CAAC;MACxBC,OAAO,EADT;IAA0B,CAAD,CAAzB;;;;;WAkBF,SAAA,WAAA,CAAA,IAAA,EAAA,IAAA,EAAA;MAAA,IAAA,GAAA;MAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,YAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA,OAAA,mBAAA,CAAA,KAAA,CACoB,KAAA,WAAA,CAAA,GAAA,CAAA,cACJI,eAAe,CADX,IACW,CADX,GAAA,GAAA,GACqBA,eAAe,CAFxD,IAEwD,CADpC,CADpB,CAAA;;YAAA,KAAA,CAAA;cACQD,GADR,GAAA,QAAA,CAAA,IACQA;cAGNL,aAAa,CAAbA,YAAAA,CAAAA,GAAAA;cAJF,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;YAAA,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;;;;WAQA,SAAA,WAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAA,IAAA,GAAA;MAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,YAAA,CAAA,SAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;cAAA,OAAA,mBAAA,CAAA,KAAA,CACoB,KAAA,WAAA,CAAA,GAAA,CAAA,cACJM,eAAe,CADX,IACW,CADX,GAAA,GAAA,GACqBA,eAAe,CADpC,IACoC,CADpC,EAEhB;gBACEC,IAAI,EAJV;cAGI,CAFgB,CADpB,CAAA;;YAAA,KAAA,CAAA;cACQF,GADR,GAAA,SAAA,CAAA,IACQA;cAMNL,aAAa,CAAbA,YAAAA,CAAAA,GAAAA;;YAPF,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,SAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;;;;WArBA,SAAA,YAAA,CAAA,QAAA,EAAgD;MAC9C,IAAIG,QAAQ,CAAZ,EAAA,EAAiB;QACf;MAEF;;MAAA,IAAIA,QAAQ,CAARA,IAAAA,IAAiBA,QAAQ,CAARA,IAAAA,CAArB,YAAA,EAAiD;QAC/C,MAAM,IAAA,KAAA,CAAUA,QAAQ,CAARA,IAAAA,CAAhB,YAAM,CAAN;MAEFC;;MAAAA,OAAO,CAAPA,GAAAA,CAAAA,+BAC+BD,QAAQ,CADvCC,MAAAA,GAAAA,KAAAA,GACoDD,QAAQ,CAD5DC,OAAAA;MAGA,MAAM,IAAA,KAAA,CAAUD,QAAQ,CAAxB,OAAM,CAAN;;;;;GAnBEH;;AAyCN,IAAMQ,aAAa,GAAG,IAAtB,aAAsB,EAAtB;AAEA,eAAA,aAAA","sourcesContent":["import { create, ApisauceInstance, ApiResponse } from 'apisauce';\nimport { b64ToUrlSafeB64 } from '@/utils/encoding';\n\nconst recoveryUrl = 'https://recovery.brightid.org';\n\nclass BackupService {\n  recoveryApi: ApisauceInstance;\n\n  constructor() {\n    this.recoveryApi = create({\n      baseURL: recoveryUrl,\n    });\n  }\n\n  static throwOnError(response: ApiResponse<any>) {\n    if (response.ok) {\n      return;\n    }\n    if (response.data && response.data.errorMessage) {\n      throw new Error(response.data.errorMessage);\n    }\n    console.log(\n      `backupApi response error: ${response.status} - ${response.problem}`,\n    );\n    throw new Error(response.problem);\n  }\n\n  async getRecovery(key1: string, key2: string) {\n    const res = await this.recoveryApi.get<GetRecoveryRes, ErrRes>(\n      `/backups/${b64ToUrlSafeB64(key1)}/${b64ToUrlSafeB64(key2)}`,\n    );\n    BackupService.throwOnError(res);\n    return res as unknown as GetRecoveryRes;\n  }\n\n  async putRecovery(key1: string, key2: string, data: string) {\n    const res = await this.recoveryApi.put(\n      `/backups/${b64ToUrlSafeB64(key1)}/${b64ToUrlSafeB64(key2)}`,\n      {\n        data,\n      },\n    );\n    BackupService.throwOnError(res);\n  }\n}\n\nconst backupService = new BackupService();\n\nexport default backupService;\n"]},"metadata":{},"sourceType":"module"}