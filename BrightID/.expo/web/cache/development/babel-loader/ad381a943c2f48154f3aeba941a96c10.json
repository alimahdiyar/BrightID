{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport CryptoJS from 'crypto-js';\nimport i18next from 'i18next';\nimport { saveImage } from \"../../utils/filesystem\";\nimport { encryptAesKey } from \"../../utils/invites\";\nimport { createGroup } from \"../../actions\";\nimport backupApi from \"../../api/backupService\";\nimport { hash, randomKey } from \"../../utils/encoding\";\nimport { selectConnectionById } from \"../../reducer/connectionsSlice\";\nimport { addOperation } from \"../../reducer/operationsSlice\";\nimport { backupPhoto, backupUser } from \"../Onboarding/RecoveryFlow/thunks/backupThunks\";\nexport var createNewGroup = function createNewGroup(photo, name, api, newGroupInvitees, setCreationState) {\n  return function _callee(dispatch, getState) {\n    var _getState, _getState$user, id, backupCompleted, invitees, aesKey, uuidKey, groupId, type, groupData, encryptedGroupData, url, filename, newGroup, createOp, _iterator, _step, inv, _await$api$getProfile, signingKeys, inviteData, inviteOp;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState = getState(), _getState$user = _getState.user, id = _getState$user.id, backupCompleted = _getState$user.backupCompleted;\n            invitees = newGroupInvitees.map(function (inv) {\n              return selectConnectionById(getState(), inv);\n            });\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(randomKey(16));\n\n          case 5:\n            aesKey = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(randomKey(9));\n\n          case 8:\n            uuidKey = _context.sent;\n            groupId = hash(uuidKey);\n            type = 'general';\n            groupData = JSON.stringify({\n              name: name,\n              photo: photo\n            });\n            encryptedGroupData = CryptoJS.AES.encrypt(groupData, aesKey).toString();\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(backupApi.putRecovery('immutable', groupId, encryptedGroupData));\n\n          case 15:\n            setCreationState('creatingGroup');\n            url = \"https://recovery.brightid.org/backups/immutable/\" + groupId;\n            filename = null;\n\n            if (!photo) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: groupId,\n              base64Image: photo\n            }));\n\n          case 21:\n            filename = _context.sent;\n\n          case 22:\n            newGroup = {\n              invites: [],\n              joined: 0,\n              timestamp: 0,\n              admins: [id],\n              members: [id],\n              id: groupId,\n              photo: {\n                filename: filename\n              },\n              name: name,\n              url: url,\n              aesKey: aesKey,\n              type: type,\n              state: 'initiated'\n            };\n            _context.next = 25;\n            return _regeneratorRuntime.awrap(api.createGroup(groupId, url, type));\n\n          case 25:\n            createOp = _context.sent;\n            dispatch(addOperation(createOp));\n            dispatch(createGroup(newGroup));\n            _iterator = _createForOfIteratorHelperLoose(invitees);\n\n          case 29:\n            if ((_step = _iterator()).done) {\n              _context.next = 44;\n              break;\n            }\n\n            inv = _step.value;\n            _context.next = 33;\n            return _regeneratorRuntime.awrap(api.getProfile(inv.id));\n\n          case 33:\n            _await$api$getProfile = _context.sent;\n            signingKeys = _await$api$getProfile.signingKeys;\n            _context.next = 37;\n            return _regeneratorRuntime.awrap(encryptAesKey(aesKey, signingKeys[0]));\n\n          case 37:\n            inviteData = _context.sent;\n            _context.next = 40;\n            return _regeneratorRuntime.awrap(api.invite(inv.id, groupId, inviteData));\n\n          case 40:\n            inviteOp = _context.sent;\n            dispatch(addOperation(inviteOp));\n\n          case 42:\n            _context.next = 29;\n            break;\n\n          case 44:\n            if (!backupCompleted) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 47;\n            return _regeneratorRuntime.awrap(dispatch(backupUser()));\n\n          case 47:\n            if (!filename) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 50;\n            return _regeneratorRuntime.awrap(dispatch(backupPhoto(groupId, filename)));\n\n          case 50:\n            return _context.abrupt(\"return\", true);\n\n          case 53:\n            _context.prev = 53;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0.message);\n            Alert.alert(i18next.t('createGroup.alert.title.createFailed'), _context.t0.message);\n            return _context.abrupt(\"return\", false);\n\n          case 58:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 53]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Groups/actions.ts"],"names":["createNewGroup","id","backupCompleted","getState","invitees","newGroupInvitees","selectConnectionById","aesKey","randomKey","uuidKey","groupId","hash","type","groupData","JSON","name","photo","encryptedGroupData","CryptoJS","backupApi","setCreationState","url","filename","saveImage","imageName","base64Image","newGroup","invites","joined","timestamp","admins","members","state","createOp","api","dispatch","addOperation","createGroup","inv","signingKeys","inviteData","encryptAesKey","inviteOp","backupUser","backupPhoto","console","Alert","i18next"],"mappings":"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","sourcesContent":["import { Alert } from 'react-native';\nimport CryptoJS from 'crypto-js';\nimport i18next from 'i18next';\nimport { saveImage } from '@/utils/filesystem';\nimport { encryptAesKey } from '@/utils/invites';\nimport { createGroup } from '@/actions/index';\nimport backupApi from '@/api/backupService';\nimport { hash, randomKey } from '@/utils/encoding';\nimport { selectConnectionById } from '@/reducer/connectionsSlice';\nimport { addOperation } from '@/reducer/operationsSlice';\nimport {\n  backupPhoto,\n  backupUser,\n} from '../Onboarding/RecoveryFlow/thunks/backupThunks';\nimport { NodeApi } from '@/api/brightId';\n\nexport const createNewGroup =\n  (\n    photo: string,\n    name: string,\n    api: NodeApi,\n    newGroupInvitees: Array<string>,\n    setCreationState: (string) => void,\n  ) =>\n  async (dispatch: dispatch, getState: getState) => {\n    try {\n      const {\n        user: { id, backupCompleted },\n      } = getState();\n\n      const invitees = newGroupInvitees.map((inv) =>\n        selectConnectionById(getState(), inv),\n      );\n\n      const aesKey = await randomKey(16);\n      const uuidKey = await randomKey(9);\n      const groupId = hash(uuidKey);\n      const type = 'general';\n\n      const groupData = JSON.stringify({ name, photo });\n\n      const encryptedGroupData = CryptoJS.AES.encrypt(\n        groupData,\n        aesKey,\n      ).toString();\n\n      await backupApi.putRecovery('immutable', groupId, encryptedGroupData);\n      setCreationState('creatingGroup');\n\n      const url = `https://recovery.brightid.org/backups/immutable/${groupId}`;\n\n      let filename = null;\n      if (photo) {\n        filename = await saveImage({\n          imageName: groupId,\n          base64Image: photo,\n        });\n      }\n\n      const newGroup: Group = {\n        invites: [],\n        joined: 0,\n        timestamp: 0,\n        admins: [id],\n        members: [id],\n        id: groupId,\n        photo: { filename },\n        name,\n        url,\n        aesKey,\n        type,\n        state: 'initiated',\n      };\n\n      const createOp = await api.createGroup(groupId, url, type);\n      dispatch(addOperation(createOp));\n      dispatch(createGroup(newGroup));\n\n      for (const inv of invitees) {\n        const { signingKeys } = await api.getProfile(inv.id);\n        const inviteData = await encryptAesKey(aesKey, signingKeys[0]);\n        const inviteOp = await api.invite(inv.id, groupId, inviteData);\n        dispatch(addOperation(inviteOp));\n      }\n\n      if (backupCompleted) {\n        await dispatch(backupUser());\n        if (filename) {\n          await dispatch(backupPhoto(groupId, filename));\n        }\n      }\n      return true;\n    } catch (err) {\n      console.error(err.message);\n      Alert.alert(\n        i18next.t('createGroup.alert.title.createFailed'),\n        err.message,\n      );\n      return false;\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}