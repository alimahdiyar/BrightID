{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.savePhoto = exports.saveId = exports.createKeypair = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _actions = require(\"../../../actions\");\n\nvar _filesystem = require(\"../../../utils/filesystem\");\n\nvar _encoding = require(\"../../../utils/encoding\");\n\nvar createKeypair = function createKeypair() {\n  return function _callee(dispatch, getState) {\n    var filename, _await$nacl$sign$keyP, publicKey, secretKey, b64PubKey;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filename = getState().user.photo.filename;\n\n            if (filename) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return _regenerator.default.awrap(_tweetnacl.default.sign.keyPair());\n\n          case 4:\n            _await$nacl$sign$keyP = _context.sent;\n            publicKey = _await$nacl$sign$keyP.publicKey;\n            secretKey = _await$nacl$sign$keyP.secretKey;\n            b64PubKey = (0, _encoding.uInt8ArrayToB64)(publicKey);\n            dispatch((0, _actions.setKeypair)({\n              publicKey: b64PubKey,\n              secretKey: secretKey\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.createKeypair = createKeypair;\n\nvar savePhoto = function savePhoto(base64Image) {\n  return function _callee2(dispatch, getState) {\n    var publicKey, id, filename;\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap((0, _filesystem.createImageDirectory)());\n\n          case 2:\n            publicKey = getState().keypair.publicKey;\n            id = (0, _encoding.b64ToUrlSafeB64)(publicKey);\n            _context2.next = 6;\n            return _regenerator.default.awrap((0, _filesystem.saveImage)({\n              imageName: id,\n              base64Image: base64Image\n            }));\n\n          case 6:\n            filename = _context2.sent;\n            dispatch((0, _actions.setPhoto)({\n              filename: filename\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.savePhoto = savePhoto;\n\nvar saveId = function saveId() {\n  return function (dispatch, getState) {\n    var publicKey = getState().keypair.publicKey;\n    var id = (0, _encoding.b64ToUrlSafeB64)(publicKey);\n    dispatch((0, _actions.setUserId)(id));\n  };\n};\n\nexports.saveId = saveId;","map":{"version":3,"names":["createKeypair","dispatch","getState","filename","user","photo","nacl","sign","keyPair","publicKey","secretKey","b64PubKey","uInt8ArrayToB64","setKeypair","savePhoto","base64Image","createImageDirectory","keypair","id","b64ToUrlSafeB64","saveImage","imageName","setPhoto","saveId","setUserId"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/SignUpFlow/thunks.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport { setKeypair, setPhoto, setUserId } from '@/actions';\nimport { createImageDirectory, saveImage } from '@/utils/filesystem';\nimport { b64ToUrlSafeB64, uInt8ArrayToB64 } from '@/utils/encoding';\n\nexport const createKeypair = () => async (\n  dispatch: dispatch,\n  getState: getState,\n) => {\n  // do not create new keypair if photo already exists (photo is saved using id)\n  const { filename } = getState().user.photo;\n\n  if (!filename) {\n    // create public / private key pair\n    const { publicKey, secretKey } = await nacl.sign.keyPair();\n    const b64PubKey = uInt8ArrayToB64(publicKey);\n\n    dispatch(setKeypair({ publicKey: b64PubKey, secretKey }));\n  }\n};\n\nexport const savePhoto = (base64Image: string) => async (\n  dispatch: dispatch,\n  getState: getState,\n) => {\n  // creates Image Directory\n  await createImageDirectory();\n\n  const { publicKey } = getState().keypair;\n  const id = b64ToUrlSafeB64(publicKey);\n\n  const filename = await saveImage({ imageName: id, base64Image });\n  dispatch(setPhoto({ filename }));\n};\n\nexport const saveId = () => (dispatch: dispatch, getState: getState) => {\n  const { publicKey } = getState().keypair;\n  const id = b64ToUrlSafeB64(publicKey);\n\n  dispatch(setUserId(id));\n};\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB;EAAA,OAAM,iBACjCC,QADiC,EAEjCC,QAFiC;IAAA;;IAAA;MAAA;QAAA;UAAA;YAKzBC,QALyB,GAKZD,QAAQ,GAAGE,IAAX,CAAgBC,KALJ,CAKzBF,QALyB;;YAAA,IAO5BA,QAP4B;cAAA;cAAA;YAAA;;YAAA;YAAA,kCASQG,kBAAA,CAAKC,IAAL,CAAUC,OAAV,EATR;;UAAA;YAAA;YASvBC,SATuB,yBASvBA,SATuB;YASZC,SATY,yBASZA,SATY;YAUzBC,SAVyB,GAUb,IAAAC,yBAAA,EAAgBH,SAAhB,CAVa;YAY/BR,QAAQ,CAAC,IAAAY,mBAAA,EAAW;cAAEJ,SAAS,EAAEE,SAAb;cAAwBD,SAAS,EAATA;YAAxB,CAAX,CAAD,CAAR;;UAZ+B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAN;AAAA,CAAtB;;;;AAgBA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,WAAD;EAAA,OAAyB,kBAChDd,QADgD,EAEhDC,QAFgD;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,kCAK1C,IAAAc,gCAAA,GAL0C;;UAAA;YAOxCP,SAPwC,GAO1BP,QAAQ,GAAGe,OAPe,CAOxCR,SAPwC;YAQ1CS,EAR0C,GAQrC,IAAAC,yBAAA,EAAgBV,SAAhB,CARqC;YAAA;YAAA,kCAUzB,IAAAW,qBAAA,EAAU;cAAEC,SAAS,EAAEH,EAAb;cAAiBH,WAAW,EAAXA;YAAjB,CAAV,CAVyB;;UAAA;YAU1CZ,QAV0C;YAWhDF,QAAQ,CAAC,IAAAqB,iBAAA,EAAS;cAAEnB,QAAQ,EAARA;YAAF,CAAT,CAAD,CAAR;;UAXgD;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAzB;AAAA,CAAlB;;;;AAcA,IAAMoB,MAAM,GAAG,SAATA,MAAS;EAAA,OAAM,UAACtB,QAAD,EAAqBC,QAArB,EAA4C;IACtE,IAAQO,SAAR,GAAsBP,QAAQ,GAAGe,OAAjC,CAAQR,SAAR;IACA,IAAMS,EAAE,GAAG,IAAAC,yBAAA,EAAgBV,SAAhB,CAAX;IAEAR,QAAQ,CAAC,IAAAuB,kBAAA,EAAUN,EAAV,CAAD,CAAR;EACD,CALqB;AAAA,CAAf"},"metadata":{},"sourceType":"script"}