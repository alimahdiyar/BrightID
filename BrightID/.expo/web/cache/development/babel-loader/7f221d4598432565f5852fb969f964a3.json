{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useContext, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport _ from 'lodash';\nimport { useDispatch, useSelector, store } from \"../../store\";\nimport FloatingActionButton from \"../Helpers/FloatingActionButton\";\nimport EmptyList from \"../Helpers/EmptyList\";\nimport { connectionsSelector } from \"../../utils/connectionsSelector\";\nimport { ORANGE, WHITE } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { updateConnections } from \"../../actions\";\nimport ConnectionCard from \"./ConnectionCard\";\nimport { MAX_DISPLAY_CONNECTIONS } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar ITEM_HEIGHT = DEVICE_LARGE ? 102 : 92;\n\nvar getItemLayout = function getItemLayout(_data, index) {\n  return {\n    length: ITEM_HEIGHT,\n    offset: ITEM_HEIGHT * index,\n    index: index\n  };\n};\n\nvar renderItem = function renderItem(_ref) {\n  var item = _ref.item,\n      index = _ref.index;\n  return _jsx(ConnectionCard, _objectSpread(_objectSpread({}, item), {}, {\n    index: index\n  }));\n};\n\nexport var ConnectionsScreen = function ConnectionsScreen() {\n  var _route$params;\n\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n  var api = useContext(NodeApiContext);\n  var route = useRoute();\n  var excludeGroup = (_route$params = route.params) == null ? void 0 : _route$params.group;\n  var connections = useSelector(function (state) {\n    return connectionsSelector(state, excludeGroup == null ? void 0 : excludeGroup.members);\n  }).slice(0, MAX_DISPLAY_CONNECTIONS);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var handleNewConnection = function handleNewConnection() {\n    navigation.navigate('MyCode');\n  };\n\n  var ConnectionList = useMemo(function () {\n    var onRefresh = function _callee() {\n      var _store$getState, id, conns, incomingConns, incomingConnsById, _iterator, _step, _incomingConnsById$co, conn;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Reloading Connections');\n              _store$getState = store.getState(), id = _store$getState.user.id;\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(api.getConnections(id, 'outbound'));\n\n            case 5:\n              conns = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(api.getConnections(id, 'inbound'));\n\n            case 8:\n              incomingConns = _context.sent;\n              incomingConnsById = _.keyBy(incomingConns, 'id');\n\n              for (_iterator = _createForOfIteratorHelperLoose(conns); !(_step = _iterator()).done;) {\n                conn = _step.value;\n                conn.incomingLevel = (_incomingConnsById$co = incomingConnsById[conn.id]) == null ? void 0 : _incomingConnsById$co.level;\n              }\n\n              dispatch(updateConnections(conns));\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0.message);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 14]], Promise);\n    };\n\n    console.log('Rendering Connections List');\n    return _jsx(FlatList, {\n      style: styles.connectionsContainer,\n      data: connections,\n      keyExtractor: function keyExtractor(_ref2, index) {\n        var id = _ref2.id;\n        return id + index;\n      },\n      renderItem: renderItem,\n      getItemLayout: getItemLayout,\n      contentContainerStyle: {\n        paddingBottom: 70,\n        paddingTop: 20,\n        flexGrow: 1\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      refreshing: false,\n      onRefresh: onRefresh,\n      ListEmptyComponent: _jsx(EmptyList, {\n        iconType: \"account-off-outline\",\n        title: t('connections.text.noConnections')\n      })\n    });\n  }, [connections]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      testID: \"connectionsScreen\",\n      children: [_jsx(View, {\n        style: styles.mainContainer,\n        children: ConnectionList\n      }), _jsx(FloatingActionButton, {\n        onPress: handleNewConnection\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  connectionsContainer: {\n    flex: 1,\n    width: '100%'\n  },\n  actionCard: {\n    height: DEVICE_LARGE ? 76 : 71,\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 60 : 55\n  },\n  actionText: {\n    fontFamily: 'Poppins-Medium',\n    color: WHITE,\n    fontSize: fontSize[11]\n  }\n});\nexport default ConnectionsScreen;","map":{"version":3,"names":["React","useContext","useMemo","useTranslation","useNavigation","useRoute","_","useDispatch","useSelector","store","FloatingActionButton","EmptyList","connectionsSelector","ORANGE","WHITE","DEVICE_LARGE","fontSize","NodeApiContext","updateConnections","ConnectionCard","MAX_DISPLAY_CONNECTIONS","ITEM_HEIGHT","getItemLayout","_data","index","length","offset","renderItem","item","ConnectionsScreen","dispatch","navigation","api","route","excludeGroup","params","group","connections","state","members","slice","t","handleNewConnection","navigate","ConnectionList","onRefresh","console","log","getState","id","user","getConnections","conns","incomingConns","incomingConnsById","keyBy","conn","incomingLevel","level","message","styles","connectionsContainer","paddingBottom","paddingTop","flexGrow","orangeTop","container","mainContainer","StyleSheet","create","backgroundColor","height","width","zIndex","flex","borderTopLeftRadius","marginTop","overflow","alignItems","flexDirection","justifyContent","actionCard","actionText","fontFamily","color"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Connections/ConnectionsScreen.tsx"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { StyleSheet, View, StatusBar, FlatList } from 'react-native';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport _ from 'lodash';\nimport { useDispatch, useSelector, store } from '@/store';\nimport FloatingActionButton from '@/components/Helpers/FloatingActionButton';\nimport EmptyList from '@/components/Helpers/EmptyList';\nimport { connectionsSelector } from '@/utils/connectionsSelector';\nimport { ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { updateConnections } from '@/actions';\nimport ConnectionCard from './ConnectionCard';\nimport { MAX_DISPLAY_CONNECTIONS } from '@/utils/constants';\n\n/**\n * Connection screen of BrightID\n * Displays a search input and list of Connection Cards\n */\n\n/** Helper Component */\nconst ITEM_HEIGHT = DEVICE_LARGE ? 102 : 92;\n\nconst getItemLayout = (_data, index: number) => ({\n  length: ITEM_HEIGHT,\n  offset: ITEM_HEIGHT * index,\n  index,\n});\n\nconst renderItem = ({ item, index }: { item: Connection; index: number }) => {\n  return <ConnectionCard {...item} index={index} />;\n};\n\n/** Main Component */\n\nexport const ConnectionsScreen = () => {\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const api = useContext(NodeApiContext);\n  const route: { params?: { group: Group } } = useRoute() as {\n    params?: { group: Group };\n  };\n  const excludeGroup = route.params?.group;\n  const connections = useSelector((state) =>\n    connectionsSelector(state, excludeGroup?.members),\n  ).slice(0, MAX_DISPLAY_CONNECTIONS);\n  const { t } = useTranslation();\n\n  const handleNewConnection = () => {\n    navigation.navigate('MyCode');\n  };\n\n  const ConnectionList = useMemo(() => {\n    const onRefresh = async () => {\n      console.log('Reloading Connections');\n      const {\n        user: { id },\n      } = store.getState();\n      try {\n        const conns = await api.getConnections(id, 'outbound');\n        const incomingConns = await api.getConnections(id, 'inbound');\n        const incomingConnsById = _.keyBy(incomingConns, 'id');\n        for (const conn of conns) {\n          conn.incomingLevel = incomingConnsById[conn.id]?.level;\n        }\n        dispatch(updateConnections(conns));\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n    console.log('Rendering Connections List');\n    return (\n      <FlatList\n        style={styles.connectionsContainer}\n        data={connections}\n        keyExtractor={({ id }, index) => id + index}\n        renderItem={renderItem}\n        getItemLayout={getItemLayout}\n        contentContainerStyle={{\n          paddingBottom: 70,\n          paddingTop: 20,\n          flexGrow: 1,\n        }}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        refreshing={false}\n        onRefresh={onRefresh}\n        ListEmptyComponent={\n          <EmptyList\n            iconType=\"account-off-outline\"\n            title={t('connections.text.noConnections')}\n          />\n        }\n      />\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connections]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n\n      <View style={styles.container} testID=\"connectionsScreen\">\n        <View style={styles.mainContainer}>{ConnectionList}</View>\n        <FloatingActionButton onPress={handleNewConnection} />\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10,\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  connectionsContainer: {\n    flex: 1,\n    width: '100%',\n  },\n  actionCard: {\n    height: DEVICE_LARGE ? 76 : 71,\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 60 : 55,\n  },\n  actionText: {\n    fontFamily: 'Poppins-Medium',\n    color: WHITE,\n    fontSize: fontSize[11],\n  },\n});\n\nexport default ConnectionsScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}