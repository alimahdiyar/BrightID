{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _base = require(\"../base\");\n\nvar VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  var lastTime = (0, _base.cond)(state.time, state.time, clock);\n  var deltaTime = (0, _base.sub)(clock, lastTime);\n  var kv = (0, _base.pow)(config.deceleration, deltaTime);\n  var kx = (0, _base.divide)((0, _base.multiply)(config.deceleration, (0, _base.sub)(1, kv)), (0, _base.sub)(1, config.deceleration));\n  var v0 = (0, _base.divide)(state.velocity, 1000);\n  var v = (0, _base.multiply)(v0, kv, 1000);\n  var x = (0, _base.add)(state.position, (0, _base.multiply)(v0, kx));\n  return (0, _base.block)([(0, _base.set)(state.position, x), (0, _base.set)(state.velocity, v), (0, _base.set)(state.time, clock), (0, _base.cond)((0, _base.lessThan)((0, _base.abs)(v), VELOCITY_EPS), (0, _base.set)(state.finished, 1))]);\n}\n\nvar procDecay = (0, _base.proc)(function (clock, time, velocity, position, finished, deceleration) {\n  return decay(clock, {\n    time: time,\n    velocity: velocity,\n    position: position,\n    finished: finished\n  }, {\n    deceleration: deceleration\n  });\n});\n\nvar _default = function _default(clock, _ref, _ref2) {\n  var time = _ref.time,\n      velocity = _ref.velocity,\n      position = _ref.position,\n      finished = _ref.finished;\n  var deceleration = _ref2.deceleration;\n  return procDecay(clock, time, velocity, position, finished, deceleration);\n};\n\nexports.default = _default;","map":{"version":3,"sources":["decay.js"],"names":["VELOCITY_EPS","lastTime","cond","state","deltaTime","sub","kv","pow","config","kx","divide","multiply","v0","v","x","add","block","set","lessThan","abs","procDecay","proc","decay","time","velocity","position","finished","deceleration"],"mappings":";;;;;AAAA;;AAcA,IAAMA,YAAY,GAAlB,CAAA;;AAEA,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAqC;EACnC,IAAMC,QAAQ,GAAGC,IAAAA,UAAAA,EAAKC,KAAK,CAAN,IAAJD,EAAiBC,KAAK,CAAlB,IAAJD,EAAjB,KAAiBA,CAAjB;EACA,IAAME,SAAS,GAAGC,IAAAA,SAAAA,EAAG,KAAHA,EAFiB,QAEjBA,CAAlB;EAQA,IAAMC,EAAE,GAAGC,IAAAA,SAAAA,EAAIC,MAAM,CAAP,YAAHD,EAAX,SAAWA,CAAX;EACA,IAAME,EAAE,GAAGC,IAAAA,YAAAA,EACTC,IAAAA,cAAAA,EAASH,MAAM,CAAP,YAARG,EAA8BN,IAAAA,SAAAA,EAAG,CAAHA,EADf,EACeA,CAA9BM,CADSD,EAETL,IAAAA,SAAAA,EAAG,CAAHA,EAAOG,MAAM,CAFf,YAEEH,CAFSK,CAAX;EAIA,IAAME,EAAE,GAAGF,IAAAA,YAAAA,EAAOP,KAAK,CAAN,QAANO,EAAX,IAAWA,CAAX;EACA,IAAMG,CAAC,GAAGF,IAAAA,cAAAA,EAAQ,EAARA,EAAQ,EAARA,EAAV,IAAUA,CAAV;EACA,IAAMG,CAAC,GAAGC,IAAAA,SAAAA,EAAIZ,KAAK,CAAN,QAAHY,EAAoBJ,IAAAA,cAAAA,EAAQ,EAARA,EAA9B,EAA8BA,CAApBI,CAAV;EACA,OAAOC,IAAAA,WAAAA,EAAM,CACXC,IAAAA,SAAAA,EAAId,KAAK,CAAN,QAAHc,EADW,CACXA,CADW,EAEXA,IAAAA,SAAAA,EAAId,KAAK,CAAN,QAAHc,EAFW,CAEXA,CAFW,EAGXA,IAAAA,SAAAA,EAAId,KAAK,CAAN,IAAHc,EAHW,KAGXA,CAHW,EAIXf,IAAAA,UAAAA,EAAKgB,IAAAA,cAAAA,EAASC,IAAAA,SAAAA,EAAD,CAACA,CAATD,EAAD,YAACA,CAALhB,EAAqCe,IAAAA,SAAAA,EAAId,KAAK,CAAN,QAAHc,EAJvC,CAIuCA,CAArCf,CAJW,CAANc,CAAP;AAMD;;AAED,IAAMI,SAAS,GAAGC,IAAAA,UAAAA,EAChB,UAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA;EAAA,OACEC,KAAK,CAAA,KAAA,EAAQ;IAAEC,IAAF,EAAEA,IAAF;IAAQC,QAAR,EAAQA,QAAR;IAAkBC,QAAlB,EAAkBA,QAAlB;IAA4BC,QAAAA,EAAAA;EAA5B,CAAR,EAAgD;IAAEC,YAAAA,EAAAA;EAAF,CAAhD,CADP;AAAA,CADgBN,CAAlB;;eAKe,kBAAA,KAAA;EAAA,IAEb,IAFa,QAEb,IAFa;EAAA,IAEb,QAFa,QAEb,QAFa;EAAA,IAEb,QAFa,QAEb,QAFa;EAAA,IAEeK,QAFf,QAEeA,QAFf;EAAA,IAGXC,YAHW,SAGXA,YAHW;EAAA,OAIVP,SAAS,CAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAJd,YAIc,CAJC;AAAA,C","sourcesContent":["import {\n  cond,\n  sub,\n  pow,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  lessThan,\n  proc,\n  abs,\n} from '../base';\n\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime);\n\n  // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(\n    multiply(config.deceleration, sub(1, kv)),\n    sub(1, config.deceleration)\n  );\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([\n    set(state.position, x),\n    set(state.velocity, v),\n    set(state.time, clock),\n    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),\n  ]);\n}\n\nconst procDecay = proc(\n  (clock, time, velocity, position, finished, deceleration) =>\n    decay(clock, { time, velocity, position, finished }, { deceleration })\n);\n\nexport default (\n  clock,\n  { time, velocity, position, finished },\n  { deceleration }\n) => procDecay(clock, time, velocity, position, finished, deceleration);\n"]},"metadata":{},"sourceType":"script"}