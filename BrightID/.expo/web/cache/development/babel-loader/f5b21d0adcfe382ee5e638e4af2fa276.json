{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nexport default function getActionFromState(state, options) {\n  var _state$index, _normalizedConfig$scr;\n\n  var normalizedConfig = options ? createNormalizedConfigItem(options) : {};\n  var routes = state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (!(routes.length === 1 && routes[0].key === undefined || routes.length === 2 && routes[0].key === undefined && routes[0].name === (normalizedConfig === null || normalizedConfig === void 0 ? void 0 : normalizedConfig.initialRouteName) && routes[1].key === undefined)) {\n    return {\n      type: 'RESET',\n      payload: state\n    };\n  }\n\n  var route = state.routes[(_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : state.routes.length - 1];\n  var current = route === null || route === void 0 ? void 0 : route.state;\n  var config = normalizedConfig === null || normalizedConfig === void 0 ? void 0 : (_normalizedConfig$scr = normalizedConfig.screens) === null || _normalizedConfig$scr === void 0 ? void 0 : _normalizedConfig$scr[route === null || route === void 0 ? void 0 : route.name];\n\n  var params = _objectSpread({}, route.params);\n\n  var payload = route ? {\n    name: route.name,\n    params: params\n  } : undefined;\n\n  while (current) {\n    var _config, _config2, _config2$screens;\n\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    var _routes = current.index != null ? current.routes.slice(0, current.index + 1) : current.routes;\n\n    var _route = _routes[_routes.length - 1];\n\n    _extends(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined\n    });\n\n    if (_routes.length === 1 && _routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = _route.name;\n    } else if (_routes.length === 2 && _routes[0].key === undefined && _routes[0].name === ((_config = config) === null || _config === void 0 ? void 0 : _config.initialRouteName) && _routes[1].key === undefined) {\n      params.initial = false;\n      params.screen = _route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (_route.state) {\n      params.params = _objectSpread({}, _route.params);\n      params = params.params;\n    } else {\n      params.params = _route.params;\n    }\n\n    current = _route.state;\n    config = (_config2 = config) === null || _config2 === void 0 ? void 0 : (_config2$screens = _config2.screens) === null || _config2$screens === void 0 ? void 0 : _config2$screens[_route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  return {\n    type: 'NAVIGATE',\n    payload: payload\n  };\n}\n\nvar createNormalizedConfigItem = function createNormalizedConfigItem(config) {\n  return typeof config === 'object' && config != null ? {\n    initialRouteName: config.initialRouteName,\n    screens: config.screens != null ? createNormalizedConfigs(config.screens) : undefined\n  } : {};\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(options) {\n  return Object.entries(options).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n};","map":{"version":3,"sources":["getActionFromState.tsx"],"names":["normalizedConfig","options","createNormalizedConfigItem","routes","state","type","payload","route","current","config","params","name","Object","initial","screen","initialRouteName","screens","createNormalizedConfigs","k","v","acc"],"mappings":"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","sourcesContent":["import type {\n  Route,\n  PartialRoute,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n  CommonActions,\n} from '@react-navigation/routers';\nimport type { PathConfig, PathConfigMap, NavigatorScreenParams } from './types';\n\ntype ConfigItem = {\n  initialRouteName?: string;\n  screens?: Record<string, ConfigItem>;\n};\n\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\n\ntype NavigateAction<State extends NavigationState> = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: NavigatorScreenParams<State>;\n  };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>,\n  options?: Options\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\n  // Create a normalized configs object which will be easier to use\n  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};\n\n  const routes =\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (\n    !(\n      (routes.length === 1 && routes[0].key === undefined) ||\n      (routes.length === 2 &&\n        routes[0].key === undefined &&\n        routes[0].name === normalizedConfig?.initialRouteName &&\n        routes[1].key === undefined)\n    )\n  ) {\n    return {\n      type: 'RESET',\n      payload: state,\n    };\n  }\n\n  const route = state.routes[state.index ?? state.routes.length - 1];\n\n  let current: PartialState<NavigationState> | undefined = route?.state;\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\n  let params = { ...route.params } as NavigatorScreenParams<\n    ParamListBase,\n    NavigationState\n  >;\n\n  let payload = route ? { name: route.name, params } : undefined;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes =\n      current.index != null\n        ? current.routes.slice(0, current.index + 1)\n        : current.routes;\n\n    const route: Route<string> | PartialRoute<Route<string>> =\n      routes[routes.length - 1];\n\n    // Explicitly set to override existing value when merging params\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined,\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (\n      routes.length === 2 &&\n      routes[0].key === undefined &&\n      routes[0].name === config?.initialRouteName &&\n      routes[1].key === undefined\n    ) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params as NavigatorScreenParams<\n        ParamListBase,\n        NavigationState\n      >;\n    } else {\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = config?.screens?.[route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n\nconst createNormalizedConfigItem = (config: PathConfig | string) =>\n  typeof config === 'object' && config != null\n    ? {\n        initialRouteName: config.initialRouteName,\n        screens:\n          config.screens != null\n            ? createNormalizedConfigs(config.screens)\n            : undefined,\n      }\n    : {};\n\nconst createNormalizedConfigs = (options: PathConfigMap) =>\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n"]},"metadata":{},"sourceType":"module"}