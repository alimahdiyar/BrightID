{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useEffect, useMemo, useState, useRef } from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport ViewPager from '@react-native-community/viewpager';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { selectAllUnconfirmedConnections } from \"./pendingConnectionSlice\";\nimport { DEVICE_LARGE, DEVICE_ANDROID } from \"../../utils/deviceConstants\";\nimport { WHITE, GREY, DARK_GREY, BLACK, ORANGE } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { setActiveNotification } from \"../../actions\";\nimport { PreviewConnectionController } from \"./PreviewConnectionController\";\nimport BackArrow from \"../Icons/BackArrow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar REFRESH_VIEWPAGER_TIMEOUT = 1000;\nexport var PendingConnectionsScreen = function PendingConnectionsScreen() {\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var viewPagerRef = useRef(null);\n  var pendingConnections = useSelector(function (state) {\n    return selectAllUnconfirmedConnections(state);\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pendingConnectionsToDisplay = _useState2[0],\n      setPendingConnectionsDisplay = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      activeIndex = _useState6[0],\n      setActiveIndex = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      onLastIndex = _useState8[0],\n      setOnLastIndex = _useState8[1];\n\n  var _useState9 = useState(pendingConnections.length),\n      _useState10 = _slicedToArray(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      confirmed = _useState12[0],\n      setConfirmed = _useState12[1];\n\n  var refreshDisplayConnections = useCallback(function () {\n    var connectionsToDisplay = pendingConnections;\n\n    if (DEVICE_ANDROID && pendingConnections.length > 17) {\n      connectionsToDisplay = pendingConnections.slice(0, 15);\n    }\n\n    if (!isEqual(pendingConnectionsToDisplay, connectionsToDisplay)) {\n      setPendingConnectionsDisplay(connectionsToDisplay);\n    }\n  }, [pendingConnections, pendingConnectionsToDisplay]);\n  useFocusEffect(useCallback(function () {\n    refreshDisplayConnections();\n    dispatch(setActiveNotification(null));\n  }, []));\n  useEffect(function () {\n    if (pendingConnections.length > total) {\n      setTotal(pendingConnections.length);\n    } else if (confirmed > total) {\n      setTotal(confirmed);\n    }\n  }, [pendingConnections, total, confirmed]);\n  useEffect(function () {\n    if (activeIndex === pendingConnectionsToDisplay.length - 1) {\n      setOnLastIndex(true);\n    } else if (onLastIndex) {\n      refreshDisplayConnections();\n      setOnLastIndex(false);\n    }\n  }, [refreshDisplayConnections, pendingConnectionsToDisplay.length, activeIndex, onLastIndex]);\n  useEffect(function () {\n    var goBack = function goBack() {\n      if (activeIndex > 0) {\n        var _viewPagerRef$current;\n\n        (_viewPagerRef$current = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current.setPage(activeIndex - 1);\n        return true;\n      }\n    };\n\n    BackHandler.addEventListener('hardwareBackPress', goBack);\n    return function () {\n      return BackHandler.removeEventListener('hardwareBackPress', goBack);\n    };\n  }, [viewPagerRef, activeIndex]);\n  useEffect(function () {\n    var timeout;\n\n    if (pendingConnections.length === 0) {\n      setLoading(true);\n      timeout = setTimeout(function () {\n        navigation.navigate('Connections');\n      }, REFRESH_VIEWPAGER_TIMEOUT);\n    } else {\n      setLoading(false);\n    }\n\n    return function () {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [pendingConnections.length, navigation]);\n  var PendingConnectionList = useMemo(function () {\n    var renderView = function renderView(item, index) {\n      var last = index === pendingConnectionsToDisplay.length - 1;\n\n      var moveToNext = function moveToNext() {\n        var _viewPagerRef$current2, _viewPagerRef$current3;\n\n        last ? (_viewPagerRef$current2 = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current2.setPage(0) : (_viewPagerRef$current3 = viewPagerRef.current) == null ? void 0 : _viewPagerRef$current3.setPage(index + 1);\n        setConfirmed(function (c) {\n          return c + 1;\n        });\n      };\n\n      return _jsx(View, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        collapsable: false,\n        children: _jsx(PreviewConnectionController, {\n          pendingConnectionId: item.profileId,\n          moveToNext: moveToNext\n        })\n      }, index);\n    };\n\n    console.log('RE-RENDERING VIEWPAGER');\n    var Views = pendingConnectionsToDisplay.map(renderView);\n    return _jsx(ViewPager, {\n      ref: viewPagerRef,\n      style: {\n        flex: 1,\n        width: '100%'\n      },\n      initialPage: 0,\n      onPageSelected: function onPageSelected(e) {\n        setActiveIndex(e.nativeEvent.position);\n      },\n      orientation: \"horizontal\",\n      transitionStyle: \"scroll\",\n      showPageIndicator: false,\n      children: Views\n    });\n  }, [pendingConnectionsToDisplay]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      backgroundColor: WHITE,\n      animated: true\n    }), _jsx(SafeAreaView, {\n      style: styles.container,\n      children: loading ? _jsx(View, {\n        style: styles.loadingContainer,\n        children: _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 44 : 40,\n          type: \"FadingCircleAlt\",\n          color: GREY\n        })\n      }) : _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.titleContainer,\n          children: [_jsx(TouchableOpacity, {\n            testID: \"pendingConnectionsGoBack\",\n            style: styles.cancelButton,\n            onPress: function onPress() {\n              if (total > 1) {\n                navigation.goBack();\n              } else {\n                navigation.navigate('Home');\n              }\n            },\n            children: _jsx(BackArrow, {\n              height: DEVICE_LARGE ? 22 : 20,\n              color: DARK_GREY\n            })\n          }), _jsx(Text, {\n            style: styles.titleText,\n            children: t('pendingConnections.title.confirmationTotal', {\n              confirmed: confirmed,\n              total: total\n            })\n          })]\n        }), PendingConnectionList]\n      })\n    }), _jsx(View, {\n      style: styles.orangeBottom\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    height: 90,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: -80,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  titleContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    paddingVertical: DEVICE_LARGE ? 18 : 12\n  },\n  loadingContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  titleText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[20],\n    textAlign: 'center',\n    color: BLACK\n  },\n  cancelButton: {\n    position: 'absolute',\n    left: 0,\n    width: DEVICE_LARGE ? 60 : 50,\n    alignItems: 'center'\n  }\n});\nexport default PendingConnectionsScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","useRef","isEqual","useTranslation","Spinner","useFocusEffect","useNavigation","ViewPager","SafeAreaView","useDispatch","useSelector","selectAllUnconfirmedConnections","DEVICE_LARGE","DEVICE_ANDROID","WHITE","GREY","DARK_GREY","BLACK","ORANGE","fontSize","setActiveNotification","PreviewConnectionController","BackArrow","REFRESH_VIEWPAGER_TIMEOUT","PendingConnectionsScreen","navigation","dispatch","t","viewPagerRef","pendingConnections","state","pendingConnectionsToDisplay","setPendingConnectionsDisplay","loading","setLoading","activeIndex","setActiveIndex","onLastIndex","setOnLastIndex","length","total","setTotal","confirmed","setConfirmed","refreshDisplayConnections","connectionsToDisplay","slice","goBack","current","setPage","BackHandler","addEventListener","removeEventListener","timeout","setTimeout","navigate","clearTimeout","PendingConnectionList","renderView","item","index","last","moveToNext","c","flex","width","profileId","console","log","Views","map","e","nativeEvent","position","styles","container","loadingContainer","titleContainer","cancelButton","titleText","orangeBottom","StyleSheet","create","backgroundColor","height","zIndex","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","overflow","justifyContent","alignItems","paddingVertical","fontFamily","textAlign","color","left"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PendingConnectionsScreen.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport {\n  BackHandler,\n  StyleSheet,\n  StatusBar,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { isEqual } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-native-spinkit';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport ViewPager from '@react-native-community/viewpager';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from '@/store';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DEVICE_LARGE, DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { WHITE, GREY, DARK_GREY, BLACK, ORANGE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { setActiveNotification } from '@/actions';\nimport { PreviewConnectionController } from './PreviewConnectionController';\nimport BackArrow from '../Icons/BackArrow';\n\n/**\n * Confirm / Preview Connection  Screen of BrightID\n *\n==================================================================\n *\n */\nconst REFRESH_VIEWPAGER_TIMEOUT = 1000;\n\nexport const PendingConnectionsScreen = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const viewPagerRef = useRef<ViewPager>(null);\n\n  const pendingConnections = useSelector((state: State) => {\n    return selectAllUnconfirmedConnections(state);\n  });\n  // pending connections to display\n  const [pendingConnectionsToDisplay, setPendingConnectionsDisplay] = useState<\n    Array<PendingConnection>\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [onLastIndex, setOnLastIndex] = useState(false);\n  const [total, setTotal] = useState(pendingConnections.length);\n  const [confirmed, setConfirmed] = useState(0);\n\n  const refreshDisplayConnections = useCallback(() => {\n    /**\n     * this will cause the Viewpager to re render\n     * for performance on android, we will limit the list to ~ 15 connections\n     * */\n\n    let connectionsToDisplay = pendingConnections;\n\n    if (DEVICE_ANDROID && pendingConnections.length > 17) {\n      connectionsToDisplay = pendingConnections.slice(0, 15);\n    }\n    // test peformance, alternative would be to map ids\n    if (!isEqual(pendingConnectionsToDisplay, connectionsToDisplay)) {\n      setPendingConnectionsDisplay(connectionsToDisplay);\n    }\n  }, [pendingConnections, pendingConnectionsToDisplay]);\n\n  useFocusEffect(\n    useCallback(() => {\n      refreshDisplayConnections();\n      dispatch(setActiveNotification(null));\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n  );\n\n  useEffect(() => {\n    // update total\n    if (pendingConnections.length > total) {\n      setTotal(pendingConnections.length);\n    } else if (confirmed > total) {\n      setTotal(confirmed);\n    }\n  }, [pendingConnections, total, confirmed]);\n\n  // NAVIGATION\n\n  useEffect(() => {\n    /**\n     * we will always refresh the display list\n     * when navigating away from the last page\n     * */\n    if (activeIndex === pendingConnectionsToDisplay.length - 1) {\n      setOnLastIndex(true);\n    } else if (onLastIndex) {\n      refreshDisplayConnections();\n      setOnLastIndex(false);\n    }\n  }, [\n    refreshDisplayConnections,\n    pendingConnectionsToDisplay.length,\n    activeIndex,\n    onLastIndex,\n  ]);\n\n  // back handling for android\n  useEffect(() => {\n    const goBack = () => {\n      if (activeIndex > 0) {\n        viewPagerRef.current?.setPage(activeIndex - 1);\n        return true;\n      }\n    };\n    BackHandler.addEventListener('hardwareBackPress', goBack);\n    return () => BackHandler.removeEventListener('hardwareBackPress', goBack);\n  }, [viewPagerRef, activeIndex]);\n\n  // leave page if zero pending connections\n  useEffect(() => {\n    let timeout;\n    if (pendingConnections.length === 0) {\n      setLoading(true);\n      timeout = setTimeout(() => {\n        navigation.navigate('Connections');\n      }, REFRESH_VIEWPAGER_TIMEOUT);\n    } else {\n      setLoading(false);\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [pendingConnections.length, navigation]);\n\n  /**\n    the list should only re render sparingly for performance and continuity\n  */\n  const PendingConnectionList = useMemo(() => {\n    const renderView = (item: PendingConnection, index: number) => {\n      const last = index === pendingConnectionsToDisplay.length - 1;\n      const moveToNext = () => {\n        /**\n        setting viewpager active index zero will trigger the list to re - render\n        */\n        last\n          ? viewPagerRef.current?.setPage(0)\n          : viewPagerRef.current?.setPage(index + 1);\n        setConfirmed((c) => c + 1);\n      };\n\n      return (\n        <View\n          style={{ flex: 1, width: '100%' }}\n          collapsable={false}\n          key={index}\n        >\n          <PreviewConnectionController\n            pendingConnectionId={item.profileId}\n            moveToNext={moveToNext}\n          />\n        </View>\n      );\n    };\n    console.log('RE-RENDERING VIEWPAGER');\n\n    const Views = pendingConnectionsToDisplay.map(renderView);\n\n    return (\n      <ViewPager\n        ref={viewPagerRef}\n        style={{ flex: 1, width: '100%' }}\n        initialPage={0}\n        onPageSelected={(e) => {\n          setActiveIndex(e.nativeEvent.position);\n        }}\n        orientation=\"horizontal\"\n        transitionStyle=\"scroll\"\n        showPageIndicator={false}\n      >\n        {Views}\n      </ViewPager>\n    );\n  }, [pendingConnectionsToDisplay]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        backgroundColor={WHITE}\n        animated={true}\n      />\n      <SafeAreaView style={styles.container}>\n        {loading ? (\n          <View style={styles.loadingContainer}>\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 44 : 40}\n              type=\"FadingCircleAlt\"\n              color={GREY}\n            />\n          </View>\n        ) : (\n          <>\n            <View style={styles.titleContainer}>\n              <TouchableOpacity\n                testID=\"pendingConnectionsGoBack\"\n                style={styles.cancelButton}\n                onPress={() => {\n                  if (total > 1) {\n                    // group connections navigate to MyCodeScreen or GroupConnectionScreen\n                    navigation.goBack();\n                  } else {\n                    // single connections navigate home to avoid loop\n                    navigation.navigate('Home');\n                  }\n                }}\n              >\n                <BackArrow height={DEVICE_LARGE ? 22 : 20} color={DARK_GREY} />\n              </TouchableOpacity>\n              <Text style={styles.titleText}>\n                {t('pendingConnections.title.confirmationTotal', {\n                  confirmed,\n                  total,\n                })}\n              </Text>\n            </View>\n            {PendingConnectionList}\n          </>\n        )}\n      </SafeAreaView>\n      <View style={styles.orangeBottom} />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeBottom: {\n    backgroundColor: ORANGE,\n    height: 90,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    borderBottomLeftRadius: 58,\n    borderBottomRightRadius: 58,\n    marginBottom: -80,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  titleContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    paddingVertical: DEVICE_LARGE ? 18 : 12,\n  },\n  loadingContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  titleText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[20],\n    textAlign: 'center',\n    color: BLACK,\n  },\n  cancelButton: {\n    position: 'absolute',\n    left: 0,\n    width: DEVICE_LARGE ? 60 : 50,\n    alignItems: 'center',\n  },\n});\n\nexport default PendingConnectionsScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}