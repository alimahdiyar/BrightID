{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { component } from \"./component\";\nvar Notifications = {\n  handler: component,\n  onRegister: false,\n  onRegistrationError: false,\n  onNotification: false,\n  onAction: false,\n  onRemoteFetch: false,\n  isLoaded: false,\n  isPopInitialNotification: false,\n  isPermissionsRequestPending: false,\n  permissions: {\n    alert: true,\n    badge: true,\n    sound: true\n  }\n};\n\nNotifications.callNative = function (name, params) {\n  if (typeof this.handler[name] === 'function') {\n    var _this$handler;\n\n    if (typeof params !== 'array' && typeof params !== 'object') {\n      params = [];\n    }\n\n    return (_this$handler = this.handler)[name].apply(_this$handler, _toConsumableArray(params));\n  } else {\n    return null;\n  }\n};\n\nNotifications.configure = function (options) {\n  var _this = this;\n\n  if (typeof options.onRegister !== 'undefined') {\n    this.onRegister = options.onRegister;\n  }\n\n  if (typeof options.onRegistrationError !== 'undefined') {\n    this.onRegistrationError = options.onRegistrationError;\n  }\n\n  if (typeof options.onNotification !== 'undefined') {\n    this.onNotification = options.onNotification;\n  }\n\n  if (typeof options.onAction !== 'undefined') {\n    this.onAction = options.onAction;\n  }\n\n  if (typeof options.permissions !== 'undefined') {\n    this.permissions = options.permissions;\n  }\n\n  if (typeof options.onRemoteFetch !== 'undefined') {\n    this.onRemoteFetch = options.onRemoteFetch;\n  }\n\n  if (this.isLoaded === false) {\n    this._onRegister = this._onRegister.bind(this);\n    this._onRegistrationError = this._onRegistrationError.bind(this);\n    this._onNotification = this._onNotification.bind(this);\n    this._onRemoteFetch = this._onRemoteFetch.bind(this);\n    this._onAction = this._onAction.bind(this);\n    this.callNative('addEventListener', ['register', this._onRegister]);\n    this.callNative('addEventListener', ['registrationError', this._onRegistrationError]);\n    this.callNative('addEventListener', ['notification', this._onNotification]);\n    this.callNative('addEventListener', ['localNotification', this._onNotification]);\n    Platform.OS === 'android' ? this.callNative('addEventListener', ['action', this._onAction]) : null;\n    Platform.OS === 'android' ? this.callNative('addEventListener', ['remoteFetch', this._onRemoteFetch]) : null;\n    this.isLoaded = true;\n  }\n\n  var handlePopInitialNotification = function handlePopInitialNotification(state) {\n    if ('active' !== state) {\n      return;\n    }\n\n    if (options.popInitialNotification === undefined || options.popInitialNotification === true) {\n      _this.popInitialNotification(function (firstNotification) {\n        if (this.isPopInitialNotification) {\n          return;\n        }\n\n        this.isPopInitialNotification = true;\n\n        if (!firstNotification || false === firstNotification.userInteraction) {\n          return;\n        }\n\n        this._onNotification(firstNotification, true);\n      }.bind(_this));\n    }\n  };\n\n  AppState.addEventListener('change', handlePopInitialNotification.bind(this));\n  handlePopInitialNotification(AppState.currentState);\n\n  if (options.requestPermissions !== false) {\n    this._requestPermissions();\n  }\n};\n\nNotifications.unregister = function () {\n  this.callNative('removeEventListener', ['register', this._onRegister]);\n  this.callNative('removeEventListener', ['registrationError', this._onRegistrationError]);\n  this.callNative('removeEventListener', ['notification', this._onNotification]);\n  this.callNative('removeEventListener', ['localNotification', this._onNotification]);\n  Platform.OS === 'android' ? this.callNative('removeEventListener', ['action', this._onAction]) : null;\n  Platform.OS === 'android' ? this.callNative('removeEventListener', ['remoteFetch', this._onRemoteFetch]) : null;\n  this.isLoaded = false;\n};\n\nNotifications.localNotification = function (_ref) {\n  var details = _extends({}, _ref);\n\n  if ('android' === Platform.OS && details && !details.channelId) {\n    console.warn('No channel id passed, notifications may not work.');\n  }\n\n  if (details && typeof details.id === 'number') {\n    if (isNaN(details.id)) {\n      console.warn('NaN value has been passed as id');\n      delete details.id;\n    } else {\n      details.id = '' + details.id;\n    }\n  }\n\n  if (Platform.OS === 'ios') {\n    var soundName = details.soundName ? details.soundName : 'default';\n\n    if (details.hasOwnProperty('playSound') && !details.playSound) {\n      soundName = '';\n    }\n\n    if (details.picture) {\n      details.userInfo = details.userInfo || {};\n      details.userInfo.image = details.picture;\n    }\n\n    this.handler.addNotificationRequest({\n      id: !details.id ? Math.floor(Math.random() * Math.pow(2, 32)).toString() : details.id,\n      title: details.title,\n      subtitle: details.subtitle,\n      body: details.message,\n      badge: details.number,\n      sound: soundName,\n      isSilent: details.playSound === false,\n      category: details.category,\n      userInfo: details.userInfo\n    });\n  } else {\n    if (details && typeof details.number === 'number') {\n      if (isNaN(details.number)) {\n        console.warn('NaN value has been passed as number');\n        delete details.number;\n      } else {\n        details.number = '' + details.number;\n      }\n    }\n\n    if (details && typeof details.shortcutId === 'number') {\n      if (isNaN(details.shortcutId)) {\n        console.warn('NaN value has been passed as shortcutId');\n        delete details.shortcutId;\n      } else {\n        details.shortcutId = '' + details.shortcutId;\n      }\n    }\n\n    if (details && Array.isArray(details.actions)) {\n      details.actions = JSON.stringify(details.actions);\n    }\n\n    if (details.userInfo) {\n      details.userInfo = JSON.stringify(details.userInfo);\n    }\n\n    if (details.picture && !details.bigPictureUrl) {\n      details.bigPictureUrl = details.picture;\n    }\n\n    this.handler.presentLocalNotification(details);\n  }\n};\n\nNotifications.localNotificationSchedule = function (_ref2) {\n  var details = _extends({}, _ref2);\n\n  if ('android' === Platform.os && details && !details.channelId) {\n    console.warn('No channel id passed, notifications may not work.');\n  }\n\n  if (details && typeof details.id === 'number') {\n    if (isNaN(details.id)) {\n      console.warn('NaN value has been passed as id');\n      delete details.id;\n    } else {\n      details.id = '' + details.id;\n    }\n  }\n\n  if (Platform.OS === 'ios') {\n    var soundName = details.soundName ? details.soundName : 'default';\n\n    if (details.hasOwnProperty('playSound') && !details.playSound) {\n      soundName = '';\n    }\n\n    if (details.picture) {\n      details.userInfo = details.userInfo || {};\n      details.userInfo.image = details.picture;\n    }\n\n    var repeatsComponent = {\n      second: ['minute', 'hour', 'day', 'week', 'month'].includes(details.repeatType),\n      minute: ['hour', 'day', 'week', 'month'].includes(details.repeatType),\n      hour: ['day', 'week', 'month'].includes(details.repeatType),\n      day: details.repeatType == \"month\",\n      dayOfWeek: details.repeatType == \"week\"\n    };\n    var iosDetails = {\n      id: !details.id ? Math.floor(Math.random() * Math.pow(2, 32)).toString() : details.id,\n      fireDate: details.date.toISOString(),\n      title: details.title,\n      subtitle: details.subtitle,\n      body: details.message,\n      sound: soundName,\n      isSilent: details.playSound === false,\n      category: details.category,\n      userInfo: details.userInfo,\n      repeats: ['minute', 'hour', 'day', 'week', 'month'].includes(details.repeatType),\n      repeatsComponent: repeatsComponent\n    };\n\n    if (details.number) {\n      iosDetails.badge = parseInt(details.number, 10);\n    }\n\n    this.handler.addNotificationRequest(iosDetails);\n  } else {\n    if (details && typeof details.number === 'number') {\n      if (isNaN(details.number)) {\n        console.warn('NaN value has been passed as number');\n        delete details.number;\n      } else {\n        details.number = '' + details.number;\n      }\n    }\n\n    if (details && typeof details.shortcutId === 'number') {\n      if (isNaN(details.shortcutId)) {\n        console.warn('NaN value has been passed as shortcutId');\n        delete details.shortcutId;\n      } else {\n        details.shortcutId = '' + details.shortcutId;\n      }\n    }\n\n    if (details && Array.isArray(details.actions)) {\n      details.actions = JSON.stringify(details.actions);\n    }\n\n    if (details.userInfo) {\n      details.userInfo = JSON.stringify(details.userInfo);\n    }\n\n    if (details.picture && !details.bigPictureUrl) {\n      details.bigPictureUrl = details.picture;\n    }\n\n    details.fireDate = details.date.getTime();\n    delete details.date;\n    this.handler.scheduleLocalNotification(details);\n  }\n};\n\nNotifications._onRegister = function (token) {\n  if (this.onRegister !== false) {\n    this.onRegister({\n      token: token,\n      os: Platform.OS\n    });\n  }\n};\n\nNotifications._onRegistrationError = function (err) {\n  if (this.onRegistrationError !== false) {\n    this.onRegistrationError(err);\n  }\n};\n\nNotifications._onRemoteFetch = function (notificationData) {\n  if (this.onRemoteFetch !== false) {\n    this.onRemoteFetch(notificationData);\n  }\n};\n\nNotifications._onAction = function (_ref3) {\n  var notification = _extends({}, _ref3);\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notificationData.data);\n    } catch (e) {}\n  }\n\n  this.onAction(notification);\n};\n\nNotifications._transformNotificationObject = function (data) {\n  var isFromBackground = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!data) {\n    return;\n  }\n\n  if (isFromBackground === null) {\n    isFromBackground = data.foreground === false || AppState.currentState === 'background' || AppState.currentState === 'unknown';\n  }\n\n  var _notification;\n\n  if (Platform.OS === 'ios') {\n    var notifData = data.getData();\n    _notification = {\n      id: notifData == null ? void 0 : notifData.id,\n      foreground: !isFromBackground,\n      userInteraction: (notifData == null ? void 0 : notifData.userInteraction) === 1 || false,\n      message: data.getMessage(),\n      data: notifData,\n      badge: data.getBadgeCount(),\n      title: data.getTitle(),\n      subtitle: data.getSubtitle(),\n      soundName: data.getSound(),\n      fireDate: Date.parse(data._fireDate),\n      action: data.getActionIdentifier(),\n      reply_text: data.getUserText(),\n      finish: function finish(res) {\n        return data.finish(res);\n      }\n    };\n\n    if (isNaN(_notification.fireDate)) {\n      delete _notification.fireDate;\n    }\n  } else {\n    _notification = _objectSpread({\n      foreground: !isFromBackground,\n      finish: function finish() {}\n    }, data);\n\n    if (typeof _notification.data === 'string') {\n      try {\n        _notification.data = JSON.parse(_notification.data);\n      } catch (e) {}\n    }\n\n    if (typeof _notification.userInfo === 'string') {\n      try {\n        _notification.userInfo = JSON.parse(_notification.userInfo);\n      } catch (e) {}\n    }\n\n    _notification.data = _objectSpread(_objectSpread({}, typeof _notification.userInfo === 'object' ? _notification.userInfo : {}), typeof _notification.data === 'object' ? _notification.data : {});\n    delete _notification.userInfo;\n    delete _notification.notificationId;\n  }\n\n  return _notification;\n};\n\nNotifications._onNotification = function (data) {\n  var initialNotification = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (this.onNotification !== false) {\n    var notification = data;\n\n    if (!initialNotification) {\n      notification = this._transformNotificationObject(data);\n    }\n\n    this.onNotification(notification);\n  }\n};\n\nNotifications._onPermissionResult = function () {\n  this.isPermissionsRequestPending = false;\n};\n\nNotifications._requestPermissions = function () {\n  if (Platform.OS === 'ios') {\n    if (this.isPermissionsRequestPending === false) {\n      this.isPermissionsRequestPending = true;\n      return this.callNative('requestPermissions', [this.permissions]).then(this._onPermissionResult.bind(this)).catch(this._onPermissionResult.bind(this));\n    }\n  } else if (Platform.OS === 'android') {\n    return this.callNative('requestPermissions', []);\n  }\n};\n\nNotifications.requestPermissions = function () {\n  if (Platform.OS === 'ios') {\n    return this.callNative('requestPermissions', [this.permissions]);\n  } else if (Platform.OS === 'android') {\n    return this.callNative('requestPermissions', []);\n  }\n};\n\nNotifications.subscribeToTopic = function () {\n  return this.callNative('subscribeToTopic', arguments);\n};\n\nNotifications.unsubscribeFromTopic = function () {\n  return this.callNative('unsubscribeFromTopic', arguments);\n};\n\nNotifications.presentLocalNotification = function () {\n  return this.callNative('presentLocalNotification', arguments);\n};\n\nNotifications.scheduleLocalNotification = function () {\n  return this.callNative('scheduleLocalNotification', arguments);\n};\n\nNotifications.cancelLocalNotifications = function (userInfo) {\n  console.warn('This method is now deprecated, please use `cancelLocalNotification` (remove the ending `s`).');\n  return this.cancelLocalNotification(userInfo);\n};\n\nNotifications.cancelLocalNotification = function (notificationId) {\n  if (typeof notificationId === 'object') {\n    var _notificationId;\n\n    notificationId = (_notificationId = notificationId) == null ? void 0 : _notificationId.id;\n  }\n\n  if (typeof notificationId === 'number') {\n    notificationId = '' + notificationId;\n  }\n\n  if (Platform.OS === 'ios') {\n    return this.callNative('removePendingNotificationRequests', [[notificationId]]);\n  } else {\n    return this.callNative('cancelLocalNotification', [notificationId]);\n  }\n};\n\nNotifications.clearLocalNotification = function () {\n  return this.callNative('clearLocalNotification', arguments);\n};\n\nNotifications.cancelAllLocalNotifications = function () {\n  if (Platform.OS === 'ios') {\n    return this.callNative('removeAllPendingNotificationRequests', arguments);\n  } else if (Platform.OS === 'android') {\n    return this.callNative('cancelAllLocalNotifications', arguments);\n  }\n};\n\nNotifications.setApplicationIconBadgeNumber = function () {\n  return this.callNative('setApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.getApplicationIconBadgeNumber = function () {\n  return this.callNative('getApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.popInitialNotification = function (handler) {\n  var _this2 = this;\n\n  this.callNative('getInitialNotification').then(function (result) {\n    handler(_this2._transformNotificationObject(result, true));\n  });\n};\n\nNotifications.checkPermissions = function () {\n  return this.callNative('checkPermissions', arguments);\n};\n\nNotifications.abandonPermissions = function () {\n  return this.callNative('abandonPermissions', arguments);\n};\n\nNotifications.clearAllNotifications = function () {\n  return this.callNative('clearAllNotifications', arguments);\n};\n\nNotifications.removeAllDeliveredNotifications = function () {\n  return this.callNative('removeAllDeliveredNotifications', arguments);\n};\n\nNotifications.getDeliveredNotifications = function () {\n  return this.callNative('getDeliveredNotifications', arguments);\n};\n\nNotifications.getScheduledLocalNotifications = function (callback) {\n  var mapNotifications = function mapNotifications(notifications) {\n    var mappedNotifications = [];\n\n    if ((notifications == null ? void 0 : notifications.length) > 0) {\n      if (Platform.OS === 'ios') {\n        mappedNotifications = notifications.map(function (notif) {\n          return {\n            soundName: notif == null ? void 0 : notif.sound,\n            id: notif.id,\n            date: notif.date ? new Date(notif.date) : null,\n            number: notif == null ? void 0 : notif.badge,\n            message: notif == null ? void 0 : notif.body,\n            title: notif == null ? void 0 : notif.title,\n            data: notif == null ? void 0 : notif.userInfo\n          };\n        });\n      } else if (Platform.OS === 'android') {\n        mappedNotifications = notifications.map(function (notif) {\n          try {\n            notif.data = JSON.parse(notif.data);\n          } catch (e) {}\n\n          return {\n            soundName: notif.soundName,\n            repeatInterval: notif.repeatInterval,\n            id: notif.id,\n            date: new Date(notif.date),\n            number: notif.number,\n            message: notif.message,\n            title: notif.title,\n            data: notif.data\n          };\n        });\n      }\n    }\n\n    callback(mappedNotifications);\n  };\n\n  if (Platform.OS === 'ios') {\n    return this.callNative('getPendingNotificationRequests', [mapNotifications]);\n  } else {\n    return this.callNative('getScheduledLocalNotifications', [mapNotifications]);\n  }\n};\n\nNotifications.removeDeliveredNotifications = function () {\n  return this.callNative('removeDeliveredNotifications', arguments);\n};\n\nNotifications.invokeApp = function () {\n  return this.callNative('invokeApp', arguments);\n};\n\nNotifications.getChannels = function () {\n  return this.callNative('getChannels', arguments);\n};\n\nNotifications.channelExists = function () {\n  return this.callNative('channelExists', arguments);\n};\n\nNotifications.createChannel = function () {\n  return this.callNative('createChannel', arguments);\n};\n\nNotifications.channelBlocked = function () {\n  return this.callNative('channelBlocked', arguments);\n};\n\nNotifications.deleteChannel = function () {\n  return this.callNative('deleteChannel', arguments);\n};\n\nNotifications.setNotificationCategories = function () {\n  return this.callNative('setNotificationCategories', arguments);\n};\n\nNotifications.Importance = Object.freeze({\n  DEFAULT: 3,\n  HIGH: 4,\n  LOW: 2,\n  MIN: 1,\n  NONE: 0,\n  UNSPECIFIED: -1000\n});\nmodule.exports = Notifications;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-push-notification/index.js"],"names":["Notifications","handler","onRegister","onRegistrationError","onNotification","onAction","onRemoteFetch","isLoaded","isPopInitialNotification","isPermissionsRequestPending","permissions","alert","badge","sound","params","options","Platform","handlePopInitialNotification","firstNotification","AppState","details","console","isNaN","soundName","id","Math","title","subtitle","body","isSilent","category","userInfo","Array","JSON","repeatsComponent","second","minute","hour","day","dayOfWeek","iosDetails","fireDate","repeats","parseInt","token","os","notification","notificationData","isFromBackground","data","notifData","_notification","foreground","userInteraction","message","Date","action","reply_text","finish","initialNotification","notificationId","mapNotifications","mappedNotifications","notifications","notif","date","number","repeatInterval","callback","Object","DEFAULT","HIGH","LOW","MIN","NONE","UNSPECIFIED","module"],"mappings":"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","sourcesContent":["/**\n * @providesModule Notifications\n */\n\n'use strict';\n\nimport { AppState, Platform } from 'react-native';\nimport { component } from './component';\n\nconst Notifications = {\n  handler: component,\n  onRegister: false,\n  onRegistrationError: false,\n  onNotification: false,\n  onAction: false,\n  onRemoteFetch: false,\n  isLoaded: false,\n  isPopInitialNotification: false,\n\n  isPermissionsRequestPending: false,\n\n  permissions: {\n    alert: true,\n    badge: true,\n    sound: true\n  }\n};\n\nNotifications.callNative = function(name, params) {\n  if ( typeof this.handler[name] === 'function' ) {\n    if ( typeof params !== 'array' &&\n       typeof params !== 'object' ) {\n      params = [];\n    }\n\n    return this.handler[name](...params);\n  } else {\n    return null;\n  }\n};\n\n/**\n * Configure local and remote notifications\n * @param {Object}    options\n * @param {function}  options.onRegister - Fired when the user registers for remote notifications.\n * @param {function}  options.onNotification - Fired when a remote notification is received.\n * @param {function}  options.onAction - Fired when a remote notification is received.\n * @param {function}  options.onRegistrationError - Fired when the user fails to register for remote notifications.\n * @param {Object}    options.permissions - Permissions list\n * @param {Boolean}   options.requestPermissions - Check permissions when register\n */\nNotifications.configure = function(options) {\n  if ( typeof options.onRegister !== 'undefined' ) {\n    this.onRegister = options.onRegister;\n  }\n\n  if ( typeof options.onRegistrationError !== 'undefined' ) {\n    this.onRegistrationError = options.onRegistrationError;\n  }\n\n  if ( typeof options.onNotification !== 'undefined' ) {\n    this.onNotification = options.onNotification;\n  }\n\n  if ( typeof options.onAction !== 'undefined' ) {\n    this.onAction = options.onAction;\n  }\n\n  if ( typeof options.permissions !== 'undefined' ) {\n    this.permissions = options.permissions;\n  }\n\n  if ( typeof options.onRemoteFetch !== 'undefined' ) {\n    this.onRemoteFetch = options.onRemoteFetch;\n  }\n\n  if ( this.isLoaded === false ) {\n    this._onRegister = this._onRegister.bind(this);\n    this._onRegistrationError = this._onRegistrationError.bind(this);\n    this._onNotification = this._onNotification.bind(this);\n    this._onRemoteFetch = this._onRemoteFetch.bind(this);\n    this._onAction = this._onAction.bind(this);\n    this.callNative( 'addEventListener', [ 'register', this._onRegister ] );\n    this.callNative( 'addEventListener', [ 'registrationError', this._onRegistrationError ] );\n    this.callNative( 'addEventListener', [ 'notification', this._onNotification ] );\n    this.callNative( 'addEventListener', [ 'localNotification', this._onNotification ] );\n    Platform.OS === 'android' ? this.callNative( 'addEventListener', [ 'action', this._onAction ] ) : null\n    Platform.OS === 'android' ? this.callNative( 'addEventListener', [ 'remoteFetch', this._onRemoteFetch ] ) : null\n\n    this.isLoaded = true;\n  }\n\n  const handlePopInitialNotification = (state) => {\n    if('active' !== state) {\n      return;\n    }\n\n    if (options.popInitialNotification === undefined || options.popInitialNotification === true) {\n      this.popInitialNotification(function(firstNotification) {\n        if(this.isPopInitialNotification) {\n          return;\n        }\n        \n        this.isPopInitialNotification = true;\n        \n        if (!firstNotification || false === firstNotification.userInteraction) {\n          return;\n        }\n        \n        this._onNotification(firstNotification, true);\n      }.bind(this));\n    }\n  }\n\n  AppState.addEventListener('change', handlePopInitialNotification.bind(this));\n\n  handlePopInitialNotification(AppState.currentState);\n\n  if ( options.requestPermissions !== false ) {\n    this._requestPermissions();\n  }\n};\n\n/* Unregister */\nNotifications.unregister = function() {\n  this.callNative( 'removeEventListener', [ 'register', this._onRegister ] )\n  this.callNative( 'removeEventListener', [ 'registrationError', this._onRegistrationError ] )\n  this.callNative( 'removeEventListener', [ 'notification', this._onNotification ] )\n  this.callNative( 'removeEventListener', [ 'localNotification', this._onNotification ] )\n  Platform.OS === 'android' ? this.callNative( 'removeEventListener', [ 'action', this._onAction ] ) : null\n  Platform.OS === 'android' ? this.callNative( 'removeEventListener', [ 'remoteFetch', this._onRemoteFetch ] ) : null\n  this.isLoaded = false;\n};\n\n/**\n * Local Notifications\n * @param {Object}    details\n * @param {String}    details.title  -  The title displayed in the notification alert.\n * @param {String}    details.message - The message displayed in the notification alert.\n * @param {String}    details.ticker -  ANDROID ONLY: The ticker displayed in the status bar.\n * @param {Object}    details.userInfo -  iOS ONLY: The userInfo used in the notification alert.\n */\nNotifications.localNotification = function({...details}) {\n  if ('android' === Platform.OS && details && !details.channelId) {\n    console.warn('No channel id passed, notifications may not work.');\n  }\n\n  if (details && typeof details.id === 'number') {\n    if (isNaN(details.id)) {\n      console.warn('NaN value has been passed as id');\n      delete details.id;\n    }\n    else {\n      details.id = '' + details.id;\n    }\n  }\n\n  if (Platform.OS === 'ios') {\n    // https://developer.apple.com/reference/uikit/uilocalnotification\n\n    let soundName = details.soundName ? details.soundName : 'default'; // play sound (and vibrate) as default behaviour\n\n    if (details.hasOwnProperty('playSound') && !details.playSound) {\n      soundName = ''; // empty string results in no sound (and no vibration)\n    }\n\n    if(details.picture) {\n      details.userInfo = details.userInfo || {};\n      details.userInfo.image = details.picture;\n    }\n\n    // for valid fields see: https://github.com/react-native-push-notification-ios/push-notification-ios#addnotificationrequest\n\n    this.handler.addNotificationRequest({\n      id: (!details.id ? Math.floor(Math.random() * Math.pow(2, 32)).toString() : details.id),\n      title: details.title,\n      subtitle: details.subtitle,\n      body: details.message,\n      badge: details.number,\n      sound: soundName,\n      isSilent: details.playSound === false,\n      category: details.category,\n      userInfo: details.userInfo\n    });\n  } else {\n    if (details && typeof details.number === 'number') {\n      if(isNaN(details.number)) {\n        console.warn('NaN value has been passed as number');\n        delete details.number;\n      }\n      else {\n        details.number = '' + details.number;\n      }\n    }\n\n    if (details && typeof details.shortcutId === 'number') {\n      if(isNaN(details.shortcutId)) {\n        console.warn('NaN value has been passed as shortcutId');\n        delete details.shortcutId;\n      }\n      else {\n        details.shortcutId = '' + details.shortcutId;\n      }\n    }\n\n    if(details && Array.isArray(details.actions)) {\n      details.actions = JSON.stringify(details.actions);\n    }\n\n    if(details.userInfo) {\n      details.userInfo = JSON.stringify(details.userInfo);\n    }\n  \n    if(details.picture && !details.bigPictureUrl) {\n      details.bigPictureUrl = details.picture;\n    }\n\n    this.handler.presentLocalNotification(details);\n  }\n};\n\n/**\n * Local Notifications Schedule\n * @param {Object}    details (same as localNotification)\n * @param {Date}    details.date - The date and time when the system should deliver the notification\n */\nNotifications.localNotificationSchedule = function({...details}) {\n  if ('android' === Platform.os && details && !details.channelId) {\n    console.warn('No channel id passed, notifications may not work.');\n  }\n  \n  if (details && typeof details.id === 'number') {\n    if(isNaN(details.id)) {\n      console.warn('NaN value has been passed as id');\n      delete details.id;\n    }\n    else {\n      details.id = '' + details.id;\n    }\n  }\n\n  if (Platform.OS === 'ios') {\n    let soundName = details.soundName ? details.soundName : 'default'; // play sound (and vibrate) as default behaviour\n\n    if (details.hasOwnProperty('playSound') && !details.playSound) {\n      soundName = ''; // empty string results in no sound (and no vibration)\n    }\n\n    if(details.picture) {\n      details.userInfo = details.userInfo || {};\n      details.userInfo.image = details.picture;\n    }\n    \n    const repeatsComponent = {\n      second: ['minute', 'hour', 'day', 'week', 'month'].includes(details.repeatType),\n      minute: ['hour', 'day', 'week', 'month'].includes(details.repeatType),\n      hour: ['day', 'week', 'month'].includes(details.repeatType),\n      day: details.repeatType == \"month\",\n      dayOfWeek: details.repeatType == \"week\",\n    };\n\n    const iosDetails = {\n      id: (!details.id ? Math.floor(Math.random() * Math.pow(2, 32)).toString() : details.id),\n      fireDate: details.date.toISOString(),\n      title: details.title,\n      subtitle: details.subtitle,\n      body: details.message,\n      sound: soundName,\n      isSilent: details.playSound === false,\n      category: details.category,\n      userInfo: details.userInfo,\n      repeats: ['minute', 'hour', 'day', 'week', 'month'].includes(details.repeatType),\n      repeatsComponent: repeatsComponent\n    };\n\n    if (details.number) {\n      iosDetails.badge = parseInt(details.number, 10);\n    }\n\n    this.handler.addNotificationRequest(iosDetails);\n  } else {\n    if (details && typeof details.number === 'number') {\n      if (isNaN(details.number)) {\n        console.warn('NaN value has been passed as number');\n        delete details.number;\n      }\n      else {\n        details.number = '' + details.number;\n      }\n    }\n\n    if (details && typeof details.shortcutId === 'number') {\n      if (isNaN(details.shortcutId)) {\n        console.warn('NaN value has been passed as shortcutId');\n        delete details.shortcutId;\n      }\n      else {\n        details.shortcutId = '' + details.shortcutId;\n      }\n    }\n  \n    if(details && Array.isArray(details.actions)) {\n      details.actions = JSON.stringify(details.actions);\n    }\n\n    if(details.userInfo) {\n      details.userInfo = JSON.stringify(details.userInfo);\n    }\n\n    if(details.picture && !details.bigPictureUrl) {\n      details.bigPictureUrl = details.picture;\n    }\n\n    details.fireDate = details.date.getTime();\n    delete details.date;\n\n    this.handler.scheduleLocalNotification(details);\n  }\n};\n\n/* Internal Functions */\nNotifications._onRegister = function(token) {\n  if ( this.onRegister !== false ) {\n    this.onRegister({\n      token: token,\n      os: Platform.OS\n    });\n  }\n};\n\nNotifications._onRegistrationError = function(err) {\n  if ( this.onRegistrationError !== false ) {\n    this.onRegistrationError(err);\n  }\n};\n\nNotifications._onRemoteFetch = function(notificationData) {\n  if ( this.onRemoteFetch !== false ) {\n    this.onRemoteFetch(notificationData)\n  }\n};\n\nNotifications._onAction = function({...notification}) {\n  if ( typeof notification.data === 'string' ) {\n    try {\n      notification.data = JSON.parse(notificationData.data);\n    } catch(e) {\n      /* void */\n    }\n  }\n\n  this.onAction(notification);\n}\n\nNotifications._transformNotificationObject = function(data, isFromBackground = null) {\n  if(!data) {\n    return;\n  }\n\n  if ( isFromBackground === null ) {\n    isFromBackground = (\n      data.foreground === false ||\n      AppState.currentState === 'background' ||\n      AppState.currentState === 'unknown'\n    );\n  }\n\n  let _notification;\n\n  if ( Platform.OS === 'ios' ) {\n    const notifData = data.getData();\n\n    _notification = {\n      id: notifData?.id,\n      foreground: !isFromBackground,\n      userInteraction: notifData?.userInteraction === 1 || false,\n      message: data.getMessage(),\n      data: notifData,\n      badge: data.getBadgeCount(),\n      title: data.getTitle(),\n      subtitle: data.getSubtitle(),\n      soundName: data.getSound(),\n      fireDate: Date.parse(data._fireDate),\n      action: data.getActionIdentifier(),\n      reply_text: data.getUserText(),\n      finish: (res) => data.finish(res)\n    };\n\n    if(isNaN(_notification.fireDate)) {\n      delete _notification.fireDate;\n    }\n\n  } else {\n    _notification = {\n      foreground: !isFromBackground,\n      finish: () => {},\n      ...data,\n    };\n\n    if ( typeof _notification.data === 'string' ) {\n      try {\n        _notification.data = JSON.parse(_notification.data);\n      } catch(e) {\n        /* void */\n      }\n    }\n    \n    if ( typeof _notification.userInfo === 'string' ) {\n      try {\n        _notification.userInfo = JSON.parse(_notification.userInfo);\n      } catch(e) {\n        /* void */\n      }\n    }\n\n\n    _notification.data = {\n      ...(typeof _notification.userInfo === 'object' ? _notification.userInfo : {}),\n      ...(typeof _notification.data === 'object' ? _notification.data : {}),\n    };\n\n    delete _notification.userInfo;\n    delete _notification.notificationId;\n  }\n\n  return _notification;\n}\n\nNotifications._onNotification = function(data, initialNotification = false) {\n  if ( this.onNotification !== false ) {\n    let notification = data;\n\n    if(!initialNotification) {\n      notification = this._transformNotificationObject(data);\n    }\n\n    this.onNotification(notification);\n  }\n};\n\n/* onResultPermissionResult */\nNotifications._onPermissionResult = function() {\n  this.isPermissionsRequestPending = false;\n};\n\n// Prevent requestPermissions called twice if ios result is pending\nNotifications._requestPermissions = function() {\n  if ( Platform.OS === 'ios' ) {\n    if ( this.isPermissionsRequestPending === false ) {\n      this.isPermissionsRequestPending = true;\n      return this.callNative( 'requestPermissions', [ this.permissions ])\n              .then(this._onPermissionResult.bind(this))\n              .catch(this._onPermissionResult.bind(this));\n    }\n  } else if (Platform.OS === 'android') {\n    return this.callNative( 'requestPermissions', []);\n  }\n};\n\n// Stock requestPermissions function\nNotifications.requestPermissions = function() {\n  if ( Platform.OS === 'ios' ) {\n    return this.callNative( 'requestPermissions', [ this.permissions ]);\n  } else if (Platform.OS === 'android') {\n    return this.callNative( 'requestPermissions', []);\n  }\n};\n\n/* Fallback functions */\nNotifications.subscribeToTopic = function() {\n  return this.callNative('subscribeToTopic', arguments);\n};\n\nNotifications.unsubscribeFromTopic = function () {\n  return this.callNative('unsubscribeFromTopic', arguments);\n};\n\nNotifications.presentLocalNotification = function() {\n  return this.callNative('presentLocalNotification', arguments);\n};\n\nNotifications.scheduleLocalNotification = function() {\n  return this.callNative('scheduleLocalNotification', arguments);\n};\n\nNotifications.cancelLocalNotifications = function(userInfo) {\n  console.warn('This method is now deprecated, please use `cancelLocalNotification` (remove the ending `s`).');\n\n  return this.cancelLocalNotification(userInfo);\n};\n\nNotifications.cancelLocalNotification = function(notificationId) {\n  if(typeof notificationId === 'object') {\n    notificationId = notificationId?.id;\n  }\n\n  if(typeof notificationId === 'number') {\n    notificationId = '' + notificationId;\n  }\n\n  if ( Platform.OS === 'ios' ) {\n    return this.callNative('removePendingNotificationRequests', [[notificationId]]);\n  } else {\n    return this.callNative('cancelLocalNotification', [notificationId]);\n  }\n};\n\nNotifications.clearLocalNotification = function() {\n    return this.callNative('clearLocalNotification', arguments);\n};\n\nNotifications.cancelAllLocalNotifications = function() {\n  if ( Platform.OS === 'ios' ) {\n    return this.callNative('removeAllPendingNotificationRequests', arguments);\n  } else if (Platform.OS === 'android') {\n    return this.callNative('cancelAllLocalNotifications', arguments);\n  }\n};\n\nNotifications.setApplicationIconBadgeNumber = function() {\n  return this.callNative('setApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.getApplicationIconBadgeNumber = function() {\n  return this.callNative('getApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.popInitialNotification = function(handler) {\n  this.callNative('getInitialNotification').then((result) => {\n    handler(\n      this._transformNotificationObject(result, true)\n    );\n  });\n};\n\nNotifications.checkPermissions = function() {\n  return this.callNative('checkPermissions', arguments);\n};\n\n/* Abandon Permissions */\nNotifications.abandonPermissions = function() {\n  return this.callNative('abandonPermissions', arguments);\n}\n\nNotifications.clearAllNotifications = function() {\n  // Only available for Android\n  return this.callNative('clearAllNotifications', arguments)\n}\n\nNotifications.removeAllDeliveredNotifications = function() {\n  return this.callNative('removeAllDeliveredNotifications', arguments);\n}\n\nNotifications.getDeliveredNotifications = function() {\n  return this.callNative('getDeliveredNotifications', arguments);\n}\n\nNotifications.getScheduledLocalNotifications = function(callback) {\n\tconst mapNotifications = (notifications) => {\n\t\tlet mappedNotifications = [];\n\t\tif(notifications?.length > 0) {\n\t\t\tif(Platform.OS === 'ios'){\n\t\t\t\tmappedNotifications = notifications.map(notif => {\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tsoundName: notif?.sound,\n\t\t\t\t\t\tid: notif.id,\n                        date: (notif.date ? new Date(notif.date) : null),\n\t\t\t\t\t\tnumber: notif?.badge,\n\t\t\t\t\t\tmessage: notif?.body,\n            title: notif?.title,\n            data: notif?.userInfo\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else if(Platform.OS === 'android') {\n\t\t\t\tmappedNotifications = notifications.map(notif => {\n\n          try {\n            notif.data = JSON.parse(notif.data);\n          } catch(e) { }\n\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tsoundName: notif.soundName,\n\t\t\t\t\t\trepeatInterval: notif.repeatInterval,\n\t\t\t\t\t\tid: notif.id,\n\t\t\t\t\t\tdate: new Date(notif.date),\n\t\t\t\t\t\tnumber: notif.number,\n\t\t\t\t\t\tmessage: notif.message,\n\t\t\t\t\t\ttitle: notif.title,\n\t\t\t\t\t\tdata: notif.data,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tcallback(mappedNotifications);\n\t}\n\n  if(Platform.OS === 'ios'){\n    return this.callNative('getPendingNotificationRequests', [mapNotifications]);\n  } else {\n    return this.callNative('getScheduledLocalNotifications', [mapNotifications]);\n  }\n}\n\nNotifications.removeDeliveredNotifications = function() {\n  return this.callNative('removeDeliveredNotifications', arguments);\n}\n\nNotifications.invokeApp = function() {\n  return this.callNative('invokeApp', arguments);\n};\n\nNotifications.getChannels = function() {\n  return this.callNative('getChannels', arguments);\n};\n\nNotifications.channelExists = function() {\n  return this.callNative('channelExists', arguments);\n};\n\nNotifications.createChannel = function() {\n  return this.callNative('createChannel', arguments);\n};\n\nNotifications.channelBlocked = function() {\n  return this.callNative('channelBlocked', arguments);\n};\n\nNotifications.deleteChannel = function() {\n  return this.callNative('deleteChannel', arguments);\n};\n\nNotifications.setNotificationCategories = function() {\n  return this.callNative('setNotificationCategories', arguments);\n}\n\n// https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT\nNotifications.Importance = Object.freeze({\n  DEFAULT: 3,\n  HIGH: 4,\n  LOW: 2,\n  MIN: 1,\n  NONE: 0,\n  UNSPECIFIED: -1000,\n});\n\nmodule.exports = Notifications;\n"]},"metadata":{},"sourceType":"module"}