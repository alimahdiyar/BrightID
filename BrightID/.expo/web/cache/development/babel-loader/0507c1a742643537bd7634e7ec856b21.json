{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/useResponderEvents/createResponderEvent.js"],"names":["emptyFunction","emptyObject","emptyArray","identifier","propagationWasStopped","domEventChangedTouches","domEvent","domEventType","metaKey","shiftKey","force","normalizeIdentifier","clientX","clientY","pageX","pageY","preventDefault","timestamp","Array","touch","locationX","locationY","target","changedTouches","normalizeTouches","touches","emulatedTouches","responderEvent","bubbles","cancelable","currentTarget","defaultPrevented","dispatchConfig","eventPhase","isDefaultPrevented","isPropagationStopped","isTrusted","nativeEvent","altKey","ctrlKey","type","persist","stopPropagation","timeStamp","touchHistory","ResponderTouchHistoryStore","rect","getBoundingClientRect","x","y"],"mappings":"AAWA,OAAA,qBAAA;AACA,OAAA,0BAAA;;AA2CA,IAAMA,aAAa,GAAbA,SAAAA,aAAAA,GAAsB,CAA5B,CAAA;;AACA,IAAMC,WAAW,GAAjB,EAAA;AACA,IAAMC,UAAU,GAAhB,EAAA;;AAOA,SAAA,mBAAA,CAAA,UAAA,EAAyC;EACvC,OAAOC,UAAU,GAAVA,EAAAA,GAAkBA,UAAU,GAA5BA,EAAAA,GAAP,UAAA;AAOF;;AAAA,eAAe,SAAA,oBAAA,CAAA,QAAA,EAA6D;EAC1E,IAAA,IAAA;EACA,IAAIC,qBAAqB,GAAzB,KAAA;EACA,IAAA,cAAA;EACA,IAAA,OAAA;EAEA,IAAMC,sBAAsB,GAAGC,QAAQ,CAAvC,cAAA;EACA,IAAMC,YAAY,GAAGD,QAAQ,CAA7B,IAAA;EAEA,IAAME,OAAO,GAAGF,QAAQ,CAARA,OAAAA,KAAhB,IAAA;EACA,IAAMG,QAAQ,GAAGH,QAAQ,CAARA,QAAAA,KAAjB,IAAA;EACA,IAAMI,KAAK,GAAIL,sBAAsB,IAAIA,sBAAsB,CAAtBA,CAAsB,CAAtBA,CAA3B,KAACA,IAAf,CAAA;EACA,IAAMF,UAAU,GAAGQ,mBAAmB,CACnCN,sBAAsB,IAAIA,sBAAsB,CAAtBA,CAAsB,CAAtBA,CAA3B,UAACA,IADH,CAAsC,CAAtC;EAGA,IAAMO,OAAO,GAAIP,sBAAsB,IAAIA,sBAAsB,CAAtBA,CAAsB,CAAtBA,CAA3B,OAACA,IAAgEC,QAAQ,CAAzF,OAAA;EACA,IAAMO,OAAO,GAAIR,sBAAsB,IAAIA,sBAAsB,CAAtBA,CAAsB,CAAtBA,CAA3B,OAACA,IAAgEC,QAAQ,CAAzF,OAAA;EACA,IAAMQ,KAAK,GAAIT,sBAAsB,IAAIA,sBAAsB,CAAtBA,CAAsB,CAAtBA,CAA3B,KAACA,IAA8DC,QAAQ,CAArF,KAAA;EACA,IAAMS,KAAK,GAAIV,sBAAsB,IAAIA,sBAAsB,CAAtBA,CAAsB,CAAtBA,CAA3B,KAACA,IAA8DC,QAAQ,CAArF,KAAA;EACA,IAAMU,cAAc,GAClB,OAAOV,QAAQ,CAAf,cAAA,KAAA,UAAA,GACIA,QAAQ,CAARA,cAAAA,CAAAA,IAAAA,CADJ,QACIA,CADJ,GADF,aAAA;EAIA,IAAMW,SAAS,GAAGX,QAAQ,CAA1B,SAAA;;EAEA,SAAA,gBAAA,CAAA,OAAA,EAAmC;IACjC,OAAOY,KAAK,CAALA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,GAAAA,CAAwC,UAAA,KAAA,EAAW;MACxD,OAAO;QACLR,KAAK,EAAES,KAAK,CADP,KAAA;QAELhB,UAAU,EAAEQ,mBAAmB,CAACQ,KAAK,CAFhC,UAE0B,CAF1B;;QAGL,IAAA,SAAA,GAAgB;UACd,OAAOC,SAAS,CAACD,KAAK,CAAtB,OAAgB,CAAhB;QAJG,CAAA;;QAML,IAAA,SAAA,GAAgB;UACd,OAAOE,SAAS,CAACF,KAAK,CAAtB,OAAgB,CAAhB;QAPG,CAAA;;QASLL,KAAK,EAAEK,KAAK,CATP,KAAA;QAULJ,KAAK,EAAEI,KAAK,CAVP,KAAA;QAWLG,MAAM,EAAEH,KAAK,CAXR,MAAA;QAYLF,SAAS,EAZX;MAAO,CAAP;IADF,CAAOC,CAAP;EAkBF;;EAAA,IAAIb,sBAAsB,IAA1B,IAAA,EAAoC;IAClCkB,cAAc,GAAGC,gBAAgB,CAAjCD,sBAAiC,CAAjCA;IACAE,OAAO,GAAGD,gBAAgB,CAAClB,QAAQ,CAAnCmB,OAA0B,CAA1BA;EAFF,CAAA,MAGO;IACL,IAAMC,eAAe,GAAG,CACtB;MACEhB,KAAK,EADP,KAAA;MAEEP,UAAU,EAFZ,UAAA;;MAGE,IAAA,SAAA,GAAgB;QACd,OAAOiB,SAAS,CAAhB,OAAgB,CAAhB;MAJJ,CAAA;;MAME,IAAA,SAAA,GAAgB;QACd,OAAOC,SAAS,CAAhB,OAAgB,CAAhB;MAPJ,CAAA;;MASEP,KAAK,EATP,KAAA;MAUEC,KAAK,EAVP,KAAA;MAWEO,MAAM,EAAEhB,QAAQ,CAXlB,MAAA;MAYEW,SAAS,EAbb;IACE,CADsB,CAAxB;IAgBAM,cAAc,GAAdA,eAAAA;IACAE,OAAO,GACLlB,YAAY,KAAZA,SAAAA,IAA8BA,YAAY,KAA1CA,WAAAA,GAAAA,UAAAA,GADFkB,eAAAA;EAIF;;EAAA,IAAME,cAAc,GAAG;IACrBC,OAAO,EADc,IAAA;IAErBC,UAAU,EAFW,IAAA;IAIrBC,aAAa,EAJQ,IAAA;IAKrBC,gBAAgB,EAAEzB,QAAQ,CALL,gBAAA;IAMrB0B,cAAc,EANO,WAAA;IAOrBC,UAAU,EAAE3B,QAAQ,CAPC,UAAA;IAQrB4B,kBARqB,EAAA,SAAA,kBAAA,GAQA;MACnB,OAAO5B,QAAQ,CAAf,gBAAA;IATmB,CAAA;IAWrB6B,oBAXqB,EAAA,SAAA,oBAAA,GAWE;MACrB,OAAA,qBAAA;IAZmB,CAAA;IAcrBC,SAAS,EAAE9B,QAAQ,CAdE,SAAA;IAerB+B,WAAW,EAAE;MACXC,MAAM,EADK,KAAA;MAEXC,OAAO,EAFI,KAAA;MAGX/B,OAAO,EAHI,OAAA;MAIXC,QAAQ,EAJG,QAAA;MAKXc,cAAc,EALH,cAAA;MAMXb,KAAK,EANM,KAAA;MAOXP,UAAU,EAPC,UAAA;;MAQX,IAAA,SAAA,GAAgB;QACd,OAAOiB,SAAS,CAAhB,OAAgB,CAAhB;MATS,CAAA;;MAWX,IAAA,SAAA,GAAgB;QACd,OAAOC,SAAS,CAAhB,OAAgB,CAAhB;MAZS,CAAA;;MAcXP,KAAK,EAdM,KAAA;MAeXC,KAAK,EAfM,KAAA;MAgBXO,MAAM,EAAEhB,QAAQ,CAhBL,MAAA;MAiBXW,SAAS,EAjBE,SAAA;MAkBXQ,OAAO,EAlBI,OAAA;MAmBXe,IAAI,EAlCe;IAeR,CAfQ;IAoCrBC,OAAO,EApCc,aAAA;IAqCrBzB,cAAc,EArCO,cAAA;IAsCrB0B,eAtCqB,EAAA,SAAA,eAAA,GAsCH;MAChBtC,qBAAqB,GAArBA,IAAAA;IAvCmB,CAAA;IAyCrBkB,MAAM,EAAEhB,QAAQ,CAzCK,MAAA;IA0CrBqC,SAAS,EA1CY,SAAA;IA2CrBC,YAAY,EAAEC,0BAA0B,CA3C1C;EAAuB,CAAvB;;EAiDA,SAAA,SAAA,CAAA,CAAA,EAAsB;IACpBC,IAAI,GAAGA,IAAI,IAAIC,qBAAqB,CAACpB,cAAc,CAAnDmB,aAAoC,CAApCA;;IACA,IAAA,IAAA,EAAU;MACR,OAAOE,CAAC,GAAGF,IAAI,CAAf,IAAA;IAEH;EACD;;EAAA,SAAA,SAAA,CAAA,CAAA,EAAsB;IACpBA,IAAI,GAAGA,IAAI,IAAIC,qBAAqB,CAACpB,cAAc,CAAnDmB,aAAoC,CAApCA;;IACA,IAAA,IAAA,EAAU;MACR,OAAOG,CAAC,GAAGH,IAAI,CAAf,GAAA;IAEH;EAED;;EAAA,OAAA,cAAA;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { TouchEvent } from './ResponderEventTypes';\n\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nexport type ResponderEvent = {|\n  bubbles: boolean,\n  cancelable: boolean,\n  currentTarget: any,\n  defaultPrevented: ?boolean,\n  dispatchConfig: {\n    registrationName?: string,\n    phasedRegistrationNames?: {\n      bubbled: string,\n      captured: string\n    }\n  },\n  eventPhase: ?number,\n  isDefaultPrevented: () => boolean,\n  isPropagationStopped: () => boolean,\n  isTrusted: ?boolean,\n  preventDefault: () => void,\n  stopPropagation: () => void,\n  nativeEvent: TouchEvent,\n  persist: () => void,\n  target: ?any,\n  timeStamp: number,\n  touchHistory: $ReadOnly<{|\n    indexOfSingleActiveTouch: number,\n    mostRecentTimeStamp: number,\n    numberActiveTouches: number,\n    touchBank: Array<{|\n      currentPageX: number,\n      currentPageY: number,\n      currentTimeStamp: number,\n      previousPageX: number,\n      previousPageY: number,\n      previousTimeStamp: number,\n      startPageX: number,\n      startPageY: number,\n      startTimeStamp: number,\n      touchActive: boolean\n    |}>\n  |}>\n|};\n\nconst emptyFunction = () => {};\nconst emptyObject = {};\nconst emptyArray = [];\n\n/**\n * Safari produces very large identifiers that would cause the `touchBank` array\n * length to be so large as to crash the browser, if not normalized like this.\n * In the future the `touchBank` should use an object/map instead.\n */\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\n/**\n * Converts a native DOM event to a ResponderEvent.\n * Mouse events are transformed into fake touch events.\n */\nexport default function createResponderEvent(domEvent: any): ResponderEvent {\n  let rect;\n  let propagationWasStopped = false;\n  let changedTouches;\n  let touches;\n\n  const domEventChangedTouches = domEvent.changedTouches;\n  const domEventType = domEvent.type;\n\n  const metaKey = domEvent.metaKey === true;\n  const shiftKey = domEvent.shiftKey === true;\n  const force = (domEventChangedTouches && domEventChangedTouches[0].force) || 0;\n  const identifier = normalizeIdentifier(\n    (domEventChangedTouches && domEventChangedTouches[0].identifier) || 0\n  );\n  const clientX = (domEventChangedTouches && domEventChangedTouches[0].clientX) || domEvent.clientX;\n  const clientY = (domEventChangedTouches && domEventChangedTouches[0].clientY) || domEvent.clientY;\n  const pageX = (domEventChangedTouches && domEventChangedTouches[0].pageX) || domEvent.pageX;\n  const pageY = (domEventChangedTouches && domEventChangedTouches[0].pageY) || domEvent.pageY;\n  const preventDefault =\n    typeof domEvent.preventDefault === 'function'\n      ? domEvent.preventDefault.bind(domEvent)\n      : emptyFunction;\n  const timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map((touch) => {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    const emulatedTouches = [\n      {\n        force,\n        identifier,\n        get locationX() {\n          return locationX(clientX);\n        },\n        get locationY() {\n          return locationY(clientY);\n        },\n        pageX,\n        pageY,\n        target: domEvent.target,\n        timestamp\n      }\n    ];\n    changedTouches = emulatedTouches;\n    touches =\n      domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  const responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    // `currentTarget` is set before dispatch\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey,\n      shiftKey,\n      changedTouches,\n      force,\n      identifier,\n      get locationX() {\n        return locationX(clientX);\n      },\n      get locationY() {\n        return locationY(clientY);\n      },\n      pageX,\n      pageY,\n      target: domEvent.target,\n      timestamp,\n      touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault,\n    stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  // Using getters and functions serves two purposes:\n  // 1) The value of `currentTarget` is not initially available.\n  // 2) Measuring the clientRect may cause layout jank and should only be done on-demand.\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}\n"]},"metadata":{},"sourceType":"module"}