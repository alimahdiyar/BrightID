{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from \"../useLayoutEffect\";\nimport UIManager from \"../../exports/UIManager\";\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/useElementLayout/index.js"],"names":["DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","canUseDOM","window","entries","node","entry","onLayout","UIManager","event","nativeEvent","layout","x","y","width","height","left","top","timeStamp","Date","Object","enumerable","get","process","console","observer","getResizeObserver","useLayoutEffect","ref"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { ElementRef } from 'react';\nimport type { LayoutEvent } from '../../types';\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from '../useLayoutEffect';\nimport UIManager from '../../exports/UIManager';\n\nconst DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\n\nlet didWarn = !canUseDOM;\nlet resizeObserver = null;\n\nfunction getResizeObserver(): ?ResizeObserver {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach((entry) => {\n          const node = entry.target;\n          const onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, (x, y, width, height, left, top) => {\n              const event: LayoutEvent = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: { x, y, width, height, left, top }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: () => entry.target\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn(\n        'onLayout relies on ResizeObserver which is not supported by your browser. ' +\n          'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.'\n      );\n      didWarn = true;\n    }\n  }\n  return resizeObserver;\n}\n\nexport default function useElementLayout(\n  ref: ElementRef<any>,\n  onLayout?: ?(e: LayoutEvent) => void\n) {\n  const observer = getResizeObserver();\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n\n  // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n    return () => {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}\n"]},"metadata":{},"sourceType":"module"}