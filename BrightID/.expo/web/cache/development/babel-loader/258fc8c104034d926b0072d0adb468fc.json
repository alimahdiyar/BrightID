{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { photoDirectory } from \"../../utils/filesystem\";\nimport BlurWidget from '@/components/BlurWidget/BlurWidget.web';\nimport { BLACK } from \"../../theme/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar FullScreenPhoto = function FullScreenPhoto(_ref) {\n  var _route$params, _route$params2;\n\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var photo = (_route$params = route.params) == null ? void 0 : _route$params.photo;\n  var base64 = (_route$params2 = route.params) == null ? void 0 : _route$params2.base64;\n  var uri = base64 ? photo : \"file://\" + photoDirectory() + \"/\" + (photo == null ? void 0 : photo.filename);\n  var imageSource = photo != null && photo.filename || base64 ? {\n    uri: uri\n  } : require(\"../../static/default_profile.jpg\");\n  var pan = useRef(new Animated.ValueXY()).current;\n  var panResponder = useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {\n      return true;\n    },\n    onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {\n      return true;\n    },\n    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n      return true;\n    },\n    onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant() {\n      pan.setOffset({\n        x: pan.x._value,\n        y: pan.y._value\n      });\n    },\n    onPanResponderMove: Animated.event([null, {\n      dx: pan.x,\n      dy: pan.y\n    }], {\n      useNativeDriver: false\n    }),\n    onPanResponderRelease: function onPanResponderRelease() {\n      navigation.goBack();\n    }\n  })).current;\n  return _jsx(BlurView, {\n    style: [styles.container],\n    blurType: \"dark\",\n    blurAmount: 10,\n    reducedTransparencyFallbackColor: BLACK,\n    children: _jsx(Animated.Image, _objectSpread({\n      source: imageSource,\n      style: [styles.photo, {\n        transform: [{\n          translateX: pan.x\n        }, {\n          translateY: pan.y\n        }]\n      }],\n      resizeMethod: \"scale\",\n      resizeMode: \"contain\"\n    }, panResponder.panHandlers))\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent'\n  },\n  photo: {\n    width: '100%',\n    flex: 1\n  }\n});\nexport default FullScreenPhoto;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/FullScreenPhoto.tsx"],"names":["FullScreenPhoto","route","navigation","photo","base64","uri","photoDirectory","imageSource","require","pan","useRef","Animated","panResponder","PanResponder","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","x","y","onPanResponderMove","dx","dy","useNativeDriver","onPanResponderRelease","styles","transform","translateX","translateY","StyleSheet","container","flex","width","height","alignItems","justifyContent","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { Animated, StyleSheet, PanResponder } from 'react-native';\nimport { photoDirectory } from '@/utils/filesystem';\nimport BlurWidget from '@/components/BlurWidget/BlurWidget.web';\nimport { BLACK } from '@/theme/colors';\nimport { StackScreenProps } from '@react-navigation/stack';\n\ntype props = StackScreenProps<ModalStackParamList, 'FullScreenPhoto'>;\n\nconst FullScreenPhoto = ({ route, navigation }: props) => {\n  const photo = route.params?.photo;\n  const base64 = route.params?.base64;\n  const uri = base64 ? photo : `file://${photoDirectory()}/${photo?.filename}`;\n\n  const imageSource =\n    photo?.filename || base64\n      ? {\n          uri,\n        }\n      : require('@/static/default_profile.jpg');\n\n  const pan = useRef(new Animated.ValueXY()).current;\n\n  const panResponder = useRef(\n    PanResponder.create({\n      // Ask to be the responder:\n      onStartShouldSetPanResponder: (evt, gestureState) => true,\n      onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n      onMoveShouldSetPanResponder: (evt, gestureState) => true,\n      onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n      onPanResponderGrant: () => {\n        pan.setOffset({\n          // @ts-ignore\n          x: pan.x._value,\n          // @ts-ignore\n          y: pan.y._value,\n        });\n      },\n      onPanResponderMove: Animated.event([null, { dx: pan.x, dy: pan.y }], {\n        useNativeDriver: false,\n      }),\n      onPanResponderRelease: () => {\n        navigation.goBack();\n      },\n    }),\n  ).current;\n\n  return (\n    <BlurView\n      style={[styles.container]}\n      blurType=\"dark\"\n      blurAmount={10}\n      reducedTransparencyFallbackColor={BLACK}\n    >\n      <Animated.Image\n        source={imageSource}\n        style={[\n          styles.photo,\n          {\n            transform: [{ translateX: pan.x }, { translateY: pan.y }],\n          },\n        ]}\n        resizeMethod=\"scale\"\n        resizeMode=\"contain\"\n        {...panResponder.panHandlers}\n      />\n    </BlurView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent',\n  },\n  photo: {\n    width: '100%',\n    flex: 1,\n  },\n});\n\nexport default FullScreenPhoto;\n"]},"metadata":{},"sourceType":"module"}