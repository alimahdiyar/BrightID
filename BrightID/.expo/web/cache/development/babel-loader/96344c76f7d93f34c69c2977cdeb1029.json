{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport default function useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n          height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: Dimensions.get('window')\n    });\n    Dimensions.addEventListener('change', onChange);\n    return function () {\n      return Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["dimensions","setDimensions","React","height","width","Dimensions","onChange","window","d"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAKA,eAAe,SAAA,mBAAA,GAA+B;EAC5C,IAAA,eAAA,GAAoCE,KAAK,CAALA,QAAAA,CAAe,YAAM;IAEvD,IAAA,eAAA,GAAkCG,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAAlC;IAAA,IAAA,qBAAA,GAAA,eAAA,CAAA,MAAA;IAAA,IAAQF,MAAR,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;IAAA,IAAA,qBAAA,GAAA,eAAA,CAAA,KAAA;IAAA,IAAoBC,KAApB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;;IAEA,OAAO;MAAED,MAAF,EAAA,MAAA;MAAUC,KAAAA,EAJiBF;IAI3B,CAAP;EAJF,CAAoCA,CAApC;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,UAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAmBC,aAAnB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EAOAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMI,QAAQ,GAARA,SAAAA,QAAAA,CAAW,IAAXA,EAAmD;MAArCC,IAAAA,MAAqC,GAAA,IAAA,CAArCA,MAAAA;MAClB,IAAQH,KAAR,GAA0BG,MAA1B,CAAA,KAAA;MAAA,IAAeJ,MAAf,GAA0BI,MAA1B,CAAA,MAAA;MAEAN,aAAa,CAAEO,UAAD,CAACA,EAAM;QACnB,IAAIJ,KAAK,KAAKI,CAAC,CAAXJ,KAAAA,IAAqBD,MAAM,KAAKK,CAAC,CAArC,MAAA,EAA8C;UAC5C,OAAA,CAAA;QAGF;;QAAA,OAAO;UAAEJ,KAAF,EAAA,KAAA;UAASD,MAAAA,EALL;QAKJ,CAAP;MARJ,CAGe,CAAbF;IAHF,CAAA;;IAcAK,QAAQ,CAAC;MAAEC,MAAM,EAAEF,UAAU,CAAVA,GAAAA,CAAnBC,QAAmBD;IAAV,CAAD,CAARC;IAEAD,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;IAEA,OAAO,YAAA;MAAA,OAAMA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAN,QAAMA,CAAN;IAnBTH,CAmBE;EAnBFA,CAAAA,EAAAA,EAAAA;EAsBA,OAAA,UAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}