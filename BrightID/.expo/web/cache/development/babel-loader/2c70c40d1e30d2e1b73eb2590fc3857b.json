{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useContext, useEffect, useLayoutEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { useTranslation } from 'react-i18next';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport ChannelSwitch from \"../Helpers/ChannelSwitch\";\nimport { DARK_GREY, LIGHT_BLACK, ORANGE, WHITE } from \"../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { fontSize } from \"../../theme/fonts\";\nimport Camera from \"../Icons/Camera\";\nimport { channel_states, channel_types, closeChannel, selectAllActiveChannelIdsByType, selectChannelById, setDisplayChannelType } from \"./channelSlice\";\nimport { selectAllPendingConnectionsByChannelIds, selectAllUnconfirmedConnectionsByChannelIds } from \"./pendingConnectionSlice\";\nimport { createChannel } from \"./actions/channelThunks\";\nimport { setActiveNotification } from \"../../actions\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { QrCode } from \"./QrCode\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar FakeConnectionBtn = function FakeConnectionBtn() {\n  return null;\n};\n\nvar addFakeConnection = function addFakeConnection() {\n  return null;\n};\n\nif (__DEV__) {\n  addFakeConnection = require(\"../../actions/fakeContact\").addFakeConnection;\n\n  FakeConnectionBtn = function FakeConnectionBtn() {\n    var dispatch = useDispatch();\n    return _jsx(TouchableOpacity, {\n      testID: \"fakeConnectionBtn\",\n      style: {\n        marginRight: 11\n      },\n      onPress: function onPress() {\n        dispatch(addFakeConnection());\n      },\n      children: _jsx(Material, {\n        name: \"ghost\",\n        size: 32,\n        color: WHITE\n      })\n    });\n  };\n}\n\nvar PENDING_GROUP_TIMEOUT = 45000;\nexport var MyCodeScreen = function MyCodeScreen() {\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      channelErr = _useState2[0],\n      setChannelErr = _useState2[1];\n\n  var displayChannelType = useSelector(function (state) {\n    return state.channels.displayChannelType;\n  });\n  var myChannel = useSelector(function (state) {\n    return selectChannelById(state, state.channels.myChannelIds[displayChannelType]);\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var activeChannelIds = useSelector(function (state) {\n    return selectAllActiveChannelIdsByType(state, displayChannelType);\n  });\n  console.log('activeChannelIds', activeChannelIds);\n  var pendingConnectionSize = useSelector(function (state) {\n    if (myChannel) {\n      return selectAllPendingConnectionsByChannelIds(state, [myChannel.id]).length;\n    } else {\n      return 0;\n    }\n  });\n  var unconfirmedConnectionSize = useSelector(function (state) {\n    return selectAllUnconfirmedConnectionsByChannelIds(state, activeChannelIds).length;\n  });\n  useFocusEffect(useCallback(function () {\n    if (!navigation.isFocused()) return;\n\n    if ((!myChannel || (myChannel == null ? void 0 : myChannel.state) !== channel_states.OPEN) && channelErr < 3) {\n      InteractionManager.runAfterInteractions(function () {\n        dispatch(createChannel(displayChannelType, api)).catch(function (err) {\n          console.log(\"error creating channel: \" + err.message);\n\n          if (channelErr === 2) {\n            Alert.alert(t('common.alert.error'), t('pendingConnection.alert.text.errorCreateChannel', {\n              message: \"\" + err.message\n            }));\n          }\n\n          setChannelErr(function (c) {\n            return c + 1;\n          });\n        });\n      });\n    }\n\n    dispatch(setActiveNotification(null));\n  }, [navigation, myChannel, channelErr, dispatch, displayChannelType, api, t]));\n  useEffect(function () {\n    var timer;\n\n    if (unconfirmedConnectionSize > 0 && (myChannel == null ? void 0 : myChannel.state) === channel_states.OPEN) {\n      switch (displayChannelType) {\n        case channel_types.SINGLE:\n          navigation.navigate('PendingConnections');\n          dispatch(closeChannel({\n            channelId: myChannel == null ? void 0 : myChannel.id,\n            background: true\n          }));\n          break;\n\n        case channel_types.GROUP:\n        case channel_types.STAR:\n          timer = setTimeout(function () {\n            navigation.navigate('PendingConnections');\n          }, PENDING_GROUP_TIMEOUT);\n          break;\n      }\n    }\n\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [displayChannelType, dispatch, navigation, unconfirmedConnectionSize, myChannel]);\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return unconfirmedConnectionSize > 0 ? _jsxs(TouchableOpacity, {\n          style: {\n            width: DEVICE_LARGE ? 60 : 50\n          },\n          onPress: function onPress() {\n            navigation.navigate('PendingConnections');\n          },\n          children: [_jsx(Material, {\n            name: \"account-supervisor-circle\",\n            size: 32,\n            color: WHITE\n          }), _jsx(View, {\n            style: {\n              backgroundColor: ORANGE,\n              width: 9,\n              height: 9,\n              borderRadius: 5,\n              position: 'absolute',\n              top: 2,\n              left: 21\n            }\n          })]\n        }) : _jsx(FakeConnectionBtn, {});\n      },\n      headerTitle: function headerTitle() {\n        var ConnectionTitle = function ConnectionTitle() {\n          return _jsx(Text, {\n            style: styles.headerTitle,\n            children: t('qrcode.header.connections', {\n              count: pendingConnectionSize + 1\n            })\n          });\n        };\n\n        var group_types = [channel_types.GROUP, channel_types.STAR];\n        return group_types.includes(myChannel == null ? void 0 : myChannel.type) ? __DEV__ ? _jsx(TouchableWithoutFeedback, {\n          onPress: function onPress() {\n            dispatch(addFakeConnection());\n          },\n          children: _jsx(View, {\n            children: _jsx(ConnectionTitle, {})\n          })\n        }) : _jsx(ConnectionTitle, {}) : null;\n      },\n      headerTitleAlign: 'center'\n    });\n  }, [myChannel, dispatch, navigation, pendingConnectionSize, unconfirmedConnectionSize, t]);\n\n  var toggleChannelType = function toggleChannelType() {\n    dispatch(setDisplayChannelType(displayChannelType === channel_types.SINGLE ? channel_types.GROUP : channel_types.SINGLE));\n  };\n\n  var setStarChannelType = function setStarChannelType() {\n    console.log(\"LongPress\");\n    dispatch(setDisplayChannelType(channel_types.STAR));\n  };\n\n  var displayOneToOneInfo = function displayOneToOneInfo() {\n    Alert.alert(t('qrcode.alert.title.codeSingle'), t('qrcode.alert.text.codeSingle'));\n  };\n\n  var displayManyToManyInfo = function displayManyToManyInfo() {\n    Alert.alert(t('qrcode.alert.title.codeGroup'), t('qrcode.alert.text.codeGroup'));\n  };\n\n  var displayOneToManyInfo = function displayOneToManyInfo() {\n    Alert.alert(t('qrcode.alert.title.codeStar', 'Star code'), t('qrcode.alert.text.codeStar', 'This QR code is designed to connect many people with one person.'));\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: ORANGE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      testID: \"MyCodeScreen\",\n      children: [_jsx(View, {\n        style: styles.infoTopContainer,\n        children: displayChannelType === channel_types.STAR ? _jsx(TouchableOpacity, {\n          style: styles.starContainer,\n          onPress: toggleChannelType,\n          children: _jsx(Material, {\n            name: \"star\",\n            size: 30,\n            color: WHITE\n          })\n        }) : _jsx(ChannelSwitch, {\n          onValueChange: toggleChannelType,\n          value: displayChannelType === channel_types.SINGLE,\n          onLongPress: setStarChannelType,\n          testID: \"ChannelSwitch\"\n        })\n      }), _jsxs(View, {\n        style: styles.infoTopContainer,\n        children: [_jsxs(Text, {\n          style: styles.infoTopText,\n          children: [t('qrcode.label.connectionType'), ' ']\n        }), displayChannelType === channel_types.GROUP && _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row'\n          },\n          onPress: displayManyToManyInfo,\n          testID: \"ConnectionInfoGroupBtn\",\n          children: [_jsx(Text, {\n            testID: \"group-code\",\n            style: styles.infoTopText,\n            children: t('qrcode.text.codeGroup')\n          }), _jsx(Material, {\n            name: \"information-variant\",\n            size: 18,\n            color: LIGHT_BLACK\n          })]\n        }), displayChannelType === channel_types.SINGLE && _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row'\n          },\n          onPress: displayOneToOneInfo,\n          testID: \"ConnectionInfoSingleBtn\",\n          children: [_jsx(Text, {\n            testID: \"single-use-code\",\n            style: styles.infoTopText,\n            children: t('qrcode.text.codeSingle')\n          }), _jsx(Material, {\n            name: \"information-variant\",\n            size: 18,\n            color: LIGHT_BLACK\n          })]\n        }), displayChannelType === channel_types.STAR && _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row'\n          },\n          onPress: displayOneToManyInfo,\n          testID: \"ConnectionInfoStarBtn\",\n          children: [_jsx(Text, {\n            testID: \"star-code\",\n            style: styles.infoTopText,\n            children: t('qrcode.text.codeStar', 'Star code')\n          }), _jsx(Material, {\n            name: \"information-variant\",\n            size: 18,\n            color: LIGHT_BLACK\n          })]\n        })]\n      }), _jsx(View, {\n        style: {\n          flexGrow: 2\n        },\n        children: _jsx(QrCode, {\n          channel: myChannel\n        })\n      }), _jsxs(View, {\n        style: styles.bottomContainer,\n        children: [_jsx(Text, {\n          style: styles.infoBottomText,\n          children: t('qrcode.text.canAlso')\n        }), _jsxs(TouchableOpacity, {\n          testID: \"MyCodeToScanCodeBtn\",\n          style: styles.scanCodeButton,\n          onPress: function onPress() {\n            navigation.navigate('ScanCode');\n          },\n          children: [_jsx(Camera, {\n            color: WHITE,\n            width: DEVICE_LARGE ? 22 : 20,\n            height: DEVICE_LARGE ? 22 : 20\n          }), _jsx(Text, {\n            style: styles.scanCodeText,\n            children: t('qrcode.button.scanCode')\n          })]\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n    paddingTop: 20\n  },\n  headerTitle: {\n    color: WHITE,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16]\n  },\n  infoTopContainer: {\n    width: '100%',\n    flexGrow: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    textAlign: 'center',\n    color: LIGHT_BLACK\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10\n  },\n  scanCodeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10\n  },\n  scanCodeText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244\n  },\n  starContainer: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY\n  }\n});\nexport default MyCodeScreen;","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useLayoutEffect","useState","useFocusEffect","useNavigation","useDispatch","useSelector","useTranslation","Material","ChannelSwitch","DARK_GREY","LIGHT_BLACK","ORANGE","WHITE","DEVICE_LARGE","fontSize","Camera","channel_states","channel_types","closeChannel","selectAllActiveChannelIdsByType","selectChannelById","setDisplayChannelType","selectAllPendingConnectionsByChannelIds","selectAllUnconfirmedConnectionsByChannelIds","createChannel","setActiveNotification","NodeApiContext","QrCode","FakeConnectionBtn","addFakeConnection","__DEV__","require","dispatch","marginRight","PENDING_GROUP_TIMEOUT","MyCodeScreen","navigation","t","api","channelErr","setChannelErr","displayChannelType","state","channels","myChannel","myChannelIds","a","b","id","activeChannelIds","console","log","pendingConnectionSize","length","unconfirmedConnectionSize","isFocused","OPEN","InteractionManager","runAfterInteractions","catch","err","message","Alert","alert","c","timer","SINGLE","navigate","channelId","background","GROUP","STAR","setTimeout","clearTimeout","setOptions","headerRight","width","backgroundColor","height","borderRadius","position","top","left","headerTitle","ConnectionTitle","styles","count","group_types","includes","type","headerTitleAlign","toggleChannelType","setStarChannelType","displayOneToOneInfo","displayManyToManyInfo","displayOneToManyInfo","orangeTop","container","infoTopContainer","starContainer","infoTopText","flexDirection","flexGrow","bottomContainer","infoBottomText","scanCodeButton","scanCodeText","StyleSheet","create","zIndex","flex","alignItems","justifyContent","borderTopLeftRadius","borderTopRightRadius","marginTop","overflow","paddingTop","color","fontFamily","textAlign","minHeight","marginBottom","marginLeft","emptyQr","borderColor"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/MyCodeScreen.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  Alert,\n  InteractionManager,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { useTranslation } from 'react-i18next';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ChannelSwitch from '@/components/Helpers/ChannelSwitch';\nimport { DARK_GREY, LIGHT_BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { fontSize } from '@/theme/fonts';\nimport Camera from '@/components/Icons/Camera';\nimport {\n  channel_states,\n  channel_types,\n  closeChannel,\n  selectAllActiveChannelIdsByType,\n  selectChannelById,\n  setDisplayChannelType,\n} from '@/components/PendingConnections/channelSlice';\nimport {\n  selectAllPendingConnectionsByChannelIds,\n  selectAllUnconfirmedConnectionsByChannelIds,\n} from '@/components/PendingConnections/pendingConnectionSlice';\n\nimport { createChannel } from '@/components/PendingConnections/actions/channelThunks';\nimport { setActiveNotification } from '@/actions';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { QrCode } from './QrCode';\n\n/**\n * My Code screen of BrightID\n *\n * USERA represents this user\n * ==================================================================\n * displays a qrcode\n *\n */\nlet FakeConnectionBtn = () => null;\nlet addFakeConnection = () => null;\nif (__DEV__) {\n  addFakeConnection = require('@/actions/fakeContact').addFakeConnection;\n\n  FakeConnectionBtn = () => {\n    const dispatch = useDispatch();\n    return (\n      <TouchableOpacity\n        testID=\"fakeConnectionBtn\"\n        style={{ marginRight: 11 }}\n        onPress={() => {\n          dispatch(addFakeConnection());\n        }}\n      >\n        <Material name=\"ghost\" size={32} color={WHITE} />\n      </TouchableOpacity>\n    );\n  };\n}\n\nconst PENDING_GROUP_TIMEOUT = 45000;\n\nexport const MyCodeScreen = () => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n\n  const [channelErr, setChannelErr] = useState(0);\n\n  // GROUP / SINGLE / STAR\n  const displayChannelType = useSelector(\n    (state: State) => state.channels.displayChannelType,\n  );\n  // current channel displayed by QRCode\n  const myChannel = useSelector(\n    (state: State) =>\n      selectChannelById(state, state.channels.myChannelIds[displayChannelType]),\n    (a, b) => a?.id === b?.id,\n  );\n\n  // All channels with current displayChannelType actively polling profile service\n  const activeChannelIds = useSelector((state: State) =>\n    selectAllActiveChannelIdsByType(state, displayChannelType),\n  );\n\n  console.log('activeChannelIds', activeChannelIds);\n\n  // pending connections attached to active channel\n  const pendingConnectionSize = useSelector((state: State) => {\n    if (myChannel) {\n      return selectAllPendingConnectionsByChannelIds(state, [myChannel.id])\n        .length;\n    } else {\n      return 0;\n    }\n  });\n\n  const unconfirmedConnectionSize = useSelector(\n    (state) =>\n      selectAllUnconfirmedConnectionsByChannelIds(state, activeChannelIds)\n        .length,\n  );\n\n  // create channel if none exists\n  useFocusEffect(\n    useCallback(() => {\n      if (!navigation.isFocused()) return;\n      if (\n        (!myChannel || myChannel?.state !== channel_states.OPEN) &&\n        channelErr < 3\n      ) {\n        InteractionManager.runAfterInteractions(() => {\n          dispatch(createChannel(displayChannelType, api)).catch((err) => {\n            console.log(`error creating channel: ${err.message}`);\n            if (channelErr === 2) {\n              Alert.alert(\n                t('common.alert.error'),\n                t('pendingConnection.alert.text.errorCreateChannel', {\n                  message: `${err.message}`,\n                }),\n              );\n            }\n            setChannelErr((c) => c + 1);\n          });\n        });\n      }\n      dispatch(setActiveNotification(null));\n    }, [\n      navigation,\n      myChannel,\n      channelErr,\n      dispatch,\n      displayChannelType,\n      api,\n      t,\n    ]),\n  );\n\n  // Navigate to next screen if QRCode has been scanned\n  useEffect(() => {\n    let timer;\n    if (\n      unconfirmedConnectionSize > 0 &&\n      myChannel?.state === channel_states.OPEN\n    ) {\n      switch (displayChannelType) {\n        case channel_types.SINGLE:\n          // navigate immediately to pending connections\n          navigation.navigate('PendingConnections');\n          // close channel to prevent navigation loop\n          dispatch(\n            closeChannel({ channelId: myChannel?.id, background: true }),\n          );\n          break;\n        case channel_types.GROUP:\n        case channel_types.STAR:\n          timer = setTimeout(() => {\n            navigation.navigate('PendingConnections');\n          }, PENDING_GROUP_TIMEOUT);\n          break;\n      }\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [\n    displayChannelType,\n    dispatch,\n    navigation,\n    unconfirmedConnectionSize,\n    myChannel,\n  ]);\n\n  // dev button\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () =>\n        unconfirmedConnectionSize > 0 ? (\n          <TouchableOpacity\n            style={{ width: DEVICE_LARGE ? 60 : 50 }}\n            onPress={() => {\n              navigation.navigate('PendingConnections');\n            }}\n          >\n            <Material\n              name=\"account-supervisor-circle\"\n              size={32}\n              color={WHITE}\n            />\n\n            <View\n              style={{\n                backgroundColor: ORANGE,\n                width: 9,\n                height: 9,\n                borderRadius: 5,\n                position: 'absolute',\n                top: 2,\n                left: 21,\n              }}\n            />\n          </TouchableOpacity>\n        ) : (\n          <FakeConnectionBtn />\n        ),\n      headerTitle: () => {\n        const ConnectionTitle = () => (\n          <Text style={styles.headerTitle}>\n            {t('qrcode.header.connections', {\n              count: pendingConnectionSize + 1,\n            })}\n          </Text>\n        );\n        const group_types: Array<string> = [\n          channel_types.GROUP,\n          channel_types.STAR,\n        ];\n        return group_types.includes(myChannel?.type) ? (\n          __DEV__ ? (\n            <TouchableWithoutFeedback\n              onPress={() => {\n                dispatch(addFakeConnection());\n              }}\n            >\n              <View>\n                <ConnectionTitle />\n              </View>\n            </TouchableWithoutFeedback>\n          ) : (\n            <ConnectionTitle />\n          )\n        ) : null;\n      },\n      headerTitleAlign: 'center',\n    });\n  }, [\n    myChannel,\n    dispatch,\n    navigation,\n    pendingConnectionSize,\n    unconfirmedConnectionSize,\n    t,\n  ]);\n\n  // when\n  const toggleChannelType = () => {\n    // toggle switch\n    dispatch(\n      setDisplayChannelType(\n        displayChannelType === channel_types.SINGLE\n          ? channel_types.GROUP\n          : channel_types.SINGLE,\n      ),\n    );\n  };\n\n  const setStarChannelType = () => {\n    console.log(`LongPress`);\n    dispatch(setDisplayChannelType(channel_types.STAR));\n  };\n\n  const displayOneToOneInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeSingle'),\n      t('qrcode.alert.text.codeSingle'),\n    );\n  };\n\n  const displayManyToManyInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeGroup'),\n      t('qrcode.alert.text.codeGroup'),\n    );\n  };\n\n  const displayOneToManyInfo = () => {\n    Alert.alert(\n      t('qrcode.alert.title.codeStar', 'Star code'),\n      t(\n        'qrcode.alert.text.codeStar',\n        'This QR code is designed to connect many people with one person.',\n      ),\n    );\n  };\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"MyCodeScreen\">\n        <View style={styles.infoTopContainer}>\n          {displayChannelType === channel_types.STAR ? (\n            <TouchableOpacity\n              style={styles.starContainer}\n              onPress={toggleChannelType}\n            >\n              <Material name=\"star\" size={30} color={WHITE} />\n            </TouchableOpacity>\n          ) : (\n            <ChannelSwitch\n              onValueChange={toggleChannelType}\n              value={displayChannelType === channel_types.SINGLE}\n              onLongPress={setStarChannelType}\n              testID=\"ChannelSwitch\"\n            />\n          )}\n        </View>\n        <View style={styles.infoTopContainer}>\n          <Text style={styles.infoTopText}>\n            {t('qrcode.label.connectionType')}{' '}\n          </Text>\n          {displayChannelType === channel_types.GROUP && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayManyToManyInfo}\n              testID=\"ConnectionInfoGroupBtn\"\n            >\n              <Text testID=\"group-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeGroup')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n          {displayChannelType === channel_types.SINGLE && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayOneToOneInfo}\n              testID=\"ConnectionInfoSingleBtn\"\n            >\n              <Text testID=\"single-use-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeSingle')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n          {displayChannelType === channel_types.STAR && (\n            <TouchableOpacity\n              style={{ flexDirection: 'row' }}\n              onPress={displayOneToManyInfo}\n              testID=\"ConnectionInfoStarBtn\"\n            >\n              <Text testID=\"star-code\" style={styles.infoTopText}>\n                {t('qrcode.text.codeStar', 'Star code')}\n              </Text>\n              <Material\n                name=\"information-variant\"\n                size={18}\n                color={LIGHT_BLACK}\n              />\n            </TouchableOpacity>\n          )}\n        </View>\n        <View style={{ flexGrow: 2 }}>\n          <QrCode channel={myChannel} />\n        </View>\n\n        <View style={styles.bottomContainer}>\n          <Text style={styles.infoBottomText}>{t('qrcode.text.canAlso')}</Text>\n          <TouchableOpacity\n            testID=\"MyCodeToScanCodeBtn\"\n            style={styles.scanCodeButton}\n            onPress={() => {\n              navigation.navigate('ScanCode');\n            }}\n          >\n            <Camera\n              color={WHITE}\n              width={DEVICE_LARGE ? 22 : 20}\n              height={DEVICE_LARGE ? 22 : 20}\n            />\n            <Text style={styles.scanCodeText}>\n              {t('qrcode.button.scanCode')}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    borderTopRightRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n    paddingTop: 20,\n  },\n  headerTitle: {\n    color: WHITE,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n  },\n  infoTopContainer: {\n    width: '100%',\n    flexGrow: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  infoTopText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    textAlign: 'center',\n    color: LIGHT_BLACK,\n  },\n  bottomContainer: {\n    alignItems: 'center',\n    minHeight: 100,\n  },\n  infoBottomText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[12],\n    marginBottom: 10,\n  },\n  scanCodeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: DEVICE_LARGE ? 42 : 36,\n    backgroundColor: ORANGE,\n    borderRadius: 60,\n    width: DEVICE_LARGE ? 240 : 200,\n    marginBottom: 10,\n  },\n  scanCodeText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[14],\n    color: WHITE,\n    marginLeft: 10,\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244,\n  },\n  starContainer: {\n    flexDirection: 'row',\n    width: DEVICE_LARGE ? 80 : 70,\n    height: DEVICE_LARGE ? 40 : 32,\n    borderRadius: DEVICE_LARGE ? 5 : 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: ORANGE,\n    borderColor: DARK_GREY,\n  },\n});\n\nexport default MyCodeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}