{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Clipboard from '@react-native-community/clipboard';\nimport Svg, { Path } from 'react-native-svg';\nimport qrcode from 'qrcode';\nimport { parseString } from 'xml2js';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useTranslation } from 'react-i18next';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../../store\";\nimport { BLACK, DARKER_GREY, LIGHT_BLACK, ORANGE, WHITE } from \"../../../theme/colors\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { RecoveryErrorType } from \"./RecoveryError\";\nimport { setupRecovery } from \"./thunks/recoveryThunks\";\nimport { buildRecoveryChannelQrUrl } from \"../../../utils/recovery\";\nimport { clearChannel, createChannel, pollChannel } from \"./thunks/channelThunks\";\nimport { resetRecoveryData, uploadCompletedByOtherSide } from \"./recoveryDataSlice\";\nimport { setupSync, createSyncChannel, pollImportChannel, clearImportChannel } from \"../ImportFlow/thunks/channelThunks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar RecoverSteps;\n\n(function (RecoverSteps) {\n  RecoverSteps[RecoverSteps[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n  RecoverSteps[RecoverSteps[\"RUNNING\"] = 1] = \"RUNNING\";\n  RecoverSteps[RecoverSteps[\"ERROR\"] = 2] = \"ERROR\";\n})(RecoverSteps || (RecoverSteps = {}));\n\nvar RecoveryCodeScreen = function RecoveryCodeScreen(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n      action = _route$params.action,\n      urlType = _route$params.urlType;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      qrUrl = _useState2[0],\n      setQrUrl = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrsvg = _useState4[0],\n      setQrsvg = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      alreadyNotified = _useState6[0],\n      setAlreadyNotified = _useState6[1];\n\n  var recoveryData = useSelector(function (state) {\n    return state.recoveryData;\n  });\n  var isScanned = useSelector(function (state) {\n    return uploadCompletedByOtherSide(state) || state.recoveryData.recoveredConnections || state.recoveryData.recoveredGroups || state.recoveryData.recoveredBlindSigs;\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n\n  var _useState7 = useState(RecoverSteps.NOT_STARTED),\n      _useState8 = _slicedToArray(_useState7, 2),\n      step = _useState8[0],\n      setStep = _useState8[1];\n\n  var sigCount = recoveryData.sigs ? Object.values(recoveryData.sigs).length : 0;\n  useEffect(function () {\n    var runRecoveryEffect = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(setupRecovery()));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(dispatch(createChannel()));\n\n            case 4:\n              dispatch(pollChannel());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var runImportEffect = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(setupRecovery()));\n\n            case 2:\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(dispatch(createChannel()));\n\n            case 4:\n              dispatch(pollImportChannel());\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var runSyncEffect = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(setupSync()));\n\n            case 2:\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(dispatch(createSyncChannel()));\n\n            case 4:\n              dispatch(pollImportChannel());\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (step === RecoverSteps.NOT_STARTED) {\n      if (action === 'recovery') {\n        console.log(\"initializing recovery process\");\n        runRecoveryEffect();\n      } else if (action === 'import') {\n        console.log(\"initializing import process\");\n        runImportEffect();\n      } else if (action === 'sync') {\n        console.log(\"initializing sync process\");\n        runSyncEffect();\n      }\n\n      setStep(RecoverSteps.RUNNING);\n    }\n  }, [action, dispatch, recoveryData.aesKey, step]);\n  useEffect(function () {\n    if (recoveryData.channel.url && recoveryData.aesKey) {\n      var newQrUrl = buildRecoveryChannelQrUrl({\n        aesKey: recoveryData.aesKey,\n        url: recoveryData.channel.url,\n        t: urlType\n      });\n      console.log(\"new qrCode url: \" + newQrUrl.href);\n      setQrUrl(newQrUrl);\n\n      var parseQrString = function parseQrString(err, qrsvg) {\n        if (err) return console.log(err);\n        setQrsvg(qrsvg);\n      };\n\n      qrcode.toString(newQrUrl.href, function (err, qr) {\n        if (err) return console.log(err);\n        parseString(qr, parseQrString);\n      });\n    }\n  }, [recoveryData.aesKey, recoveryData.channel.url, urlType]);\n  useEffect(function () {\n    if (recoveryData.errorType !== RecoveryErrorType.NONE) {\n      var message;\n\n      switch (recoveryData.errorType) {\n        case RecoveryErrorType.MISMATCH_ID:\n          message = t('recovery.error.mismatchId', 'Your recovery connections selected different accounts');\n          break;\n\n        case RecoveryErrorType.GENERIC:\n        default:\n          message = recoveryData.errorMessage !== '' ? recoveryData.errorMessage : t('recovery.error.unknown', 'An unknown error occured');\n      }\n\n      Alert.alert(t('recovery.error.title', 'Account recovery failed'), message);\n\n      if (action === 'recovery') {\n        clearChannel();\n      } else if (action === 'import') {\n        clearImportChannel();\n      }\n\n      dispatch(resetRecoveryData());\n      setStep(RecoverSteps.ERROR);\n      navigation.goBack();\n    }\n  }, [action, dispatch, navigation, recoveryData.errorMessage, recoveryData.errorType, t]);\n  useFocusEffect(useCallback(function () {\n    if (action === 'recovery' && !alreadyNotified && sigCount === 1) {\n      Alert.alert(t('common.alert.info'), t('common.alert.text.recoverySigned'));\n      setAlreadyNotified(true);\n    } else if (action === 'recovery' && sigCount > 1) {\n      navigation.navigate('Restore');\n    } else if (action === 'import' && isScanned) {\n      navigation.navigate('Import');\n    } else if (action === 'sync' && isScanned) {\n      navigation.navigate('Devices', {\n        syncing: true,\n        asScanner: false\n      });\n    }\n  }, [action, alreadyNotified, sigCount, isScanned, t, navigation]));\n\n  var copyQr = function copyQr() {\n    var universalLink = \"https://app.brightid.org/connection-code/\" + encodeURIComponent(qrUrl.href);\n    var alertTitle;\n    var alertText;\n    var clipboardMsg;\n\n    switch (action) {\n      case 'recovery':\n        alertTitle = t('recovery.alert.title', 'Recovery link');\n        alertText = t('recovery.alert.text', 'Share this link with your recovery connections.');\n        clipboardMsg = t('recovery.clipboardmessage', {\n          defaultValue: 'Help me recover my BrightID: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      case 'import':\n        alertTitle = t('import.alert.title', 'Import BrightID link');\n        alertText = t('import.alert.text', 'Open this link with the BrightID app that should be imported.');\n        clipboardMsg = t('import.clipboardmessage', {\n          defaultValue: 'Export your BrightID to another device: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      case 'sync':\n        alertTitle = t('sync.alert.title', 'Sync user data');\n        alertText = t('sync.alert.text', 'Open this link with the BrightID app that should be synced.');\n        clipboardMsg = t('sync.clipboardmessage', {\n          defaultValue: 'Sync your BrightID data with another device: {{link}}',\n          link: universalLink\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    if (__DEV__) {\n      clipboardMsg = universalLink;\n    }\n\n    Alert.alert(alertTitle, alertText, [{\n      text: t('common.button.copy'),\n      onPress: function onPress() {\n        Clipboard.setString(clipboardMsg);\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(Text, {\n        style: styles.recoveryCodeInfoText,\n        children: [action === 'recovery' && t('recovery.text.askScanning'), action === 'import' && t('import.text.askScanning'), action === 'sync' && t('sync.text.askScanning')]\n      }), qrsvg ? _jsxs(View, {\n        style: styles.qrsvgContainer,\n        children: [_jsx(Text, {\n          style: styles.signatures,\n          children: action === 'recovery' ? t('recovery.text.signatures', {\n            count: sigCount\n          }) : ''\n        }), _jsxs(Svg, {\n          height: DEVICE_LARGE ? '240' : '200',\n          width: DEVICE_LARGE ? '240' : '200',\n          viewBox: path(['svg', '$', 'viewBox'], qrsvg),\n          \"shape-rendering\": \"crispEdges\",\n          children: [_jsx(Path, {\n            fill: WHITE,\n            d: path(['svg', 'path', '0', '$', 'd'], qrsvg)\n          }), _jsx(Path, {\n            stroke: BLACK,\n            d: path(['svg', 'path', '1', '$', 'd'], qrsvg)\n          })]\n        }), _jsxs(TouchableOpacity, {\n          style: styles.copyContainer,\n          onPress: copyQr,\n          children: [_jsx(Material, {\n            size: 24,\n            name: \"content-copy\",\n            color: LIGHT_BLACK,\n            style: {\n              width: 24,\n              height: 24\n            }\n          }), _jsxs(Text, {\n            style: styles.copyText,\n            children: [\" \", t('common.button.copy')]\n          })]\n        }), __DEV__ && _jsx(View, {\n          children: _jsx(Text, {\n            style: {\n              fontSize: 6\n            },\n            testID: \"qrcode\",\n            children: qrUrl == null ? void 0 : qrUrl.href\n          })\n        })]\n      }) : _jsx(View, {\n        style: styles.qrsvgContainer,\n        children: _jsx(Spinner, {\n          isVisible: true,\n          size: DEVICE_LARGE ? 48 : 42,\n          type: \"9CubeGrid\",\n          color: ORANGE\n        })\n      }), _jsxs(Text, {\n        style: styles.additionalInfo,\n        children: [action === 'recovery' && t('recovery.text.additionalInfo'), action === 'import' && t('import.text.additionalInfo'), action === 'sync' && t('sync.text.additionalInfo')]\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  qrsvgContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  recoveryCodeInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n    width: '80%',\n    marginTop: DEVICE_LARGE ? 30 : 26\n  },\n  additionalInfo: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: DARKER_GREY,\n    width: '80%',\n    marginBottom: DEVICE_LARGE ? 50 : 45\n  },\n  signatures: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 25,\n    minWidth: 100\n  },\n  copyText: {\n    color: BLACK,\n    fontFamily: 'Poppins-Medium'\n  }\n});\nexport default RecoveryCodeScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Clipboard","Svg","Path","qrcode","parseString","path","Spinner","Material","useTranslation","useFocusEffect","useNavigation","useDispatch","useSelector","BLACK","DARKER_GREY","LIGHT_BLACK","ORANGE","WHITE","fontSize","DEVICE_LARGE","RecoveryErrorType","setupRecovery","buildRecoveryChannelQrUrl","clearChannel","createChannel","pollChannel","resetRecoveryData","uploadCompletedByOtherSide","setupSync","createSyncChannel","pollImportChannel","clearImportChannel","RecoverSteps","RecoveryCodeScreen","route","params","action","urlType","qrUrl","setQrUrl","qrsvg","setQrsvg","alreadyNotified","setAlreadyNotified","recoveryData","state","isScanned","recoveredConnections","recoveredGroups","recoveredBlindSigs","t","dispatch","navigation","NOT_STARTED","step","setStep","sigCount","sigs","Object","values","length","runRecoveryEffect","runImportEffect","runSyncEffect","console","log","RUNNING","aesKey","channel","url","newQrUrl","href","parseQrString","err","toString","qr","errorType","NONE","message","MISMATCH_ID","GENERIC","errorMessage","Alert","alert","ERROR","goBack","navigate","syncing","asScanner","copyQr","universalLink","encodeURIComponent","alertTitle","alertText","clipboardMsg","defaultValue","link","__DEV__","text","onPress","setString","cancelable","styles","orangeTop","container","recoveryCodeInfoText","qrsvgContainer","signatures","count","copyContainer","width","height","copyText","additionalInfo","StyleSheet","create","backgroundColor","zIndex","flex","alignItems","justifyContent","flexDirection","borderTopLeftRadius","marginTop","overflow","fontFamily","textAlign","color","marginBottom","minHeight","minWidth"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RecoveryCodeScreen.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Alert, StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport Clipboard from '@react-native-community/clipboard';\nimport Svg, { Path } from 'react-native-svg';\nimport qrcode from 'qrcode';\nimport { parseString } from 'xml2js';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTranslation } from 'react-i18next';\nimport { useFocusEffect, useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { BLACK, DARKER_GREY, LIGHT_BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { RecoveryErrorType } from './RecoveryError';\nimport { setupRecovery } from './thunks/recoveryThunks';\nimport { buildRecoveryChannelQrUrl } from '@/utils/recovery';\nimport {\n  clearChannel,\n  createChannel,\n  pollChannel,\n} from './thunks/channelThunks';\nimport {\n  resetRecoveryData,\n  uploadCompletedByOtherSide,\n} from './recoveryDataSlice';\nimport {\n  setupSync,\n  createSyncChannel,\n  pollImportChannel,\n  clearImportChannel,\n} from '../ImportFlow/thunks/channelThunks';\n\n/**\n * Recovery Code screen of BrightID\n *\n * displays a qrcode\n */\nenum RecoverSteps {\n  NOT_STARTED,\n  RUNNING,\n  ERROR,\n}\n\nconst RecoveryCodeScreen = ({ route }) => {\n  const { action, urlType } = route.params;\n  const [qrUrl, setQrUrl] = useState<URL>();\n  const [qrsvg, setQrsvg] = useState('');\n  const [alreadyNotified, setAlreadyNotified] = useState(false);\n  const recoveryData = useSelector((state: State) => state.recoveryData);\n  const isScanned = useSelector(\n    (state: State) =>\n      uploadCompletedByOtherSide(state) ||\n      state.recoveryData.recoveredConnections ||\n      state.recoveryData.recoveredGroups ||\n      state.recoveryData.recoveredBlindSigs,\n  );\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const [step, setStep] = useState<RecoverSteps>(RecoverSteps.NOT_STARTED);\n\n  const sigCount = recoveryData.sigs\n    ? Object.values(recoveryData.sigs).length\n    : 0;\n\n  // create recovery data and start polling channel\n  useEffect(() => {\n    const runRecoveryEffect = async () => {\n      // create publicKey, secretKey, aesKey for user\n      await dispatch(setupRecovery());\n      // create channel and upload new publicKey to get signed by the scanner\n      await dispatch(createChannel());\n      // start polling channel to get sig and mutual info\n      dispatch(pollChannel());\n    };\n    const runImportEffect = async () => {\n      // create publicKey, secretKey, aesKey for user\n      await dispatch(setupRecovery());\n      // create channel and upload new publicKey to be added as a new signing key by the scanner\n      await dispatch(createChannel());\n      // start polling channel to get connections/groups/blindsigs info\n      dispatch(pollImportChannel());\n    };\n    const runSyncEffect = async () => {\n      // create a new aesKey\n      await dispatch(setupSync());\n      // create channel and upload lastSyncTime to the channel if it is not primary device\n      // or poll lastSyncTime from other side if it is and then upload connections/groups/blindsigs\n      // added after lastSyncTime to the channel\n      await dispatch(createSyncChannel());\n      // start polling channel to get new connections/groups/blindsigs info\n      dispatch(pollImportChannel());\n    };\n\n    if (step === RecoverSteps.NOT_STARTED) {\n      if (action === 'recovery') {\n        console.log(`initializing recovery process`);\n        runRecoveryEffect();\n      } else if (action === 'import') {\n        console.log(`initializing import process`);\n        runImportEffect();\n      } else if (action === 'sync') {\n        console.log(`initializing sync process`);\n        runSyncEffect();\n      }\n      setStep(RecoverSteps.RUNNING);\n    }\n  }, [action, dispatch, recoveryData.aesKey, step]);\n\n  // set QRCode and SVG\n  useEffect(() => {\n    if (recoveryData.channel.url && recoveryData.aesKey) {\n      const newQrUrl = buildRecoveryChannelQrUrl({\n        aesKey: recoveryData.aesKey,\n        url: recoveryData.channel.url,\n        t: urlType,\n      });\n      console.log(`new qrCode url: ${newQrUrl.href}`);\n      setQrUrl(newQrUrl);\n\n      const parseQrString = (err, qrsvg) => {\n        if (err) return console.log(err);\n        setQrsvg(qrsvg);\n      };\n\n      qrcode.toString(newQrUrl.href, (err, qr) => {\n        if (err) return console.log(err);\n        parseString(qr, parseQrString);\n      });\n    }\n  }, [recoveryData.aesKey, recoveryData.channel.url, urlType]);\n\n  // track errors\n  useEffect(() => {\n    if (recoveryData.errorType !== RecoveryErrorType.NONE) {\n      // something went wrong. Show error message to user and stop recovery process\n      let message;\n      switch (recoveryData.errorType) {\n        case RecoveryErrorType.MISMATCH_ID:\n          message = t(\n            'recovery.error.mismatchId',\n            'Your recovery connections selected different accounts',\n          );\n          break;\n        case RecoveryErrorType.GENERIC:\n        default:\n          // use untranslated errorMessage from state if available, generic message otherwise\n          message =\n            recoveryData.errorMessage !== ''\n              ? recoveryData.errorMessage\n              : t('recovery.error.unknown', 'An unknown error occured');\n      }\n      Alert.alert(\n        t('recovery.error.title', 'Account recovery failed'),\n        message,\n      );\n      if (action === 'recovery') {\n        clearChannel();\n      } else if (action === 'import') {\n        clearImportChannel();\n      }\n      dispatch(resetRecoveryData());\n      setStep(RecoverSteps.ERROR);\n      navigation.goBack();\n    }\n  }, [\n    action,\n    dispatch,\n    navigation,\n    recoveryData.errorMessage,\n    recoveryData.errorType,\n    t,\n  ]);\n\n  useFocusEffect(\n    useCallback(() => {\n      if (action === 'recovery' && !alreadyNotified && sigCount === 1) {\n        // alert user that one of their sigs exists\n        Alert.alert(\n          t('common.alert.info'),\n          t('common.alert.text.recoverySigned'),\n        );\n        setAlreadyNotified(true);\n      } else if (action === 'recovery' && sigCount > 1) {\n        navigation.navigate('Restore');\n      } else if (action === 'import' && isScanned) {\n        navigation.navigate('Import');\n      } else if (action === 'sync' && isScanned) {\n        navigation.navigate('Devices', { syncing: true, asScanner: false });\n      }\n    }, [action, alreadyNotified, sigCount, isScanned, t, navigation]),\n  );\n\n  const copyQr = () => {\n    const universalLink = `https://app.brightid.org/connection-code/${encodeURIComponent(\n      qrUrl.href,\n    )}`;\n\n    let alertTitle: string;\n    let alertText: string;\n    let clipboardMsg: string;\n    switch (action) {\n      case 'recovery':\n        alertTitle = t('recovery.alert.title', 'Recovery link');\n        alertText = t(\n          'recovery.alert.text',\n          'Share this link with your recovery connections.',\n        );\n        clipboardMsg = t('recovery.clipboardmessage', {\n          defaultValue: 'Help me recover my BrightID: {{link}}',\n          link: universalLink,\n        });\n        break;\n      case 'import':\n        alertTitle = t('import.alert.title', 'Import BrightID link');\n        alertText = t(\n          'import.alert.text',\n          'Open this link with the BrightID app that should be imported.',\n        );\n        clipboardMsg = t('import.clipboardmessage', {\n          defaultValue: 'Export your BrightID to another device: {{link}}',\n          link: universalLink,\n        });\n        break;\n      case 'sync':\n        alertTitle = t('sync.alert.title', 'Sync user data');\n        alertText = t(\n          'sync.alert.text',\n          'Open this link with the BrightID app that should be synced.',\n        );\n        clipboardMsg = t('sync.clipboardmessage', {\n          defaultValue: 'Sync your BrightID data with another device: {{link}}',\n          link: universalLink,\n        });\n        break;\n      default:\n        break;\n    }\n\n    if (__DEV__) {\n      clipboardMsg = universalLink;\n    }\n\n    Alert.alert(\n      alertTitle,\n      alertText,\n      [\n        {\n          text: t('common.button.copy'),\n          onPress: () => {\n            Clipboard.setString(clipboardMsg);\n          },\n        },\n      ],\n      { cancelable: false },\n    );\n  };\n\n  return (\n    <>\n      <View style={styles.orangeTop} />\n      <View style={styles.container}>\n        <Text style={styles.recoveryCodeInfoText}>\n          {action === 'recovery' && t('recovery.text.askScanning')}\n          {action === 'import' && t('import.text.askScanning')}\n          {action === 'sync' && t('sync.text.askScanning')}\n        </Text>\n\n        {qrsvg ? (\n          <View style={styles.qrsvgContainer}>\n            <Text style={styles.signatures}>\n              {action === 'recovery'\n                ? t('recovery.text.signatures', { count: sigCount })\n                : ''}\n            </Text>\n            <Svg\n              height={DEVICE_LARGE ? '240' : '200'}\n              width={DEVICE_LARGE ? '240' : '200'}\n              viewBox={path(['svg', '$', 'viewBox'], qrsvg)}\n              shape-rendering=\"crispEdges\"\n            >\n              <Path\n                fill={WHITE}\n                d={path(['svg', 'path', '0', '$', 'd'], qrsvg)}\n              />\n              <Path\n                stroke={BLACK}\n                d={path(['svg', 'path', '1', '$', 'd'], qrsvg)}\n              />\n            </Svg>\n\n            <TouchableOpacity style={styles.copyContainer} onPress={copyQr}>\n              <Material\n                size={24}\n                name=\"content-copy\"\n                color={LIGHT_BLACK}\n                style={{ width: 24, height: 24 }}\n              />\n              <Text style={styles.copyText}> {t('common.button.copy')}</Text>\n            </TouchableOpacity>\n            {__DEV__ && (\n              <View>\n                <Text style={{ fontSize: 6 }} testID=\"qrcode\">\n                  {qrUrl?.href}\n                </Text>\n              </View>\n            )}\n          </View>\n        ) : (\n          <View style={styles.qrsvgContainer}>\n            <Spinner\n              isVisible={true}\n              size={DEVICE_LARGE ? 48 : 42}\n              type=\"9CubeGrid\"\n              color={ORANGE}\n            />\n          </View>\n        )}\n        <Text style={styles.additionalInfo}>\n          {action === 'recovery' && t('recovery.text.additionalInfo')}\n          {action === 'import' && t('import.text.additionalInfo')}\n          {action === 'sync' && t('sync.text.additionalInfo')}\n        </Text>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  qrsvgContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  recoveryCodeInfoText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n    width: '80%',\n    marginTop: DEVICE_LARGE ? 30 : 26,\n  },\n  additionalInfo: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: DARKER_GREY,\n    width: '80%',\n    marginBottom: DEVICE_LARGE ? 50 : 45,\n  },\n  signatures: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n    color: BLACK,\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 25,\n    minWidth: 100,\n  },\n  copyText: {\n    color: BLACK,\n    fontFamily: 'Poppins-Medium',\n  },\n});\n\nexport default RecoveryCodeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}