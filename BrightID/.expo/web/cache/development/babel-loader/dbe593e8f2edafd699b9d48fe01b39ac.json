{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _MaterialCommunityIcons = _interopRequireDefault(require(\"react-native-vector-icons/MaterialCommunityIcons\"));\n\nvar _reactNativeActionSheet = require(\"@expo/react-native-action-sheet\");\n\nvar _store = require(\"../store\");\n\nvar _colors = require(\"../theme/colors\");\n\nvar _NodeApiGate = require(\"../components/NodeApiGate\");\n\nvar _fakeContact = require(\"../actions/fakeContact\");\n\nvar _constants = require(\"./constants\");\n\nvar _connectionLevelStrings = require(\"./connectionLevelStrings\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/connectionTestButton.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar btnOptions = ['Accept all group invites', 'Reconnect with changed profile', 'Reconnect with identical profile', \"Connect with all other fake connections - \" + _connectionLevelStrings.connectionLevelStrings[_constants.connection_levels.JUST_MET], \"Connect with all other fake connections - \" + _connectionLevelStrings.connectionLevelStrings[_constants.connection_levels.ALREADY_KNOWN], \"Connect with all other fake connections - \" + _connectionLevelStrings.connectionLevelStrings[_constants.connection_levels.RECOVERY], 'cancel'];\n\nvar ConnectionTestButton = function ConnectionTestButton(_ref) {\n  var connectionId = _ref.connectionId;\n\n  var _useActionSheet = (0, _reactNativeActionSheet.useActionSheet)(),\n      showActionSheetWithOptions = _useActionSheet.showActionSheetWithOptions;\n\n  var dispatch = (0, _store.useDispatch)();\n  var api = (0, _react.useContext)(_NodeApiGate.NodeApiContext);\n\n  var performAction = function performAction(index) {\n    switch (index) {\n      case 0:\n        console.log(\"Joining all groups\");\n        dispatch((0, _fakeContact.joinAllGroups)(connectionId, api));\n        break;\n\n      case 1:\n        console.log(\"Reconnecting with different profile\");\n        dispatch((0, _fakeContact.reconnectFakeConnection)(connectionId, true));\n        break;\n\n      case 2:\n        console.log(\"Reconnecting with same profile\");\n        dispatch((0, _fakeContact.reconnectFakeConnection)(connectionId, false));\n        break;\n\n      case 3:\n        console.log(\"Connecting to other fake connections - JUST MET\");\n        dispatch((0, _fakeContact.connectWithOtherFakeConnections)(connectionId, api, _constants.connection_levels.JUST_MET));\n        break;\n\n      case 4:\n        console.log(\"Connecting to other fake connections - ALREADY KNOWN\");\n        dispatch((0, _fakeContact.connectWithOtherFakeConnections)(connectionId, api, _constants.connection_levels.ALREADY_KNOWN));\n        break;\n\n      case 5:\n        console.log(\"Connecting to other fake connections - RECOVERY\");\n        dispatch((0, _fakeContact.connectWithOtherFakeConnections)(connectionId, api, _constants.connection_levels.RECOVERY));\n        break;\n\n      case 6:\n        console.log(\"Cancelled\");\n        break;\n\n      default:\n        console.log(\"Unhandled action index \" + index);\n    }\n  };\n\n  var handleButton = function handleButton() {\n    showActionSheetWithOptions({\n      options: btnOptions,\n      cancelButtonIndex: btnOptions.length - 1,\n      title: \"Connection Test options\",\n      showSeparators: true,\n      textStyle: {\n        color: _colors.BLUE,\n        textAlign: 'center',\n        width: '100%'\n      },\n      titleTextStyle: {\n        textAlign: 'center',\n        width: '100%'\n      }\n    }, performAction);\n  };\n\n  return _react.default.createElement(_reactNative.TouchableOpacity, {\n    testID: \"connectionTestBtn\",\n    style: {\n      marginRight: 11\n    },\n    onPress: handleButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_MaterialCommunityIcons.default, {\n    name: \"ghost\",\n    size: 30,\n    color: _colors.WHITE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar _default = ConnectionTestButton;\nexports.default = _default;","map":{"version":3,"names":["btnOptions","connectionLevelStrings","connection_levels","JUST_MET","ALREADY_KNOWN","RECOVERY","ConnectionTestButton","connectionId","useActionSheet","showActionSheetWithOptions","dispatch","useDispatch","api","useContext","NodeApiContext","performAction","index","console","log","joinAllGroups","reconnectFakeConnection","connectWithOtherFakeConnections","handleButton","options","cancelButtonIndex","length","title","showSeparators","textStyle","color","BLUE","textAlign","width","titleTextStyle","marginRight","WHITE"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/connectionTestButton.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useActionSheet } from '@expo/react-native-action-sheet';\nimport { useDispatch } from '@/store';\nimport { BLUE, WHITE } from '@/theme/colors';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport {\n  connectWithOtherFakeConnections,\n  joinAllGroups,\n  reconnectFakeConnection,\n} from '../actions/fakeContact';\nimport { connection_levels } from '@/utils/constants';\nimport { connectionLevelStrings } from '@/utils/connectionLevelStrings';\n\n/*\nReturn a button that opens actionsheet with test methods\n */\nconst btnOptions = [\n  'Accept all group invites',\n  'Reconnect with changed profile',\n  'Reconnect with identical profile',\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.JUST_MET]\n  }`,\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.ALREADY_KNOWN]\n  }`,\n  `Connect with all other fake connections - ${\n    connectionLevelStrings[connection_levels.RECOVERY]\n  }`,\n  'cancel',\n];\n\nconst ConnectionTestButton = ({ connectionId }: { connectionId: string }) => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n\n  const performAction = (index: number) => {\n    switch (index) {\n      case 0:\n        console.log(`Joining all groups`);\n        dispatch(joinAllGroups(connectionId, api));\n        break;\n      case 1:\n        console.log(`Reconnecting with different profile`);\n        dispatch(reconnectFakeConnection(connectionId, true));\n        break;\n      case 2:\n        console.log(`Reconnecting with same profile`);\n        dispatch(reconnectFakeConnection(connectionId, false));\n        break;\n      case 3:\n        console.log(`Connecting to other fake connections - JUST MET`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.JUST_MET,\n          ),\n        );\n        break;\n      case 4:\n        console.log(`Connecting to other fake connections - ALREADY KNOWN`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.ALREADY_KNOWN,\n          ),\n        );\n        break;\n      case 5:\n        console.log(`Connecting to other fake connections - RECOVERY`);\n        dispatch(\n          connectWithOtherFakeConnections(\n            connectionId,\n            api,\n            connection_levels.RECOVERY,\n          ),\n        );\n        break;\n      case 6:\n        console.log(`Cancelled`);\n        break;\n      default:\n        console.log(`Unhandled action index ${index}`);\n    }\n  };\n\n  const handleButton = () => {\n    showActionSheetWithOptions(\n      {\n        options: btnOptions,\n        cancelButtonIndex: btnOptions.length - 1,\n        title: `Connection Test options`,\n        showSeparators: true,\n        textStyle: {\n          color: BLUE,\n          textAlign: 'center',\n          width: '100%',\n        },\n        titleTextStyle: {\n          textAlign: 'center',\n          width: '100%',\n        },\n      },\n      performAction,\n    );\n  };\n\n  return (\n    <TouchableOpacity\n      testID=\"connectionTestBtn\"\n      style={{ marginRight: 11 }}\n      onPress={handleButton}\n    >\n      <Material name=\"ghost\" size={30} color={WHITE} />\n    </TouchableOpacity>\n  );\n};\n\nexport default ConnectionTestButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}