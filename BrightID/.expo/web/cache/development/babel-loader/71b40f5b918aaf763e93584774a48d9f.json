{"ast":null,"code":"function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from \"../../vendor/react-native/emitter/_EventEmitter\";\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\n\nvar AppState = function () {\n  function AppState() {}\n\n  AppState.addEventListener = function addEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        if (!changeEmitter) {\n          changeEmitter = new EventEmitter();\n          document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {\n            if (changeEmitter) {\n              changeEmitter.emit('change', AppState.currentState);\n            }\n          }, false);\n        }\n\n        return changeEmitter.addListener(type, handler);\n      }\n    }\n  };\n\n  AppState.removeEventListener = function removeEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (type === 'change' && changeEmitter) {\n        changeEmitter.removeListener(handler);\n      }\n    }\n  };\n\n  _createClass(AppState, null, [{\n    key: \"currentState\",\n    get: function get() {\n      if (!AppState.isAvailable) {\n        return AppStates.ACTIVE;\n      }\n\n      switch (document[VISIBILITY_STATE_PROPERTY]) {\n        case 'hidden':\n        case 'prerender':\n        case 'unloaded':\n          return AppStates.BACKGROUND;\n\n        default:\n          return AppStates.ACTIVE;\n      }\n    }\n  }]);\n\n  return AppState;\n}();\n\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];\nexport { AppState as default };","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/dist/exports/AppState/index.js"],"names":["i","props","descriptor","Object","_defineProperties","Constructor","isPrefixed","canUseDOM","document","EVENT_TYPES","VISIBILITY_CHANGE_EVENT","VISIBILITY_STATE_PROPERTY","AppStates","BACKGROUND","ACTIVE","changeEmitter","AppState","invariant","type","console","_createClass","key","get"],"mappings":"AAAA,SAAA,iBAAA,CAAA,MAAA,EAAA,KAAA,EAA0C;EAAE,KAAK,IAAIA,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkCD,CAAlC,EAAA,EAAuC;IAAE,IAAIE,UAAU,GAAGD,KAAK,CAAtB,CAAsB,CAAtB;IAA2BC,UAAU,CAAVA,UAAAA,GAAwBA,UAAU,CAAVA,UAAAA,IAAxBA,KAAAA;IAAwDA,UAAU,CAAVA,YAAAA,GAAAA,IAAAA;IAAgC,IAAI,WAAJ,UAAA,EAA2BA,UAAU,CAAVA,QAAAA,GAAAA,IAAAA;IAA4BC,MAAM,CAANA,cAAAA,CAAAA,MAAAA,EAA8BD,UAAU,CAAxCC,GAAAA,EAAAA,UAAAA;EAA8D;AAE7T;;AAAA,SAAA,YAAA,CAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAA4D;EAAE,IAAA,UAAA,EAAgBC,iBAAiB,CAACC,WAAW,CAAZ,SAAA,EAAjBD,UAAiB,CAAjBA;EAAsD,IAAA,WAAA,EAAiBA,iBAAiB,CAAA,WAAA,EAAjBA,WAAiB,CAAjBA;EAA6C,OAAA,WAAA;AAWlM;;AAAA,SAAA,SAAA,QAAA,+BAAA;AACA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,YAAA;AAEA,IAAIE,UAAU,GAAGC,SAAS,IAAI,CAACC,QAAQ,CAARA,cAAAA,CAAdD,QAAcC,CAAdD,IAAmDC,QAAQ,CAARA,cAAAA,CAApE,cAAoEA,CAApE;AACA,IAAIC,WAAW,GAAG,CAAA,QAAA,EAAlB,eAAkB,CAAlB;AACA,IAAIC,uBAAuB,GAAGJ,UAAU,GAAA,wBAAA,GAAxC,kBAAA;AACA,IAAIK,yBAAyB,GAAGL,UAAU,GAAA,uBAAA,GAA1C,iBAAA;AACA,IAAIM,SAAS,GAAG;EACdC,UAAU,EADI,YAAA;EAEdC,MAAM,EAFR;AAAgB,CAAhB;AAIA,IAAIC,aAAa,GAAjB,IAAA;;AAEA,IAAIC,QAAQ,GAAgB,YAAY;EACtC,SAAA,QAAA,GAAoB,CAEpBA;;EAAAA,QAAQ,CAARA,gBAAAA,GAA4B,SAAA,gBAAA,CAAA,IAAA,EAAA,OAAA,EAAyC;IACnE,IAAIA,QAAQ,CAAZ,WAAA,EAA0B;MACxBC,SAAS,CAACR,WAAW,CAAXA,OAAAA,CAAAA,IAAAA,MAA8B,CAA/B,CAAA,EAAA,4CAAA,EAATQ,IAAS,CAATA;;MAEA,IAAIC,IAAI,KAAR,QAAA,EAAuB;QACrB,IAAI,CAAJ,aAAA,EAAoB;UAClBH,aAAa,GAAG,IAAhBA,YAAgB,EAAhBA;UACAP,QAAQ,CAARA,gBAAAA,CAAAA,uBAAAA,EAAmD,YAAY;YAC7D,IAAA,aAAA,EAAmB;cACjBO,aAAa,CAAbA,IAAAA,CAAAA,QAAAA,EAA6BC,QAAQ,CAArCD,YAAAA;YAEH;UAJDP,CAAAA,EAAAA,KAAAA;QAOF;;QAAA,OAAOO,aAAa,CAAbA,WAAAA,CAAAA,IAAAA,EAAP,OAAOA,CAAP;MAEH;IACF;EAjBDC,CAAAA;;EAmBAA,QAAQ,CAARA,mBAAAA,GAA+B,SAAA,mBAAA,CAAA,IAAA,EAAA,OAAA,EAA4C;IACzE,IAAIA,QAAQ,CAAZ,WAAA,EAA0B;MACxBG,OAAO,CAAPA,KAAAA,CAAc,8BAAA,IAAA,GAAA,2BAAA,GAAA,gEAAA,GAAdA,0CAAAA;MACAF,SAAS,CAACR,WAAW,CAAXA,OAAAA,CAAAA,IAAAA,MAA8B,CAA/B,CAAA,EAAA,mDAAA,EAATQ,IAAS,CAATA;;MAEA,IAAIC,IAAI,KAAJA,QAAAA,IAAJ,aAAA,EAAwC;QACtCH,aAAa,CAAbA,cAAAA,CAAAA,OAAAA;MAEH;IACF;EATDC,CAAAA;;EAWAI,YAAY,CAAA,QAAA,EAAA,IAAA,EAAiB,CAAC;IAC5BC,GAAG,EADyB,cAAA;IAE5BC,GAAG,EAAE,SAAA,GAAA,GAAe;MAClB,IAAI,CAACN,QAAQ,CAAb,WAAA,EAA2B;QACzB,OAAOJ,SAAS,CAAhB,MAAA;MAGF;;MAAA,QAAQJ,QAAQ,CAAhB,yBAAgB,CAAhB;QACE,KAAA,QAAA;QACA,KAAA,WAAA;QACA,KAAA,UAAA;UACE,OAAOI,SAAS,CAAhB,UAAA;;QAEF;UACE,OAAOA,SAAS,CAPpB,MAOI;MAPJ;IAPJQ;EAA8B,CAAD,CAAjB,CAAZA;;EAmBA,OAAA,QAAA;AApDF,CAA4B,EAA5B;;AAuDAJ,QAAQ,CAARA,WAAAA,GAAuBT,SAAS,IAAIC,QAAQ,CAA5CQ,yBAA4C,CAA5CA;AACA,SAASA,QAAQ,IAAjB,OAAA","sourcesContent":["function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from '../../vendor/react-native/emitter/_EventEmitter'; // Android 4.4 browser\n\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\n\nvar AppState = /*#__PURE__*/function () {\n  function AppState() {}\n\n  AppState.addEventListener = function addEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        if (!changeEmitter) {\n          changeEmitter = new EventEmitter();\n          document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {\n            if (changeEmitter) {\n              changeEmitter.emit('change', AppState.currentState);\n            }\n          }, false);\n        }\n\n        return changeEmitter.addListener(type, handler);\n      }\n    }\n  };\n\n  AppState.removeEventListener = function removeEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (type === 'change' && changeEmitter) {\n        changeEmitter.removeListener(handler);\n      }\n    }\n  };\n\n  _createClass(AppState, null, [{\n    key: \"currentState\",\n    get: function get() {\n      if (!AppState.isAvailable) {\n        return AppStates.ACTIVE;\n      }\n\n      switch (document[VISIBILITY_STATE_PROPERTY]) {\n        case 'hidden':\n        case 'prerender':\n        case 'unloaded':\n          return AppStates.BACKGROUND;\n\n        default:\n          return AppStates.ACTIVE;\n      }\n    }\n  }]);\n\n  return AppState;\n}();\n\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];\nexport { AppState as default };"]},"metadata":{},"sourceType":"module"}