{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\n\nfunction reduce(fn) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn(val(a), val(b));\n    });\n  };\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn(val(a), val(b));\n    }, initialValue);\n  };\n}\n\nfunction infix(fn) {\n  return function (input) {\n    return fn(val(input[0]), val(input[1]));\n  };\n}\n\nfunction single(fn) {\n  return function (input) {\n    return fn(val(input[0]));\n  };\n}\n\nvar OPERATIONS = {\n  add: reduce(function (a, b) {\n    return a + b;\n  }),\n  sub: reduce(function (a, b) {\n    return a - b;\n  }),\n  multiply: reduce(function (a, b) {\n    return a * b;\n  }),\n  divide: reduce(function (a, b) {\n    return a / b;\n  }),\n  pow: reduce(function (a, b) {\n    return Math.pow(a, b);\n  }),\n  modulo: reduce(function (a, b) {\n    return (a % b + b) % b;\n  }),\n  sqrt: single(function (a) {\n    return Math.sqrt(a);\n  }),\n  log: single(function (a) {\n    return Math.log(a);\n  }),\n  sin: single(function (a) {\n    return Math.sin(a);\n  }),\n  cos: single(function (a) {\n    return Math.cos(a);\n  }),\n  tan: single(function (a) {\n    return Math.tan(a);\n  }),\n  acos: single(function (a) {\n    return Math.acos(a);\n  }),\n  asin: single(function (a) {\n    return Math.asin(a);\n  }),\n  atan: single(function (a) {\n    return Math.atan(a);\n  }),\n  exp: single(function (a) {\n    return Math.exp(a);\n  }),\n  round: single(function (a) {\n    return Math.round(a);\n  }),\n  abs: single(function (a) {\n    return Math.abs(a);\n  }),\n  ceil: single(function (a) {\n    return Math.ceil(a);\n  }),\n  floor: single(function (a) {\n    return Math.floor(a);\n  }),\n  max: reduce(function (a, b) {\n    return Math.max(a, b);\n  }),\n  min: reduce(function (a, b) {\n    return Math.min(a, b);\n  }),\n  and: reduceFrom(function (a, b) {\n    return a && b;\n  }, true),\n  or: reduceFrom(function (a, b) {\n    return a || b;\n  }, false),\n  not: single(function (a) {\n    return !a;\n  }),\n  defined: single(function (a) {\n    return a !== null && a !== undefined && !isNaN(a);\n  }),\n  lessThan: infix(function (a, b) {\n    return a < b;\n  }),\n  eq: infix(function (a, b) {\n    return a == b;\n  }),\n  greaterThan: infix(function (a, b) {\n    return a > b;\n  }),\n  lessOrEq: infix(function (a, b) {\n    return a <= b;\n  }),\n  greaterOrEq: infix(function (a, b) {\n    return a >= b;\n  }),\n  neq: infix(function (a, b) {\n    return a != b;\n  })\n};\n\nvar AnimatedOperator = function (_AnimatedNode) {\n  _inherits(AnimatedOperator, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedOperator);\n\n  function AnimatedOperator(operator, input) {\n    var _this;\n\n    _classCallCheck(this, AnimatedOperator);\n\n    invariant(typeof operator === 'string', \"Reanimated: Animated.operator node first argument should be of type String, but got: \".concat(operator));\n    invariant(input.every(function (el) {\n      return el instanceof AnimatedNode || typeof el === 'string' || typeof el === 'number';\n    }), \"Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got \".concat(input));\n    _this = _super.call(this, {\n      type: 'op',\n      op: operator,\n      input: input\n    }, input);\n\n    _defineProperty(_assertThisInitialized(_this), \"_input\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_op\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_operation\", void 0);\n\n    _this._op = operator;\n    _this._input = input;\n    return _this;\n  }\n\n  _createClass(AnimatedOperator, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedOperator, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (!this._operation) {\n        this._operation = OPERATIONS[this._op];\n        invariant(this._operation, \"Illegal operator '%s'\", this._op);\n      }\n\n      return this._operation(this._input);\n    }\n  }]);\n\n  return AnimatedOperator;\n}(AnimatedNode);\n\nexport function createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new AnimatedOperator(name, args.map(adapt));\n  };\n}","map":{"version":3,"sources":["AnimatedOperator.js"],"names":["input","fn","val","OPERATIONS","add","reduce","a","sub","multiply","divide","pow","Math","modulo","sqrt","single","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","reduceFrom","or","not","defined","isNaN","lessThan","infix","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","AnimatedNode","constructor","invariant","el","type","op","toString","__onEvaluate","args"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a,b) => Math.max(a, b)),\n  min: reduce((a,b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super(\n      { type: 'op', op: operator, input },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}