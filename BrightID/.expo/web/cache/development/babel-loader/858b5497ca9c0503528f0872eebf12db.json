{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from \"./constants\";\nimport normalizeValueWithProperty from \"./normalizeValueWithProperty\";\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n\n  resolvedStyle.transform = transform;\n};\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop);\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'aspectRatio':\n        {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n\n      case 'flex':\n        {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/exports/StyleSheet/createReactDOMStyle.js"],"names":["emptyObject","supportsCSS3TextDecoration","window","mapTransform","type","Object","value","transform","normalizedValue","normalizeValueWithProperty","resolveTransform","style","Array","resolvedStyle","createReactDOMStyle","stack","longFormProperties","STYLE_SHORT_FORM_EXPANSIONS"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nconst emptyObject = {};\n\nconst supportsCSS3TextDecoration =\n  !canUseDOM ||\n  (window.CSS != null &&\n    window.CSS.supports != null &&\n    (window.CSS.supports('text-decoration-line', 'none') ||\n      window.CSS.supports('-webkit-text-decoration-line', 'none')));\n\n/**\n * Transform\n */\n\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n// { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'\nconst mapTransform = (transform) => {\n  const type = Object.keys(transform)[0];\n  const value = transform[type];\n  if (type === 'matrix' || type === 'matrix3d') {\n    return `${type}(${value.join(',')})`;\n  } else {\n    const normalizedValue = normalizeValueWithProperty(value, type);\n    return `${type}(${normalizedValue})`;\n  }\n};\n\nconst resolveTransform = (resolvedStyle, style) => {\n  let transform = style.transform;\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n  resolvedStyle.transform = transform;\n};\n\n/**\n * Reducer\n */\n\nconst createReactDOMStyle = (style) => {\n  if (!style) {\n    return emptyObject;\n  }\n\n  const resolvedStyle = {};\n\n  Object.keys(style)\n    .sort()\n    .forEach((prop) => {\n      const value = normalizeValueWithProperty(style[prop], prop);\n\n      // Ignore everything else with a null value\n      if (value == null) {\n        return;\n      }\n\n      switch (prop) {\n        // Ignore some React Native styles\n        case 'elevation':\n        case 'overlayColor':\n        case 'resizeMode':\n        case 'tintColor': {\n          break;\n        }\n\n        case 'aspectRatio': {\n          resolvedStyle[prop] = value.toString();\n          break;\n        }\n\n        // TODO: remove once this issue is fixed\n        // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n        case 'backgroundClip': {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n          break;\n        }\n\n        // The 'flex' property value in React Native must be a positive integer,\n        // 0, or -1.\n        case 'flex': {\n          if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          } else {\n            resolvedStyle.flex = value;\n          }\n          break;\n        }\n\n        case 'font': {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n        case 'fontFamily': {\n          if (value.indexOf('System') > -1) {\n            const stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n          break;\n        }\n\n        case 'fontVariant': {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n          break;\n        }\n\n        case 'textAlignVertical': {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n        case 'textDecorationLine': {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n          break;\n        }\n\n        case 'transform':\n        case 'transformMatrix': {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n        case 'writingDirection': {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n        default: {\n          const longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n          if (longFormProperties) {\n            longFormProperties.forEach((longForm, i) => {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n      }\n    });\n\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;\n"]},"metadata":{},"sourceType":"module"}