{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useContext, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from \"../../../store\";\nimport { BLACK, ORANGE, WHITE } from \"../../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { setBackupCompleted, setPassword } from \"../../../reducer/userSlice\";\nimport { RecoverAccount } from \"./RecoverAccount\";\nimport { RestoreBackup } from \"./RestoreBackup\";\nimport { NodeApiContext } from \"../../NodeApiGate\";\nimport { finishRecovery, recoverData, setRecoveryKeys, socialRecovery } from \"./thunks/recoveryThunks\";\nimport { CHANNEL_POLL_INTERVAL, clearChannel } from \"./thunks/channelThunks\";\nimport { selectOperationByHash } from \"../../../reducer/operationsSlice\";\nimport { operation_states } from \"../../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar channelTimeout = CHANNEL_POLL_INTERVAL * 3.1;\nexport var AccountSteps;\n\n(function (AccountSteps) {\n  AccountSteps[AccountSteps[\"WAITING_DOWNLOAD\"] = 0] = \"WAITING_DOWNLOAD\";\n  AccountSteps[AccountSteps[\"DOWNLOAD_COMPLETE\"] = 1] = \"DOWNLOAD_COMPLETE\";\n  AccountSteps[AccountSteps[\"WAITING_OPERATION\"] = 2] = \"WAITING_OPERATION\";\n  AccountSteps[AccountSteps[\"OPERATION_APPLIED\"] = 3] = \"OPERATION_APPLIED\";\n  AccountSteps[AccountSteps[\"ERROR\"] = 4] = \"ERROR\";\n  AccountSteps[AccountSteps[\"COMPLETE\"] = 5] = \"COMPLETE\";\n})(AccountSteps || (AccountSteps = {}));\n\nexport var BackupSteps;\n\n(function (BackupSteps) {\n  BackupSteps[BackupSteps[\"WAITING_ACCOUNT\"] = 0] = \"WAITING_ACCOUNT\";\n  BackupSteps[BackupSteps[\"WAITING_PASSWORD\"] = 1] = \"WAITING_PASSWORD\";\n  BackupSteps[BackupSteps[\"RESTORING_DATA\"] = 2] = \"RESTORING_DATA\";\n  BackupSteps[BackupSteps[\"SKIPPED\"] = 3] = \"SKIPPED\";\n  BackupSteps[BackupSteps[\"ERROR\"] = 4] = \"ERROR\";\n  BackupSteps[BackupSteps[\"COMPLETE\"] = 5] = \"COMPLETE\";\n})(BackupSteps || (BackupSteps = {}));\n\nvar RestoreScreen = function RestoreScreen() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      pass = _useState2[0],\n      setPass = _useState2[1];\n\n  var api = useContext(NodeApiContext);\n  var recoveredConnections = useSelector(function (state) {\n    return state.recoveryData.recoveredConnections;\n  });\n  var recoveredGroups = useSelector(function (state) {\n    return state.recoveryData.recoveredGroups;\n  });\n\n  var _useState3 = useState(AccountSteps.WAITING_DOWNLOAD),\n      _useState4 = _slicedToArray(_useState3, 2),\n      accountStep = _useState4[0],\n      setAccountStep = _useState4[1];\n\n  var _useState5 = useState(BackupSteps.WAITING_ACCOUNT),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataStep = _useState6[0],\n      setDataStep = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      accountError = _useState8[0],\n      setAccountError = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      recoveryOpHash = _useState10[0],\n      setRecoveryOpHash = _useState10[1];\n\n  var recoveryOp = useSelector(function (state) {\n    return selectOperationByHash(state, recoveryOpHash);\n  });\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentItem = _useState12[0],\n      setCurrentItem = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      totalItems = _useState14[0],\n      setTotalItems = _useState14[1];\n\n  var dispatch = useDispatch();\n  useFocusEffect(useCallback(function () {\n    var t = setTimeout(function () {\n      clearChannel();\n      setAccountStep(AccountSteps.DOWNLOAD_COMPLETE);\n    }, channelTimeout);\n    return function () {\n      clearTimeout(t);\n    };\n  }, []));\n  useEffect(function () {\n    var startRecovery = function _callee() {\n      var op, errorString;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setAccountStep(AccountSteps.WAITING_OPERATION);\n              console.log(\"Starting account recovery\");\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(dispatch(socialRecovery(api)));\n\n            case 5:\n              op = _context.sent;\n\n              if (op === 'ALREADY APPLIED') {\n                setAccountStep(AccountSteps.OPERATION_APPLIED);\n              } else {\n                console.log(\"Recover op Hash: \" + op.hash);\n                setRecoveryOpHash(op.hash);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              errorString = '';\n\n              if (_context.t0 instanceof Error) {\n                errorString = \"\" + _context.t0.message;\n              } else {\n                errorString = \"\" + _context.t0;\n              }\n\n              console.log(\"Error during account recovery: \" + errorString);\n              setAccountStep(AccountSteps.ERROR);\n              setAccountError(errorString);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    };\n\n    var finishRecovery = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(setRecoveryKeys());\n              setAccountStep(AccountSteps.COMPLETE);\n              setDataStep(BackupSteps.WAITING_PASSWORD);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    switch (accountStep) {\n      case AccountSteps.DOWNLOAD_COMPLETE:\n        startRecovery();\n        break;\n\n      case AccountSteps.OPERATION_APPLIED:\n        finishRecovery();\n        break;\n\n      default:\n        break;\n    }\n  }, [dispatch, accountStep, api]);\n  useEffect(function () {\n    switch (dataStep) {\n      case BackupSteps.COMPLETE:\n        dispatch(setPassword(pass));\n        dispatch(setBackupCompleted(true));\n        break;\n\n      default:\n        break;\n    }\n  }, [dataStep, dispatch, pass]);\n  useEffect(function () {\n    if (accountStep === AccountSteps.COMPLETE && (dataStep === BackupSteps.COMPLETE || dataStep === BackupSteps.SKIPPED)) {\n      console.log(\"Recovery process finished!\");\n      Alert.alert(t('common.alert.info'), t('restore.alert.text.restoreSuccess'), [{\n        text: t('common.alert.ok')\n      }]);\n      dispatch(finishRecovery());\n    }\n  }, [accountStep, dataStep, dispatch, t]);\n  useEffect(function () {\n    if (recoveryOp && accountStep === AccountSteps.WAITING_OPERATION) {\n      console.log(\"recover Op state: \" + recoveryOp.state);\n\n      switch (recoveryOp.state) {\n        case operation_states.UNKNOWN:\n        case operation_states.INIT:\n        case operation_states.SENT:\n          break;\n\n        case operation_states.APPLIED:\n          setAccountStep(AccountSteps.OPERATION_APPLIED);\n          setRecoveryOpHash('');\n          break;\n\n        case operation_states.FAILED:\n          setAccountStep(AccountSteps.ERROR);\n          setAccountError('Operation could not be applied');\n          setRecoveryOpHash('');\n          break;\n\n        case operation_states.EXPIRED:\n          setAccountStep(AccountSteps.ERROR);\n          setAccountError('Operation timed out');\n          setRecoveryOpHash('');\n          break;\n\n        default:\n          setAccountStep(AccountSteps.ERROR);\n          setAccountError('Unhandled operation state');\n          setRecoveryOpHash('');\n      }\n    }\n  }, [recoveryOp, accountStep]);\n\n  var skip = function skip() {\n    setPass('');\n    setDataStep(BackupSteps.SKIPPED);\n  };\n\n  var restoreBackup = function _callee3() {\n    var errorString;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            console.log(\"Starting restore backup\");\n            setDataStep(BackupSteps.RESTORING_DATA);\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(dispatch(recoverData(pass, api, setTotalItems, setCurrentItem)));\n\n          case 5:\n            console.log(\"Successfully restored backup\");\n            setDataStep(BackupSteps.COMPLETE);\n            _context3.next = 15;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n            errorString = '';\n\n            if (_context3.t0 instanceof Error) {\n              errorString = _context3.t0.name + \" - \" + _context3.t0.message;\n            } else {\n              errorString = \"\" + _context3.t0;\n            }\n\n            console.log(\"Error during recover: \" + errorString);\n            setDataStep(BackupSteps.ERROR);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: styles.orangeTop\n    }), _jsxs(KeyboardAvoidingView, {\n      style: styles.container,\n      behavior: \"position\",\n      children: [_jsx(View, {\n        style: styles.recoverAccountContainer,\n        children: _jsx(RecoverAccount, {\n          currentStep: accountStep,\n          recoveredGroups: recoveredGroups,\n          recoveredConnections: recoveredConnections,\n          errorMessage: accountError\n        })\n      }), _jsx(View, {\n        style: styles.divider\n      }), _jsx(View, {\n        style: styles.restoreBackupContainer,\n        children: _jsx(RestoreBackup, {\n          currentStep: dataStep,\n          doRestore: restoreBackup,\n          doSkip: skip,\n          password: pass,\n          setPassword: setPass,\n          totalItems: totalItems,\n          currentItem: currentItem\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden'\n  },\n  divider: {\n    marginTop: DEVICE_LARGE ? 40 : 20,\n    marginBottom: DEVICE_LARGE ? 30 : 20,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: BLACK\n  },\n  recoverAccountContainer: {\n    marginTop: DEVICE_LARGE ? 25 : 20,\n    minHeight: '25%'\n  },\n  restoreBackupContainer: {\n    height: '50%'\n  }\n});\nexport default RestoreScreen;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/RestoreScreen.tsx"],"names":["channelTimeout","CHANNEL_POLL_INTERVAL","AccountSteps","BackupSteps","RestoreScreen","t","useTranslation","pass","setPass","useState","api","useContext","recoveredConnections","useSelector","state","recoveredGroups","accountStep","setAccountStep","dataStep","setDataStep","accountError","setAccountError","recoveryOpHash","setRecoveryOpHash","recoveryOp","selectOperationByHash","currentItem","setCurrentItem","totalItems","setTotalItems","dispatch","useDispatch","useFocusEffect","useCallback","setTimeout","clearChannel","clearTimeout","useEffect","startRecovery","console","op","socialRecovery","errorString","finishRecovery","setRecoveryKeys","setPassword","setBackupCompleted","Alert","text","operation_states","skip","restoreBackup","recoverData","styles","StyleSheet","orangeTop","backgroundColor","height","DEVICE_LARGE","width","zIndex","container","flex","alignItems","flexDirection","justifyContent","borderTopLeftRadius","marginTop","overflow","divider","marginBottom","borderBottomWidth","borderColor","recoverAccountContainer","minHeight","restoreBackupContainer"],"mappings":";;AAAA,SAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,QAAA,OAAA;;;;;AAEA,SAAA,cAAA,QAAA,0BAAA;AACA,SAAA,cAAA,QAAA,eAAA;AACA,SAAA,WAAA,EAAA,WAAA;AACA,SAAA,KAAA,EAAA,MAAA,EAAA,KAAA;AACA,SAAA,YAAA;AACA,SAAA,kBAAA,EAAA,WAAA;AACA,SAAA,cAAA;AACA,SAAA,aAAA;AACA,SAAA,cAAA;AACA,SAAA,cAAA,EAAA,WAAA,EAAA,eAAA,EAAA,cAAA;AAMA,SAAA,qBAAA,EAAA,YAAA;AACA,SAAA,qBAAA;AACA,SAAA,gBAAA;;;;AAGA,IAAMA,cAAc,GAAGC,qBAAqB,GAA5C,GAAA;AAEA,OAAA,IAAA,YAAA;;WAAYC,Y;EAAAA,Y,CAAAA,Y,oBAAAA,G,EAAAA,G,kBAAAA;EAAAA,Y,CAAAA,Y,qBAAAA,G,EAAAA,G,mBAAAA;EAAAA,Y,CAAAA,Y,qBAAAA,G,EAAAA,G,mBAAAA;EAAAA,Y,CAAAA,Y,qBAAAA,G,EAAAA,G,mBAAAA;EAAAA,Y,CAAAA,Y,SAAAA,G,EAAAA,G,OAAAA;EAAAA,Y,CAAAA,Y,YAAAA,G,EAAAA,G,UAAAA;GAAAA,Y,KAAAA,Y;;AASZ,OAAA,IAAA,WAAA;;WAAYC,W;EAAAA,W,CAAAA,W,mBAAAA,G,EAAAA,G,iBAAAA;EAAAA,W,CAAAA,W,oBAAAA,G,EAAAA,G,kBAAAA;EAAAA,W,CAAAA,W,kBAAAA,G,EAAAA,G,gBAAAA;EAAAA,W,CAAAA,W,WAAAA,G,EAAAA,G,SAAAA;EAAAA,W,CAAAA,W,SAAAA,G,EAAAA,G,OAAAA;EAAAA,W,CAAAA,W,YAAAA,G,EAAAA,G,UAAAA;GAAAA,W,KAAAA,W;;AASZ,IAAMC,aAAa,GAAbA,SAAAA,aAAAA,GAAsB;EAC1B,IAAA,eAAA,GAAcE,cAAd,EAAA;EAAA,IAAQD,CAAR,GAAA,eAAA,CAAA,CAAA;;EACA,IAAA,SAAA,GAAwBI,QAAQ,CAAhC,EAAgC,CAAhC;EAAA,IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,IAAP,GAAA,UAAA,CAAA,CAAA,CAAA;EAAA,IAAaC,OAAb,GAAA,UAAA,CAAA,CAAA,CAAA;;EACA,IAAME,GAAG,GAAGC,UAAU,CAAtB,cAAsB,CAAtB;EACA,IAAMC,oBAAoB,GAAGC,WAAW,CACtC,UAAA,KAAA,EAAA;IAAA,OAAWC,KAAK,CAALA,YAAAA,CAAX,oBAAA;EADF,CAAwC,CAAxC;EAGA,IAAMC,eAAe,GAAGF,WAAW,CACjC,UAAA,KAAA,EAAA;IAAA,OAAWC,KAAK,CAALA,YAAAA,CAAX,eAAA;EADF,CAAmC,CAAnC;;EAGA,IAAA,UAAA,GAAsCL,QAAQ,CAC5CP,YAAY,CADd,gBAA8C,CAA9C;EAAA,IAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;EAAA,IAAOc,WAAP,GAAA,UAAA,CAAA,CAAA,CAAA;EAAA,IAAoBC,cAApB,GAAA,UAAA,CAAA,CAAA,CAAA;;EAGA,IAAA,UAAA,GAAgCR,QAAQ,CACtCN,WAAW,CADb,eAAwC,CAAxC;EAAA,IAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;EAAA,IAAOe,QAAP,GAAA,UAAA,CAAA,CAAA,CAAA;EAAA,IAAiBC,WAAjB,GAAA,UAAA,CAAA,CAAA,CAAA;;EAGA,IAAA,UAAA,GAAwCV,QAAQ,CAAhD,EAAgD,CAAhD;EAAA,IAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;EAAA,IAAOW,YAAP,GAAA,UAAA,CAAA,CAAA,CAAA;EAAA,IAAqBC,eAArB,GAAA,UAAA,CAAA,CAAA,CAAA;;EACA,IAAA,UAAA,GAA4CZ,QAAQ,CAApD,EAAoD,CAApD;EAAA,IAAA,WAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;EAAA,IAAOa,cAAP,GAAA,WAAA,CAAA,CAAA,CAAA;EAAA,IAAuBC,iBAAvB,GAAA,WAAA,CAAA,CAAA,CAAA;;EACA,IAAMC,UAAU,GAAGX,WAAW,CAAC,UAAA,KAAA,EAAA;IAAA,OAC7BY,qBAAqB,CAAA,KAAA,EADQ,cACR,CADQ;EAA/B,CAA8B,CAA9B;;EAGA,IAAA,WAAA,GAAsChB,QAAQ,CAA9C,CAA8C,CAA9C;EAAA,IAAA,WAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;EAAA,IAAOiB,WAAP,GAAA,WAAA,CAAA,CAAA,CAAA;EAAA,IAAoBC,cAApB,GAAA,WAAA,CAAA,CAAA,CAAA;;EACA,IAAA,WAAA,GAAoClB,QAAQ,CAA5C,CAA4C,CAA5C;EAAA,IAAA,WAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;EAAA,IAAOmB,UAAP,GAAA,WAAA,CAAA,CAAA,CAAA;EAAA,IAAmBC,aAAnB,GAAA,WAAA,CAAA,CAAA,CAAA;;EACA,IAAMC,QAAQ,GAAGC,WAAjB,EAAA;EAEAC,cAAc,CACZC,WAAW,CAAC,YAAM;IAEhB,IAAM5B,CAAC,GAAG6B,UAAU,CAAC,YAAM;MACzBC,YAAY;MACZlB,cAAc,CAACf,YAAY,CAA3Be,iBAAc,CAAdA;IAFkB,CAAA,EAApB,cAAoB,CAApB;IAKA,OAAO,YAAM;MACXmB,YAAY,CAAZA,CAAY,CAAZA;IADF,CAAA;EAPS,CAAA,EADbJ,EACa,CADC,CAAdA;EAeAK,SAAS,CAAC,YAAM;IACd,IAAMC,aAAa,GAAG,SAAA,OAAA,GAAA;MAAA,IAAA,EAAA,EAAA,WAAA;MAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAElBrB,cAAc,CAACf,YAAY,CAA3Be,iBAAc,CAAdA;cACAsB,OAAO,CAAPA,GAAAA,CAAAA,2BAAAA;cAHkB,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA,OAAA,mBAAA,CAAA,KAAA,CAIDT,QAAQ,CAACW,cAAc,CAJtB,GAIsB,CAAf,CAJP,CAAA;;YAAA,KAAA,CAAA;cAIZD,EAJY,GAAA,QAAA,CAAA,IAIZA;;cACN,IAAIA,EAAE,KAAN,iBAAA,EAA8B;gBAE5BvB,cAAc,CAACf,YAAY,CAA3Be,iBAAc,CAAdA;cAFF,CAAA,MAGO;gBACLsB,OAAO,CAAPA,GAAAA,CAAAA,sBAAgCC,EAAE,CAAlCD,IAAAA;gBACAhB,iBAAiB,CAACiB,EAAE,CAApBjB,IAAiB,CAAjBA;cAVgB;;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;;YAAA,KAAA,CAAA;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;cAadmB,WAbc,GAAA,EAadA;;cACJ,IAAI,QAAA,CAAA,EAAA,YAAJ,KAAA,EAA0B;gBACxBA,WAAW,GAAA,KAAM,QAAA,CAAA,EAAA,CAAjBA,OAAAA;cADF,CAAA,MAEO;gBACLA,WAAW,GAAA,KAAA,QAAA,CAAXA,EAAAA;cAEFH;;cAAAA,OAAO,CAAPA,GAAAA,CAAAA,oCAAAA,WAAAA;cACAtB,cAAc,CAACf,YAAY,CAA3Be,KAAc,CAAdA;cACAI,eAAe,CAAfA,WAAe,CAAfA;;YArBkB,KAAA,EAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA;IAAtB,CAAA;;IAwBA,IAAMsB,cAAc,GAAG,SAAA,QAAA,GAAA;MAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cACrBb,QAAQ,CAACc,eAATd,EAAQ,CAARA;cACAb,cAAc,CAACf,YAAY,CAA3Be,QAAc,CAAdA;cAEAE,WAAW,CAAChB,WAAW,CAAvBgB,gBAAW,CAAXA;;YAJqB,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,SAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;IAAvB,CAAA;;IAMA,QAAA,WAAA;MACE,KAAKjB,YAAY,CAAjB,iBAAA;QACEoC,aAAa;QACb;;MACF,KAAKpC,YAAY,CAAjB,iBAAA;QACEyC,cAAc;QACd;;MACF;QAPF;IAAA;EA/BO,CAAA,EAyCN,CAAA,QAAA,EAAA,WAAA,EAzCHN,GAyCG,CAzCM,CAATA;EA4CAA,SAAS,CAAC,YAAM;IACd,QAAA,QAAA;MACE,KAAKlC,WAAW,CAAhB,QAAA;QAEE2B,QAAQ,CAACe,WAAW,CAApBf,IAAoB,CAAZ,CAARA;QACAA,QAAQ,CAACgB,kBAAkB,CAA3BhB,IAA2B,CAAnB,CAARA;QACA;;MACF;QANF;IAAA;EADO,CAAA,EAUN,CAAA,QAAA,EAAA,QAAA,EAVHO,IAUG,CAVM,CAATA;EAaAA,SAAS,CAAC,YAAM;IACd,IACErB,WAAW,KAAKd,YAAY,CAA5Bc,QAAAA,KACCE,QAAQ,KAAKf,WAAW,CAAxBe,QAAAA,IAAqCA,QAAQ,KAAKf,WAAW,CAFhE,OACEa,CADF,EAGE;MACAuB,OAAO,CAAPA,GAAAA,CAAAA,4BAAAA;MACAQ,KAAK,CAALA,KAAAA,CACE1C,CAAC,CADH0C,mBACG,CADHA,EAEE1C,CAAC,CAFH0C,mCAEG,CAFHA,EAGE,CAAC;QAAEC,IAAI,EAAE3C,CAAC,CAHZ0C,iBAGY;MAAT,CAAD,CAHFA;MAKAjB,QAAQ,CAACa,cAATb,EAAQ,CAARA;IAEH;EAbQ,CAAA,EAaN,CAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAbHO,CAaG,CAbM,CAATA;EAeAA,SAAS,CAAC,YAAM;IACd,IAAIb,UAAU,IAAIR,WAAW,KAAKd,YAAY,CAA9C,iBAAA,EAAkE;MAChEqC,OAAO,CAAPA,GAAAA,CAAAA,uBAAiCf,UAAU,CAA3Ce,KAAAA;;MACA,QAAQf,UAAU,CAAlB,KAAA;QACE,KAAKyB,gBAAgB,CAArB,OAAA;QACA,KAAKA,gBAAgB,CAArB,IAAA;QACA,KAAKA,gBAAgB,CAArB,IAAA;UAEE;;QACF,KAAKA,gBAAgB,CAArB,OAAA;UACEhC,cAAc,CAACf,YAAY,CAA3Be,iBAAc,CAAdA;UACAM,iBAAiB,CAAjBA,EAAiB,CAAjBA;UACA;;QACF,KAAK0B,gBAAgB,CAArB,MAAA;UACEhC,cAAc,CAACf,YAAY,CAA3Be,KAAc,CAAdA;UACAI,eAAe,CAAfA,gCAAe,CAAfA;UACAE,iBAAiB,CAAjBA,EAAiB,CAAjBA;UACA;;QACF,KAAK0B,gBAAgB,CAArB,OAAA;UAEEhC,cAAc,CAACf,YAAY,CAA3Be,KAAc,CAAdA;UACAI,eAAe,CAAfA,qBAAe,CAAfA;UACAE,iBAAiB,CAAjBA,EAAiB,CAAjBA;UACA;;QACF;UACEN,cAAc,CAACf,YAAY,CAA3Be,KAAc,CAAdA;UACAI,eAAe,CAAfA,2BAAe,CAAfA;UACAE,iBAAiB,CAxBrB,EAwBqB,CAAjBA;MAxBJ;IA2BH;EA9BQ,CAAA,EA8BN,CAAA,UAAA,EA9BHc,WA8BG,CA9BM,CAATA;;EAgCA,IAAMa,IAAI,GAAJA,SAAAA,IAAAA,GAAa;IACjB1C,OAAO,CAAPA,EAAO,CAAPA;IACAW,WAAW,CAAChB,WAAW,CAAvBgB,OAAW,CAAXA;EAFF,CAAA;;EAKA,IAAMgC,aAAa,GAAG,SAAA,QAAA,GAAA;IAAA,IAAA,WAAA;IAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAElBZ,OAAO,CAAPA,GAAAA,CAAAA,yBAAAA;YACApB,WAAW,CAAChB,WAAW,CAAvBgB,cAAW,CAAXA;YAHkB,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,mBAAA,CAAA,KAAA,CAIZW,QAAQ,CAACsB,WAAW,CAAA,IAAA,EAAA,GAAA,EAAA,aAAA,EAJR,cAIQ,CAAZ,CAJI,CAAA;;UAAA,KAAA,CAAA;YAKlBb,OAAO,CAAPA,GAAAA,CAAAA,8BAAAA;YACApB,WAAW,CAAChB,WAAW,CAAvBgB,QAAW,CAAXA;YANkB,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAQduB,WARc,GAAA,EAQdA;;YACJ,IAAI,SAAA,CAAA,EAAA,YAAJ,KAAA,EAA0B;cACxBA,WAAW,GAAM,SAAA,CAAA,EAAA,CAAN,IAAM,GAAN,KAAM,GAAc,SAAA,CAAA,EAAA,CAA/BA,OAAAA;YADF,CAAA,MAEO;cACLA,WAAW,GAAA,KAAA,SAAA,CAAXA,EAAAA;YAEFH;;YAAAA,OAAO,CAAPA,GAAAA,CAAAA,2BAAAA,WAAAA;YACApB,WAAW,CAAChB,WAAW,CAAvBgB,KAAW,CAAXA;;UAfkB,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA;EAAtB,CAAA;;EAmBA,OACE,KAAA,CAAA,SAAA,EAAA;IAAA,QAAA,EAAA,CACE,IAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEkC,MAAM,CADrB;IACE,CAAA,CADF,EAEE,KAAA,CAAA,oBAAA,EAAA;MAAsB,KAAK,EAAEA,MAAM,CAAnC,SAAA;MAA+C,QAAQ,EAAvD,UAAA;MAAA,QAAA,EAAA,CACE,IAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEA,MAAM,CAAnB,uBAAA;QAAA,QAAA,EACE,IAAA,CAAA,cAAA,EAAA;UACE,WAAW,EADb,WAAA;UAEE,eAAe,EAFjB,eAAA;UAGE,oBAAoB,EAHtB,oBAAA;UAIE,YAAY,EANlB;QAEI,CAAA;MADF,CAAA,CADF,EASE,IAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEA,MAAM,CATrB;MASE,CAAA,CATF,EAUE,IAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEA,MAAM,CAAnB,sBAAA;QAAA,QAAA,EACE,IAAA,CAAA,aAAA,EAAA;UACE,WAAW,EADb,QAAA;UAEE,SAAS,EAFX,aAAA;UAGE,MAAM,EAHR,IAAA;UAIE,QAAQ,EAJV,IAAA;UAKE,WAAW,EALb,OAAA;UAME,UAAU,EANZ,UAAA;UAOE,WAAW,EArBrB;QAcQ,CAAA;MADF,CAAA,CAVF;IAAA,CAAA,CAFF;EAAA,CAAA,CADF;AAxKF,CAAA;;AAqMA,IAAMA,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,eAAe,EADN,MAAA;IAETC,MAAM,EAAEC,YAAY,GAAA,EAAA,GAFX,EAAA;IAGTC,KAAK,EAHI,MAAA;IAITC,MAAM,EALuB;EACpB,CADoB;EAO/BC,SAAS,EAAE;IACTC,IAAI,EADK,CAAA;IAETN,eAAe,EAFN,KAAA;IAGTO,UAAU,EAHD,QAAA;IAITC,aAAa,EAJJ,QAAA;IAKTC,cAAc,EALL,YAAA;IAMTC,mBAAmB,EANV,EAAA;IAOTC,SAAS,EAAE,CAPF,EAAA;IAQTP,MAAM,EARG,EAAA;IASTQ,QAAQ,EAhBqB;EAOpB,CAPoB;EAkB/BC,OAAO,EAAE;IACPF,SAAS,EAAET,YAAY,GAAA,EAAA,GADhB,EAAA;IAEPY,YAAY,EAAEZ,YAAY,GAAA,EAAA,GAFnB,EAAA;IAGPa,iBAAiB,EAAEjB,UAAU,CAHtB,aAAA;IAIPkB,WAAW,EAtBkB;EAkBtB,CAlBsB;EAwB/BC,uBAAuB,EAAE;IACvBN,SAAS,EAAET,YAAY,GAAA,EAAA,GADA,EAAA;IAEvBgB,SAAS,EA1BoB;EAwBN,CAxBM;EA4B/BC,sBAAsB,EAAE;IACtBlB,MAAM,EA7BV;EA4B0B;AA5BO,CAAlBH,CAAf;AAiCA,eAAA,aAAA","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { StyleSheet, View, KeyboardAvoidingView, Alert } from 'react-native';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport { BLACK, ORANGE, WHITE } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { setBackupCompleted, setPassword } from '@/reducer/userSlice';\nimport { RecoverAccount } from '@/components/Onboarding/RecoveryFlow/RecoverAccount';\nimport { RestoreBackup } from '@/components/Onboarding/RecoveryFlow/RestoreBackup';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport {\n  finishRecovery,\n  recoverData,\n  setRecoveryKeys,\n  socialRecovery,\n} from './thunks/recoveryThunks';\nimport { CHANNEL_POLL_INTERVAL, clearChannel } from './thunks/channelThunks';\nimport { selectOperationByHash } from '@/reducer/operationsSlice';\nimport { operation_states } from '@/utils/constants';\n\n// clear channel after this time\nconst channelTimeout = CHANNEL_POLL_INTERVAL * 3.1;\n\nexport enum AccountSteps {\n  WAITING_DOWNLOAD,\n  DOWNLOAD_COMPLETE,\n  WAITING_OPERATION, // op submitted to backend but not yet applied\n  OPERATION_APPLIED, // op successfully applied in backend\n  ERROR,\n  COMPLETE,\n}\n\nexport enum BackupSteps {\n  WAITING_ACCOUNT, // Waiting for account recovery to complete\n  WAITING_PASSWORD, // Ready to start, waiting for user to provide password\n  RESTORING_DATA, // Restoring in progress\n  SKIPPED, // User decided to skip backup restoration\n  ERROR,\n  COMPLETE,\n}\n\nconst RestoreScreen = () => {\n  const { t } = useTranslation();\n  const [pass, setPass] = useState('');\n  const api = useContext(NodeApiContext);\n  const recoveredConnections = useSelector(\n    (state) => state.recoveryData.recoveredConnections,\n  );\n  const recoveredGroups = useSelector(\n    (state) => state.recoveryData.recoveredGroups,\n  );\n  const [accountStep, setAccountStep] = useState<AccountSteps>(\n    AccountSteps.WAITING_DOWNLOAD,\n  );\n  const [dataStep, setDataStep] = useState<BackupSteps>(\n    BackupSteps.WAITING_ACCOUNT,\n  );\n  const [accountError, setAccountError] = useState('');\n  const [recoveryOpHash, setRecoveryOpHash] = useState('');\n  const recoveryOp = useSelector((state) =>\n    selectOperationByHash(state, recoveryOpHash),\n  );\n  const [currentItem, setCurrentItem] = useState(0);\n  const [totalItems, setTotalItems] = useState(0);\n  const dispatch = useDispatch();\n\n  useFocusEffect(\n    useCallback(() => {\n      // wait 3 passes of the the poll channel to make sure all data is downloaded\n      const t = setTimeout(() => {\n        clearChannel();\n        setAccountStep(AccountSteps.DOWNLOAD_COMPLETE);\n      }, channelTimeout);\n\n      return () => {\n        clearTimeout(t);\n      };\n    }, []),\n  );\n\n  // track account recovery state\n  useEffect(() => {\n    const startRecovery = async () => {\n      try {\n        setAccountStep(AccountSteps.WAITING_OPERATION);\n        console.log(`Starting account recovery`);\n        const op = await dispatch(socialRecovery(api));\n        if (op === 'ALREADY APPLIED') {\n          // we can shortcut to the next step without waiting for operation status\n          setAccountStep(AccountSteps.OPERATION_APPLIED);\n        } else {\n          console.log(`Recover op Hash: ${op.hash}`);\n          setRecoveryOpHash(op.hash);\n        }\n      } catch (err) {\n        let errorString = '';\n        if (err instanceof Error) {\n          errorString = `${err.message}`;\n        } else {\n          errorString = `${err}`;\n        }\n        console.log(`Error during account recovery: ${errorString}`);\n        setAccountStep(AccountSteps.ERROR);\n        setAccountError(errorString);\n      }\n    };\n    const finishRecovery = async () => {\n      dispatch(setRecoveryKeys());\n      setAccountStep(AccountSteps.COMPLETE);\n      // restore backup can now start\n      setDataStep(BackupSteps.WAITING_PASSWORD);\n    };\n    switch (accountStep) {\n      case AccountSteps.DOWNLOAD_COMPLETE:\n        startRecovery();\n        break;\n      case AccountSteps.OPERATION_APPLIED:\n        finishRecovery();\n        break;\n      default:\n        break;\n    }\n  }, [dispatch, accountStep, api]);\n\n  // track data recovery state\n  useEffect(() => {\n    switch (dataStep) {\n      case BackupSteps.COMPLETE:\n        // save password in state and set backupCompleted marker\n        dispatch(setPassword(pass));\n        dispatch(setBackupCompleted(true));\n        break;\n      default:\n        break;\n    }\n  }, [dataStep, dispatch, pass]);\n\n  // track overall progress\n  useEffect(() => {\n    if (\n      accountStep === AccountSteps.COMPLETE &&\n      (dataStep === BackupSteps.COMPLETE || dataStep === BackupSteps.SKIPPED)\n    ) {\n      console.log(`Recovery process finished!`);\n      Alert.alert(\n        t('common.alert.info'),\n        t('restore.alert.text.restoreSuccess'),\n        [{ text: t('common.alert.ok') }],\n      );\n      dispatch(finishRecovery());\n    }\n  }, [accountStep, dataStep, dispatch, t]);\n\n  useEffect(() => {\n    if (recoveryOp && accountStep === AccountSteps.WAITING_OPERATION) {\n      console.log(`recover Op state: ${recoveryOp.state}`);\n      switch (recoveryOp.state) {\n        case operation_states.UNKNOWN:\n        case operation_states.INIT:\n        case operation_states.SENT:\n          // op being processed. do nothing.\n          break;\n        case operation_states.APPLIED:\n          setAccountStep(AccountSteps.OPERATION_APPLIED);\n          setRecoveryOpHash('');\n          break;\n        case operation_states.FAILED:\n          setAccountStep(AccountSteps.ERROR);\n          setAccountError('Operation could not be applied');\n          setRecoveryOpHash('');\n          break;\n        case operation_states.EXPIRED:\n          // operation did not get applied within time window. Abort and show error.\n          setAccountStep(AccountSteps.ERROR);\n          setAccountError('Operation timed out');\n          setRecoveryOpHash('');\n          break;\n        default:\n          setAccountStep(AccountSteps.ERROR);\n          setAccountError('Unhandled operation state');\n          setRecoveryOpHash('');\n      }\n    }\n  }, [recoveryOp, accountStep]);\n\n  const skip = () => {\n    setPass('');\n    setDataStep(BackupSteps.SKIPPED);\n  };\n\n  const restoreBackup = async () => {\n    try {\n      console.log(`Starting restore backup`);\n      setDataStep(BackupSteps.RESTORING_DATA);\n      await dispatch(recoverData(pass, api, setTotalItems, setCurrentItem));\n      console.log(`Successfully restored backup`);\n      setDataStep(BackupSteps.COMPLETE);\n    } catch (err) {\n      let errorString = '';\n      if (err instanceof Error) {\n        errorString = `${err.name} - ${err.message}`;\n      } else {\n        errorString = `${err}`;\n      }\n      console.log(`Error during recover: ${errorString}`);\n      setDataStep(BackupSteps.ERROR);\n    }\n  };\n\n  return (\n    <>\n      <View style={styles.orangeTop} />\n      <KeyboardAvoidingView style={styles.container} behavior=\"position\">\n        <View style={styles.recoverAccountContainer}>\n          <RecoverAccount\n            currentStep={accountStep}\n            recoveredGroups={recoveredGroups}\n            recoveredConnections={recoveredConnections}\n            errorMessage={accountError}\n          />\n        </View>\n        <View style={styles.divider} />\n        <View style={styles.restoreBackupContainer}>\n          <RestoreBackup\n            currentStep={dataStep}\n            doRestore={restoreBackup}\n            doSkip={skip}\n            password={pass}\n            setPassword={setPass}\n            totalItems={totalItems}\n            currentItem={currentItem}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    zIndex: 10,\n    overflow: 'hidden',\n  },\n  divider: {\n    marginTop: DEVICE_LARGE ? 40 : 20,\n    marginBottom: DEVICE_LARGE ? 30 : 20,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: BLACK,\n  },\n  recoverAccountContainer: {\n    marginTop: DEVICE_LARGE ? 25 : 20,\n    minHeight: '25%',\n  },\n  restoreBackupContainer: {\n    height: '50%',\n  },\n});\n\nexport default RestoreScreen;\n"]},"metadata":{},"sourceType":"module"}