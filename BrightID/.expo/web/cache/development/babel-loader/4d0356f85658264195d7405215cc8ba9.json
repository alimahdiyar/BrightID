{"ast":null,"code":"import { isStartish, isMoveish, isEndish } from \"./ResponderEventTypes\";\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar MAX_TOUCH_BANK = 20;\nvar touchBank = [];\nvar touchHistory = {\n  touchBank: touchBank,\n  numberActiveTouches: 0,\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0\n};\n\nfunction timestampForTouch(touch) {\n  return touch.timeStamp || touch.timestamp;\n}\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction recordTouchEnd(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank() {\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nvar ResponderTouchHistoryStore = {\n  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        for (var i = 0; i < touchBank.length; i++) {\n          var touchTrackToCheck = touchBank[i];\n\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n\n        if (__DEV__) {\n          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n  touchHistory: touchHistory\n};\nexport default ResponderTouchHistoryStore;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/node_modules/react-native-web/src/modules/useResponderEvents/ResponderTouchHistoryStore.js"],"names":["__DEV__","process","MAX_TOUCH_BANK","touchBank","touchHistory","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","touch","touchActive","startPageX","startPageY","startTimeStamp","timestampForTouch","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","touchRecord","identifier","console","getTouchIdentifier","resetTouchRecord","createTouchRecord","printTouch","printTouchBank","JSON","pageX","pageY","timestamp","printed","ResponderTouchHistoryStore","recordTouchTrack","isMoveish","nativeEvent","isStartish","isEndish","i","touchTrackToCheck","activeRecord"],"mappings":"AAUA,SAAA,UAAA,EAAA,SAAA,EAAA,QAAA;;AAqBA,IAAMA,OAAO,GAAGC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAhB,YAAA;;AACA,IAAMC,cAAc,GAApB,EAAA;AACA,IAAMC,SAA6B,GAAnC,EAAA;AACA,IAAMC,YAAY,GAAG;EACnBD,SAAS,EADU,SAAA;EAEnBE,mBAAmB,EAFA,CAAA;EAMnBC,wBAAwB,EAAE,CANP,CAAA;EAOnBC,mBAAmB,EAPrB;AAAqB,CAArB;;AAUA,SAAA,iBAAA,CAAA,KAAA,EAAiD;EAG/C,OAAQC,KAAD,CAAA,SAACA,IAAyBA,KAAK,CAAtC,SAAA;AAOF;;AAAA,SAAA,iBAAA,CAAA,KAAA,EAAsD;EACpD,OAAO;IACLC,WAAW,EADN,IAAA;IAELC,UAAU,EAAEF,KAAK,CAFZ,KAAA;IAGLG,UAAU,EAAEH,KAAK,CAHZ,KAAA;IAILI,cAAc,EAAEC,iBAAiB,CAJ5B,KAI4B,CAJ5B;IAKLC,YAAY,EAAEN,KAAK,CALd,KAAA;IAMLO,YAAY,EAAEP,KAAK,CANd,KAAA;IAOLQ,gBAAgB,EAAEH,iBAAiB,CAP9B,KAO8B,CAP9B;IAQLI,aAAa,EAAET,KAAK,CARf,KAAA;IASLU,aAAa,EAAEV,KAAK,CATf,KAAA;IAULW,iBAAiB,EAAEN,iBAAiB,CAVtC,KAUsC;EAV/B,CAAP;AAcF;;AAAA,SAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,EAAwE;EACtEO,WAAW,CAAXA,WAAAA,GAAAA,IAAAA;EACAA,WAAW,CAAXA,UAAAA,GAAyBZ,KAAK,CAA9BY,KAAAA;EACAA,WAAW,CAAXA,UAAAA,GAAyBZ,KAAK,CAA9BY,KAAAA;EACAA,WAAW,CAAXA,cAAAA,GAA6BP,iBAAiB,CAA9CO,KAA8C,CAA9CA;EACAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;EACAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;EACAA,WAAW,CAAXA,gBAAAA,GAA+BP,iBAAiB,CAAhDO,KAAgD,CAAhDA;EACAA,WAAW,CAAXA,aAAAA,GAA4BZ,KAAK,CAAjCY,KAAAA;EACAA,WAAW,CAAXA,aAAAA,GAA4BZ,KAAK,CAAjCY,KAAAA;EACAA,WAAW,CAAXA,iBAAAA,GAAgCP,iBAAiB,CAAjDO,KAAiD,CAAjDA;AAGF;;AAAA,SAAA,kBAAA,CAAA,IAAA,EAA2D;EAA7BC,IAAAA,UAA6B,GAAA,IAAA,CAA7BA,UAAAA;;EAC5B,IAAIA,UAAU,IAAd,IAAA,EAAwB;IACtBC,OAAO,CAAPA,KAAAA,CAAAA,qCAAAA;EAEF;;EAAA,IAAA,OAAA,EAAa;IACX,IAAID,UAAU,GAAd,cAAA,EAAiC;MAC/BC,OAAO,CAAPA,KAAAA,CACE,2EADFA,wEAAAA,EAAAA,UAAAA,EAAAA,cAAAA;IAOH;EACD;;EAAA,OAAA,UAAA;AAGF;;AAAA,SAAA,gBAAA,CAAA,KAAA,EAA8C;EAC5C,IAAMD,UAAU,GAAGE,kBAAkB,CAArC,KAAqC,CAArC;EACA,IAAMH,WAAW,GAAGjB,SAAS,CAA7B,UAA6B,CAA7B;;EACA,IAAA,WAAA,EAAiB;IACfqB,gBAAgB,CAAA,WAAA,EAAhBA,KAAgB,CAAhBA;EADF,CAAA,MAEO;IACLrB,SAAS,CAATA,UAAS,CAATA,GAAwBsB,iBAAiB,CAAzCtB,KAAyC,CAAzCA;EAEFC;;EAAAA,YAAY,CAAZA,mBAAAA,GAAmCS,iBAAiB,CAApDT,KAAoD,CAApDA;AAGF;;AAAA,SAAA,eAAA,CAAA,KAAA,EAA6C;EAC3C,IAAMgB,WAAW,GAAGjB,SAAS,CAACoB,kBAAkB,CAAhD,KAAgD,CAAnB,CAA7B;;EACA,IAAA,WAAA,EAAiB;IACfH,WAAW,CAAXA,WAAAA,GAAAA,IAAAA;IACAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;IACAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;IACAA,WAAW,CAAXA,iBAAAA,GAAgCA,WAAW,CAA3CA,gBAAAA;IACAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;IACAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;IACAA,WAAW,CAAXA,gBAAAA,GAA+BP,iBAAiB,CAAhDO,KAAgD,CAAhDA;IACAhB,YAAY,CAAZA,mBAAAA,GAAmCS,iBAAiB,CAApDT,KAAoD,CAApDA;EARF,CAAA,MASO;IACLkB,OAAO,CAAPA,IAAAA,CAAAA,mDAAAA,EAAAA,iBAEiBI,UAAU,CAF3BJ,KAE2B,CAF3BA,GAAAA,IAAAA,EAAAA,iBAGiBK,cAHjBL,EAAAA;EAMH;AAED;;AAAA,SAAA,cAAA,CAAA,KAAA,EAA4C;EAC1C,IAAMF,WAAW,GAAGjB,SAAS,CAACoB,kBAAkB,CAAhD,KAAgD,CAAnB,CAA7B;;EACA,IAAA,WAAA,EAAiB;IACfH,WAAW,CAAXA,WAAAA,GAAAA,KAAAA;IACAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;IACAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;IACAA,WAAW,CAAXA,iBAAAA,GAAgCA,WAAW,CAA3CA,gBAAAA;IACAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;IACAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;IACAA,WAAW,CAAXA,gBAAAA,GAA+BP,iBAAiB,CAAhDO,KAAgD,CAAhDA;IACAhB,YAAY,CAAZA,mBAAAA,GAAmCS,iBAAiB,CAApDT,KAAoD,CAApDA;EARF,CAAA,MASO;IACLkB,OAAO,CAAPA,IAAAA,CAAAA,kDAAAA,EAAAA,gBAEgBI,UAAU,CAF1BJ,KAE0B,CAF1BA,GAAAA,IAAAA,EAAAA,iBAGiBK,cAHjBL,EAAAA;EAMH;AAED;;AAAA,SAAA,UAAA,CAAA,KAAA,EAA0C;EACxC,OAAOM,IAAI,CAAJA,SAAAA,CAAe;IACpBP,UAAU,EAAEb,KAAK,CADG,UAAA;IAEpBqB,KAAK,EAAErB,KAAK,CAFQ,KAAA;IAGpBsB,KAAK,EAAEtB,KAAK,CAHQ,KAAA;IAIpBuB,SAAS,EAAElB,iBAAiB,CAJ9B,KAI8B;EAJR,CAAfe,CAAP;AAQF;;AAAA,SAAA,cAAA,GAAkC;EAChC,IAAII,OAAO,GAAGJ,IAAI,CAAJA,SAAAA,CAAezB,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAA7B,cAA6BA,CAAfyB,CAAd;;EACA,IAAIzB,SAAS,CAATA,MAAAA,GAAJ,cAAA,EAAuC;IACrC6B,OAAO,IAAI,sBAAsB7B,SAAS,CAA/B,MAAA,GAAX6B,GAAAA;EAEF;;EAAA,OAAA,OAAA;AAGF;;AAAA,IAAMC,0BAA0B,GAAG;EACjCC,gBADiC,EAAA,SAAA,gBAAA,CAAA,YAAA,EAAA,WAAA,EACqC;IACpE,IAAIC,SAAS,CAAb,YAAa,CAAb,EAA6B;MAC3BC,WAAW,CAAXA,cAAAA,CAAAA,OAAAA,CAAAA,eAAAA;IADF,CAAA,MAEO,IAAIC,UAAU,CAAd,YAAc,CAAd,EAA8B;MACnCD,WAAW,CAAXA,cAAAA,CAAAA,OAAAA,CAAAA,gBAAAA;MACAhC,YAAY,CAAZA,mBAAAA,GAAmCgC,WAAW,CAAXA,OAAAA,CAAnChC,MAAAA;;MACA,IAAIA,YAAY,CAAZA,mBAAAA,KAAJ,CAAA,EAA4C;QAC1CA,YAAY,CAAZA,wBAAAA,GAAwCgC,WAAW,CAAXA,OAAAA,CAAAA,CAAAA,EAAxChC,UAAAA;MAEH;IANM,CAAA,MAMA,IAAIkC,QAAQ,CAAZ,YAAY,CAAZ,EAA4B;MACjCF,WAAW,CAAXA,cAAAA,CAAAA,OAAAA,CAAAA,cAAAA;MACAhC,YAAY,CAAZA,mBAAAA,GAAmCgC,WAAW,CAAXA,OAAAA,CAAnChC,MAAAA;;MACA,IAAIA,YAAY,CAAZA,mBAAAA,KAAJ,CAAA,EAA4C;QAC1C,KAAK,IAAImC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGpC,SAAS,CAA7B,MAAA,EAAsCoC,CAAtC,EAAA,EAA2C;UACzC,IAAMC,iBAAiB,GAAGrC,SAAS,CAAnC,CAAmC,CAAnC;;UACA,IAAIqC,iBAAiB,IAAjBA,IAAAA,IAA6BA,iBAAiB,CAAlD,WAAA,EAAgE;YAC9DpC,YAAY,CAAZA,wBAAAA,GAAAA,CAAAA;YACA;UAEH;QACD;;QAAA,IAAA,OAAA,EAAa;UACX,IAAMqC,YAAY,GAAGtC,SAAS,CAACC,YAAY,CAA3C,wBAA8B,CAA9B;;UACA,IAAI,EAAEqC,YAAY,IAAZA,IAAAA,IAAwBA,YAAY,CAA1C,WAAI,CAAJ,EAAyD;YACvDnB,OAAO,CAAPA,KAAAA,CAAAA,kCAAAA;UAEH;QACF;MACF;IACF;EA7BgC,CAAA;EA+BjClB,YAAY,EA/Bd;AAAmC,CAAnC;AAkCA,eAAA,0BAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { Touch, TouchEvent } from './ResponderEventTypes';\nimport { isStartish, isMoveish, isEndish } from './ResponderEventTypes';\n\ntype TouchRecord = {|\n  touchActive: boolean,\n  startPageX: number,\n  startPageY: number,\n  startTimeStamp: number,\n  currentPageX: number,\n  currentPageY: number,\n  currentTimeStamp: number,\n  previousPageX: number,\n  previousPageY: number,\n  previousTimeStamp: number\n|};\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\nconst MAX_TOUCH_BANK = 20;\nconst touchBank: Array<TouchRecord> = [];\nconst touchHistory = {\n  touchBank,\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0\n};\n\nfunction timestampForTouch(touch: Touch): number {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\".\n  return (touch: any).timeStamp || touch.timestamp;\n}\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\nfunction createTouchRecord(touch: Touch): TouchRecord {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier({ identifier }: Touch): number {\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error(\n        'Touch identifier %s is greater than maximum supported %s which causes ' +\n          'performance issues backfilling array locations for all of the indices.',\n        identifier,\n        MAX_TOUCH_BANK\n      );\n    }\n  }\n  return identifier;\n}\n\nfunction recordTouchStart(touch: Touch): void {\n  const identifier = getTouchIdentifier(touch);\n  const touchRecord = touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn(\n      'Cannot record touch move without a touch start.\\n',\n      `Touch Move: ${printTouch(touch)}\\n`,\n      `Touch Bank: ${printTouchBank()}`\n    );\n  }\n}\n\nfunction recordTouchEnd(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn(\n      'Cannot record touch end without a touch start.\\n',\n      `Touch End: ${printTouch(touch)}\\n`,\n      `Touch Bank: ${printTouchBank()}`\n    );\n  }\n}\n\nfunction printTouch(touch: Touch): string {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank(): string {\n  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\n\nconst ResponderTouchHistoryStore = {\n  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        for (let i = 0; i < touchBank.length; i++) {\n          const touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n        if (__DEV__) {\n          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n\n  touchHistory\n};\n\nexport default ResponderTouchHistoryStore;\n"]},"metadata":{},"sourceType":"module"}