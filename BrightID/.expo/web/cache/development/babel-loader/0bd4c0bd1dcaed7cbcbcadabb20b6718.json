{"ast":null,"code":"import { useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSelector } from \"../../../store\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { WHITE } from \"../../../theme/colors\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { openDrawer } from \"../../../NavigationService\";\nimport { useTranslation } from 'react-i18next';\nimport FullScreenHighlightBox from \"../../Helpers/FullScreenHighlightBox\";\nimport Arrow from \"../../Icons/Arrow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BR = 20;\n\nvar ViewPassword = function ViewPassword(_ref) {\n  var navigation = _ref.navigation;\n  useFocusEffect(useCallback(function () {\n    openDrawer();\n  }, []));\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var password = useSelector(function (state) {\n    return state.user.password;\n  });\n  var editProfileMenuLayout = useSelector(function (state) {\n    return state.walkthrough.editProfileMenuLayout;\n  });\n  var editProfileTextLayout = useSelector(function (state) {\n    return state.walkthrough.editProfileTextLayout;\n  });\n  var headerHeight = useSelector(function (state) {\n    return state.walkthrough.headerHeight;\n  });\n  var editProfileX = (editProfileMenuLayout == null ? void 0 : editProfileMenuLayout.x) + BR + 20;\n  var editProfileY = (editProfileMenuLayout == null ? void 0 : editProfileMenuLayout.y) + headerHeight;\n  var editProfileWidth = (editProfileTextLayout == null ? void 0 : editProfileTextLayout.width) + (editProfileTextLayout == null ? void 0 : editProfileTextLayout.x) + 10 - BR * 2;\n  var heightPadding = DEVICE_LARGE ? 10 : 18;\n  var editProfileHeight = (editProfileMenuLayout == null ? void 0 : editProfileMenuLayout.height) + heightPadding - BR * 2;\n  var arrowLeft = editProfileX + editProfileWidth - 105;\n  var arrowTop = editProfileY + (editProfileMenuLayout == null ? void 0 : editProfileMenuLayout.height) / 2;\n  var infoBoxLeft = arrowLeft - 10 + 169 / 2;\n  var infoBoxTop = arrowTop + 250 - 48;\n  return _jsxs(View, {\n    style: styles.container,\n    testID: \"ViewPasswordWalkthrough\",\n    children: [_jsx(FullScreenHighlightBox, {\n      onPress: function onPress() {\n        navigation.goBack();\n      },\n      br: BR,\n      innerWidth: editProfileWidth,\n      innerHeight: editProfileHeight,\n      innerX: editProfileX,\n      innerY: editProfileY\n    }), _jsx(View, {\n      style: {\n        position: 'absolute',\n        left: arrowLeft,\n        top: arrowTop\n      },\n      children: _jsx(Arrow, {\n        color: WHITE,\n        height: 250\n      })\n    }), _jsx(View, {\n      style: [styles.infoBox, {\n        left: infoBoxLeft,\n        top: infoBoxTop\n      }],\n      children: _jsx(Text, {\n        style: styles.infoText,\n        children: password ? t('walkthroughs.text.viewPassword') : t('walkthroughs.text.setPassword')\n      })\n    }), _jsx(TouchableOpacity, {\n      style: [styles.bottomBtn, {\n        top: infoBoxTop + 120\n      }],\n      onPress: function onPress() {\n        navigation.goBack();\n      },\n      testID: \"ViewPasswordGotIt\",\n      children: _jsx(View, {\n        style: styles.gotItBorder,\n        children: _jsx(Text, {\n          style: styles.gotIt,\n          children: t('walkthroughs.text.gotIt')\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent'\n  },\n  infoBox: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: WHITE,\n    borderRadius: 10,\n    padding: 15\n  },\n  infoText: {\n    fontFamily: 'Poppins-Regular',\n    textAlign: 'center',\n    fontSize: fontSize[14],\n    lineHeight: 25\n  },\n  bottomBtn: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: '100%',\n    height: 100,\n    alignItems: 'center'\n  },\n  gotIt: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[18],\n    lineHeight: 25,\n    color: WHITE\n  },\n  gotItBorder: {\n    borderBottomWidth: 2,\n    borderBottomColor: WHITE\n  }\n});\nexport default ViewPassword;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/Walkthroughs/ViewPassword.tsx"],"names":["BR","ViewPassword","navigation","useFocusEffect","useCallback","openDrawer","t","useTranslation","password","useSelector","state","editProfileMenuLayout","editProfileTextLayout","headerHeight","editProfileX","editProfileY","editProfileWidth","heightPadding","DEVICE_LARGE","editProfileHeight","arrowLeft","arrowTop","infoBoxLeft","infoBoxTop","styles","position","left","top","StyleSheet","container","flex","alignItems","justifyContent","backgroundColor","infoBox","borderRadius","padding","infoText","fontFamily","textAlign","fontSize","lineHeight","bottomBtn","bottom","right","width","height","gotIt","color","gotItBorder","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { useSelector } from '@/store';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { WHITE } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { openDrawer } from '@/NavigationService';\nimport { useTranslation } from 'react-i18next';\nimport FullScreenHighlightBox from '@/components/Helpers/FullScreenHighlightBox';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport Arrow from '../../Icons/Arrow';\n\n// border radius for edit profile box\nconst BR = 20;\n\ntype props = StackScreenProps<ModalStackParamList, 'ViewPasswordWalkthrough'>;\n\nconst ViewPassword = ({ navigation }: props) => {\n  useFocusEffect(\n    useCallback(() => {\n      openDrawer();\n    }, []),\n  );\n  const { t } = useTranslation();\n\n  const password = useSelector((state: State) => state.user.password);\n\n  /**\n   * dimensions of edit profile button on the side bar\n   * {x, y, width, height}\n   */\n  const editProfileMenuLayout = useSelector(\n    (state: State) => state.walkthrough.editProfileMenuLayout,\n  );\n  const editProfileTextLayout = useSelector(\n    (state: State) => state.walkthrough.editProfileTextLayout,\n  );\n  const headerHeight = useSelector(\n    (state: State) => state.walkthrough.headerHeight,\n  );\n\n  /**\n   * Dimensions for the transparent box around Edit Profile in the side menu\n   */\n  // added 20 for padding, br for border radius\n  const editProfileX = editProfileMenuLayout?.x + BR + 20;\n  // added header height from home page\n  const editProfileY = editProfileMenuLayout?.y + headerHeight;\n  // use edit profile text to make sure the box fits all device sizes\n  const editProfileWidth =\n    editProfileTextLayout?.width + editProfileTextLayout?.x + 10 - BR * 2;\n  // added 10 for padding\n  const heightPadding = DEVICE_LARGE ? 10 : 18;\n  const editProfileHeight =\n    editProfileMenuLayout?.height + heightPadding - BR * 2;\n\n  // subtract 120 because the arrow point is 120 px left inside the svg\n  const arrowLeft = editProfileX + editProfileWidth - 105;\n\n  const arrowTop = editProfileY + editProfileMenuLayout?.height / 2;\n\n  /**\n   * Dimensions for the box with text about the password\n   */\n  const infoBoxLeft = arrowLeft - 10 + 169 / 2;\n  const infoBoxTop = arrowTop + 250 - 48;\n  return (\n    <View style={styles.container} testID=\"ViewPasswordWalkthrough\">\n      <FullScreenHighlightBox\n        onPress={() => {\n          navigation.goBack();\n        }}\n        br={BR}\n        innerWidth={editProfileWidth}\n        innerHeight={editProfileHeight}\n        innerX={editProfileX}\n        innerY={editProfileY}\n      />\n      <View\n        style={{\n          position: 'absolute',\n          left: arrowLeft,\n          top: arrowTop,\n        }}\n      >\n        <Arrow color={WHITE} height={250} />\n      </View>\n      <View style={[styles.infoBox, { left: infoBoxLeft, top: infoBoxTop }]}>\n        <Text style={styles.infoText}>\n          {password\n            ? t('walkthroughs.text.viewPassword')\n            : t('walkthroughs.text.setPassword')}\n        </Text>\n      </View>\n      <TouchableOpacity\n        style={[styles.bottomBtn, { top: infoBoxTop + 120 }]}\n        onPress={() => {\n          navigation.goBack();\n        }}\n        testID=\"ViewPasswordGotIt\"\n      >\n        <View style={styles.gotItBorder}>\n          <Text style={styles.gotIt}>{t('walkthroughs.text.gotIt')}</Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent',\n  },\n\n  infoBox: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: WHITE,\n    borderRadius: 10,\n    padding: 15,\n  },\n  infoText: {\n    fontFamily: 'Poppins-Regular',\n    textAlign: 'center',\n    fontSize: fontSize[14],\n    lineHeight: 25,\n  },\n  bottomBtn: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: '100%',\n    height: 100,\n    alignItems: 'center',\n  },\n  gotIt: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[18],\n    lineHeight: 25,\n    color: WHITE,\n  },\n  gotItBorder: {\n    borderBottomWidth: 2,\n    borderBottomColor: WHITE,\n  },\n});\n\nexport default ViewPassword;\n"]},"metadata":{},"sourceType":"module"}