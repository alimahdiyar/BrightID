{"ast":null,"code":"exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/ieee754/index.js"],"names":["exports","eLen","nBytes","eMax","eBias","nBits","i","isLE","d","s","buffer","offset","e","m","Math","rt","mLen","value","isNaN","c"],"mappings":"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","sourcesContent":["/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n"]},"metadata":{},"sourceType":"script"}