{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uploadRecoveryData = exports.loadRecoveryData = exports.buildRecoveryChannelQrUrl = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _encoding = require(\"./encoding\");\n\nvar _constants = require(\"./constants\");\n\nvar buildRecoveryChannelQrUrl = function buildRecoveryChannelQrUrl(_ref) {\n  var aesKey = _ref.aesKey,\n      url = _ref.url,\n      t = _ref.t;\n  var qrUrl = new URL(url.href);\n  qrUrl.searchParams.append('aes', aesKey);\n  qrUrl.searchParams.append('t', t);\n  return qrUrl;\n};\n\nexports.buildRecoveryChannelQrUrl = buildRecoveryChannelQrUrl;\n\nvar uploadRecoveryData = function _callee(recoveryData, channelApi) {\n  var channelId, dataObj, data;\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          channelId = (0, _encoding.hash)(recoveryData.aesKey);\n          dataObj = {\n            signingKey: recoveryData.publicKey,\n            timestamp: recoveryData.timestamp\n          };\n          data = JSON.stringify(dataObj);\n          _context.next = 5;\n          return _regenerator.default.awrap(channelApi.upload({\n            channelId: channelId,\n            data: data,\n            dataId: 'data',\n            requestedTtl: _constants.RECOVERY_CHANNEL_TTL\n          }));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.uploadRecoveryData = uploadRecoveryData;\n\nvar loadRecoveryData = function _callee2(channelApi, aesKey) {\n  var dataString, data;\n  return _regenerator.default.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regenerator.default.awrap(channelApi.download({\n            channelId: (0, _encoding.hash)(aesKey),\n            dataId: 'data'\n          }));\n\n        case 2:\n          dataString = _context2.sent;\n          data = JSON.parse(dataString);\n\n          if (!(!data.signingKey || !data.timestamp)) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new Error('Please ask the connection to reload their QR code and try again');\n\n        case 6:\n          return _context2.abrupt(\"return\", data);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.loadRecoveryData = loadRecoveryData;","map":{"version":3,"names":["buildRecoveryChannelQrUrl","aesKey","url","t","qrUrl","URL","href","searchParams","append","uploadRecoveryData","recoveryData","channelApi","channelId","hash","dataObj","signingKey","publicKey","timestamp","data","JSON","stringify","upload","dataId","requestedTtl","RECOVERY_CHANNEL_TTL","loadRecoveryData","download","dataString","parse","Error"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/recovery.ts"],"sourcesContent":["import ChannelAPI from '@/api/channelService';\nimport { hash } from '@/utils/encoding';\nimport { RECOVERY_CHANNEL_TTL } from '@/utils/constants';\n\nexport const buildRecoveryChannelQrUrl = ({\n  aesKey,\n  url,\n  t,\n}: RecoveryChannel) => {\n  const qrUrl = new URL(url.href);\n  qrUrl.searchParams.append('aes', aesKey);\n  qrUrl.searchParams.append('t', t);\n  return qrUrl;\n};\n\nexport const uploadRecoveryData = async (\n  recoveryData: RecoveryData,\n  channelApi: ChannelAPI,\n) => {\n  const channelId = hash(recoveryData.aesKey);\n  const dataObj = {\n    signingKey: recoveryData.publicKey,\n    timestamp: recoveryData.timestamp,\n  };\n  const data = JSON.stringify(dataObj);\n  await channelApi.upload({\n    channelId,\n    data,\n    dataId: 'data',\n    requestedTtl: RECOVERY_CHANNEL_TTL,\n  });\n};\n\nexport const loadRecoveryData = async (\n  channelApi: ChannelAPI,\n  aesKey: string,\n): Promise<{ signingKey: string; timestamp: number }> => {\n  const dataString = await channelApi.download({\n    channelId: hash(aesKey),\n    dataId: 'data',\n  });\n  const data = JSON.parse(dataString);\n  if (!data.signingKey || !data.timestamp) {\n    throw new Error(\n      'Please ask the connection to reload their QR code and try again',\n    );\n  }\n  return data;\n};\n"],"mappings":";;;;;;;;;AACA;;AACA;;AAEO,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,OAIlB;EAAA,IAHrBC,MAGqB,QAHrBA,MAGqB;EAAA,IAFrBC,GAEqB,QAFrBA,GAEqB;EAAA,IADrBC,CACqB,QADrBA,CACqB;EACrB,IAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAQH,GAAG,CAACI,IAAZ,CAAd;EACAF,KAAK,CAACG,YAAN,CAAmBC,MAAnB,CAA0B,KAA1B,EAAiCP,MAAjC;EACAG,KAAK,CAACG,YAAN,CAAmBC,MAAnB,CAA0B,GAA1B,EAA+BL,CAA/B;EACA,OAAOC,KAAP;AACD,CATM;;;;AAWA,IAAMK,kBAAkB,GAAG,iBAChCC,YADgC,EAEhCC,UAFgC;EAAA;EAAA;IAAA;MAAA;QAAA;UAI1BC,SAJ0B,GAId,IAAAC,cAAA,EAAKH,YAAY,CAACT,MAAlB,CAJc;UAK1Ba,OAL0B,GAKhB;YACdC,UAAU,EAAEL,YAAY,CAACM,SADX;YAEdC,SAAS,EAAEP,YAAY,CAACO;UAFV,CALgB;UAS1BC,IAT0B,GASnBC,IAAI,CAACC,SAAL,CAAeN,OAAf,CATmB;UAAA;UAAA,kCAU1BH,UAAU,CAACU,MAAX,CAAkB;YACtBT,SAAS,EAATA,SADsB;YAEtBM,IAAI,EAAJA,IAFsB;YAGtBI,MAAM,EAAE,MAHc;YAItBC,YAAY,EAAEC;UAJQ,CAAlB,CAV0B;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAA3B;;;;AAkBA,IAAMC,gBAAgB,GAAG,kBAC9Bd,UAD8B,EAE9BV,MAF8B;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,kCAILU,UAAU,CAACe,QAAX,CAAoB;YAC3Cd,SAAS,EAAE,IAAAC,cAAA,EAAKZ,MAAL,CADgC;YAE3CqB,MAAM,EAAE;UAFmC,CAApB,CAJK;;QAAA;UAIxBK,UAJwB;UAQxBT,IARwB,GAQjBC,IAAI,CAACS,KAAL,CAAWD,UAAX,CARiB;;UAAA,MAS1B,CAACT,IAAI,CAACH,UAAN,IAAoB,CAACG,IAAI,CAACD,SATA;YAAA;YAAA;UAAA;;UAAA,MAUtB,IAAIY,KAAJ,CACJ,iEADI,CAVsB;;QAAA;UAAA,kCAcvBX,IAduB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAzB"},"metadata":{},"sourceType":"script"}