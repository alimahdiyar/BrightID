{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty2(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Color from 'color';\nimport CardSheet from \"./CardSheet\";\nimport { PanGestureHandler, GestureState } from \"../GestureHandler\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\n\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isCurrentlyMounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isClosing\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"inverted\", new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection)));\n\n    _defineProperty(_assertThisInitialized(_this), \"layout\", {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingGestureCallback\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastToValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props = _this.props,\n          gesture = _this$props.gesture,\n          transitionSpec = _this$props.transitionSpec,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onTransition = _this$props.onTransition;\n\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n\n      _this.lastToValue = toValue;\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        clearTimeout(_this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n          layout = _this$props2.layout,\n          onClose = _this$props2.onClose,\n          onGestureBegin = _this$props2.onGestureBegin,\n          onGestureCanceled = _this$props2.onGestureCanceled,\n          onGestureEnd = _this$props2.onGestureEnd,\n          gestureDirection = _this$props2.gestureDirection,\n          gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            _this.handleEndInteraction();\n\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n\n            var _velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n\n                _this.forceUpdate();\n              }, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInterpolatedStyle\", memoize(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCardAnimationContext\", memoize(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", React.createRef());\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          layout = _this$props3.layout,\n          gestureDirection = _this$props3.gestureDirection,\n          closing = _this$props3.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n\n      var toValue = this.getAnimateToValue(this.props);\n\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          styleInterpolator = _this$props5.styleInterpolator,\n          index = _this$props5.index,\n          current = _this$props5.current,\n          gesture = _this$props5.gesture,\n          next = _this$props5.next,\n          layout = _this$props5.layout,\n          insets = _this$props5.insets,\n          overlay = _this$props5.overlay,\n          overlayEnabled = _this$props5.overlayEnabled,\n          shadowEnabled = _this$props5.shadowEnabled,\n          gestureEnabled = _this$props5.gestureEnabled,\n          gestureDirection = _this$props5.gestureDirection,\n          pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n          children = _this$props5.children,\n          customContainerStyle = _this$props5.containerStyle,\n          contentStyle = _this$props5.contentStyle,\n          rest = _objectWithoutProperties(_this$props5, _excluded);\n\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: animationContext\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport { Card as default };\n\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","hasOpacityStyle","flattenedStyle","StyleSheet","Card","React","Component","overlayEnabled","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","style","Animated","pointerEvents","styles","componentDidMount","closing","componentDidUpdate","layout","gestureDirection","width","height","prevProps","getInvertedMultiplier","toValue","componentWillUnmount","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","spec","animation","clearTimeout","isInteraction","finished","getDistanceForDirection","enabled","InteractionManager","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","GestureState","distance","translation","setTimeout","memoize","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","gestureActivationCriteria","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","pageOverflowEnabled","children","customContainerStyle","contentStyle","rest","interpolatedStyle","animationContext","containerStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","isTransparent","Color","CardAnimationContext","value","opacity","collapsable","needsOffscreenAlphaCompositing","onGestureEvent","onHandlerStateChange","ref","container","flex","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}