{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { compose } from 'ramda';\nimport ImagePicker from \"./ImagePickerProvider\";\nvar options = {\n  cropping: true,\n  width: 180,\n  height: 180,\n  writeTempFile: false,\n  includeBase64: true,\n  includeExif: true,\n  cropperToolbarTitle: 'Select Photo',\n  smartAlbums: ['RecentlyAdded', 'UserLibrary', 'PhotoStream', 'SelfPortraits'],\n  useFrontCamera: true,\n  compressImageQuality: 0.8,\n  mediaType: 'photo'\n};\nexport var takePhoto = function takePhoto() {\n  return new Promise(function (res, rej) {\n    ImagePicker.openCamera(options).then(function (response) {\n      res(response);\n      console.log('size', response.size);\n      console.log('width', response.width);\n      console.log('height', response.height);\n    }).catch(function (err) {\n      rej(err);\n    });\n  });\n};\nexport var chooseImage = function chooseImage() {\n  return new Promise(function (res, rej) {\n    ImagePicker.openPicker(options).then(function (response) {\n      res(response);\n      console.log('size', response.size);\n      console.log('width', response.width);\n      console.log('height', response.height);\n    }).catch(function (err) {\n      rej(err);\n    });\n  });\n};\n\nvar splitDataURI = function splitDataURI(str) {\n  return str.split(',', 2);\n};\n\nvar mediaTypeToFileExtension = function mediaTypeToFileExtension(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      _ref2$ = _ref2[0],\n      mediaType = _ref2$ === void 0 ? 'jpeg' : _ref2$,\n      _ref2$2 = _ref2[1],\n      image = _ref2$2 === void 0 ? ' ' : _ref2$2;\n\n  if (mediaType.includes('jpeg')) {\n    return {\n      filetype: 'jpg',\n      image: image\n    };\n  }\n\n  if (mediaType.includes('png')) {\n    return {\n      filetype: 'png',\n      image: image\n    };\n  }\n\n  if (mediaType.includes('gif')) {\n    return {\n      filetype: 'gif',\n      image: image\n    };\n  }\n\n  if (mediaType.includes('svg')) {\n    return {\n      filetype: 'svg',\n      image: image\n    };\n  }\n\n  return {\n    filetype: 'jpg',\n    image: image\n  };\n};\n\nexport var parseDataUri = compose(mediaTypeToFileExtension, splitDataURI);\n\nvar fileType = function fileType(str) {\n  return str.split('.').pop().toLowerCase();\n};\n\nvar normalizeType = function normalizeType(t) {\n  switch (t) {\n    case 'jpg':\n      return 'image/jpeg';\n\n    case 'png':\n      return 'image/png';\n\n    case 'gif':\n      return 'image/gif';\n\n    case 'svg':\n      return 'image/svg+xml';\n\n    default:\n      return 'image/jpeg';\n  }\n};\n\nexport var mimeFromUri = compose(normalizeType, fileType);","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/images.ts"],"names":["options","cropping","width","height","writeTempFile","includeBase64","includeExif","cropperToolbarTitle","smartAlbums","useFrontCamera","compressImageQuality","mediaType","takePhoto","ImagePicker","res","console","response","rej","chooseImage","splitDataURI","str","mediaTypeToFileExtension","image","filetype","parseDataUri","compose","fileType","normalizeType","mimeFromUri"],"mappings":"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","sourcesContent":["import { compose } from 'ramda';\nimport { Image, Options } from 'react-native-image-crop-picker';\nimport ImagePicker from './ImagePickerProvider';\n\nconst options: Options = {\n  cropping: true,\n  width: 180,\n  height: 180,\n  writeTempFile: false,\n  includeBase64: true,\n  includeExif: true,\n  cropperToolbarTitle: 'Select Photo',\n  smartAlbums: ['RecentlyAdded', 'UserLibrary', 'PhotoStream', 'SelfPortraits'],\n  useFrontCamera: true,\n  compressImageQuality: 0.8,\n  mediaType: 'photo',\n};\n\nexport const takePhoto = () =>\n  new Promise<Image>((res, rej) => {\n    ImagePicker.openCamera(options)\n      .then((response) => {\n        res(response);\n        console.log('size', response.size);\n        console.log('width', response.width);\n        console.log('height', response.height);\n      })\n      .catch((err) => {\n        rej(err);\n      });\n  });\n\nexport const chooseImage = () =>\n  new Promise<Image>((res, rej) => {\n    ImagePicker.openPicker(options)\n      .then((response) => {\n        res(response);\n        console.log('size', response.size);\n        console.log('width', response.width);\n        console.log('height', response.height);\n      })\n      .catch((err) => {\n        rej(err);\n      });\n  });\n\n/**\n *\n * @param {string} str\n * @returns {string[]}\n */\nconst splitDataURI = (str: string): string[] => str.split(',', 2);\n\n/**\n *\n * @param {string} mediaType\n * @param {string} image\n * @returns\n */\nconst mediaTypeToFileExtension = ([mediaType = 'jpeg', image = ' ']) => {\n  if (mediaType.includes('jpeg')) {\n    return { filetype: 'jpg', image };\n  }\n  if (mediaType.includes('png')) {\n    return { filetype: 'png', image };\n  }\n  if (mediaType.includes('gif')) {\n    return { filetype: 'gif', image };\n  }\n  if (mediaType.includes('svg')) {\n    return { filetype: 'svg', image };\n  }\n  return { filetype: 'jpg', image };\n};\n\nexport const parseDataUri = compose(mediaTypeToFileExtension, splitDataURI);\n\n/**\n *\n * @param {string} str\n * @returns string\n */\nconst fileType = (str: string) => str.split('.').pop().toLowerCase();\n/**\n *\n * @param {string} t\n * @returns string\n */\n\nconst normalizeType = (t: 'jpg' | 'png' | 'gif' | 'svg') => {\n  switch (t) {\n    case 'jpg':\n      return 'image/jpeg';\n    case 'png':\n      return 'image/png';\n    case 'gif':\n      return 'image/gif';\n    case 'svg':\n      return 'image/svg+xml';\n    default:\n      return 'image/jpeg';\n  }\n};\n\nexport const mimeFromUri = compose(normalizeType, fileType);\n"]},"metadata":{},"sourceType":"module"}