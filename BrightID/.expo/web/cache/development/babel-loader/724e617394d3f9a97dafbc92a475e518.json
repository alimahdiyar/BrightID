{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Clipboard from '@react-native-community/clipboard';\nimport { useNavigation } from '@react-navigation/native';\nimport Svg, { Path } from 'react-native-svg';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from \"../../utils/deviceConstants\";\nimport { LIGHT_BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { qrCodeToSvg } from \"../../utils/qrCodes\";\nimport { useInterval } from \"../../utils/hooks\";\nimport { channel_states, channel_types, closeChannel } from \"./channelSlice\";\nimport { buildChannelQrUrl } from \"../../utils/channels\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Timer = function Timer(_ref) {\n  var channel = _ref.channel;\n  var navigation = useNavigation();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(channel ? channel.ttl - (Date.now() - channel.timestamp) : 0),\n      _useState2 = _slicedToArray(_useState, 2),\n      countdown = _useState2[0],\n      setCountdown = _useState2[1];\n\n  var timerTick = function timerTick() {\n    if (channel && navigation.isFocused()) {\n      var countDown = channel.ttl - (Date.now() - channel.timestamp);\n      setCountdown(countDown);\n    }\n  };\n\n  useInterval(timerTick, 1000);\n\n  var displayTime = function displayTime() {\n    var minutes = Math.floor(countdown / 60000);\n    var seconds = Math.trunc(countdown % 60000 / 1000);\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return minutes + \":\" + seconds;\n  };\n\n  return countdown > 0 ? _jsxs(View, {\n    style: styles.timerContainer,\n    testID: \"TimerContainer\",\n    children: [_jsxs(Text, {\n      style: styles.timerTextLeft,\n      children: [t('qrcode.text.expiresIn'), \" \"]\n    }), _jsx(Text, {\n      style: styles.timerTextRight,\n      children: displayTime()\n    })]\n  }) : _jsx(View, {\n    style: [styles.timerContainer, {\n      height: 20\n    }]\n  });\n};\n\nexport var QrCode = function QrCode(_ref2) {\n  var channel = _ref2.channel;\n  var dispatch = useDispatch();\n\n  var _useTranslation2 = useTranslation(),\n      t = _useTranslation2.t;\n\n  var myName = useSelector(function (state) {\n    return state.user.name;\n  });\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrString = _useState4[0],\n      setQrString = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      qrsvg = _useState6[0],\n      setQrsvg = _useState6[1];\n\n  useEffect(function () {\n    if (channel && channel.state === channel_states.OPEN) {\n      var newQrString = buildChannelQrUrl(channel).href;\n\n      if (newQrString !== qrString) {\n        console.log(\"Creating QRCode: profileId \" + channel.myProfileId + \" channel \" + channel.id);\n        setQrString(newQrString);\n        qrCodeToSvg(newQrString, function (qrsvg) {\n          return setQrsvg(qrsvg);\n        });\n      }\n    } else if (!channel || (channel == null ? void 0 : channel.state) !== channel_states.OPEN) {\n      setQrString('');\n      setQrsvg('');\n    }\n  }, [channel, qrString]);\n\n  var copyQr = function copyQr() {\n    var universalLink = \"https://app.brightid.org/connection-code/\" + encodeURIComponent(qrString);\n    var clipboardMsg = __DEV__ ? universalLink : (channel == null ? void 0 : channel.type) === channel_types.SINGLE ? t('qrcode.alert.connectSingle', {\n      name: myName,\n      link: universalLink\n    }) : t('qrcode.alert.connectGroup', {\n      name: myName,\n      link: universalLink\n    });\n    var alertMsg = (channel == null ? void 0 : channel.type) === channel_types.SINGLE ? t('qrcode.alert.text.shareLinkSingle') : t('qrcode.alert.text.shareLinkGroup');\n    Alert.alert(t('qrcode.alert.text.universalLink'), alertMsg, [{\n      text: t('common.button.copy'),\n      onPress: function onPress() {\n        Clipboard.setString(clipboardMsg);\n        if ((channel == null ? void 0 : channel.type) === channel_types.SINGLE) dispatch(closeChannel({\n          channelId: channel == null ? void 0 : channel.id,\n          background: true\n        }));\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  var CopyQr = function CopyQr() {\n    return _jsx(View, {\n      style: styles.copyContainer,\n      children: _jsxs(TouchableOpacity, {\n        testID: \"CopyQrBtn\",\n        style: styles.copyButton,\n        onPress: copyQr,\n        children: [_jsx(Material, {\n          size: 24,\n          name: \"content-copy\",\n          color: LIGHT_BLACK,\n          style: {\n            width: 24,\n            height: 24\n          }\n        }), _jsxs(Text, {\n          style: styles.copyText,\n          children: [\" \", t('qrcode.button.copyLink')]\n        })]\n      })\n    });\n  };\n\n  console.log('RENDERING QR CODE');\n  return qrsvg ? _jsxs(View, {\n    style: styles.qrCodeContainer,\n    testID: \"QRCodeContainer\",\n    children: [_jsx(Timer, {\n      channel: channel\n    }), _jsxs(Svg, {\n      height: DEVICE_LARGE ? '260' : '200',\n      width: DEVICE_LARGE ? '260' : '200',\n      viewBox: path(['svg', '$', 'viewBox'], qrsvg),\n      \"shape-rendering\": \"crispEdges\",\n      children: [_jsx(Path, {\n        fill: \"#fff\",\n        d: path(['svg', 'path', '0', '$', 'd'], qrsvg)\n      }), _jsx(Path, {\n        stroke: \"#000\",\n        d: path(['svg', 'path', '1', '$', 'd'], qrsvg)\n      })]\n    }), _jsx(CopyQr, {})]\n  }) : _jsx(View, {\n    style: styles.qrCodeContainer,\n    children: _jsx(View, {\n      style: styles.emptyQr,\n      children: _jsx(Spinner, {\n        isVisible: true,\n        size: 47,\n        type: \"FadingCircleAlt\",\n        color: LIGHT_BLACK\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  qrCodeContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    paddingTop: DEVICE_LARGE ? 35 : 20\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 260 : 200\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copyText: {\n    color: LIGHT_BLACK,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14]\n  },\n  timerContainer: {\n    flexDirection: 'row'\n  },\n  timerTextLeft: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK\n  },\n  timerTextRight: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244\n  }\n});\nexport default QrCode;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/QrCode.tsx"],"names":["Timer","channel","navigation","useNavigation","t","useTranslation","countdown","setCountdown","useState","Date","timerTick","countDown","useInterval","displayTime","minutes","Math","seconds","styles","height","QrCode","dispatch","useDispatch","myName","useSelector","state","qrString","setQrString","qrsvg","setQrsvg","useEffect","channel_states","newQrString","buildChannelQrUrl","console","qrCodeToSvg","copyQr","universalLink","encodeURIComponent","clipboardMsg","__DEV__","channel_types","name","link","alertMsg","Alert","text","onPress","Clipboard","closeChannel","channelId","background","cancelable","CopyQr","width","DEVICE_LARGE","path","StyleSheet","qrCodeContainer","justifyContent","alignItems","paddingTop","copyContainer","flexDirection","copyButton","copyText","color","fontFamily","fontSize","timerContainer","timerTextLeft","timerTextRight","emptyQr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Alert } from 'react-native';\nimport Clipboard from '@react-native-community/clipboard';\nimport { useNavigation } from '@react-navigation/native';\nimport Svg, { Path } from 'react-native-svg';\nimport { useDispatch, useSelector } from '@/store';\nimport { path } from 'ramda';\nimport Spinner from 'react-native-spinkit';\nimport Material from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTranslation } from 'react-i18next';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { LIGHT_BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { qrCodeToSvg } from '@/utils/qrCodes';\nimport { useInterval } from '@/utils/hooks';\nimport {\n  channel_states,\n  channel_types,\n  closeChannel,\n} from '@/components/PendingConnections/channelSlice';\nimport { buildChannelQrUrl } from '@/utils/channels';\n\n/**\n * My Code screen of BrightID\n *\n * USERA represents this user\n * ==================================================================\n * displays a qrcode\n *\n */\nconst Timer = ({ channel }) => {\n  const navigation = useNavigation();\n  const { t } = useTranslation();\n\n  const [countdown, setCountdown] = useState(\n    channel ? channel.ttl - (Date.now() - channel.timestamp) : 0,\n  );\n\n  const timerTick = () => {\n    if (channel && navigation.isFocused()) {\n      const countDown = channel.ttl - (Date.now() - channel.timestamp);\n      setCountdown(countDown);\n    }\n  };\n\n  // start local timer to display countdown\n  useInterval(timerTick, 1000);\n  const displayTime = () => {\n    const minutes = Math.floor(countdown / 60000);\n    let seconds: string | number = Math.trunc((countdown % 60000) / 1000);\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n    return `${minutes}:${seconds}`;\n  };\n\n  return countdown > 0 ? (\n    <View style={styles.timerContainer} testID=\"TimerContainer\">\n      <Text style={styles.timerTextLeft}>{t('qrcode.text.expiresIn')} </Text>\n      <Text style={styles.timerTextRight}>{displayTime()}</Text>\n    </View>\n  ) : (\n    <View style={[styles.timerContainer, { height: 20 }]} />\n  );\n};\n\nexport const QrCode = ({ channel }) => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const myName = useSelector((state: State) => state.user.name);\n  const [qrString, setQrString] = useState('');\n  const [qrsvg, setQrsvg] = useState('');\n\n  // create QRCode from channel data\n  useEffect(() => {\n    if (channel && channel.state === channel_states.OPEN) {\n      const newQrString = buildChannelQrUrl(channel).href;\n      // do not re-render svg if we already have the string\n      if (newQrString !== qrString) {\n        console.log(\n          `Creating QRCode: profileId ${channel.myProfileId} channel ${channel.id}`,\n        );\n        setQrString(newQrString);\n        qrCodeToSvg(newQrString, (qrsvg) => setQrsvg(qrsvg));\n      }\n    } else if (!channel || channel?.state !== channel_states.OPEN) {\n      setQrString('');\n      setQrsvg('');\n    }\n  }, [channel, qrString]);\n\n  const copyQr = () => {\n    const universalLink = `https://app.brightid.org/connection-code/${encodeURIComponent(\n      qrString,\n    )}`;\n    const clipboardMsg = __DEV__\n      ? universalLink\n      : channel?.type === channel_types.SINGLE\n      ? t('qrcode.alert.connectSingle', {\n          name: myName,\n          link: universalLink,\n        })\n      : t('qrcode.alert.connectGroup', {\n          name: myName,\n          link: universalLink,\n        });\n\n    const alertMsg =\n      channel?.type === channel_types.SINGLE\n        ? t('qrcode.alert.text.shareLinkSingle')\n        : t('qrcode.alert.text.shareLinkGroup');\n    Alert.alert(\n      t('qrcode.alert.text.universalLink'),\n      alertMsg,\n      [\n        {\n          text: t('common.button.copy'),\n          onPress: () => {\n            Clipboard.setString(clipboardMsg);\n            if (channel?.type === channel_types.SINGLE)\n              dispatch(\n                closeChannel({ channelId: channel?.id, background: true }),\n              );\n          },\n        },\n      ],\n      { cancelable: false },\n    );\n  };\n\n  // we want to replace this QRcode with a different one for single connections\n\n  const CopyQr = () => (\n    <View style={styles.copyContainer}>\n      <TouchableOpacity\n        testID=\"CopyQrBtn\"\n        style={styles.copyButton}\n        onPress={copyQr}\n      >\n        <Material\n          size={24}\n          name=\"content-copy\"\n          color={LIGHT_BLACK}\n          style={{ width: 24, height: 24 }}\n        />\n        <Text style={styles.copyText}> {t('qrcode.button.copyLink')}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  console.log('RENDERING QR CODE');\n\n  return qrsvg ? (\n    <View style={styles.qrCodeContainer} testID=\"QRCodeContainer\">\n      <Timer channel={channel} />\n      <Svg\n        height={DEVICE_LARGE ? '260' : '200'}\n        width={DEVICE_LARGE ? '260' : '200'}\n        viewBox={path(['svg', '$', 'viewBox'], qrsvg)}\n        shape-rendering=\"crispEdges\"\n      >\n        <Path fill=\"#fff\" d={path(['svg', 'path', '0', '$', 'd'], qrsvg)} />\n        <Path stroke=\"#000\" d={path(['svg', 'path', '1', '$', 'd'], qrsvg)} />\n      </Svg>\n      <CopyQr />\n    </View>\n  ) : (\n    <View style={styles.qrCodeContainer}>\n      <View style={styles.emptyQr}>\n        <Spinner\n          isVisible={true}\n          size={47}\n          type=\"FadingCircleAlt\"\n          color={LIGHT_BLACK}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  qrCodeContainer: {\n    width: '100%',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    // flexGrow: 1,\n    paddingTop: DEVICE_LARGE ? 35 : 20,\n  },\n  copyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: DEVICE_LARGE ? 260 : 200,\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  copyText: {\n    color: LIGHT_BLACK,\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n  },\n  timerContainer: {\n    flexDirection: 'row',\n  },\n  timerTextLeft: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  timerTextRight: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: LIGHT_BLACK,\n  },\n  emptyQr: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: DEVICE_LARGE ? 308 : 244,\n  },\n});\n\nexport default QrCode;\n"]},"metadata":{},"sourceType":"module"}