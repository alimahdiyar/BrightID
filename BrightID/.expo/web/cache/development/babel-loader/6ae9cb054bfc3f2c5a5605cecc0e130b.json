{"ast":null,"code":"import RNFetchBlob from 'rn-fetch-blob';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\n\nvar createStoragePathIfNeeded = function createStoragePathIfNeeded(path) {\n  return RNFetchBlob.fs.exists(path).then(function (exists) {\n    return exists ? new Promise(function (resolve) {\n      return resolve(true);\n    }) : RNFetchBlob.fs.mkdir(path);\n  });\n};\n\nvar onStorageReadyFactory = function onStorageReadyFactory(storagePath) {\n  return function (func) {\n    var storage = createStoragePathIfNeeded(storagePath);\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return storage.then(function () {\n        return func.apply(void 0, args);\n      });\n    };\n  };\n};\n\nvar defaultStoragePath = function defaultStoragePath() {\n  return RNFetchBlob.fs.dirs.DocumentDir + \"/persistStore\";\n};\n\nvar onStorageReady = onStorageReadyFactory(defaultStoragePath());\nvar encoding = 'utf8';\n\nvar toFileName = function toFileName(key) {\n  return key.replace(/[^a-z0-9.\\-_]/gi, '-');\n};\n\nvar pathForKey = function pathForKey(key) {\n  return defaultStoragePath() + \"/\" + toFileName(key);\n};\n\nvar FilesystemStorage = {\n  setItem: function setItem(key, value) {\n    return new Promise(function (resolve) {\n      InteractionManager.runAfterInteractions(function () {\n        resolve(RNFetchBlob.fs.writeFile(pathForKey(key), value, encoding));\n      });\n    });\n  },\n  getItem: onStorageReady(function (key) {\n    var filePath = pathForKey(key);\n    return RNFetchBlob.fs.readFile(filePath, encoding).then(function (data) {\n      if (data) {\n        return data;\n      } else {\n        throw new Error('key does not exist in fsStorage');\n      }\n    });\n  }),\n  removeItem: function removeItem(key) {\n    return RNFetchBlob.fs.unlink(pathForKey(key));\n  },\n  clear: function clear() {\n    return RNFetchBlob.fs.unlink(defaultStoragePath());\n  }\n};\nexport default FilesystemStorage;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/storage/fsStorageAdapter.ts"],"names":["createStoragePathIfNeeded","RNFetchBlob","exists","resolve","onStorageReadyFactory","storage","args","func","defaultStoragePath","onStorageReady","encoding","toFileName","key","pathForKey","FilesystemStorage","setItem","InteractionManager","getItem","filePath","removeItem","clear"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\nimport RNFetchBlob, { Encoding } from 'rn-fetch-blob';\nimport { InteractionManager } from 'react-native';\n\nconst createStoragePathIfNeeded = (path: string) =>\n  RNFetchBlob.fs\n    .exists(path)\n    .then((exists) =>\n      exists\n        ? new Promise((resolve) => resolve(true))\n        : RNFetchBlob.fs.mkdir(path),\n    );\n\nconst onStorageReadyFactory = (storagePath: string) => (\n  func: (...args: Array<any>) => any,\n) => {\n  const storage = createStoragePathIfNeeded(storagePath);\n  return (...args: Array<any>) => storage.then(() => func(...args));\n};\n\nconst defaultStoragePath = () =>\n  `${RNFetchBlob.fs.dirs.DocumentDir}/persistStore`;\n\nconst onStorageReady = onStorageReadyFactory(defaultStoragePath());\n\nconst encoding: Encoding = 'utf8';\n\nconst toFileName = (key: string) => key.replace(/[^a-z0-9.\\-_]/gi, '-');\n\nconst pathForKey = (key: string) =>\n  `${defaultStoragePath()}/${toFileName(key)}`;\n\nconst FilesystemStorage = {\n  setItem: (key: string, value: string) => {\n    return new Promise((resolve) => {\n      InteractionManager.runAfterInteractions(() => {\n        resolve(RNFetchBlob.fs.writeFile(pathForKey(key), value, encoding));\n      });\n    });\n  },\n\n  getItem: onStorageReady((key: string) => {\n    const filePath = pathForKey(key);\n\n    return RNFetchBlob.fs.readFile(filePath, encoding).then((data) => {\n      if (data) {\n        return data;\n      } else {\n        throw new Error('key does not exist in fsStorage');\n      }\n    });\n  }),\n\n  removeItem: (key: string) => {\n    return RNFetchBlob.fs.unlink(pathForKey(key));\n  },\n  clear: () => {\n    return RNFetchBlob.fs.unlink(defaultStoragePath());\n  },\n};\n\nexport default FilesystemStorage;\n"]},"metadata":{},"sourceType":"module"}