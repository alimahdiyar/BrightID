{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabActions = void 0;\nexports.default = TabRouter;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\n\nvar TYPE_ROUTE = 'route';\nvar TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nexports.TabActions = TabActions;\n\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      break;\n  }\n\n  return history;\n};\n\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return (0, _extends2.default)({}, state, {\n    index: index,\n    history: history\n  });\n};\n\nfunction TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;\n  var router = (0, _extends2.default)({}, _BaseRouter.default, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat((0, _nonSecure.nanoid)()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return (0, _extends2.default)({}, route, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[name] !== undefined ? (0, _extends2.default)({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat((0, _nonSecure.nanoid)()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name;\n        }) || {\n          name: name,\n          key: \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return (0, _extends2.default)({}, state, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex((0, _extends2.default)({}, state, {\n              routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n\n                var params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge === false) {\n                  params = routeParamList[route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                } else {\n                  params = action.payload.params ? (0, _extends2.default)({}, route.params, action.payload.params) : route.params;\n                }\n\n                return params !== route.params ? (0, _extends2.default)({}, route, {\n                  params: params\n                }) : route;\n              }) : state.routes\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            var previousKey = state.history[state.history.length - 2].key;\n\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n\n            if (_index === -1) {\n              return null;\n            }\n\n            return (0, _extends2.default)({}, state, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","type","payload","name","params","getRouteHistory","history","key","routes","i","index","initialRouteIndex","route","changeIndex","backBehavior","currentKey","state","it","router","getInitialState","routeParamList","initialRouteName","routeNames","stale","getRehydratedState","r","undefined","Math","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","previousKey","BaseRouter","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<\n          TabNavigationState<ParamListBase>\n        >).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) => {\n                      if (i !== index) {\n                        return route;\n                      }\n\n                      let params;\n\n                      if (\n                        action.type === 'NAVIGATE' &&\n                        action.payload.merge === false\n                      ) {\n                        params =\n                          routeParamList[route.name] !== undefined\n                            ? {\n                                ...routeParamList[route.name],\n                                ...action.payload.params,\n                              }\n                            : action.payload.params;\n                      } else {\n                        params = action.payload.params\n                          ? {\n                              ...route.params,\n                              ...action.payload.params,\n                            }\n                          : route.params;\n                      }\n\n                      return params !== route.params\n                        ? { ...route, params }\n                        : route;\n                    })\n                  : state.routes,\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"script"}