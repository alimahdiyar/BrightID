{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DropdownAlert from 'react-native-dropdownalert';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { navigate, getRoute } from \"../../NavigationService\";\nimport AddGroup from \"../Icons/AddGroup\";\nimport AddPerson from \"../Icons/AddPerson\";\nimport Certificate from \"../Icons/Certificate\";\nimport PhoneLock from \"../Icons/PhoneLock\";\nimport { setActiveNotification } from \"../../actions\";\nimport { CONNECTIONS_TYPE } from \"../../utils/constants\";\nimport { DEVICE_LARGE, HEIGHT } from \"../../utils/deviceConstants\";\nimport { LIGHT_GREEN, BLACK } from \"../../theme/colors\";\nimport { fontSize } from \"../../theme/fonts\";\nimport { selectAllUnconfirmedConnections } from \"../PendingConnections/pendingConnectionSlice\";\nimport { DetoxEnabled } from \"../../utils/Detox\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Icons = {\n  AddGroup: AddGroup,\n  AddPerson: AddPerson,\n  PhoneLock: PhoneLock,\n  Certificate: Certificate\n};\nvar NOTIFICATION_TIMEOUT = 10000;\nvar screenBlackList = ['ScanCode', 'PendingConnections', 'MyCode', 'GroupConnection'];\nexport var NotificationBanner = function NotificationBanner() {\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dropDownAlertRef = useRef(null);\n  var activeNotification = useSelector(function (state) {\n    return state.notifications.activeNotification;\n  });\n  var pendingConnections = useSelector(selectAllUnconfirmedConnections);\n  useEffect(function () {\n    var _dropDownAlertRef$cur;\n\n    if (!activeNotification) {\n      return;\n    }\n\n    var route = getRoute();\n    (_dropDownAlertRef$cur = dropDownAlertRef.current) == null ? void 0 : _dropDownAlertRef$cur.closeAction('cancel');\n\n    if (!screenBlackList.includes(route == null ? void 0 : route.name)) {\n      if (!DetoxEnabled) {\n        var _dropDownAlertRef$cur2;\n\n        (_dropDownAlertRef$cur2 = dropDownAlertRef.current) == null ? void 0 : _dropDownAlertRef$cur2.alertWithType('custom', activeNotification == null ? void 0 : activeNotification.title, activeNotification == null ? void 0 : activeNotification.message);\n      }\n    }\n  }, [activeNotification, dispatch]);\n  useEffect(function () {\n    if (pendingConnections.length) {\n      dispatch(setActiveNotification({\n        type: CONNECTIONS_TYPE,\n        title: t('notificationBar.title.pendingConnection'),\n        message: t('notificationBar.text.pendingConnections', {\n          count: pendingConnections.length\n        }),\n        navigationTarget: 'PendingConnections',\n        icon: 'AddPerson'\n      }));\n    }\n  }, [pendingConnections.length, dispatch, t]);\n  var Icon = Icons[(activeNotification == null ? void 0 : activeNotification.icon) || 'Certificate'];\n\n  var _onTap = function _onTap() {\n    console.log('onTap', activeNotification);\n\n    if (activeNotification != null && activeNotification.navigationTarget) {\n      navigate(activeNotification.navigationTarget);\n    }\n  };\n\n  var _onClose = function _onClose() {\n    console.log('onClose, setting null');\n    dispatch(setActiveNotification(null));\n  };\n\n  return _jsx(DropdownAlert, {\n    ref: dropDownAlertRef,\n    closeInterval: NOTIFICATION_TIMEOUT,\n    containerStyle: styles.container,\n    contentContainerStyle: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    titleStyle: styles.title,\n    messageStyle: styles.message,\n    updateStatusBar: true,\n    activeStatusBarBackgroundColor: LIGHT_GREEN,\n    activeStatusBarStyle: \"dark-content\",\n    testID: \"notificationBanner\",\n    elevation: 10,\n    zIndex: 100,\n    onTap: _onTap,\n    onClose: _onClose,\n    renderImage: function renderImage() {\n      return _jsx(View, {\n        style: styles.icon,\n        children: _jsx(Icon, {\n          width: DEVICE_LARGE ? 24 : 20,\n          height: DEVICE_LARGE ? 24 : 20\n        })\n      });\n    },\n    panResponderEnabled: false,\n    tapToCloseEnabled: true\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: LIGHT_GREEN,\n    height: HEIGHT * 0.15\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[16]\n  },\n  message: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[13]\n  },\n  icon: {\n    marginLeft: DEVICE_LARGE ? 20 : 10\n  }\n});\nexport default NotificationBanner;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/NotificationBanner.tsx"],"names":["Icons","AddGroup","AddPerson","PhoneLock","Certificate","NOTIFICATION_TIMEOUT","screenBlackList","NotificationBanner","dispatch","useDispatch","t","useTranslation","dropDownAlertRef","useRef","activeNotification","useSelector","state","pendingConnections","useEffect","route","getRoute","setActiveNotification","type","title","message","count","navigationTarget","icon","Icon","_onTap","console","navigate","_onClose","styles","flex","flexDirection","alignItems","justifyContent","DEVICE_LARGE","StyleSheet","container","backgroundColor","height","HEIGHT","fontFamily","marginLeft","color","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport DropdownAlert from 'react-native-dropdownalert';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport { navigate, getRoute } from '@/NavigationService';\nimport AddGroup from '@/components/Icons/AddGroup';\nimport AddPerson from '@/components/Icons/AddPerson';\nimport Certificate from '@/components/Icons/Certificate';\nimport PhoneLock from '@/components/Icons/PhoneLock';\nimport { setActiveNotification } from '@/actions';\nimport { CONNECTIONS_TYPE } from '@/utils/constants';\nimport { DEVICE_LARGE, HEIGHT } from '@/utils/deviceConstants';\nimport { LIGHT_GREEN, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DetoxEnabled } from '@/utils/Detox';\n\n/* notification types:\n@type groups\n@type connections\n@type misc\n*/\n// default icons\nconst Icons = {\n  AddGroup,\n  AddPerson,\n  PhoneLock,\n  Certificate,\n};\n\nconst NOTIFICATION_TIMEOUT = 10000;\n\nconst screenBlackList = [\n  'ScanCode',\n  'PendingConnections',\n  'MyCode',\n  'GroupConnection',\n];\n\nexport const NotificationBanner = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  // const route = useRoute();\n  const dropDownAlertRef = useRef(null);\n  const activeNotification = useSelector(\n    (state: State) => state.notifications.activeNotification,\n  );\n\n  const pendingConnections = useSelector(selectAllUnconfirmedConnections);\n\n  useEffect(() => {\n    if (!activeNotification) {\n      return;\n    }\n\n    const route = getRoute();\n\n    dropDownAlertRef.current?.closeAction('cancel');\n\n    if (!screenBlackList.includes(route?.name)) {\n      if (!DetoxEnabled) {\n        dropDownAlertRef.current?.alertWithType(\n          'custom',\n          activeNotification?.title,\n          activeNotification?.message,\n        );\n      }\n    }\n  }, [activeNotification, dispatch]);\n\n  useEffect(() => {\n    // always close the banner first\n    // dropDownAlertRef.current?.closeAction('automatic');\n\n    if (pendingConnections.length) {\n      dispatch(\n        setActiveNotification({\n          type: CONNECTIONS_TYPE,\n          title: t('notificationBar.title.pendingConnection'),\n          message: t('notificationBar.text.pendingConnections', {\n            count: pendingConnections.length,\n          }),\n          navigationTarget: 'PendingConnections',\n          icon: 'AddPerson',\n        }),\n      );\n    }\n  }, [pendingConnections.length, dispatch, t]);\n\n  // icon fallback: activeNotification prop 'icon' -> default icon for notification type -> default 'Certificate'\n  const Icon = Icons[activeNotification?.icon || 'Certificate'];\n\n  const _onTap = () => {\n    console.log('onTap', activeNotification);\n    if (activeNotification?.navigationTarget) {\n      navigate(activeNotification.navigationTarget);\n    }\n  };\n\n  const _onClose = () => {\n    console.log('onClose, setting null');\n    dispatch(setActiveNotification(null));\n  };\n\n  return (\n    <DropdownAlert\n      ref={dropDownAlertRef}\n      closeInterval={NOTIFICATION_TIMEOUT}\n      containerStyle={styles.container}\n      contentContainerStyle={{\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      titleStyle={styles.title}\n      messageStyle={styles.message}\n      updateStatusBar={true}\n      activeStatusBarBackgroundColor={LIGHT_GREEN}\n      activeStatusBarStyle=\"dark-content\"\n      testID=\"notificationBanner\"\n      elevation={10}\n      zIndex={100}\n      onTap={_onTap}\n      onClose={_onClose}\n      renderImage={() => (\n        <View style={styles.icon}>\n          <Icon\n            width={DEVICE_LARGE ? 24 : 20}\n            height={DEVICE_LARGE ? 24 : 20}\n          />\n        </View>\n      )}\n      panResponderEnabled={false}\n      tapToCloseEnabled={true}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: LIGHT_GREEN,\n    height: HEIGHT * 0.15,\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[16],\n  },\n  message: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[13],\n  },\n  icon: {\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n  },\n});\n\nexport default NotificationBanner;\n"]},"metadata":{},"sourceType":"module"}