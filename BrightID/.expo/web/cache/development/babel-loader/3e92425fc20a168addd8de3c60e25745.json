{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from 'apisauce';\nimport { DEVICE_OS } from \"../utils/deviceConstants\";\nvar notificationUrl = 'https://notify.brightid.org';\n\nif (__DEV__) {\n  notificationUrl = 'https://notify-test.brightid.org';\n}\n\nvar NotificationService = function () {\n  function NotificationService() {\n    _classCallCheck(this, NotificationService);\n\n    this.notifyApi = create({\n      baseURL: notificationUrl\n    });\n  }\n\n  _createClass(NotificationService, [{\n    key: \"getToken\",\n    value: function getToken(_ref) {\n      var deviceToken, notificationToken, oldDeviceToken, res;\n      return _regeneratorRuntime.async(function getToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              deviceToken = _ref.deviceToken, notificationToken = _ref.notificationToken, oldDeviceToken = _ref.oldDeviceToken;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.notifyApi.post(\"/token\", {\n                deviceToken: deviceToken,\n                deviceOS: DEVICE_OS,\n                notificationToken: notificationToken,\n                oldDeviceToken: oldDeviceToken\n              }));\n\n            case 3:\n              res = _context.sent;\n              NotificationService.throwOnError(res);\n              return _context.abrupt(\"return\", res.data);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"sendNotification\",\n    value: function sendNotification(_ref2) {\n      var notificationToken, type, payload, notificationTokens, res;\n      return _regeneratorRuntime.async(function sendNotification$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              notificationToken = _ref2.notificationToken, type = _ref2.type, payload = _ref2.payload;\n              notificationTokens = [notificationToken];\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(this.notifyApi.post(\"/push\", {\n                notificationTokens: notificationTokens,\n                type: type,\n                payload: payload\n              }));\n\n            case 4:\n              res = _context2.sent;\n              console.log(res.data);\n              NotificationService.throwOnError(res);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }], [{\n    key: \"throwOnError\",\n    value: function throwOnError(response) {\n      if (response.ok) {\n        return;\n      }\n\n      if (response.data && response.data.errorMessage) {\n        throw new Error(response.data.errorMessage);\n      }\n\n      throw new Error(response.problem);\n    }\n  }]);\n\n  return NotificationService;\n}();\n\nvar notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/api/notificationService.ts"],"names":["notificationUrl","NotificationService","create","baseURL","response","deviceToken","notificationToken","oldDeviceToken","res","deviceOS","type","payload","notificationTokens","console","notificationService"],"mappings":"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","sourcesContent":["import { create, ApisauceInstance, ApiResponse } from 'apisauce';\nimport { DEVICE_OS } from '@/utils/deviceConstants';\n\nlet notificationUrl = 'https://notify.brightid.org';\nif (__DEV__) {\n  notificationUrl = 'https://notify-test.brightid.org';\n}\n\nclass NotificationService {\n  notifyApi: ApisauceInstance;\n\n  constructor() {\n    this.notifyApi = create({\n      baseURL: notificationUrl,\n    });\n  }\n\n  static throwOnError(response: ApiResponse<any>) {\n    if (response.ok) {\n      return;\n    }\n    if (response.data && response.data.errorMessage) {\n      throw new Error(response.data.errorMessage);\n    }\n    throw new Error(response.problem);\n  }\n\n  async getToken({ deviceToken, notificationToken, oldDeviceToken }) {\n    const res = await this.notifyApi.post(`/token`, {\n      deviceToken,\n      deviceOS: DEVICE_OS,\n      notificationToken,\n      oldDeviceToken,\n    });\n    NotificationService.throwOnError(res);\n    return res.data;\n  }\n\n  async sendNotification({\n    notificationToken,\n    type,\n    payload,\n  }: {\n    notificationToken: string;\n    type: string;\n    payload: {\n      [val: string]: string;\n    };\n  }) {\n    const notificationTokens = [notificationToken];\n    const res = await this.notifyApi.post(`/push`, {\n      notificationTokens,\n      type,\n      payload,\n    });\n\n    console.log(res.data);\n\n    NotificationService.throwOnError(res);\n    // return res.data;\n  }\n}\n\nconst notificationService = new NotificationService();\n\nexport default notificationService;\n"]},"metadata":{},"sourceType":"module"}