{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectOtherFakeConnections = exports.reconnectFakeConnection = exports.joinAllGroups = exports.connectWithOtherFakeConnections = exports.addFakeConnection = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _rnFetchBlob = _interopRequireDefault(require(\"rn-fetch-blob\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _encoding = require(\"../utils/encoding\");\n\nvar _cryptoHelper = require(\"../utils/cryptoHelper\");\n\nvar _channelSlice = require(\"../components/PendingConnections/channelSlice\");\n\nvar _connectionsSlice = require(\"../reducer/connectionsSlice\");\n\nvar _fakeNames = require(\"../utils/fakeNames\");\n\nvar _fakeHelper = require(\"../utils/fakeHelper\");\n\nvar _filesystem = require(\"../utils/filesystem\");\n\nvar _constants = require(\"../utils/constants\");\n\nvar _operationsSlice = require(\"../reducer/operationsSlice\");\n\nvar _connectionLevelStrings = require(\"../utils/connectionLevelStrings\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar selectOtherFakeConnections = (0, _toolkit.createSelector)(_connectionsSlice.selectAllConnections, function (_, id) {\n  return id;\n}, function (connections, id) {\n  return connections.filter(function (c) {\n    return c.secretKey && c.id !== id;\n  });\n});\nexports.selectOtherFakeConnections = selectOtherFakeConnections;\n\nvar addFakeConnection = function addFakeConnection() {\n  return function _callee(dispatch, getState) {\n    var _await$nacl$sign$keyP, publicKey, secretKey, b64PubKey, connectId, _names$Math$floor, firstName, lastName, name, photo, photoResponse, channel, dataObj, encrypted, fakeChannel;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('creating fake user');\n            _context.next = 4;\n            return _regenerator.default.awrap(_tweetnacl.default.sign.keyPair());\n\n          case 4:\n            _await$nacl$sign$keyP = _context.sent;\n            publicKey = _await$nacl$sign$keyP.publicKey;\n            secretKey = _await$nacl$sign$keyP.secretKey;\n            b64PubKey = (0, _encoding.uInt8ArrayToB64)(publicKey);\n            connectId = (0, _encoding.b64ToUrlSafeB64)(b64PubKey);\n            _names$Math$floor = _fakeNames.names[Math.floor(Math.random() * (_fakeNames.names.length - 1))], firstName = _names$Math$floor.firstName, lastName = _names$Math$floor.lastName;\n            name = firstName + \" \" + lastName;\n            _context.next = 13;\n            return _regenerator.default.awrap(_rnFetchBlob.default.fetch('GET', 'https://loremflickr.com/180/180', {}));\n\n          case 13:\n            photoResponse = _context.sent;\n\n            if (!(photoResponse.info().status === 200)) {\n              _context.next = 18;\n              break;\n            }\n\n            photo = \"data:image/jpeg;base64,\" + String(photoResponse.base64());\n            _context.next = 20;\n            break;\n\n          case 18:\n            _reactNative.Alert.alert('Error', 'Unable to fetch image');\n\n            return _context.abrupt(\"return\");\n\n          case 20:\n            channel = (0, _channelSlice.selectChannelById)(getState(), getState().channels.myChannelIds[getState().channels.displayChannelType]);\n            dataObj = {\n              id: connectId,\n              photo: photo,\n              name: name,\n              profileTimestamp: Date.now(),\n              secretKey: (0, _encoding.uInt8ArrayToB64)(secretKey),\n              notificationToken: null,\n              version: _constants.PROFILE_VERSION\n            };\n            encrypted = (0, _cryptoHelper.encryptData)(dataObj, channel.aesKey);\n            _context.t0 = _extends2.default;\n            _context.t1 = {};\n            _context.t2 = channel;\n            _context.next = 28;\n            return _regenerator.default.awrap((0, _encoding.urlSafeRandomKey)(9));\n\n          case 28:\n            _context.t3 = _context.sent;\n            _context.t4 = {\n              myProfileId: _context.t3\n            };\n            fakeChannel = (0, _context.t0)(_context.t1, _context.t2, _context.t4);\n            _context.next = 33;\n            return _regenerator.default.awrap(fakeChannel.api.upload({\n              channelId: fakeChannel.id,\n              data: encrypted,\n              dataId: fakeChannel.myProfileId\n            }));\n\n          case 33:\n            _context.next = 38;\n            break;\n\n          case 35:\n            _context.prev = 35;\n            _context.t5 = _context[\"catch\"](0);\n            _context.t5 instanceof Error ? console.log(_context.t5.message) : console.log(_context.t5);\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 35]], Promise);\n  };\n};\n\nexports.addFakeConnection = addFakeConnection;\n\nvar connectWithOtherFakeConnections = function connectWithOtherFakeConnections(id, api, level) {\n  return function _callee2(dispatch, getState) {\n    var fakeUser1, otherFakeUsers, _iterator, _step, otherUser, ops, _iterator2, _step2, op;\n\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fakeUser1 = (0, _connectionsSlice.selectConnectionById)(getState(), id);\n\n            if (fakeUser1) {\n              _context2.next = 4;\n              break;\n            }\n\n            console.log(\"Failed to get fake connection id \" + id);\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            if (fakeUser1.secretKey) {\n              _context2.next = 7;\n              break;\n            }\n\n            console.log(\"Fake connection \" + id + \" does not have a secretKey!\");\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            otherFakeUsers = selectOtherFakeConnections(getState(), id);\n            console.log(\"Connecting \" + id + \" with \" + otherFakeUsers.length + \" fake connections as \" + _connectionLevelStrings.connectionLevelStrings[level]);\n            _iterator = _createForOfIteratorHelperLoose(otherFakeUsers);\n\n          case 10:\n            if ((_step = _iterator()).done) {\n              _context2.next = 18;\n              break;\n            }\n\n            otherUser = _step.value;\n            _context2.next = 14;\n            return _regenerator.default.awrap((0, _fakeHelper.connectFakeUsers)({\n              id: fakeUser1.id,\n              secretKey: fakeUser1.secretKey\n            }, {\n              id: otherUser.id,\n              secretKey: otherUser.secretKey\n            }, api, level));\n\n          case 14:\n            ops = _context2.sent;\n\n            for (_iterator2 = _createForOfIteratorHelperLoose(ops); !(_step2 = _iterator2()).done;) {\n              op = _step2.value;\n              dispatch((0, _operationsSlice.addOperation)(op));\n            }\n\n          case 16:\n            _context2.next = 10;\n            break;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.connectWithOtherFakeConnections = connectWithOtherFakeConnections;\n\nvar joinAllGroups = function joinAllGroups(id, api) {\n  return function _callee3(dispatch, getState) {\n    var fakeUser, groups, _iterator3, _step3, group, op;\n\n    return _regenerator.default.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fakeUser = (0, _connectionsSlice.selectConnectionById)(getState(), id);\n\n            if (fakeUser) {\n              _context3.next = 4;\n              break;\n            }\n\n            console.log(\"Failed to get fake connection id \" + id);\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            if (fakeUser.secretKey) {\n              _context3.next = 7;\n              break;\n            }\n\n            console.log(\"Fake connection \" + id + \" does not have a secretKey!\");\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            groups = getState().groups.groups;\n            _iterator3 = _createForOfIteratorHelperLoose(groups);\n\n          case 9:\n            if ((_step3 = _iterator3()).done) {\n              _context3.next = 17;\n              break;\n            }\n\n            group = _step3.value;\n            _context3.next = 13;\n            return _regenerator.default.awrap(api.joinGroup(group.id, {\n              id: id,\n              secretKey: fakeUser.secretKey\n            }));\n\n          case 13:\n            op = _context3.sent;\n            dispatch((0, _operationsSlice.addOperation)(op));\n\n          case 15:\n            _context3.next = 9;\n            break;\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.joinAllGroups = joinAllGroups;\n\nvar reconnectFakeConnection = function reconnectFakeConnection(id, changeProfile) {\n  return function _callee4(dispatch, getState) {\n    var fakeUser1, channel, photo, name, photoResponse, _names$Math$floor2, firstName, lastName, dataObj, encrypted, fakeChannel;\n\n    return _regenerator.default.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            fakeUser1 = (0, _connectionsSlice.selectConnectionById)(getState(), id);\n\n            if (fakeUser1) {\n              _context4.next = 4;\n              break;\n            }\n\n            console.log(\"Failed to get fake connection id \" + id);\n            return _context4.abrupt(\"return\");\n\n          case 4:\n            if (fakeUser1.secretKey) {\n              _context4.next = 7;\n              break;\n            }\n\n            console.log(\"Fake connection \" + id + \" does not have a secretKey!\");\n            return _context4.abrupt(\"return\");\n\n          case 7:\n            channel = (0, _channelSlice.selectChannelById)(getState(), getState().channels.myChannelIds[getState().channels.displayChannelType]);\n\n            if (channel) {\n              _context4.next = 11;\n              break;\n            }\n\n            _reactNative.Alert.alert('Error', 'No open channel. Go to MyCodeScreen before attempting fake reconnect to have an open channel.');\n\n            return _context4.abrupt(\"return\");\n\n          case 11:\n            if (!changeProfile) {\n              _context4.next = 25;\n              break;\n            }\n\n            _context4.next = 14;\n            return _regenerator.default.awrap(_rnFetchBlob.default.fetch('GET', 'https://loremflickr.com/180/180', {}));\n\n          case 14:\n            photoResponse = _context4.sent;\n\n            if (!(photoResponse.info().status === 200)) {\n              _context4.next = 19;\n              break;\n            }\n\n            photo = \"data:image/jpeg;base64,\" + String(photoResponse.base64());\n            _context4.next = 21;\n            break;\n\n          case 19:\n            _reactNative.Alert.alert('Error', 'Unable to fetch image');\n\n            return _context4.abrupt(\"return\");\n\n          case 21:\n            _names$Math$floor2 = _fakeNames.names[Math.floor(Math.random() * (_fakeNames.names.length - 1))], firstName = _names$Math$floor2.firstName, lastName = _names$Math$floor2.lastName;\n            name = firstName + \" \" + lastName;\n            _context4.next = 29;\n            break;\n\n          case 25:\n            name = fakeUser1.name;\n            _context4.next = 28;\n            return _regenerator.default.awrap((0, _filesystem.retrieveImage)(fakeUser1.photo.filename));\n\n          case 28:\n            photo = _context4.sent;\n\n          case 29:\n            dataObj = {\n              id: id,\n              photo: photo,\n              name: name,\n              profileTimestamp: Date.now(),\n              secretKey: fakeUser1.secretKey,\n              notificationToken: null,\n              version: _constants.PROFILE_VERSION\n            };\n            encrypted = (0, _cryptoHelper.encryptData)(dataObj, channel.aesKey);\n            _context4.t0 = _extends2.default;\n            _context4.t1 = {};\n            _context4.t2 = channel;\n            _context4.next = 36;\n            return _regenerator.default.awrap((0, _encoding.urlSafeRandomKey)(9));\n\n          case 36:\n            _context4.t3 = _context4.sent;\n            _context4.t4 = {\n              myProfileId: _context4.t3\n            };\n            fakeChannel = (0, _context4.t0)(_context4.t1, _context4.t2, _context4.t4);\n            _context4.next = 41;\n            return _regenerator.default.awrap(fakeChannel.api.upload({\n              channelId: fakeChannel.id,\n              data: encrypted,\n              dataId: fakeChannel.myProfileId\n            }));\n\n          case 41:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.reconnectFakeConnection = reconnectFakeConnection;","map":{"version":3,"names":["selectOtherFakeConnections","createSelector","selectAllConnections","_","id","connections","filter","c","secretKey","addFakeConnection","dispatch","getState","console","log","nacl","sign","keyPair","publicKey","b64PubKey","uInt8ArrayToB64","connectId","b64ToUrlSafeB64","names","Math","floor","random","length","firstName","lastName","name","RNFetchBlob","fetch","photoResponse","info","status","photo","String","base64","Alert","alert","channel","selectChannelById","channels","myChannelIds","displayChannelType","dataObj","profileTimestamp","Date","now","notificationToken","version","PROFILE_VERSION","encrypted","encryptData","aesKey","urlSafeRandomKey","myProfileId","fakeChannel","api","upload","channelId","data","dataId","Error","message","connectWithOtherFakeConnections","level","fakeUser1","selectConnectionById","otherFakeUsers","connectionLevelStrings","otherUser","connectFakeUsers","ops","op","addOperation","joinAllGroups","fakeUser","groups","group","joinGroup","reconnectFakeConnection","changeProfile","retrieveImage","filename"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/fakeContact.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport RNFetchBlob from 'rn-fetch-blob';\nimport { Alert } from 'react-native';\nimport { createSelector } from '@reduxjs/toolkit';\nimport {\n  uInt8ArrayToB64,\n  b64ToUrlSafeB64,\n  urlSafeRandomKey,\n} from '@/utils/encoding';\nimport { encryptData } from '@/utils/cryptoHelper';\nimport { selectChannelById } from '@/components/PendingConnections/channelSlice';\nimport {\n  selectConnectionById,\n  selectAllConnections,\n} from '@/reducer/connectionsSlice';\nimport { names } from '@/utils/fakeNames';\nimport { connectFakeUsers } from '@/utils/fakeHelper';\nimport { retrieveImage } from '@/utils/filesystem';\nimport { PROFILE_VERSION } from '@/utils/constants';\nimport { addOperation } from '@/reducer/operationsSlice';\nimport { NodeApi } from '@/api/brightId';\nimport { connectionLevelStrings } from '@/utils/connectionLevelStrings';\n\n/** SELECTORS */\n\nexport const selectOtherFakeConnections = createSelector(\n  selectAllConnections,\n  (_: State, id: string) => id,\n  (connections, id) => connections.filter((c) => c.secretKey && c.id !== id),\n);\n\nexport const addFakeConnection =\n  () => async (dispatch: dispatch, getState: getState) => {\n    try {\n      // create a fake user\n      console.log('creating fake user');\n      const { publicKey, secretKey } = await nacl.sign.keyPair();\n      const b64PubKey = uInt8ArrayToB64(publicKey);\n      const connectId = b64ToUrlSafeB64(b64PubKey);\n      const { firstName, lastName } =\n        names[Math.floor(Math.random() * (names.length - 1))];\n      const name = `${firstName} ${lastName}`;\n\n      // load random photo\n      let photo;\n      const photoResponse = await RNFetchBlob.fetch(\n        'GET',\n        'https://loremflickr.com/180/180',\n        {},\n      );\n      if (photoResponse.info().status === 200) {\n        photo = `data:image/jpeg;base64,${String(photoResponse.base64())}`;\n      } else {\n        Alert.alert('Error', 'Unable to fetch image');\n        return;\n      }\n\n      const channel = selectChannelById(\n        getState(),\n        getState().channels.myChannelIds[\n          getState().channels.displayChannelType\n        ],\n      );\n\n      const dataObj: SharedProfile = {\n        id: connectId,\n        photo,\n        name,\n        profileTimestamp: Date.now(),\n        secretKey: uInt8ArrayToB64(secretKey),\n        notificationToken: null,\n        version: PROFILE_VERSION,\n      };\n\n      const encrypted = encryptData(dataObj, channel.aesKey);\n      const fakeChannel = {\n        ...channel,\n        myProfileId: await urlSafeRandomKey(9),\n      };\n\n      await fakeChannel.api.upload({\n        channelId: fakeChannel.id,\n        data: encrypted,\n        dataId: fakeChannel.myProfileId,\n      });\n    } catch (err) {\n      err instanceof Error ? console.log(err.message) : console.log(err);\n    }\n  };\n\nexport const connectWithOtherFakeConnections =\n  (id: string, api: NodeApi, level: ConnectionLevel) =>\n  async (dispatch: dispatch, getState: getState) => {\n    // get fakeUser by ID\n    const fakeUser1 = selectConnectionById(getState(), id);\n\n    if (!fakeUser1) {\n      console.log(`Failed to get fake connection id ${id}`);\n      return;\n    }\n    if (!fakeUser1.secretKey) {\n      console.log(`Fake connection ${id} does not have a secretKey!`);\n      return;\n    }\n\n    // get all other fakeUser that we should connect to\n    const otherFakeUsers = selectOtherFakeConnections(getState(), id);\n\n    console.log(\n      `Connecting ${id} with ${otherFakeUsers.length} fake connections as ${connectionLevelStrings[level]}`,\n    );\n    for (const otherUser of otherFakeUsers) {\n      const ops = await connectFakeUsers(\n        { id: fakeUser1.id, secretKey: fakeUser1.secretKey },\n        { id: otherUser.id, secretKey: otherUser.secretKey },\n        api,\n        level,\n      );\n      for (const op of ops) {\n        dispatch(addOperation(op));\n      }\n    }\n  };\n\nexport const joinAllGroups =\n  (id: string, api: NodeApi) =>\n  async (dispatch: dispatch, getState: getState) => {\n    // get fakeUser by ID\n    const fakeUser = selectConnectionById(getState(), id);\n\n    if (!fakeUser) {\n      console.log(`Failed to get fake connection id ${id}`);\n      return;\n    }\n    if (!fakeUser.secretKey) {\n      console.log(`Fake connection ${id} does not have a secretKey!`);\n      return;\n    }\n\n    // join all groups\n    const { groups } = getState().groups;\n    for (const group of groups) {\n      const op = await api.joinGroup(group.id, {\n        id,\n        secretKey: fakeUser.secretKey,\n      });\n      dispatch(addOperation(op));\n    }\n  };\n\nexport const reconnectFakeConnection =\n  (id: string, changeProfile: boolean) =>\n  async (dispatch: dispatch, getState: getState) => {\n    // get fakeUser by ID\n    const fakeUser1 = selectConnectionById(getState(), id);\n\n    if (!fakeUser1) {\n      console.log(`Failed to get fake connection id ${id}`);\n      return;\n    }\n    if (!fakeUser1.secretKey) {\n      console.log(`Fake connection ${id} does not have a secretKey!`);\n      return;\n    }\n    const channel = selectChannelById(\n      getState(),\n      getState().channels.myChannelIds[getState().channels.displayChannelType],\n    );\n    if (!channel) {\n      Alert.alert(\n        'Error',\n        'No open channel. Go to MyCodeScreen before attempting fake reconnect to have an open channel.',\n      );\n      return;\n    }\n\n    let photo, name;\n    if (changeProfile) {\n      // load a new random photo\n      const photoResponse = await RNFetchBlob.fetch(\n        'GET',\n        'https://loremflickr.com/180/180',\n        {},\n      );\n      if (photoResponse.info().status === 200) {\n        photo = `data:image/jpeg;base64,${String(photoResponse.base64())}`;\n      } else {\n        Alert.alert('Error', 'Unable to fetch image');\n        return;\n      }\n      // create new name\n      const { firstName, lastName } =\n        names[Math.floor(Math.random() * (names.length - 1))];\n      name = `${firstName} ${lastName}`;\n    } else {\n      // use existing photo and name\n      name = fakeUser1.name;\n      // retrieve photo\n      photo = await retrieveImage(fakeUser1.photo.filename);\n    }\n\n    const dataObj = {\n      id,\n      photo,\n      name,\n      profileTimestamp: Date.now(),\n      secretKey: fakeUser1.secretKey,\n      notificationToken: null,\n      version: PROFILE_VERSION,\n    };\n\n    const encrypted = encryptData(dataObj, channel.aesKey);\n    const fakeChannel = { ...channel, myProfileId: await urlSafeRandomKey(9) };\n\n    await fakeChannel.api.upload({\n      channelId: fakeChannel.id,\n      data: encrypted,\n      dataId: fakeChannel.myProfileId,\n    });\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}