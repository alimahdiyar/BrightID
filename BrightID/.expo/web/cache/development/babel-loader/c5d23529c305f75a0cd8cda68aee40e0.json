{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _index = require(\"./index\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar fetchUserInfo = function fetchUserInfo(api) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve) {\n      _reactNative.InteractionManager.runAfterInteractions(function _callee() {\n        var _getState, id, verifications, memberships, connections, incomingConns, incomingConnsById, _iterator, _step, _incomingConnsById$co, conn, _await$api$getProfile, sponsored, signingKeys;\n\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getState = getState(), id = _getState.user.id;\n\n                if (id) {\n                  _context.next = 4;\n                  break;\n                }\n\n                console.log(\"Can't fetch user info - id missing\");\n                return _context.abrupt(\"return\");\n\n              case 4:\n                console.log('refreshing user info', id);\n                _context.prev = 5;\n                _context.next = 8;\n                return _regenerator.default.awrap(api.getVerifications(id));\n\n              case 8:\n                verifications = _context.sent;\n                dispatch((0, _index.setVerifications)(verifications));\n                _context.next = 12;\n                return _regenerator.default.awrap(api.getMemberships(id));\n\n              case 12:\n                memberships = _context.sent;\n                dispatch((0, _index.updateMemberships)(memberships));\n                _context.next = 16;\n                return _regenerator.default.awrap(api.getConnections(id, 'outbound'));\n\n              case 16:\n                connections = _context.sent;\n                _context.next = 19;\n                return _regenerator.default.awrap(api.getConnections(id, 'inbound'));\n\n              case 19:\n                incomingConns = _context.sent;\n                incomingConnsById = _lodash.default.keyBy(incomingConns, 'id');\n\n                for (_iterator = _createForOfIteratorHelperLoose(connections); !(_step = _iterator()).done;) {\n                  conn = _step.value;\n                  conn.incomingLevel = (_incomingConnsById$co = incomingConnsById[conn.id]) == null ? void 0 : _incomingConnsById$co.level;\n                }\n\n                dispatch((0, _index.updateConnections)(connections));\n                _context.next = 25;\n                return _regenerator.default.awrap(api.getProfile(id));\n\n              case 25:\n                _await$api$getProfile = _context.sent;\n                sponsored = _await$api$getProfile.sponsored;\n                signingKeys = _await$api$getProfile.signingKeys;\n                dispatch((0, _index.setIsSponsored)(sponsored));\n                dispatch((0, _index.setActiveDevices)(signingKeys));\n                dispatch((0, _index.updateNotifications)(api));\n                resolve(null);\n                _context.next = 37;\n                break;\n\n              case 34:\n                _context.prev = 34;\n                _context.t0 = _context[\"catch\"](5);\n                console.log(_context.t0.message);\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[5, 34]], Promise);\n      });\n    });\n  };\n};\n\nvar _default = fetchUserInfo;\nexports.default = _default;","map":{"version":3,"names":["fetchUserInfo","api","dispatch","getState","Promise","resolve","InteractionManager","runAfterInteractions","id","user","console","log","getVerifications","verifications","setVerifications","getMemberships","memberships","updateMemberships","getConnections","connections","incomingConns","incomingConnsById","_","keyBy","conn","incomingLevel","level","updateConnections","getProfile","sponsored","signingKeys","setIsSponsored","setActiveDevices","updateNotifications","message"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/actions/fetchUserInfo.ts"],"sourcesContent":["import { InteractionManager } from 'react-native';\nimport _ from 'lodash';\nimport { NodeApi } from '@/api/brightId';\nimport {\n  setVerifications,\n  updateMemberships,\n  updateConnections,\n  setIsSponsored,\n  updateNotifications,\n  setActiveDevices,\n} from './index';\n\nconst fetchUserInfo =\n  (api: NodeApi) => (dispatch: dispatch, getState: getState) => {\n    return new Promise((resolve) => {\n      InteractionManager.runAfterInteractions(async () => {\n        const {\n          user: { id },\n        } = getState();\n\n        if (!id) {\n          console.log(`Can't fetch user info - id missing`);\n          return;\n        }\n\n        console.log('refreshing user info', id);\n        try {\n          const verifications = await api.getVerifications(id);\n          dispatch(setVerifications(verifications));\n          const memberships = await api.getMemberships(id);\n          dispatch(updateMemberships(memberships));\n          const connections = await api.getConnections(id, 'outbound');\n          const incomingConns = await api.getConnections(id, 'inbound');\n          const incomingConnsById = _.keyBy(incomingConns, 'id');\n          for (const conn of connections) {\n            conn.incomingLevel = incomingConnsById[conn.id]?.level;\n          }\n          dispatch(updateConnections(connections));\n          const { sponsored, signingKeys } = await api.getProfile(id);\n          dispatch(setIsSponsored(sponsored));\n          dispatch(setActiveDevices(signingKeys));\n          dispatch(updateNotifications(api));\n          resolve(null);\n        } catch (err) {\n          console.log(err.message);\n        }\n      });\n    });\n  };\n\nexport default fetchUserInfo;\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;AASA,IAAMA,aAAa,GACjB,SADIA,aACJ,CAACC,GAAD;EAAA,OAAkB,UAACC,QAAD,EAAqBC,QAArB,EAA4C;IAC5D,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;MAC9BC,+BAAA,CAAmBC,oBAAnB,CAAwC;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,YAGlCJ,QAAQ,EAH0B,EAE5BK,EAF4B,aAEpCC,IAFoC,CAE5BD,EAF4B;;gBAAA,IAKjCA,EALiC;kBAAA;kBAAA;gBAAA;;gBAMpCE,OAAO,CAACC,GAAR;gBANoC;;cAAA;gBAUtCD,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,EAApC;gBAVsC;gBAAA;gBAAA,kCAYRP,GAAG,CAACW,gBAAJ,CAAqBJ,EAArB,CAZQ;;cAAA;gBAY9BK,aAZ8B;gBAapCX,QAAQ,CAAC,IAAAY,uBAAA,EAAiBD,aAAjB,CAAD,CAAR;gBAboC;gBAAA,kCAcVZ,GAAG,CAACc,cAAJ,CAAmBP,EAAnB,CAdU;;cAAA;gBAc9BQ,WAd8B;gBAepCd,QAAQ,CAAC,IAAAe,wBAAA,EAAkBD,WAAlB,CAAD,CAAR;gBAfoC;gBAAA,kCAgBVf,GAAG,CAACiB,cAAJ,CAAmBV,EAAnB,EAAuB,UAAvB,CAhBU;;cAAA;gBAgB9BW,WAhB8B;gBAAA;gBAAA,kCAiBRlB,GAAG,CAACiB,cAAJ,CAAmBV,EAAnB,EAAuB,SAAvB,CAjBQ;;cAAA;gBAiB9BY,aAjB8B;gBAkB9BC,iBAlB8B,GAkBVC,eAAA,CAAEC,KAAF,CAAQH,aAAR,EAAuB,IAAvB,CAlBU;;gBAmBpC,iDAAmBD,WAAnB,iCAAgC;kBAArBK,IAAqB;kBAC9BA,IAAI,CAACC,aAAL,4BAAqBJ,iBAAiB,CAACG,IAAI,CAAChB,EAAN,CAAtC,qBAAqB,sBAA4BkB,KAAjD;gBACD;;gBACDxB,QAAQ,CAAC,IAAAyB,wBAAA,EAAkBR,WAAlB,CAAD,CAAR;gBAtBoC;gBAAA,kCAuBKlB,GAAG,CAAC2B,UAAJ,CAAepB,EAAf,CAvBL;;cAAA;gBAAA;gBAuB5BqB,SAvB4B,yBAuB5BA,SAvB4B;gBAuBjBC,WAvBiB,yBAuBjBA,WAvBiB;gBAwBpC5B,QAAQ,CAAC,IAAA6B,qBAAA,EAAeF,SAAf,CAAD,CAAR;gBACA3B,QAAQ,CAAC,IAAA8B,uBAAA,EAAiBF,WAAjB,CAAD,CAAR;gBACA5B,QAAQ,CAAC,IAAA+B,0BAAA,EAAoBhC,GAApB,CAAD,CAAR;gBACAI,OAAO,CAAC,IAAD,CAAP;gBA3BoC;gBAAA;;cAAA;gBAAA;gBAAA;gBA6BpCK,OAAO,CAACC,GAAR,CAAY,YAAIuB,OAAhB;;cA7BoC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAxC;IAgCD,CAjCM,CAAP;EAkCD,CAnCD;AAAA,CADF;;eAsCelC,a"},"metadata":{},"sourceType":"script"}