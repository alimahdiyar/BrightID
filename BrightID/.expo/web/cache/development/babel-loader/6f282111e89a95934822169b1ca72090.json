{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { NavigationHelpersContext, NavigationContext, NavigationRouteContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Header from \"./Header\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport getIsDrawerOpenFromState from \"../utils/getIsDrawerOpenFromState\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n\n  var _React$useState = React.useState([state.routes[state.index].key]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var dimensions = useWindowDimensions();\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = getIsDrawerOpenFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return function () {\n      var _subscription;\n\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  var focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$h = _descriptor$options.header,\n          header = _descriptor$options$h === void 0 ? function (props) {\n        return React.createElement(Header, props);\n      } : _descriptor$options$h,\n          _descriptor$options$h2 = _descriptor$options.headerShown,\n          headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: detachInactiveScreens\n      }, headerShown ? React.createElement(NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n      gestureEnabled = _descriptors$activeKe.gestureEnabled,\n      swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","state","navigation","descriptors","lazy","drawerContent","props","React","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","detachInactiveScreens","loaded","setLoaded","dimensions","useWindowDimensions","colors","useTheme","isDrawerOpen","getIsDrawerOpenFromState","handleDrawerOpen","DrawerActions","target","handleDrawerClose","type","subscription","BackHandler","focusedRouteKey","renderNavigationView","progress","DrawerPositionContext","value","renderContent","enabled","style","styles","descriptor","route","unmountOnBlur","isFocused","header","headerShown","key","StyleSheet","opacity","isVisible","NavigationContext","NavigationRouteContext","layout","scene","activeKey","gestureEnabled","swipeEnabled","NavigationHelpersContext","DrawerOpenContext","open","onOpen","onClose","backgroundColor","borderRightColor","borderRightWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","content","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}