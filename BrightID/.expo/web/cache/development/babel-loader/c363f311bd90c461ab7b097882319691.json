{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { RESET_STORE } from \"../actions/resetStore\";\nimport { INVITE_ACCEPTED, INVITE_REJECTED } from \"../utils/constants\";\nimport { toSearchString } from \"../utils/strings\";\nimport { getGroupName, ids2connections, knownMemberIDs } from \"../utils/groups\";\nimport { compareCreatedDesc } from \"../components/Groups/models/sortingUtility\";\nvar initialState = {\n  groups: [],\n  invites: [],\n  searchParam: '',\n  searchOpen: false\n};\nvar groupsSlice = createSlice({\n  name: 'groups',\n  initialState: initialState,\n  reducers: {\n    createGroup: function createGroup(state, action) {\n      state.groups.push(action.payload);\n    },\n    updateGroup: function updateGroup(state, action) {\n      var group = state.groups.find(function (group) {\n        return group.id === action.payload.id;\n      });\n\n      _extends(group, action.payload);\n    },\n    upsertGroup: function upsertGroup(state, action) {\n      var group = state.groups.find(function (group) {\n        return group.id === action.payload.id;\n      });\n\n      if (group) {\n        _extends(group, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    deleteGroup: function deleteGroup(state, action) {\n      state.groups = state.groups.filter(function (group) {\n        return group.id !== action.payload.id;\n      });\n    },\n    setGroups: function setGroups(state, action) {\n      state.groups = action.payload;\n    },\n    updateMemberships: function updateMemberships(state, action) {\n      state.groups.forEach(function (group) {\n        var membership = action.payload.find(function (membership) {\n          return membership.id === group.id;\n        });\n\n        if (!membership && group.state === 'verified') {\n          group.state = 'dismissed';\n        }\n      });\n      action.payload.forEach(function (membership) {\n        var group = state.groups.find(function (group) {\n          return group.id === membership.id;\n        });\n\n        if (group) {\n          group.state = 'verified';\n          group.joined = membership.timestamp;\n        } else {\n          state.groups.push({\n            id: membership.id,\n            state: 'verified',\n            joined: membership.timestamp,\n            members: [],\n            admins: []\n          });\n        }\n      });\n    },\n    joinGroup: function joinGroup(state, action) {\n      var newGroup = action.payload;\n      var existingGroup = state.groups.find(function (group) {\n        return group.id === newGroup.id;\n      });\n\n      if (existingGroup) {\n        _extends(existingGroup, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    leaveGroup: function leaveGroup(state, action) {\n      var groupsToLeave = state.groups.filter(function (group) {\n        return group.id === action.payload.id;\n      });\n\n      for (var _iterator = _createForOfIteratorHelperLoose(groupsToLeave), _step; !(_step = _iterator()).done;) {\n        var group = _step.value;\n        group.state = 'dismissed';\n      }\n\n      if (groupsToLeave.length > 1) {\n        var groupsWithoutDuplicates = state.groups.filter(function (group) {\n          return group.id !== action.payload.id;\n        });\n        groupsWithoutDuplicates.push(groupsToLeave[0]);\n        state.groups = groupsWithoutDuplicates;\n      }\n    },\n    dismissFromGroup: function dismissFromGroup(state, action) {\n      var index = state.groups.findIndex(function (group) {\n        return group.id === action.payload.group.id;\n      });\n\n      if (index !== -1) {\n        state.groups[index].members = state.groups[index].members.filter(function (member) {\n          return member !== action.payload.member;\n        });\n      }\n    },\n    addAdmin: function addAdmin(state, action) {\n      var index = state.groups.findIndex(function (group) {\n        return group.id === action.payload.group.id;\n      });\n\n      if (index !== -1) {\n        var member = action.payload.member;\n        var _state$groups$index = state.groups[index],\n            members = _state$groups$index.members,\n            admins = _state$groups$index.admins;\n\n        if (members.includes(member) && !admins.includes(member)) {\n          state.groups[index].admins.push(member);\n        }\n      }\n    },\n    setInvites: function setInvites(state, action) {\n      state.invites = action.payload;\n    },\n    acceptInvite: function acceptInvite(state, action) {\n      var index = state.invites.findIndex(function (invite) {\n        return invite.id === action.payload;\n      });\n      if (index !== -1) state.invites[index].state = INVITE_ACCEPTED;\n    },\n    rejectInvite: function rejectInvite(state, action) {\n      var index = state.invites.findIndex(function (invite) {\n        return invite.id === action.payload;\n      });\n      if (index !== -1) state.invites[index].state = INVITE_REJECTED;\n    },\n    setGroupSearch: function setGroupSearch(state, action) {\n      state.searchParam = action.payload;\n    },\n    setGroupSearchOpen: function setGroupSearchOpen(state, action) {\n      state.searchOpen = action.payload;\n    }\n  },\n  extraReducers: _defineProperty({}, RESET_STORE, function () {\n    return initialState;\n  })\n});\nexport var allGroupsSelector = function allGroupsSelector(state) {\n  return state.groups.groups;\n};\nexport var activeGroupsSelector = function activeGroupsSelector(state) {\n  return state.groups.groups.filter(function (group) {\n    return group.state === 'initiated' || group.state === 'verified';\n  });\n};\nexport var searchParamSelector = function searchParamSelector(state) {\n  return state.groups.searchParam;\n};\nexport var filteredGroupsSelector = createSelector(activeGroupsSelector, searchParamSelector, function (allGroups, searchParam) {\n  var filteredGroups;\n\n  if (searchParam !== '') {\n    var searchString = toSearchString(searchParam);\n    filteredGroups = allGroups.filter(function (group) {\n      if (toSearchString(getGroupName(group)).includes(searchString)) {\n        return true;\n      } else {\n        var allMemberNames = ids2connections(knownMemberIDs(group)).map(function (member) {\n          return toSearchString(member.name);\n        });\n\n        for (var _iterator2 = _createForOfIteratorHelperLoose(allMemberNames), _step2; !(_step2 = _iterator2()).done;) {\n          var name = _step2.value;\n\n          if (name.includes(searchString)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    });\n  } else {\n    filteredGroups = allGroups;\n  }\n\n  return filteredGroups.sort(compareCreatedDesc);\n});\nvar _groupsSlice$actions = groupsSlice.actions,\n    createGroup = _groupsSlice$actions.createGroup,\n    updateGroup = _groupsSlice$actions.updateGroup,\n    upsertGroup = _groupsSlice$actions.upsertGroup,\n    deleteGroup = _groupsSlice$actions.deleteGroup,\n    setGroups = _groupsSlice$actions.setGroups,\n    updateMemberships = _groupsSlice$actions.updateMemberships,\n    joinGroup = _groupsSlice$actions.joinGroup,\n    leaveGroup = _groupsSlice$actions.leaveGroup,\n    dismissFromGroup = _groupsSlice$actions.dismissFromGroup,\n    addAdmin = _groupsSlice$actions.addAdmin,\n    setInvites = _groupsSlice$actions.setInvites,\n    rejectInvite = _groupsSlice$actions.rejectInvite,\n    acceptInvite = _groupsSlice$actions.acceptInvite,\n    setGroupSearch = _groupsSlice$actions.setGroupSearch,\n    setGroupSearchOpen = _groupsSlice$actions.setGroupSearchOpen;\nexport { createGroup, updateGroup, upsertGroup, deleteGroup, setGroups, updateMemberships, joinGroup, leaveGroup, dismissFromGroup, addAdmin, setInvites, rejectInvite, acceptInvite, setGroupSearch, setGroupSearchOpen };\nexport default groupsSlice.reducer;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/reducer/groupsSlice.ts"],"names":["initialState","groups","invites","searchParam","searchOpen","groupsSlice","createSlice","name","reducers","createGroup","state","action","updateGroup","group","upsertGroup","deleteGroup","setGroups","updateMemberships","membership","id","joined","members","admins","joinGroup","newGroup","existingGroup","leaveGroup","groupsToLeave","groupsWithoutDuplicates","dismissFromGroup","index","member","addAdmin","setInvites","acceptInvite","invite","rejectInvite","setGroupSearch","setGroupSearchOpen","extraReducers","allGroupsSelector","activeGroupsSelector","searchParamSelector","filteredGroupsSelector","createSelector","searchString","toSearchString","filteredGroups","allGroups","getGroupName","allMemberNames","ids2connections","knownMemberIDs"],"mappings":"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","sourcesContent":["import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RESET_STORE } from '@/actions/resetStore';\nimport { INVITE_ACCEPTED, INVITE_REJECTED } from '@/utils/constants';\nimport { RootState } from '@/store';\nimport { toSearchString } from '@/utils/strings';\nimport { getGroupName, ids2connections, knownMemberIDs } from '@/utils/groups';\nimport { compareCreatedDesc } from '@/components/Groups/models/sortingUtility';\n\n/* ******** INITIAL STATE ************** */\n\nconst initialState: GroupsState = {\n  groups: [],\n  invites: [],\n  searchParam: '',\n  searchOpen: false,\n};\n\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  reducers: {\n    createGroup(state, action: PayloadAction<Group>) {\n      state.groups.push(action.payload);\n    },\n    updateGroup(state, action: PayloadAction<GroupInfo>) {\n      const group = state.groups.find(\n        (group) => group.id === action.payload.id,\n      );\n      Object.assign(group, action.payload);\n    },\n    upsertGroup(state, action: PayloadAction<GroupInfo>) {\n      const group = state.groups.find(\n        (group) => group.id === action.payload.id,\n      );\n      if (group) {\n        Object.assign(group, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    deleteGroup(state, action: PayloadAction<Group>) {\n      state.groups = state.groups.filter(\n        (group) => group.id !== action.payload.id,\n      );\n    },\n    setGroups(state, action: PayloadAction<Group[]>) {\n      state.groups = action.payload;\n    },\n    updateMemberships(state, action: PayloadAction<MembershipInfo[]>) {\n      state.groups.forEach((group) => {\n        const membership = action.payload.find(\n          (membership) => membership.id === group.id,\n        );\n        if (!membership && group.state === 'verified') {\n          group.state = 'dismissed';\n        }\n      });\n      action.payload.forEach((membership) => {\n        const group = state.groups.find((group) => group.id === membership.id);\n        if (group) {\n          group.state = 'verified';\n          group.joined = membership.timestamp;\n        } else {\n          state.groups.push({\n            id: membership.id,\n            state: 'verified',\n            joined: membership.timestamp,\n            members: [],\n            admins: [],\n          });\n        }\n      });\n    },\n    joinGroup(state, action: PayloadAction<Group>) {\n      const newGroup = action.payload;\n      const existingGroup = state.groups.find(\n        (group) => group.id === newGroup.id,\n      );\n      if (existingGroup) {\n        // replace existing group with new group\n        Object.assign(existingGroup, action.payload);\n      } else {\n        state.groups.push(action.payload);\n      }\n    },\n    leaveGroup(state, action: PayloadAction<Group>) {\n      // get group to leave (and all potential duplicates, see below)\n      const groupsToLeave = state.groups.filter(\n        (group) => group.id === action.payload.id,\n      );\n      for (const group of groupsToLeave) {\n        group.state = 'dismissed';\n      }\n      if (groupsToLeave.length > 1) {\n        // There was a bug that could result in users having the same group multiple times in state.\n        // To clean this up: When leaving a group we look for duplicates and only keep the first matching group in\n        // state \"dismissed\". The duplicates will be completely removed from state.\n        const groupsWithoutDuplicates = state.groups.filter(\n          (group) => group.id !== action.payload.id,\n        );\n        // only keep first of the duplicates\n        groupsWithoutDuplicates.push(groupsToLeave[0]);\n        state.groups = groupsWithoutDuplicates;\n      }\n    },\n    dismissFromGroup(\n      state,\n      action: PayloadAction<{ member: string; group: Group }>,\n    ) {\n      const index = state.groups.findIndex(\n        (group) => group.id === action.payload.group.id,\n      );\n      if (index !== -1) {\n        state.groups[index].members = state.groups[index].members.filter(\n          (member) => member !== action.payload.member,\n        );\n      }\n    },\n    addAdmin(state, action: PayloadAction<{ member: string; group: Group }>) {\n      const index = state.groups.findIndex(\n        (group) => group.id === action.payload.group.id,\n      );\n      if (index !== -1) {\n        const { member } = action.payload;\n        const { members, admins } = state.groups[index];\n\n        if (members.includes(member) && !admins.includes(member)) {\n          state.groups[index].admins.push(member);\n        }\n      }\n    },\n    setInvites(state, action: PayloadAction<Invite[]>) {\n      state.invites = action.payload;\n    },\n    acceptInvite(state, action: PayloadAction<string>) {\n      const index = state.invites.findIndex(\n        (invite) => invite.id === action.payload,\n      );\n      if (index !== -1) state.invites[index].state = INVITE_ACCEPTED;\n    },\n    rejectInvite(state, action: PayloadAction<string>) {\n      const index = state.invites.findIndex(\n        (invite) => invite.id === action.payload,\n      );\n      if (index !== -1) state.invites[index].state = INVITE_REJECTED;\n    },\n    setGroupSearch(state, action: PayloadAction<string>) {\n      state.searchParam = action.payload;\n    },\n    setGroupSearchOpen(state, action: PayloadAction<boolean>) {\n      state.searchOpen = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\nexport const allGroupsSelector = (state: RootState) => state.groups.groups;\n\nexport const activeGroupsSelector = (state: RootState) =>\n  state.groups.groups.filter(\n    (group) => group.state === 'initiated' || group.state === 'verified',\n  );\n\nexport const searchParamSelector = (state: RootState) =>\n  state.groups.searchParam;\n\nexport const filteredGroupsSelector = createSelector(\n  activeGroupsSelector,\n  searchParamSelector,\n  (allGroups, searchParam) => {\n    let filteredGroups: Array<Group>;\n    if (searchParam !== '') {\n      const searchString = toSearchString(searchParam);\n      filteredGroups = allGroups.filter((group) => {\n        if (toSearchString(getGroupName(group)).includes(searchString)) {\n          // direct group name match\n          return true;\n        } else {\n          // check group members\n          const allMemberNames = ids2connections(knownMemberIDs(group)).map(\n            (member) => toSearchString(member.name),\n          );\n          for (const name of allMemberNames) {\n            if (name.includes(searchString)) {\n              // stop looking if a match is found\n              return true;\n            }\n          }\n          return false;\n        }\n      });\n    } else {\n      filteredGroups = allGroups;\n    }\n    return filteredGroups.sort(compareCreatedDesc);\n  },\n);\n\nexport const {\n  createGroup,\n  updateGroup,\n  upsertGroup,\n  deleteGroup,\n  setGroups,\n  updateMemberships,\n  joinGroup,\n  leaveGroup,\n  dismissFromGroup,\n  addAdmin,\n  setInvites,\n  rejectInvite,\n  acceptInvite,\n  setGroupSearch,\n  setGroupSearchOpen,\n} = groupsSlice.actions;\n\n// Export reducer\nexport default groupsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}