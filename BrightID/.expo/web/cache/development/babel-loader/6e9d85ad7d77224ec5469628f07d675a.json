{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePhoneNumber = exports.isPhoneNumberValid = exports.extractDigits = void 0;\n\nvar _libphonenumberJs = require(\"libphonenumber-js\");\n\nvar isPhoneNumberValid = function isPhoneNumberValid(phoneNumberString) {\n  try {\n    var phoneNumber = (0, _libphonenumberJs.parsePhoneNumber)(phoneNumberString);\n\n    if (phoneNumber) {\n      return phoneNumber.isValid();\n    }\n  } catch (_unused) {}\n\n  return false;\n};\n\nexports.isPhoneNumberValid = isPhoneNumberValid;\n\nvar parsePhoneNumber = function parsePhoneNumber(phoneNumberString) {\n  try {\n    var phoneNumber = (0, _libphonenumberJs.parsePhoneNumber)(phoneNumberString);\n\n    if (phoneNumber && phoneNumber.isValid()) {\n      return {\n        country: phoneNumber.country,\n        number: phoneNumber.nationalNumber\n      };\n    }\n  } catch (_unused2) {}\n\n  return {\n    country: 'US',\n    number: ''\n  };\n};\n\nexports.parsePhoneNumber = parsePhoneNumber;\n\nvar extractDigits = function extractDigits(phoneNumber) {\n  return parseInt(phoneNumber.match(/\\d/g).join(''), 10).toString();\n};\n\nexports.extractDigits = extractDigits;","map":{"version":3,"names":["isPhoneNumberValid","phoneNumberString","phoneNumber","parsePhoneNumberLib","isValid","parsePhoneNumber","country","number","nationalNumber","extractDigits","parseInt","match","join","toString"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/phoneUtils.ts"],"sourcesContent":["import { parsePhoneNumber as parsePhoneNumberLib } from 'libphonenumber-js';\n\nconst isPhoneNumberValid = (phoneNumberString: string) => {\n  try {\n    const phoneNumber = parsePhoneNumberLib(phoneNumberString);\n    if (phoneNumber) {\n      return phoneNumber.isValid();\n    }\n  } catch {}\n  return false;\n};\n\nconst parsePhoneNumber = (phoneNumberString: string) => {\n  try {\n    const phoneNumber = parsePhoneNumberLib(phoneNumberString);\n    if (phoneNumber && phoneNumber.isValid()) {\n      return {\n        country: phoneNumber.country,\n        number: phoneNumber.nationalNumber,\n      } as PhoneNumberObject;\n    }\n  } catch {}\n  return {\n    country: 'US',\n    number: '',\n  } as PhoneNumberObject;\n};\n\nconst extractDigits = (phoneNumber: string) =>\n  parseInt(phoneNumber.match(/\\d/g).join(''), 10).toString();\n\nexport { isPhoneNumberValid, parsePhoneNumber, extractDigits };\n"],"mappings":";;;;;AAAA;;AAEA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,iBAAD,EAA+B;EACxD,IAAI;IACF,IAAMC,WAAW,GAAG,IAAAC,kCAAA,EAAoBF,iBAApB,CAApB;;IACA,IAAIC,WAAJ,EAAiB;MACf,OAAOA,WAAW,CAACE,OAAZ,EAAP;IACD;EACF,CALD,CAKE,gBAAM,CAAE;;EACV,OAAO,KAAP;AACD,CARD;;;;AAUA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,iBAAD,EAA+B;EACtD,IAAI;IACF,IAAMC,WAAW,GAAG,IAAAC,kCAAA,EAAoBF,iBAApB,CAApB;;IACA,IAAIC,WAAW,IAAIA,WAAW,CAACE,OAAZ,EAAnB,EAA0C;MACxC,OAAO;QACLE,OAAO,EAAEJ,WAAW,CAACI,OADhB;QAELC,MAAM,EAAEL,WAAW,CAACM;MAFf,CAAP;IAID;EACF,CARD,CAQE,iBAAM,CAAE;;EACV,OAAO;IACLF,OAAO,EAAE,IADJ;IAELC,MAAM,EAAE;EAFH,CAAP;AAID,CAdD;;;;AAgBA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACP,WAAD;EAAA,OACpBQ,QAAQ,CAACR,WAAW,CAACS,KAAZ,CAAkB,KAAlB,EAAyBC,IAAzB,CAA8B,EAA9B,CAAD,EAAoC,EAApC,CAAR,CAAgDC,QAAhD,EADoB;AAAA,CAAtB"},"metadata":{},"sourceType":"script"}