{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uploadCompletedByOtherSide = exports.updateNamePhoto = exports.setUploadCompletedBy = exports.setSig = exports.setRecoveryId = exports.setRecoveryError = exports.setRecoveryChannel = exports.setRecoveryAesKey = exports.resetRecoverySigs = exports.resetRecoveryData = exports.resetChannelExpiration = exports.initialState = exports.init = exports.increaseRecoveredGroups = exports.increaseRecoveredConnections = exports.increaseRecoveredBlindSigs = exports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _immer = require(\"immer\");\n\nvar _encoding = require(\"../../../utils/encoding\");\n\nvar _RecoveryError = require(\"./RecoveryError\");\n\nvar _constants = require(\"../../../utils/constants\");\n\nvar _actions = require(\"../../../actions\");\n\nvar initialState = {\n  publicKey: '',\n  secretKey: new Uint8Array(),\n  aesKey: '',\n  errorMessage: '',\n  errorType: _RecoveryError.RecoveryErrorType.NONE,\n  id: '',\n  name: '',\n  photo: {\n    filename: ''\n  },\n  timestamp: 0,\n  sigs: {},\n  uploadCompletedBy: {},\n  qrcode: '',\n  recoveredConnections: 0,\n  recoveredGroups: 0,\n  recoveredBlindSigs: 0,\n  channel: {\n    channelId: '',\n    url: null,\n    expires: 0\n  }\n};\nexports.initialState = initialState;\nvar recoveryData = (0, _toolkit.createSlice)({\n  name: 'recoveryData',\n  initialState: initialState,\n  reducers: {\n    init: function init(state, action) {\n      var _action$payload = action.payload,\n          publicKey = _action$payload.publicKey,\n          secretKey = _action$payload.secretKey,\n          aesKey = _action$payload.aesKey;\n      state.publicKey = (0, _encoding.uInt8ArrayToB64)(publicKey != null ? publicKey : new Uint8Array());\n      state.secretKey = secretKey;\n      state.aesKey = aesKey;\n      state.timestamp = Date.now();\n      state.errorMessage = '';\n      state.errorType = _RecoveryError.RecoveryErrorType.NONE;\n      state.id = '';\n      state.name = '';\n      state.photo = {\n        filename: ''\n      };\n      state.recoveredConnections = 0;\n      state.recoveredGroups = 0;\n      state.recoveredBlindSigs = 0;\n      state.sigs = {};\n      state.uploadCompletedBy = {};\n    },\n    setRecoveryAesKey: function setRecoveryAesKey(state, action) {\n      state.aesKey = action.payload;\n    },\n    setRecoveryChannel: function setRecoveryChannel(state, action) {\n      var _action$payload2 = action.payload,\n          channelId = _action$payload2.channelId,\n          url = _action$payload2.url;\n      state.channel.channelId = channelId;\n      state.channel.url = url;\n      state.channel.expires = Date.now() + _constants.RECOVERY_CHANNEL_TTL;\n    },\n    resetChannelExpiration: function resetChannelExpiration(state) {\n      state.channel.expires = Date.now() + _constants.RECOVERY_CHANNEL_TTL;\n    },\n    setSig: function setSig(state, action) {\n      var _action$payload3 = action.payload,\n          signer = _action$payload3.signer,\n          sig = _action$payload3.sig;\n\n      var _original = (0, _immer.original)(state),\n          id = _original.id;\n\n      if (sig.id !== id) {\n        state.sigs = (0, _defineProperty2.default)({}, signer, sig);\n        state.id = sig.id;\n        state.name = '';\n        state.photo = {\n          filename: ''\n        };\n      } else {\n        state.sigs[signer] = sig;\n      }\n    },\n    updateNamePhoto: function updateNamePhoto(state, action) {\n      var _action$payload4 = action.payload,\n          name = _action$payload4.name,\n          photo = _action$payload4.photo;\n      state.name = name;\n      state.photo = photo;\n    },\n    resetRecoverySigs: function resetRecoverySigs(state) {\n      state.sigs = {};\n    },\n    resetRecoveryData: function resetRecoveryData() {\n      return initialState;\n    },\n    setRecoveryError: function setRecoveryError(state, _ref) {\n      var payload = _ref.payload;\n      state.errorType = payload.errorType;\n      state.errorMessage = payload.errorMessage;\n    },\n    increaseRecoveredConnections: function increaseRecoveredConnections(state, action) {\n      state.recoveredConnections += action.payload;\n    },\n    increaseRecoveredGroups: function increaseRecoveredGroups(state, action) {\n      state.recoveredGroups += action.payload;\n    },\n    increaseRecoveredBlindSigs: function increaseRecoveredBlindSigs(state, action) {\n      state.recoveredBlindSigs += action.payload;\n    },\n    setUploadCompletedBy: function setUploadCompletedBy(state, action) {\n      state.uploadCompletedBy[action.payload] = true;\n    },\n    setRecoveryId: function setRecoveryId(state, action) {\n      state.id = action.payload;\n    }\n  },\n  extraReducers: (0, _defineProperty2.default)({}, _actions.RESET_STORE, function () {\n    return initialState;\n  })\n});\n\nvar uploadCompletedByOtherSide = function uploadCompletedByOtherSide(state) {\n  return Object.keys(state.recoveryData.uploadCompletedBy).length > 0;\n};\n\nexports.uploadCompletedByOtherSide = uploadCompletedByOtherSide;\nvar _recoveryData$actions = recoveryData.actions,\n    init = _recoveryData$actions.init,\n    increaseRecoveredConnections = _recoveryData$actions.increaseRecoveredConnections,\n    increaseRecoveredGroups = _recoveryData$actions.increaseRecoveredGroups,\n    increaseRecoveredBlindSigs = _recoveryData$actions.increaseRecoveredBlindSigs,\n    setRecoveryAesKey = _recoveryData$actions.setRecoveryAesKey,\n    setRecoveryChannel = _recoveryData$actions.setRecoveryChannel,\n    setSig = _recoveryData$actions.setSig,\n    updateNamePhoto = _recoveryData$actions.updateNamePhoto,\n    resetChannelExpiration = _recoveryData$actions.resetChannelExpiration,\n    resetRecoverySigs = _recoveryData$actions.resetRecoverySigs,\n    resetRecoveryData = _recoveryData$actions.resetRecoveryData,\n    setRecoveryError = _recoveryData$actions.setRecoveryError,\n    setUploadCompletedBy = _recoveryData$actions.setUploadCompletedBy,\n    setRecoveryId = _recoveryData$actions.setRecoveryId;\nexports.setRecoveryId = setRecoveryId;\nexports.setUploadCompletedBy = setUploadCompletedBy;\nexports.setRecoveryError = setRecoveryError;\nexports.resetRecoveryData = resetRecoveryData;\nexports.resetRecoverySigs = resetRecoverySigs;\nexports.resetChannelExpiration = resetChannelExpiration;\nexports.updateNamePhoto = updateNamePhoto;\nexports.setSig = setSig;\nexports.setRecoveryChannel = setRecoveryChannel;\nexports.setRecoveryAesKey = setRecoveryAesKey;\nexports.increaseRecoveredBlindSigs = increaseRecoveredBlindSigs;\nexports.increaseRecoveredGroups = increaseRecoveredGroups;\nexports.increaseRecoveredConnections = increaseRecoveredConnections;\nexports.init = init;\nvar _default = recoveryData.reducer;\nexports.default = _default;","map":{"version":3,"names":["initialState","publicKey","secretKey","Uint8Array","aesKey","errorMessage","errorType","RecoveryErrorType","NONE","id","name","photo","filename","timestamp","sigs","uploadCompletedBy","qrcode","recoveredConnections","recoveredGroups","recoveredBlindSigs","channel","channelId","url","expires","recoveryData","createSlice","reducers","init","state","action","payload","uInt8ArrayToB64","Date","now","setRecoveryAesKey","setRecoveryChannel","RECOVERY_CHANNEL_TTL","resetChannelExpiration","setSig","signer","sig","original","updateNamePhoto","resetRecoverySigs","resetRecoveryData","setRecoveryError","increaseRecoveredConnections","increaseRecoveredGroups","increaseRecoveredBlindSigs","setUploadCompletedBy","setRecoveryId","extraReducers","RESET_STORE","uploadCompletedByOtherSide","Object","keys","length","actions","reducer"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/RecoveryFlow/recoveryDataSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { original } from 'immer';\nimport { uInt8ArrayToB64 } from '@/utils/encoding';\nimport { RecoveryErrorType } from '@/components/Onboarding/RecoveryFlow/RecoveryError';\nimport { RECOVERY_CHANNEL_TTL } from '@/utils/constants';\nimport { RESET_STORE } from '@/actions';\n\nexport const initialState: RecoveryData = {\n  publicKey: '',\n  secretKey: new Uint8Array(),\n  aesKey: '',\n  errorMessage: '',\n  errorType: RecoveryErrorType.NONE,\n  id: '',\n  name: '',\n  photo: {\n    filename: '',\n  },\n  timestamp: 0,\n  sigs: {},\n  uploadCompletedBy: {},\n  qrcode: '',\n  recoveredConnections: 0,\n  recoveredGroups: 0,\n  recoveredBlindSigs: 0,\n  channel: {\n    channelId: '',\n    url: null,\n    expires: 0,\n  },\n};\n\nconst recoveryData = createSlice({\n  name: 'recoveryData',\n  initialState,\n  reducers: {\n    init(\n      state,\n      action: PayloadAction<{\n        publicKey?: Uint8Array;\n        secretKey?: Uint8Array;\n        aesKey: string;\n      }>,\n    ) {\n      const { publicKey, secretKey, aesKey } = action.payload;\n      state.publicKey = uInt8ArrayToB64(publicKey ?? new Uint8Array());\n      state.secretKey = secretKey;\n      state.aesKey = aesKey;\n      state.timestamp = Date.now();\n      state.errorMessage = '';\n      state.errorType = RecoveryErrorType.NONE;\n      state.id = '';\n      state.name = '';\n      state.photo = {\n        filename: '',\n      };\n      state.recoveredConnections = 0;\n      state.recoveredGroups = 0;\n      state.recoveredBlindSigs = 0;\n      state.sigs = {};\n      state.uploadCompletedBy = {};\n    },\n    setRecoveryAesKey(state, action: PayloadAction<string>) {\n      state.aesKey = action.payload;\n    },\n    setRecoveryChannel(\n      state,\n      action: PayloadAction<{ channelId: string; url: URL }>,\n    ) {\n      const { channelId, url } = action.payload;\n      state.channel.channelId = channelId;\n      state.channel.url = url;\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    resetChannelExpiration(state) {\n      state.channel.expires = Date.now() + RECOVERY_CHANNEL_TTL;\n    },\n    setSig(state, action: PayloadAction<{ sig: Signature; signer: string }>) {\n      const { signer, sig } = action.payload;\n      // access previous values from the reducer\n      const { id } = original(state);\n\n      if (sig.id !== id) {\n        state.sigs = { [signer]: sig };\n        state.id = sig.id;\n        // clear name and photo in case id changes\n        state.name = '';\n        state.photo = {\n          filename: '',\n        };\n      } else {\n        state.sigs[signer] = sig;\n      }\n    },\n    updateNamePhoto(\n      state,\n      action: PayloadAction<{ name: string; photo: Photo }>,\n    ) {\n      const { name, photo } = action.payload;\n      state.name = name;\n      state.photo = photo;\n    },\n    resetRecoverySigs(state) {\n      state.sigs = {};\n    },\n    resetRecoveryData() {\n      return initialState;\n    },\n    setRecoveryError(\n      state,\n      {\n        payload,\n      }: PayloadAction<{\n        errorType: RecoveryErrorType;\n        errorMessage?: string;\n      }>,\n    ) {\n      state.errorType = payload.errorType;\n      state.errorMessage = payload.errorMessage;\n    },\n    increaseRecoveredConnections(state, action: PayloadAction<number>) {\n      state.recoveredConnections += action.payload;\n    },\n    increaseRecoveredGroups(state, action: PayloadAction<number>) {\n      state.recoveredGroups += action.payload;\n    },\n    increaseRecoveredBlindSigs(state, action: PayloadAction<number>) {\n      state.recoveredBlindSigs += action.payload;\n    },\n    // used for import/sync\n    setUploadCompletedBy(state, action: PayloadAction<string>) {\n      state.uploadCompletedBy[action.payload] = true;\n    },\n    // used for import\n    setRecoveryId(state, action: PayloadAction<string>) {\n      state.id = action.payload;\n    },\n  },\n  extraReducers: {\n    [RESET_STORE]: () => {\n      return initialState;\n    },\n  },\n});\n\nexport const uploadCompletedByOtherSide = (state) => {\n  return Object.keys(state.recoveryData.uploadCompletedBy).length > 0;\n};\n\n// Export channel actions\nexport const {\n  init,\n  increaseRecoveredConnections,\n  increaseRecoveredGroups,\n  increaseRecoveredBlindSigs,\n  setRecoveryAesKey,\n  setRecoveryChannel,\n  setSig,\n  updateNamePhoto,\n  resetChannelExpiration,\n  resetRecoverySigs,\n  resetRecoveryData,\n  setRecoveryError,\n  setUploadCompletedBy,\n  setRecoveryId,\n} = recoveryData.actions;\n\n// Export reducer\nexport default recoveryData.reducer;\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,YAA0B,GAAG;EACxCC,SAAS,EAAE,EAD6B;EAExCC,SAAS,EAAE,IAAIC,UAAJ,EAF6B;EAGxCC,MAAM,EAAE,EAHgC;EAIxCC,YAAY,EAAE,EAJ0B;EAKxCC,SAAS,EAAEC,gCAAA,CAAkBC,IALW;EAMxCC,EAAE,EAAE,EANoC;EAOxCC,IAAI,EAAE,EAPkC;EAQxCC,KAAK,EAAE;IACLC,QAAQ,EAAE;EADL,CARiC;EAWxCC,SAAS,EAAE,CAX6B;EAYxCC,IAAI,EAAE,EAZkC;EAaxCC,iBAAiB,EAAE,EAbqB;EAcxCC,MAAM,EAAE,EAdgC;EAexCC,oBAAoB,EAAE,CAfkB;EAgBxCC,eAAe,EAAE,CAhBuB;EAiBxCC,kBAAkB,EAAE,CAjBoB;EAkBxCC,OAAO,EAAE;IACPC,SAAS,EAAE,EADJ;IAEPC,GAAG,EAAE,IAFE;IAGPC,OAAO,EAAE;EAHF;AAlB+B,CAAnC;;AAyBP,IAAMC,YAAY,GAAG,IAAAC,oBAAA,EAAY;EAC/Bf,IAAI,EAAE,cADyB;EAE/BV,YAAY,EAAZA,YAF+B;EAG/B0B,QAAQ,EAAE;IACRC,IADQ,gBAENC,KAFM,EAGNC,MAHM,EAQN;MACA,sBAAyCA,MAAM,CAACC,OAAhD;MAAA,IAAQ7B,SAAR,mBAAQA,SAAR;MAAA,IAAmBC,SAAnB,mBAAmBA,SAAnB;MAAA,IAA8BE,MAA9B,mBAA8BA,MAA9B;MACAwB,KAAK,CAAC3B,SAAN,GAAkB,IAAA8B,yBAAA,EAAgB9B,SAAhB,WAAgBA,SAAhB,GAA6B,IAAIE,UAAJ,EAA7B,CAAlB;MACAyB,KAAK,CAAC1B,SAAN,GAAkBA,SAAlB;MACA0B,KAAK,CAACxB,MAAN,GAAeA,MAAf;MACAwB,KAAK,CAACf,SAAN,GAAkBmB,IAAI,CAACC,GAAL,EAAlB;MACAL,KAAK,CAACvB,YAAN,GAAqB,EAArB;MACAuB,KAAK,CAACtB,SAAN,GAAkBC,gCAAA,CAAkBC,IAApC;MACAoB,KAAK,CAACnB,EAAN,GAAW,EAAX;MACAmB,KAAK,CAAClB,IAAN,GAAa,EAAb;MACAkB,KAAK,CAACjB,KAAN,GAAc;QACZC,QAAQ,EAAE;MADE,CAAd;MAGAgB,KAAK,CAACX,oBAAN,GAA6B,CAA7B;MACAW,KAAK,CAACV,eAAN,GAAwB,CAAxB;MACAU,KAAK,CAACT,kBAAN,GAA2B,CAA3B;MACAS,KAAK,CAACd,IAAN,GAAa,EAAb;MACAc,KAAK,CAACb,iBAAN,GAA0B,EAA1B;IACD,CA1BO;IA2BRmB,iBA3BQ,6BA2BUN,KA3BV,EA2BiBC,MA3BjB,EA2BgD;MACtDD,KAAK,CAACxB,MAAN,GAAeyB,MAAM,CAACC,OAAtB;IACD,CA7BO;IA8BRK,kBA9BQ,8BA+BNP,KA/BM,EAgCNC,MAhCM,EAiCN;MACA,uBAA2BA,MAAM,CAACC,OAAlC;MAAA,IAAQT,SAAR,oBAAQA,SAAR;MAAA,IAAmBC,GAAnB,oBAAmBA,GAAnB;MACAM,KAAK,CAACR,OAAN,CAAcC,SAAd,GAA0BA,SAA1B;MACAO,KAAK,CAACR,OAAN,CAAcE,GAAd,GAAoBA,GAApB;MACAM,KAAK,CAACR,OAAN,CAAcG,OAAd,GAAwBS,IAAI,CAACC,GAAL,KAAaG,+BAArC;IACD,CAtCO;IAuCRC,sBAvCQ,kCAuCeT,KAvCf,EAuCsB;MAC5BA,KAAK,CAACR,OAAN,CAAcG,OAAd,GAAwBS,IAAI,CAACC,GAAL,KAAaG,+BAArC;IACD,CAzCO;IA0CRE,MA1CQ,kBA0CDV,KA1CC,EA0CMC,MA1CN,EA0CiE;MACvE,uBAAwBA,MAAM,CAACC,OAA/B;MAAA,IAAQS,MAAR,oBAAQA,MAAR;MAAA,IAAgBC,GAAhB,oBAAgBA,GAAhB;;MAEA,gBAAe,IAAAC,eAAA,EAASb,KAAT,CAAf;MAAA,IAAQnB,EAAR,aAAQA,EAAR;;MAEA,IAAI+B,GAAG,CAAC/B,EAAJ,KAAWA,EAAf,EAAmB;QACjBmB,KAAK,CAACd,IAAN,qCAAgByB,MAAhB,EAAyBC,GAAzB;QACAZ,KAAK,CAACnB,EAAN,GAAW+B,GAAG,CAAC/B,EAAf;QAEAmB,KAAK,CAAClB,IAAN,GAAa,EAAb;QACAkB,KAAK,CAACjB,KAAN,GAAc;UACZC,QAAQ,EAAE;QADE,CAAd;MAGD,CARD,MAQO;QACLgB,KAAK,CAACd,IAAN,CAAWyB,MAAX,IAAqBC,GAArB;MACD;IACF,CA1DO;IA2DRE,eA3DQ,2BA4DNd,KA5DM,EA6DNC,MA7DM,EA8DN;MACA,uBAAwBA,MAAM,CAACC,OAA/B;MAAA,IAAQpB,IAAR,oBAAQA,IAAR;MAAA,IAAcC,KAAd,oBAAcA,KAAd;MACAiB,KAAK,CAAClB,IAAN,GAAaA,IAAb;MACAkB,KAAK,CAACjB,KAAN,GAAcA,KAAd;IACD,CAlEO;IAmERgC,iBAnEQ,6BAmEUf,KAnEV,EAmEiB;MACvBA,KAAK,CAACd,IAAN,GAAa,EAAb;IACD,CArEO;IAsER8B,iBAtEQ,+BAsEY;MAClB,OAAO5C,YAAP;IACD,CAxEO;IAyER6C,gBAzEQ,4BA0ENjB,KA1EM,QAiFN;MAAA,IALEE,OAKF,QALEA,OAKF;MACAF,KAAK,CAACtB,SAAN,GAAkBwB,OAAO,CAACxB,SAA1B;MACAsB,KAAK,CAACvB,YAAN,GAAqByB,OAAO,CAACzB,YAA7B;IACD,CApFO;IAqFRyC,4BArFQ,wCAqFqBlB,KArFrB,EAqF4BC,MArF5B,EAqF2D;MACjED,KAAK,CAACX,oBAAN,IAA8BY,MAAM,CAACC,OAArC;IACD,CAvFO;IAwFRiB,uBAxFQ,mCAwFgBnB,KAxFhB,EAwFuBC,MAxFvB,EAwFsD;MAC5DD,KAAK,CAACV,eAAN,IAAyBW,MAAM,CAACC,OAAhC;IACD,CA1FO;IA2FRkB,0BA3FQ,sCA2FmBpB,KA3FnB,EA2F0BC,MA3F1B,EA2FyD;MAC/DD,KAAK,CAACT,kBAAN,IAA4BU,MAAM,CAACC,OAAnC;IACD,CA7FO;IA+FRmB,oBA/FQ,gCA+FarB,KA/Fb,EA+FoBC,MA/FpB,EA+FmD;MACzDD,KAAK,CAACb,iBAAN,CAAwBc,MAAM,CAACC,OAA/B,IAA0C,IAA1C;IACD,CAjGO;IAmGRoB,aAnGQ,yBAmGMtB,KAnGN,EAmGaC,MAnGb,EAmG4C;MAClDD,KAAK,CAACnB,EAAN,GAAWoB,MAAM,CAACC,OAAlB;IACD;EArGO,CAHqB;EA0G/BqB,aAAa,oCACVC,oBADU,EACI,YAAM;IACnB,OAAOpD,YAAP;EACD,CAHU;AA1GkB,CAAZ,CAArB;;AAiHO,IAAMqD,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACzB,KAAD,EAAW;EACnD,OAAO0B,MAAM,CAACC,IAAP,CAAY3B,KAAK,CAACJ,YAAN,CAAmBT,iBAA/B,EAAkDyC,MAAlD,GAA2D,CAAlE;AACD,CAFM;;;AAKA,4BAeHhC,YAAY,CAACiC,OAfV;AAAA,IACL9B,IADK,yBACLA,IADK;AAAA,IAELmB,4BAFK,yBAELA,4BAFK;AAAA,IAGLC,uBAHK,yBAGLA,uBAHK;AAAA,IAILC,0BAJK,yBAILA,0BAJK;AAAA,IAKLd,iBALK,yBAKLA,iBALK;AAAA,IAMLC,kBANK,yBAMLA,kBANK;AAAA,IAOLG,MAPK,yBAOLA,MAPK;AAAA,IAQLI,eARK,yBAQLA,eARK;AAAA,IASLL,sBATK,yBASLA,sBATK;AAAA,IAULM,iBAVK,yBAULA,iBAVK;AAAA,IAWLC,iBAXK,yBAWLA,iBAXK;AAAA,IAYLC,gBAZK,yBAYLA,gBAZK;AAAA,IAaLI,oBAbK,yBAaLA,oBAbK;AAAA,IAcLC,aAdK,yBAcLA,aAdK;;;;;;;;;;;;;;;eAkBQ1B,YAAY,CAACkC,O"},"metadata":{},"sourceType":"script"}