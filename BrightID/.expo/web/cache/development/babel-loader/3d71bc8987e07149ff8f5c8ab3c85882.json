{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Material from \"@expo/vector-icons/MaterialIcons\";\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { useSelector, useDispatch } from \"../../../store\";\nimport { selectActiveDevices } from \"../../../reducer/devicesSlice\";\nimport { fontSize } from \"../../../theme/fonts\";\nimport { WHITE, ORANGE, BLUE, BLACK } from \"../../../theme/colors\";\nimport { DEVICE_LARGE } from \"../../../utils/deviceConstants\";\nimport { NodeApiContext } from \"../../NodeApiGate\";\nimport { removeDevice, setLastSyncTime } from \"../../../actions\";\nimport { qrCodeURL_types } from \"../../../utils/constants\";\nimport { pollImportChannel, clearImportChannel, getOtherSideDeviceInfo } from \"./thunks/channelThunks\";\nimport { uploadAllInfoAfter, uploadDeviceInfo } from \"./thunks/channelUploadThunks\";\nimport { resetRecoveryData, uploadCompletedByOtherSide } from \"../RecoveryFlow/recoveryDataSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var DevicesScreen = function DevicesScreen(_ref) {\n  var _route$params, _route$params3, _route$params5;\n\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var api = useContext(NodeApiContext);\n  var signingKey = useSelector(function (state) {\n    return state.keypair.publicKey;\n  });\n  var devices = useSelector(selectActiveDevices).sort(function (a, _b) {\n    return a.signingKey === signingKey ? -1 : 1;\n  });\n  var settings = useSelector(function (state) {\n    return state.settings;\n  });\n  var syncCompleted = useSelector(uploadCompletedByOtherSide);\n\n  var shortenSigningKey = function shortenSigningKey(s) {\n    return s.slice(0, 6) + \"...\" + s.slice(-6);\n  };\n\n  var isCurrentDevice = function isCurrentDevice(d) {\n    return d.signingKey === signingKey;\n  };\n\n  var getName = function getName(d) {\n    return isCurrentDevice(d) ? 'Current device' : d.name || 'Unknown name';\n  };\n\n  var _useState = useState(!!((_route$params = route.params) != null && _route$params.syncing)),\n      _useState2 = _slicedToArray(_useState, 2),\n      waiting = _useState2[0],\n      setWaiting = _useState2[1];\n\n  useEffect(function () {\n    var _route$params2;\n\n    var runEffect = function _callee() {\n      var _await$getOtherSideDe, isPrimaryDevice, lastSyncTime, after;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getOtherSideDeviceInfo());\n\n            case 2:\n              _await$getOtherSideDe = _context.sent;\n              isPrimaryDevice = _await$getOtherSideDe.isPrimaryDevice;\n              lastSyncTime = _await$getOtherSideDe.lastSyncTime;\n\n              if (!(isPrimaryDevice && settings.isPrimaryDevice)) {\n                _context.next = 11;\n                break;\n              }\n\n              setWaiting(false);\n              dispatch(resetRecoveryData());\n              return _context.abrupt(\"return\", Alert.alert(t('common.alert.error'), t('devices.alert.bothPrimary')));\n\n            case 11:\n              if (!(!isPrimaryDevice && !settings.isPrimaryDevice)) {\n                _context.next = 15;\n                break;\n              }\n\n              setWaiting(false);\n              dispatch(resetRecoveryData());\n              return _context.abrupt(\"return\", Alert.alert(t('common.alert.error'), t('devices.alert.noPrimary')));\n\n            case 15:\n              if (settings.isPrimaryDevice) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(uploadDeviceInfo());\n\n            case 18:\n              after = settings.isPrimaryDevice ? lastSyncTime : settings.lastSyncTime;\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(uploadAllInfoAfter(after));\n\n            case 21:\n              dispatch(pollImportChannel());\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var showConfirmDialog = function showConfirmDialog() {\n      return Alert.alert(t('common.alert.title.pleaseConfirm'), t('devices.alert.confirmSync'), [{\n        text: t('common.alert.yes'),\n        onPress: function onPress() {\n          runEffect();\n        }\n      }, {\n        text: t('common.alert.no'),\n        onPress: function onPress() {\n          navigation.navigate('Home');\n        }\n      }]);\n    };\n\n    if ((_route$params2 = route.params) != null && _route$params2.asScanner) {\n      showConfirmDialog();\n    }\n  }, [dispatch, navigation, (_route$params3 = route.params) == null ? void 0 : _route$params3.asScanner, settings.isPrimaryDevice, settings.lastSyncTime, t]);\n  useEffect(function () {\n    var _route$params4;\n\n    setWaiting(!!((_route$params4 = route.params) != null && _route$params4.syncing));\n  }, [(_route$params5 = route.params) == null ? void 0 : _route$params5.syncing]);\n  useFocusEffect(function () {\n    if (waiting && syncCompleted) {\n      Alert.alert(t('common.alert.info'), t('devices.text.syncCompleted'));\n      clearImportChannel();\n      setWaiting(false);\n\n      if (!settings.isPrimaryDevice) {\n        dispatch(setLastSyncTime(Date.now()));\n      }\n\n      dispatch(resetRecoveryData());\n    }\n  });\n\n  var sync = function sync() {\n    navigation.navigate('SyncCode', {\n      urlType: qrCodeURL_types.SYNC,\n      action: 'sync'\n    });\n  };\n\n  var remove = function remove(device) {\n    Alert.alert(t('common.alert.title.pleaseConfirm'), t('devices.alert.confirmRemove', {\n      name: getName(device)\n    }), [{\n      text: t('common.alert.yes'),\n      onPress: function onPress() {\n        api.removeSigningKey(device.signingKey).then(function () {\n          dispatch(removeDevice(device.signingKey));\n        });\n      }\n    }, {\n      text: t('common.alert.no')\n    }]);\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var device = _ref2.item,\n        index = _ref2.index;\n    return _jsxs(View, {\n      testID: \"device-\" + index,\n      style: styles.deviceContainer,\n      children: [_jsxs(View, {\n        testID: getName(device),\n        style: styles.deviceLabelContainer,\n        children: [_jsxs(View, {\n          style: styles.deviceNameContainer,\n          children: [_jsx(Text, {\n            style: styles.deviceNameText,\n            children: getName(device)\n          }), isCurrentDevice(device) && _jsxs(Text, {\n            style: styles.devicePrimaryText,\n            children: [\"\\xA0(\", settings.isPrimaryDevice ? 'Primary' : 'Secondary', \")\"]\n          })]\n        }), _jsx(View, {\n          style: styles.deviceSigningKeyContainer,\n          children: _jsx(Text, {\n            style: styles.deviceSigningKeyText,\n            children: shortenSigningKey(device.signingKey)\n          })\n        })]\n      }), !isCurrentDevice(device) && _jsx(View, {\n        style: styles.removeBtnContainer,\n        children: _jsx(TouchableOpacity, {\n          style: styles.removeBtn,\n          testID: \"RemoveDeviceBtn-\" + index,\n          onPress: function onPress() {\n            return remove(device);\n          },\n          children: _jsx(Material, {\n            name: \"delete\",\n            size: DEVICE_LARGE ? 22 : 20,\n            color: BLUE\n          })\n        })\n      })]\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      backgroundColor: WHITE,\n      animated: true\n    }), _jsx(View, {\n      style: styles.orangeTop\n    }), _jsx(View, {\n      style: styles.container,\n      testID: \"DevicesScreen\",\n      children: _jsxs(View, {\n        style: styles.devicesContainer,\n        children: [_jsx(Text, {\n          style: styles.description,\n          children: t('devices.text.listDescription')\n        }), _jsx(FlatList, {\n          data: devices,\n          renderItem: renderItem,\n          keyExtractor: function keyExtractor(item) {\n            return item.signingKey;\n          }\n        }), waiting ? _jsxs(View, {\n          style: styles.waitingContainer,\n          children: [_jsx(Text, {\n            style: styles.waitingMessage,\n            children: t('devices.text.waitSyncing')\n          }), _jsx(Spinner, {\n            isVisible: waiting,\n            size: DEVICE_LARGE ? 48 : 42,\n            type: \"Wave\",\n            color: BLUE\n          })]\n        }) : _jsx(TouchableOpacity, {\n          style: styles.syncBtn,\n          testID: \"SyncBtn\",\n          onPress: sync,\n          children: _jsxs(View, {\n            style: styles.syncBtnContainer,\n            children: [_jsx(Material, {\n              name: \"sync\",\n              size: DEVICE_LARGE ? 22 : 20,\n              color: WHITE\n            }), _jsx(Text, {\n              style: styles.syncText,\n              children: \"Sync Devices\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 2\n  },\n  devicesContainer: {\n    padding: 30\n  },\n  deviceContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    padding: 10\n  },\n  deviceLabelContainer: {\n    flexDirection: 'column',\n    flex: 10,\n    alignItems: 'flex-start'\n  },\n  deviceNameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  },\n  deviceSigningKeyContainer: {},\n  removeBtnContainer: {\n    flex: 1,\n    alignContent: 'center',\n    alignItems: 'center'\n  },\n  deviceNameText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  devicePrimaryText: {\n    fontFamily: 'Poppins-Medium',\n    fontWeight: 'bold',\n    fontSize: fontSize[16],\n    color: BLACK\n  },\n  deviceSigningKeyText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLUE\n  },\n  description: {\n    fontSize: fontSize[16],\n    padding: 10,\n    marginBottom: 20\n  },\n  syncBtn: {},\n  removeBtn: {},\n  syncBtnContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    alignSelf: 'stretch',\n    borderRadius: 10,\n    backgroundColor: BLUE,\n    padding: 10,\n    marginTop: 30\n  },\n  syncText: {\n    color: WHITE,\n    fontFamily: 'Poppins-Bold',\n    paddingLeft: 10,\n    fontSize: fontSize[14]\n  },\n  waitingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    paddingBottom: 20\n  },\n  waitingMessage: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    fontSize: fontSize[14],\n    color: BLUE\n  }\n});\nexport default DevicesScreen;","map":{"version":3,"names":["React","useState","useContext","useEffect","Material","Spinner","useTranslation","useNavigation","useFocusEffect","useSelector","useDispatch","selectActiveDevices","fontSize","WHITE","ORANGE","BLUE","BLACK","DEVICE_LARGE","NodeApiContext","removeDevice","setLastSyncTime","qrCodeURL_types","pollImportChannel","clearImportChannel","getOtherSideDeviceInfo","uploadAllInfoAfter","uploadDeviceInfo","resetRecoveryData","uploadCompletedByOtherSide","DevicesScreen","route","navigation","dispatch","t","api","signingKey","state","keypair","publicKey","devices","sort","a","_b","settings","syncCompleted","shortenSigningKey","s","slice","isCurrentDevice","d","getName","name","params","syncing","waiting","setWaiting","runEffect","isPrimaryDevice","lastSyncTime","Alert","alert","after","showConfirmDialog","text","onPress","navigate","asScanner","Date","now","sync","urlType","SYNC","action","remove","device","removeSigningKey","then","renderItem","item","index","styles","deviceContainer","deviceLabelContainer","deviceNameContainer","deviceNameText","devicePrimaryText","deviceSigningKeyContainer","deviceSigningKeyText","removeBtnContainer","removeBtn","orangeTop","container","devicesContainer","description","waitingContainer","waitingMessage","syncBtn","syncBtnContainer","syncText","StyleSheet","create","backgroundColor","height","width","zIndex","flex","borderTopLeftRadius","marginTop","overflow","padding","flexDirection","justifyContent","alignItems","alignContent","fontFamily","color","fontWeight","marginBottom","alignSelf","borderRadius","paddingLeft","paddingBottom","textAlign"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/ImportFlow/DevicesScreen.tsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  FlatList,\n  Alert,\n} from 'react-native';\nimport Material from 'react-native-vector-icons/MaterialIcons';\nimport Spinner from 'react-native-spinkit';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { useSelector, useDispatch } from '@/store';\nimport { selectActiveDevices } from '@/reducer/devicesSlice';\nimport { fontSize } from '@/theme/fonts';\nimport { WHITE, ORANGE, BLUE, BLACK } from '@/theme/colors';\nimport { DEVICE_LARGE } from '@/utils/deviceConstants';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { removeDevice, setLastSyncTime } from '@/actions';\nimport { qrCodeURL_types } from '@/utils/constants';\nimport {\n  pollImportChannel,\n  clearImportChannel,\n  getOtherSideDeviceInfo,\n} from './thunks/channelThunks';\nimport {\n  uploadAllInfoAfter,\n  uploadDeviceInfo,\n} from './thunks/channelUploadThunks';\nimport {\n  resetRecoveryData,\n  uploadCompletedByOtherSide,\n} from '../RecoveryFlow/recoveryDataSlice';\n\n/* Description */\n\n/* ======================================== */\n\n/**\n * Screen for listing devices\n */\n\n/* Devices Screen */\n\n/* ======================================== */\nexport const DevicesScreen = ({ route }) => {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n  const signingKey = useSelector((state) => state.keypair.publicKey);\n  const devices = useSelector(selectActiveDevices).sort((a, _b) =>\n    a.signingKey === signingKey ? -1 : 1,\n  );\n  const settings = useSelector((state) => state.settings);\n  const syncCompleted = useSelector(uploadCompletedByOtherSide);\n\n  const shortenSigningKey = (s) => `${s.slice(0, 6)}...${s.slice(-6)}`;\n  const isCurrentDevice = (d) => d.signingKey === signingKey;\n  const getName = (d) =>\n    isCurrentDevice(d) ? 'Current device' : d.name || 'Unknown name';\n  const [waiting, setWaiting] = useState(!!route.params?.syncing);\n\n  useEffect(() => {\n    const runEffect = async () => {\n      const { isPrimaryDevice, lastSyncTime } = await getOtherSideDeviceInfo();\n      if (isPrimaryDevice && settings.isPrimaryDevice) {\n        setWaiting(false);\n        dispatch(resetRecoveryData());\n        return Alert.alert(\n          t('common.alert.error'),\n          t('devices.alert.bothPrimary'),\n        );\n      } else if (!isPrimaryDevice && !settings.isPrimaryDevice) {\n        setWaiting(false);\n        dispatch(resetRecoveryData());\n        return Alert.alert(\n          t('common.alert.error'),\n          t('devices.alert.noPrimary'),\n        );\n      }\n      if (!settings.isPrimaryDevice) {\n        await uploadDeviceInfo();\n      }\n      const after = settings.isPrimaryDevice\n        ? lastSyncTime\n        : settings.lastSyncTime;\n      await uploadAllInfoAfter(after);\n      dispatch(pollImportChannel());\n    };\n    const showConfirmDialog = () => {\n      return Alert.alert(\n        t('common.alert.title.pleaseConfirm'),\n        t('devices.alert.confirmSync'),\n        [\n          {\n            text: t('common.alert.yes'),\n            onPress: () => {\n              runEffect();\n            },\n          },\n          {\n            text: t('common.alert.no'),\n            onPress: () => {\n              navigation.navigate('Home');\n            },\n          },\n        ],\n      );\n    };\n    if (route.params?.asScanner) {\n      showConfirmDialog();\n    }\n  }, [\n    dispatch,\n    navigation,\n    route.params?.asScanner,\n    settings.isPrimaryDevice,\n    settings.lastSyncTime,\n    t,\n  ]);\n\n  useEffect(() => {\n    setWaiting(!!route.params?.syncing);\n  }, [route.params?.syncing]);\n\n  useFocusEffect(() => {\n    // this is triggered when navigating back from sync code screen\n    if (waiting && syncCompleted) {\n      Alert.alert(t('common.alert.info'), t('devices.text.syncCompleted'));\n      clearImportChannel();\n      setWaiting(false);\n      if (!settings.isPrimaryDevice) {\n        dispatch(setLastSyncTime(Date.now()));\n      }\n      dispatch(resetRecoveryData());\n    }\n  });\n\n  const sync = () => {\n    navigation.navigate('SyncCode', {\n      urlType: qrCodeURL_types.SYNC,\n      action: 'sync',\n    });\n  };\n\n  const remove = (device) => {\n    Alert.alert(\n      t('common.alert.title.pleaseConfirm'),\n      t('devices.alert.confirmRemove', { name: getName(device) }),\n      [\n        {\n          text: t('common.alert.yes'),\n          onPress: () => {\n            api.removeSigningKey(device.signingKey).then(() => {\n              dispatch(removeDevice(device.signingKey));\n            });\n          },\n        },\n        {\n          text: t('common.alert.no'),\n        },\n      ],\n    );\n  };\n\n  const renderItem = ({ item: device, index }) => (\n    <View testID={`device-${index}`} style={styles.deviceContainer}>\n      <View testID={getName(device)} style={styles.deviceLabelContainer}>\n        <View style={styles.deviceNameContainer}>\n          <Text style={styles.deviceNameText}>{getName(device)}</Text>\n          {isCurrentDevice(device) && (\n            <Text style={styles.devicePrimaryText}>\n              &nbsp;({settings.isPrimaryDevice ? 'Primary' : 'Secondary'})\n            </Text>\n          )}\n        </View>\n        <View style={styles.deviceSigningKeyContainer}>\n          <Text style={styles.deviceSigningKeyText}>\n            {shortenSigningKey(device.signingKey)}\n          </Text>\n        </View>\n      </View>\n      {!isCurrentDevice(device) && (\n        <View style={styles.removeBtnContainer}>\n          <TouchableOpacity\n            style={styles.removeBtn}\n            testID={`RemoveDeviceBtn-${index}`}\n            onPress={() => remove(device)}\n          >\n            <Material\n              name=\"delete\"\n              size={DEVICE_LARGE ? 22 : 20}\n              color={BLUE}\n            />\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        backgroundColor={WHITE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n      <View style={styles.container} testID=\"DevicesScreen\">\n        <View style={styles.devicesContainer}>\n          <Text style={styles.description}>\n            {t('devices.text.listDescription')}\n          </Text>\n          <FlatList\n            data={devices}\n            renderItem={renderItem}\n            keyExtractor={(item) => item.signingKey}\n          />\n          {waiting ? (\n            <View style={styles.waitingContainer}>\n              <Text style={styles.waitingMessage}>\n                {t('devices.text.waitSyncing')}\n              </Text>\n              <Spinner\n                isVisible={waiting}\n                size={DEVICE_LARGE ? 48 : 42}\n                type=\"Wave\"\n                color={BLUE}\n              />\n            </View>\n          ) : (\n            <TouchableOpacity\n              style={styles.syncBtn}\n              testID=\"SyncBtn\"\n              onPress={sync}\n            >\n              <View style={styles.syncBtnContainer}>\n                <Material\n                  name=\"sync\"\n                  size={DEVICE_LARGE ? 22 : 20}\n                  color={WHITE}\n                />\n                <Text style={styles.syncText}>Sync Devices</Text>\n              </View>\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 2,\n  },\n  devicesContainer: {\n    padding: 30,\n  },\n  deviceContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    padding: 10,\n  },\n  deviceLabelContainer: {\n    flexDirection: 'column',\n    flex: 10,\n    alignItems: 'flex-start',\n  },\n  deviceNameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n  },\n  deviceSigningKeyContainer: {},\n  removeBtnContainer: {\n    flex: 1,\n    alignContent: 'center',\n    alignItems: 'center',\n  },\n  deviceNameText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  devicePrimaryText: {\n    fontFamily: 'Poppins-Medium',\n    fontWeight: 'bold',\n    fontSize: fontSize[16],\n    color: BLACK,\n  },\n  deviceSigningKeyText: {\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[14],\n    color: BLUE,\n  },\n  description: {\n    fontSize: fontSize[16],\n    padding: 10,\n    marginBottom: 20,\n  },\n  syncBtn: {\n    // flex: 1,\n  },\n  removeBtn: {},\n  syncBtnContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    alignSelf: 'stretch',\n    borderRadius: 10,\n    backgroundColor: BLUE,\n    padding: 10,\n    marginTop: 30,\n  },\n  syncText: {\n    color: WHITE,\n    fontFamily: 'Poppins-Bold',\n    paddingLeft: 10,\n    fontSize: fontSize[14],\n  },\n  waitingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    paddingBottom: 20,\n  },\n  waitingMessage: {\n    fontFamily: 'Poppins-Medium',\n    textAlign: 'center',\n    fontSize: fontSize[14],\n    color: BLUE,\n  },\n});\n\nexport default DevicesScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}