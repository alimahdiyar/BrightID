{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext } from 'react';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from \"../../store\";\nimport { WHITE } from \"../../theme/colors\";\nimport { NodeApiContext } from \"../NodeApiGate\";\nimport { confirmPendingConnectionThunk } from \"./actions/pendingConnectionThunks\";\nimport { pendingConnection_states, selectPendingConnectionById } from \"./pendingConnectionSlice\";\nimport { ReconnectView } from \"./ReconnectView\";\nimport { PreviewConnectionView } from \"./PreviewConnectionView\";\nimport { connection_levels, report_sources } from \"../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var PreviewConnectionController = function PreviewConnectionController(props) {\n  var pendingConnectionId = props.pendingConnectionId,\n      moveToNext = props.moveToNext;\n  var dispatch = useDispatch();\n  var api = useContext(NodeApiContext);\n  var pendingConnection = useSelector(function (state) {\n    return selectPendingConnectionById(state, pendingConnectionId);\n  });\n  var navigation = useNavigation();\n\n  if (!pendingConnection) {\n    return null;\n  }\n\n  var isReconnect = !!pendingConnection.pendingConnectionData.existingConnection;\n\n  if (pendingConnection.state !== pendingConnection_states.UNCONFIRMED) {\n    isReconnect = false;\n  }\n\n  var setLevelHandler = function setLevelHandler(level) {\n    moveToNext();\n    InteractionManager.runAfterInteractions(function () {\n      dispatch(confirmPendingConnectionThunk(pendingConnection.profileId, level, api));\n    });\n  };\n\n  var abuseHandler = function _callee() {\n    var sharedProfile;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sharedProfile = pendingConnection.pendingConnectionData.sharedProfile;\n            navigation.navigate('ReportReason', {\n              connectionId: sharedProfile.id,\n              connectionName: sharedProfile.name,\n              reporting: true,\n              source: isReconnect ? report_sources.RECONNECT : report_sources.PREVIEW,\n              successCallback: function successCallback(reason) {\n                dispatch(confirmPendingConnectionThunk(pendingConnection.profileId, connection_levels.REPORTED, api, reason));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var photoTouchHandler = function photoTouchHandler() {\n    navigation.navigate('FullScreenPhoto', {\n      photo: pendingConnection.pendingConnectionData.sharedProfile.photo,\n      base64: true\n    });\n  };\n\n  console.log(\"rendering \" + pendingConnection.pendingConnectionData.sharedProfile.name);\n  return _jsx(View, {\n    style: styles.previewContainer,\n    children: isReconnect ? _jsx(ReconnectView, {\n      pendingConnection: pendingConnection,\n      existingConnection: pendingConnection.pendingConnectionData.existingConnection,\n      setLevelHandler: setLevelHandler,\n      abuseHandler: abuseHandler\n    }) : _jsx(PreviewConnectionView, {\n      pendingConnection: pendingConnection,\n      setLevelHandler: setLevelHandler,\n      photoTouchHandler: photoTouchHandler,\n      abuseHandler: abuseHandler\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  previewContainer: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    paddingVertical: 10\n  }\n});","map":{"version":3,"names":["React","useContext","useNavigation","useDispatch","useSelector","WHITE","NodeApiContext","confirmPendingConnectionThunk","pendingConnection_states","selectPendingConnectionById","ReconnectView","PreviewConnectionView","connection_levels","report_sources","PreviewConnectionController","props","pendingConnectionId","moveToNext","dispatch","api","pendingConnection","state","navigation","isReconnect","pendingConnectionData","existingConnection","UNCONFIRMED","setLevelHandler","level","InteractionManager","runAfterInteractions","profileId","abuseHandler","sharedProfile","navigate","connectionId","id","connectionName","name","reporting","source","RECONNECT","PREVIEW","successCallback","reason","REPORTED","photoTouchHandler","photo","base64","console","log","styles","previewContainer","StyleSheet","create","flex","width","backgroundColor","alignItems","justifyContent","flexDirection","paddingVertical"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/PendingConnections/PreviewConnectionController.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { InteractionManager, StyleSheet, View } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from '@/store';\nimport { WHITE } from '@/theme/colors';\nimport { NodeApiContext } from '@/components/NodeApiGate';\nimport { confirmPendingConnectionThunk } from './actions/pendingConnectionThunks';\nimport {\n  pendingConnection_states,\n  selectPendingConnectionById,\n  updatePendingConnection,\n} from './pendingConnectionSlice';\nimport { ReconnectView } from './ReconnectView';\nimport { PreviewConnectionView } from './PreviewConnectionView';\nimport { connection_levels, report_sources } from '@/utils/constants';\n\ntype PreviewConnectionProps = {\n  pendingConnectionId: string;\n  moveToNext: () => void;\n};\n\nexport const PreviewConnectionController = (props: PreviewConnectionProps) => {\n  const { pendingConnectionId, moveToNext } = props;\n  const dispatch = useDispatch();\n  const api = useContext(NodeApiContext);\n  const pendingConnection = useSelector((state: State) =>\n    selectPendingConnectionById(state, pendingConnectionId),\n  ) as PendingConnection;\n\n  const navigation = useNavigation();\n\n  if (!pendingConnection) {\n    // pending connection has vanished. Most likely channel expired.\n    // Just return null, parent components will take care of moving to a different screen.\n    return null;\n  }\n\n  let isReconnect =\n    !!pendingConnection.pendingConnectionData.existingConnection;\n  if (pendingConnection.state !== pendingConnection_states.UNCONFIRMED) {\n    // Don't display reconnect screen for connections that have just been confirmed\n    isReconnect = false;\n  }\n\n  const setLevelHandler = (level: ConnectionLevel) => {\n    // navigates to next view in the viewpager\n    moveToNext();\n    // wait until after finishes navigation before dispatching confirm action\n    InteractionManager.runAfterInteractions(() => {\n      dispatch(\n        confirmPendingConnectionThunk(pendingConnection.profileId, level, api),\n      );\n    });\n  };\n\n  const abuseHandler = async () => {\n    const { sharedProfile } = pendingConnection.pendingConnectionData;\n    navigation.navigate('ReportReason', {\n      connectionId: sharedProfile.id,\n      connectionName: sharedProfile.name,\n      reporting: true,\n      source: isReconnect ? report_sources.RECONNECT : report_sources.PREVIEW,\n      successCallback: (reason) => {\n        dispatch(\n          confirmPendingConnectionThunk(\n            pendingConnection.profileId,\n            connection_levels.REPORTED,\n            api,\n            reason\n          ),\n        );\n      },\n    });\n  };\n\n  const photoTouchHandler = () => {\n    navigation.navigate('FullScreenPhoto', {\n      photo: pendingConnection.pendingConnectionData.sharedProfile.photo,\n      base64: true,\n    });\n  };\n\n  console.log(\n    `rendering ${pendingConnection.pendingConnectionData.sharedProfile.name}`,\n  );\n  return (\n    <View style={styles.previewContainer}>\n      {isReconnect ? (\n        <ReconnectView\n          pendingConnection={pendingConnection}\n          existingConnection={\n            pendingConnection.pendingConnectionData.existingConnection\n          }\n          setLevelHandler={setLevelHandler}\n          abuseHandler={abuseHandler}\n        />\n      ) : (\n        <PreviewConnectionView\n          pendingConnection={pendingConnection}\n          setLevelHandler={setLevelHandler}\n          photoTouchHandler={photoTouchHandler}\n          abuseHandler={abuseHandler}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  previewContainer: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: WHITE,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n    paddingVertical: 10,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}