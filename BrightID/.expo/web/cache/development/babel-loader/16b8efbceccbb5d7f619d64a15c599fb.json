{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  inputTransform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value: value\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedTransform(transform, config);\n}\n\nvar AnimatedTransform = function (_AnimatedNode) {\n  _inherits(AnimatedTransform, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedTransform);\n\n  function AnimatedTransform(transform, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedTransform);\n\n    _this = _super.call(this, {\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform));\n    _this._config = config;\n    _this._transform = transform;\n    return _this;\n  }\n\n  _createClass(AnimatedTransform, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedTransform, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._transform.map(function (transform) {\n        var result = {};\n\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          }\n        }\n\n        return result;\n      });\n    }\n  }]);\n\n  return AnimatedTransform;\n}(AnimatedNode);","map":{"version":3,"sources":["AnimatedTransform.js"],"names":["outputTransform","inputTransform","transform","value","property","nodeID","parents","config","sanitizeTransform","oldNode","deepEqual","AnimatedTransform","AnimatedNode","constructor","type","extractAnimatedParentNodes","toString","__onEvaluate","result"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAA,YAAA;AAEA,OAAA,SAAA,MAAA,mBAAA;;AAEA,SAAA,iBAAA,CAAA,cAAA,EAA2C;EACzC,IAAMA,eAAe,GAArB,EAAA;EACAC,cAAc,CAAdA,OAAAA,CAAuBC,UAAAA,SAAAA,EAAa;IAClC,KAAK,IAAL,GAAA,IAAA,SAAA,EAA6B;MAC3B,IAAMC,KAAK,GAAGD,SAAS,CAAvB,GAAuB,CAAvB;;MACA,IAAIC,KAAK,YAAT,YAAA,EAAmC;QACjCH,eAAe,CAAfA,IAAAA,CAAqB;UACnBI,QAAQ,EADW,GAAA;UAEnBC,MAAM,EAAEF,KAAK,CAHjB;QACuB,CAArBH;MADF,CAAA,MAKO;QACLA,eAAe,CAAfA,IAAAA,CAAqB;UACnBI,QAAQ,EADW,GAAA;UAEnBD,KAAAA,EAFFH;QAAqB,CAArBA;MAKH;IAdHC;EAAAA,CAAAA;EAgBA,OAAA,eAAA;AAGF;;AAAA,SAAA,0BAAA,CAAA,SAAA,EAA+C;EAC7C,IAAMK,OAAO,GAAb,EAAA;EACAJ,SAAS,CAATA,OAAAA,CAAkBA,UAAAA,SAAAA,EAAa;IAC7B,KAAK,IAAL,GAAA,IAAA,SAAA,EAA6B;MAC3B,IAAMC,KAAK,GAAGD,SAAS,CAAvB,GAAuB,CAAvB;;MACA,IAAIC,KAAK,YAAT,YAAA,EAAmC;QACjCG,OAAO,CAAPA,IAAAA,CAAAA,KAAAA;MAEH;IANHJ;EAAAA,CAAAA;EAQA,OAAA,OAAA;AAGF;;AAAA,OAAO,SAAA,0BAAA,CAAA,SAAA,EAAA,OAAA,EAAwD;EAC7D,IAAMK,MAAM,GAAGC,iBAAiB,CAAhC,SAAgC,CAAhC;;EACA,IAAIC,OAAO,IAAIC,SAAS,CAAA,MAAA,EAASD,OAAO,CAAxC,OAAwB,CAAxB,EAAmD;IACjD,OAAA,OAAA;EAEF;;EAAA,OAAO,IAAA,iBAAA,CAAA,SAAA,EAAP,MAAO,CAAP;AAGIE;;AAAAA,IAAAA,iB;;;;;EACJE,SAAAA,iBAAAA,CAAAA,SAAAA,EAAAA,MAAAA,EAA+B;IAAA,IAAA,KAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;IAC7B,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EACE;MAAEC,IAAI,EAAN,WAAA;MAAqBZ,SAAS,EADhC;IACE,CADF,EAEEa,0BAA0B,CAF5B,SAE4B,CAF5B,CAAA;IAIA,KAAA,CAAA,OAAA,GAAA,MAAA;IACA,KAAA,CAAA,UAAA,GAAA,SAAA;IAN6B,OAAA,KAAA;;;;;WAS/BC,SAAAA,QAAAA,GAAW;MACT,OAAA,0BAAA,MAAA,CAAiC,KAAjC,QAAA,CAAA;;;;WAGFC,SAAAA,YAAAA,GAAe;MACb,OAAO,KAAA,UAAA,CAAA,GAAA,CAAoBf,UAAAA,SAAAA,EAAa;QACtC,IAAMgB,MAAM,GAAZ,EAAA;;QACA,KAAK,IAAL,GAAA,IAAA,SAAA,EAA6B;UAC3B,IAAMf,KAAK,GAAGD,SAAS,CAAvB,GAAuB,CAAvB;;UACA,IAAIC,KAAK,YAAT,YAAA,EAAmC;YACjCe,MAAM,CAANA,GAAM,CAANA,GAAcf,KAAK,CAAnBe,UAAcf,EAAde;UAEH;QACD;;QAAA,OARK,MAQL;MARF,CAAO,CAAP;;;;;EAf4BN,Y,CAA1BD","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return `AnimatedTransform, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}