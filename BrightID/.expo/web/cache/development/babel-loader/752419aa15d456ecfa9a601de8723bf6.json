{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _reduxPersist = require(\"redux-persist\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _migrations = require(\"./migrations\");\n\nvar getRootState = function _callee(config) {\n  var restoredState, migratedState, nextState;\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regenerator.default.awrap((0, _reduxPersist.getStoredState)((0, _extends2.default)({}, config, {\n            key: 'root',\n            storage: _asyncStorage.default,\n            serialize: undefined,\n            deserialize: undefined\n          })));\n\n        case 3:\n          restoredState = _context.sent;\n          _context.next = 6;\n          return _regenerator.default.awrap((0, _migrations.rootMigrate)(restoredState, config.version));\n\n        case 6:\n          migratedState = _context.sent;\n          nextState = migratedState && migratedState[config.key];\n\n          if (nextState) {\n            _context.next = 10;\n            break;\n          }\n\n          throw new Error('migrated state does not exist');\n\n        case 10:\n          return _context.abrupt(\"return\", nextState);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (_context.t0.message !== 'migrated state does not exist') {\n            console.error(\"failed restoring state for \" + config.key, _context.t0.message);\n          }\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nvar _callee2 = function _callee2(config) {\n  var restoredState;\n  return _regenerator.default.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regenerator.default.awrap((0, _reduxPersist.getStoredState)(config));\n\n        case 3:\n          restoredState = _context2.sent;\n\n          if (!config.migrate) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 7;\n          return _regenerator.default.awrap(config.migrate(restoredState, config.version));\n\n        case 7:\n          restoredState = _context2.sent;\n\n        case 8:\n          return _context2.abrupt(\"return\", Promise.resolve(restoredState));\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(\"attempting to restore old state for \" + config.key, _context2.t0.message);\n          return _context2.abrupt(\"return\", Promise.resolve(getRootState(config)));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\n\nexports.default = _callee2;","map":{"version":3,"names":["getRootState","config","getStoredState","key","storage","AsyncStorage","serialize","undefined","deserialize","restoredState","rootMigrate","version","migratedState","nextState","Error","message","console","error","migrate","Promise","resolve","log"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/store/getStoredState.js"],"sourcesContent":["import { getStoredState } from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { rootMigrate } from './migrations';\n\nconst getRootState = async (config) => {\n  try {\n    const restoredState = await getStoredState({\n      ...config,\n      key: 'root',\n      storage: AsyncStorage,\n      serialize: undefined,\n      deserialize: undefined,\n    });\n\n    let migratedState = await rootMigrate(restoredState, config.version);\n\n    let nextState = migratedState && migratedState[config.key];\n\n    if (!nextState) {\n      throw new Error('migrated state does not exist');\n    }\n\n    return nextState;\n  } catch (error) {\n    if (error.message !== 'migrated state does not exist') {\n      console.error(`failed restoring state for ${config.key}`, error.message);\n    }\n  }\n};\n\nexport default async (config) => {\n  try {\n    let restoredState = await getStoredState(config);\n    if (config.migrate) {\n      restoredState = await config.migrate(restoredState, config.version);\n    }\n    return Promise.resolve(restoredState);\n  } catch (err) {\n    console.log(\n      `attempting to restore old state for ${config.key}`,\n      err.message,\n    );\n    return Promise.resolve(getRootState(config));\n  }\n};\n"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG,iBAAOC,MAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAAA,kCAEW,IAAAC,4BAAA,6BACvBD,MADuB;YAE1BE,GAAG,EAAE,MAFqB;YAG1BC,OAAO,EAAEC,qBAHiB;YAI1BC,SAAS,EAAEC,SAJe;YAK1BC,WAAW,EAAED;UALa,GAFX;;QAAA;UAEXE,aAFW;UAAA;UAAA,kCAUS,IAAAC,uBAAA,EAAYD,aAAZ,EAA2BR,MAAM,CAACU,OAAlC,CAVT;;QAAA;UAUbC,aAVa;UAYbC,SAZa,GAYDD,aAAa,IAAIA,aAAa,CAACX,MAAM,CAACE,GAAR,CAZ7B;;UAAA,IAcZU,SAdY;YAAA;YAAA;UAAA;;UAAA,MAeT,IAAIC,KAAJ,CAAU,+BAAV,CAfS;;QAAA;UAAA,iCAkBVD,SAlBU;;QAAA;UAAA;UAAA;;UAoBjB,IAAI,YAAME,OAAN,KAAkB,+BAAtB,EAAuD;YACrDC,OAAO,CAACC,KAAR,iCAA4ChB,MAAM,CAACE,GAAnD,EAA0D,YAAMY,OAAhE;UACD;;QAtBgB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAArB;;eA0Be,kBAAOd,MAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAAA,kCAEe,IAAAC,4BAAA,EAAeD,MAAf,CAFf;;QAAA;UAEPQ,aAFO;;UAAA,KAGPR,MAAM,CAACiB,OAHA;YAAA;YAAA;UAAA;;UAAA;UAAA,kCAIajB,MAAM,CAACiB,OAAP,CAAeT,aAAf,EAA8BR,MAAM,CAACU,OAArC,CAJb;;QAAA;UAITF,aAJS;;QAAA;UAAA,kCAMJU,OAAO,CAACC,OAAR,CAAgBX,aAAhB,CANI;;QAAA;UAAA;UAAA;UAQXO,OAAO,CAACK,GAAR,0CACyCpB,MAAM,CAACE,GADhD,EAEE,aAAIY,OAFN;UARW,kCAYJI,OAAO,CAACC,OAAR,CAAgBpB,YAAY,CAACC,MAAD,CAA5B,CAZI;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,C"},"metadata":{},"sourceType":"script"}