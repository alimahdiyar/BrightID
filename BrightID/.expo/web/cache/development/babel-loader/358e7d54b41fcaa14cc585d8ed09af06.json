{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnRouteFocus(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      sourceRouteKey = _ref.key,\n      setState = _ref.setState;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onRouteFocusParent = _React$useContext.onRouteFocus;\n\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n\n    if (result !== state) {\n      setState(result);\n    }\n\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["router","getState","key","sourceRouteKey","setState","onRouteFocusParent","React","state","result"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAMA,OAAA,wBAAA;AAcA,eAAe,SAAA,eAAA,CAAA,IAAA,EAKK;EAJlBA,IAAAA,MAIkB,GAAA,IAAA,CAJlBA,MAAAA;EAAAA,IACAC,QAGkB,GAAA,IAAA,CAHlBA,QADAD;EAAAA,IAEKG,cAEa,GAAA,IAAA,CAFlBD,GAFAF;EAAAA,IAGAI,QACkB,GAAA,IAAA,CADlBA,QAHAJ;;EAKA,IAAA,iBAAA,GAA6CM,KAAK,CAALA,UAAAA,CAA7C,wBAA6CA,CAA7C;EAAA,IAAsBD,kBAAtB,GAAA,iBAAA,CAAA,YAAA;;EAIA,OAAOC,KAAK,CAALA,WAAAA,CACJJ,UAAD,GAACA,EAAgB;IACf,IAAMK,KAAK,GAAGN,QAAd,EAAA;IACA,IAAMO,MAAM,GAAGR,MAAM,CAANA,qBAAAA,CAAAA,KAAAA,EAAf,GAAeA,CAAf;;IAEA,IAAIQ,MAAM,KAAV,KAAA,EAAsB;MACpBJ,QAAQ,CAARA,MAAQ,CAARA;IAGF;;IAAA,IAAIC,kBAAkB,KAAlBA,SAAAA,IAAoCF,cAAc,KAAtD,SAAA,EAAsE;MACpEE,kBAAkB,CAAlBA,cAAkB,CAAlBA;IAVCC;EAAAA,CAAAA,EAaL,CAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,QAAA,EAbF,cAaE,CAbKA,CAAP;AAeD","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}