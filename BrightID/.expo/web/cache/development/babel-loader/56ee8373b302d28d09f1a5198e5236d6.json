{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport nacl from 'tweetnacl';\nimport { setKeypair, setPhoto, setUserId } from \"../../../actions\";\nimport { createImageDirectory, saveImage } from \"../../../utils/filesystem\";\nimport { b64ToUrlSafeB64, uInt8ArrayToB64 } from \"../../../utils/encoding\";\nexport var createKeypair = function createKeypair() {\n  return function _callee(dispatch, getState) {\n    var filename, _await$nacl$sign$keyP, publicKey, secretKey, b64PubKey;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filename = getState().user.photo.filename;\n\n            if (filename) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(nacl.sign.keyPair());\n\n          case 4:\n            _await$nacl$sign$keyP = _context.sent;\n            publicKey = _await$nacl$sign$keyP.publicKey;\n            secretKey = _await$nacl$sign$keyP.secretKey;\n            b64PubKey = uInt8ArrayToB64(publicKey);\n            dispatch(setKeypair({\n              publicKey: b64PubKey,\n              secretKey: secretKey\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var savePhoto = function savePhoto(base64Image) {\n  return function _callee2(dispatch, getState) {\n    var publicKey, id, filename;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(createImageDirectory());\n\n          case 2:\n            publicKey = getState().keypair.publicKey;\n            id = b64ToUrlSafeB64(publicKey);\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(saveImage({\n              imageName: id,\n              base64Image: base64Image\n            }));\n\n          case 6:\n            filename = _context2.sent;\n            dispatch(setPhoto({\n              filename: filename\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var saveId = function saveId() {\n  return function (dispatch, getState) {\n    var publicKey = getState().keypair.publicKey;\n    var id = b64ToUrlSafeB64(publicKey);\n    dispatch(setUserId(id));\n  };\n};","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Onboarding/SignUpFlow/thunks.ts"],"names":["createKeypair","filename","getState","publicKey","secretKey","nacl","b64PubKey","uInt8ArrayToB64","dispatch","setKeypair","savePhoto","createImageDirectory","id","b64ToUrlSafeB64","saveImage","imageName","base64Image","setPhoto","saveId","setUserId"],"mappings":"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","sourcesContent":["import nacl from 'tweetnacl';\nimport { setKeypair, setPhoto, setUserId } from '@/actions';\nimport { createImageDirectory, saveImage } from '@/utils/filesystem';\nimport { b64ToUrlSafeB64, uInt8ArrayToB64 } from '@/utils/encoding';\n\nexport const createKeypair = () => async (\n  dispatch: dispatch,\n  getState: getState,\n) => {\n  // do not create new keypair if photo already exists (photo is saved using id)\n  const { filename } = getState().user.photo;\n\n  if (!filename) {\n    // create public / private key pair\n    const { publicKey, secretKey } = await nacl.sign.keyPair();\n    const b64PubKey = uInt8ArrayToB64(publicKey);\n\n    dispatch(setKeypair({ publicKey: b64PubKey, secretKey }));\n  }\n};\n\nexport const savePhoto = (base64Image: string) => async (\n  dispatch: dispatch,\n  getState: getState,\n) => {\n  // creates Image Directory\n  await createImageDirectory();\n\n  const { publicKey } = getState().keypair;\n  const id = b64ToUrlSafeB64(publicKey);\n\n  const filename = await saveImage({ imageName: id, base64Image });\n  dispatch(setPhoto({ filename }));\n};\n\nexport const saveId = () => (dispatch: dispatch, getState: getState) => {\n  const { publicKey } = getState().keypair;\n  const id = b64ToUrlSafeB64(publicKey);\n\n  dispatch(setUserId(id));\n};\n"]},"metadata":{},"sourceType":"module"}