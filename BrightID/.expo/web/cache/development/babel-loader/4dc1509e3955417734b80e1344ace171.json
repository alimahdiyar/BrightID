{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DropdownAlert from 'react-native-dropdownalert';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport { navigate, getRoute } from '@/NavigationService';\nimport AddGroup from '@/components/Icons/AddGroup';\nimport AddPerson from '@/components/Icons/AddPerson';\nimport Certificate from '@/components/Icons/Certificate';\nimport PhoneLock from '@/components/Icons/PhoneLock';\nimport { setActiveNotification } from '@/actions';\nimport { CONNECTIONS_TYPE } from '@/utils/constants';\nimport { DEVICE_LARGE, HEIGHT } from '@/utils/deviceConstants';\nimport { LIGHT_GREEN, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DetoxEnabled } from '@/utils/Detox';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Icons = {\n  AddGroup: AddGroup,\n  AddPerson: AddPerson,\n  PhoneLock: PhoneLock,\n  Certificate: Certificate\n};\nvar NOTIFICATION_TIMEOUT = 10000;\nvar screenBlackList = ['ScanCode', 'PendingConnections', 'MyCode', 'GroupConnection'];\nexport var NotificationBanner = function NotificationBanner() {\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dropDownAlertRef = useRef(null);\n  var activeNotification = useSelector(function (state) {\n    return state.notifications.activeNotification;\n  });\n  var pendingConnections = useSelector(selectAllUnconfirmedConnections);\n  useEffect(function () {\n    var _dropDownAlertRef$cur;\n\n    if (!activeNotification) {\n      return;\n    }\n\n    var route = getRoute();\n    (_dropDownAlertRef$cur = dropDownAlertRef.current) == null ? void 0 : _dropDownAlertRef$cur.closeAction('cancel');\n\n    if (!screenBlackList.includes(route == null ? void 0 : route.name)) {\n      if (!DetoxEnabled) {\n        var _dropDownAlertRef$cur2;\n\n        (_dropDownAlertRef$cur2 = dropDownAlertRef.current) == null ? void 0 : _dropDownAlertRef$cur2.alertWithType('custom', activeNotification == null ? void 0 : activeNotification.title, activeNotification == null ? void 0 : activeNotification.message);\n      }\n    }\n  }, [activeNotification, dispatch]);\n  useEffect(function () {\n    if (pendingConnections.length) {\n      dispatch(setActiveNotification({\n        type: CONNECTIONS_TYPE,\n        title: t('notificationBar.title.pendingConnection'),\n        message: t('notificationBar.text.pendingConnections', {\n          count: pendingConnections.length\n        }),\n        navigationTarget: 'PendingConnections',\n        icon: 'AddPerson'\n      }));\n    }\n  }, [pendingConnections.length, dispatch, t]);\n  var Icon = Icons[(activeNotification == null ? void 0 : activeNotification.icon) || 'Certificate'];\n\n  var _onTap = function _onTap() {\n    console.log('onTap', activeNotification);\n\n    if (activeNotification != null && activeNotification.navigationTarget) {\n      navigate(activeNotification.navigationTarget);\n    }\n  };\n\n  var _onClose = function _onClose() {\n    console.log('onClose, setting null');\n    dispatch(setActiveNotification(null));\n  };\n\n  return _jsx(DropdownAlert, {\n    ref: dropDownAlertRef,\n    closeInterval: NOTIFICATION_TIMEOUT,\n    containerStyle: styles.container,\n    contentContainerStyle: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    titleStyle: styles.title,\n    messageStyle: styles.message,\n    updateStatusBar: true,\n    activeStatusBarBackgroundColor: LIGHT_GREEN,\n    activeStatusBarStyle: \"dark-content\",\n    testID: \"notificationBanner\",\n    elevation: 10,\n    zIndex: 100,\n    onTap: _onTap,\n    onClose: _onClose,\n    renderImage: function renderImage() {\n      return _jsx(View, {\n        style: styles.icon,\n        children: _jsx(Icon, {\n          width: DEVICE_LARGE ? 24 : 20,\n          height: DEVICE_LARGE ? 24 : 20\n        })\n      });\n    },\n    panResponderEnabled: false,\n    tapToCloseEnabled: true\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: LIGHT_GREEN,\n    height: HEIGHT * 0.15\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[16]\n  },\n  message: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[13]\n  },\n  icon: {\n    marginLeft: DEVICE_LARGE ? 20 : 10\n  }\n});\nexport default NotificationBanner;","map":{"version":3,"names":["React","useEffect","useRef","DropdownAlert","useTranslation","useDispatch","useSelector","navigate","getRoute","AddGroup","AddPerson","Certificate","PhoneLock","setActiveNotification","CONNECTIONS_TYPE","DEVICE_LARGE","HEIGHT","LIGHT_GREEN","BLACK","fontSize","selectAllUnconfirmedConnections","DetoxEnabled","Icons","NOTIFICATION_TIMEOUT","screenBlackList","NotificationBanner","dispatch","t","dropDownAlertRef","activeNotification","state","notifications","pendingConnections","route","current","closeAction","includes","name","alertWithType","title","message","length","type","count","navigationTarget","icon","Icon","_onTap","console","log","_onClose","styles","container","flex","flexDirection","alignItems","justifyContent","StyleSheet","create","backgroundColor","height","fontFamily","marginLeft","color"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/Helpers/NotificationBanner.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport DropdownAlert from 'react-native-dropdownalert';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport { navigate, getRoute } from '@/NavigationService';\nimport AddGroup from '@/components/Icons/AddGroup';\nimport AddPerson from '@/components/Icons/AddPerson';\nimport Certificate from '@/components/Icons/Certificate';\nimport PhoneLock from '@/components/Icons/PhoneLock';\nimport { setActiveNotification } from '@/actions';\nimport { CONNECTIONS_TYPE } from '@/utils/constants';\nimport { DEVICE_LARGE, HEIGHT } from '@/utils/deviceConstants';\nimport { LIGHT_GREEN, BLACK } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport { selectAllUnconfirmedConnections } from '@/components/PendingConnections/pendingConnectionSlice';\nimport { DetoxEnabled } from '@/utils/Detox';\n\n/* notification types:\n@type groups\n@type connections\n@type misc\n*/\n// default icons\nconst Icons = {\n  AddGroup,\n  AddPerson,\n  PhoneLock,\n  Certificate,\n};\n\nconst NOTIFICATION_TIMEOUT = 10000;\n\nconst screenBlackList = [\n  'ScanCode',\n  'PendingConnections',\n  'MyCode',\n  'GroupConnection',\n];\n\nexport const NotificationBanner = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  // const route = useRoute();\n  const dropDownAlertRef = useRef(null);\n  const activeNotification = useSelector(\n    (state: State) => state.notifications.activeNotification,\n  );\n\n  const pendingConnections = useSelector(selectAllUnconfirmedConnections);\n\n  useEffect(() => {\n    if (!activeNotification) {\n      return;\n    }\n\n    const route = getRoute();\n\n    dropDownAlertRef.current?.closeAction('cancel');\n\n    if (!screenBlackList.includes(route?.name)) {\n      if (!DetoxEnabled) {\n        dropDownAlertRef.current?.alertWithType(\n          'custom',\n          activeNotification?.title,\n          activeNotification?.message,\n        );\n      }\n    }\n  }, [activeNotification, dispatch]);\n\n  useEffect(() => {\n    // always close the banner first\n    // dropDownAlertRef.current?.closeAction('automatic');\n\n    if (pendingConnections.length) {\n      dispatch(\n        setActiveNotification({\n          type: CONNECTIONS_TYPE,\n          title: t('notificationBar.title.pendingConnection'),\n          message: t('notificationBar.text.pendingConnections', {\n            count: pendingConnections.length,\n          }),\n          navigationTarget: 'PendingConnections',\n          icon: 'AddPerson',\n        }),\n      );\n    }\n  }, [pendingConnections.length, dispatch, t]);\n\n  // icon fallback: activeNotification prop 'icon' -> default icon for notification type -> default 'Certificate'\n  const Icon = Icons[activeNotification?.icon || 'Certificate'];\n\n  const _onTap = () => {\n    console.log('onTap', activeNotification);\n    if (activeNotification?.navigationTarget) {\n      navigate(activeNotification.navigationTarget);\n    }\n  };\n\n  const _onClose = () => {\n    console.log('onClose, setting null');\n    dispatch(setActiveNotification(null));\n  };\n\n  return (\n    <DropdownAlert\n      ref={dropDownAlertRef}\n      closeInterval={NOTIFICATION_TIMEOUT}\n      containerStyle={styles.container}\n      contentContainerStyle={{\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      titleStyle={styles.title}\n      messageStyle={styles.message}\n      updateStatusBar={true}\n      activeStatusBarBackgroundColor={LIGHT_GREEN}\n      activeStatusBarStyle=\"dark-content\"\n      testID=\"notificationBanner\"\n      elevation={10}\n      zIndex={100}\n      onTap={_onTap}\n      onClose={_onClose}\n      renderImage={() => (\n        <View style={styles.icon}>\n          <Icon\n            width={DEVICE_LARGE ? 24 : 20}\n            height={DEVICE_LARGE ? 24 : 20}\n          />\n        </View>\n      )}\n      panResponderEnabled={false}\n      tapToCloseEnabled={true}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: LIGHT_GREEN,\n    height: HEIGHT * 0.15,\n  },\n  title: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[16],\n  },\n  message: {\n    fontFamily: 'Poppins-Medium',\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n    color: BLACK,\n    fontSize: fontSize[13],\n  },\n  icon: {\n    marginLeft: DEVICE_LARGE ? 20 : 10,\n  },\n});\n\nexport default NotificationBanner;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}