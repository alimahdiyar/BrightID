{"ast":null,"code":"'use strict';\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  }\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n}\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0;\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3;\n  var parts = [];\n  var maxChunkLength = 16383;\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/base64-js/index.js"],"names":["exports","lookup","revLookup","Arr","code","i","len","b64","validLen","placeHoldersLen","lens","getLens","arr","_byteLength","curByte","tmp","num","output","uint8","tripletToBase64","extraBytes","parts","maxChunkLength","len2","encodeChunk"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n"]},"metadata":{},"sourceType":"script"}