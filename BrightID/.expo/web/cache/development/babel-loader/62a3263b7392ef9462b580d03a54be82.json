{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NewRecoveryConnectionList = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _store = require(\"../../store\");\n\nvar _connectionsSlice = require(\"../../reducer/connectionsSlice\");\n\nvar _actions = require(\"../../actions\");\n\nvar _strings = require(\"../../utils/strings\");\n\nvar _colors = require(\"../../theme/colors\");\n\nvar _fonts = require(\"../../theme/fonts\");\n\nvar _constants = require(\"../../utils/constants\");\n\nvar _deviceConstants = require(\"../../utils/deviceConstants\");\n\nvar _NodeApiGate = require(\"../NodeApiGate\");\n\nvar _RecoverConnectionsCard = _interopRequireDefault(require(\"./RecoverConnectionsCard\"));\n\nvar _TopSearchBar = _interopRequireDefault(require(\"./TopSearchBar\"));\n\nvar _this = this,\n    _jsxFileName = \"/home/ali/Desktop/brightid/BrightID/BrightID/src/components/RecoveryConnections/NewRecoveryConnectionScreen.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar searchParamSelector = function searchParamSelector(state) {\n  return state.connections.searchParam;\n};\n\nvar newRecoveryConnectionSelector = (0, _toolkit.createSelector)([_connectionsSlice.selectAllConnections, searchParamSelector], function (connections, search) {\n  var searchString = (0, _strings.toSearchString)(search);\n  var includeRecovery = Array(_constants.connection_levels.ALREADY_KNOWN, _constants.connection_levels.RECOVERY);\n  return connections.filter(function (conn) {\n    return includeRecovery.includes(conn.incomingLevel) && conn.level !== _constants.connection_levels.RECOVERY && conn.level !== _constants.connection_levels.REPORTED && (0, _strings.toSearchString)(\"\" + (conn == null ? void 0 : conn.name)).includes(searchString);\n  });\n});\n\nvar EmptyList = function EmptyList() {\n  var _useTranslation = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation.t;\n\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 1,\n      width: '100%',\n      height: '100%',\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingTop: '50%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.emptyMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, t('recoveryConnections.text.pleaseMakeSomeConnections')));\n};\n\nvar NewRecoveryConnectionList = function NewRecoveryConnectionList(props) {\n  var navigation = props.navigation;\n\n  var _useTranslation2 = (0, _reactI18next.useTranslation)(),\n      t = _useTranslation2.t;\n\n  var api = (0, _react.useContext)(_NodeApiGate.NodeApiContext);\n  var dispatch = (0, _store.useDispatch)();\n\n  var _useSelector = (0, _store.useSelector)(function (state) {\n    return state.user;\n  }),\n      myId = _useSelector.id;\n\n  var firstRecoveryTime = (0, _store.useSelector)(_connectionsSlice.firstRecoveryTimeSelector);\n  var connections = (0, _store.useSelector)(newRecoveryConnectionSelector);\n  var recoveryConnections = (0, _store.useSelector)(_connectionsSlice.recoveryConnectionsSelector);\n\n  var _useState = (0, _react.useState)([]),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      selectedAccounts = _useState2[0],\n      setSelectedAccounts = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      updateInProgress = _useState4[0],\n      setUpdateInProgress = _useState4[1];\n\n  var filter = (0, _react.useCallback)(function (id) {\n    if (selectedAccounts.includes(id)) {\n      setSelectedAccounts(selectedAccounts.filter(function (value) {\n        return value !== id;\n      }));\n    } else {\n      setSelectedAccounts([].concat((0, _toConsumableArray2.default)(selectedAccounts), [id]));\n    }\n  }, [selectedAccounts]);\n\n  var confirm = function _callee() {\n    var totalRecoveryAccount, promises, _iterator, _step, id, ops, _iterator2, _step2, op;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!updateInProgress) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            setUpdateInProgress(true);\n            console.log(recoveryConnections.length);\n            console.log(selectedAccounts.length);\n            totalRecoveryAccount = recoveryConnections.length + selectedAccounts.length;\n\n            if (!(totalRecoveryAccount < 3)) {\n              _context.next = 11;\n              break;\n            }\n\n            _reactNative.Alert.alert(t('common.alert.error'), t('recoveryConnections.text.threeMore', {\n              amount: 3 - totalRecoveryAccount\n            }));\n\n            _context.next = 19;\n            break;\n\n          case 11:\n            promises = [];\n\n            for (_iterator = _createForOfIteratorHelperLoose(selectedAccounts); !(_step = _iterator()).done;) {\n              id = _step.value;\n              promises.push(api.addConnection(myId, id, _constants.connection_levels.RECOVERY, Date.now()));\n              dispatch((0, _actions.setConnectionLevel)({\n                id: id,\n                level: _constants.connection_levels.RECOVERY\n              }));\n            }\n\n            if (selectedAccounts.length > 0 && !firstRecoveryTime) {\n              dispatch((0, _actions.setFirstRecoveryTime)(Date.now()));\n            }\n\n            _context.next = 16;\n            return _regenerator.default.awrap(Promise.all(promises));\n\n          case 16:\n            ops = _context.sent;\n\n            for (_iterator2 = _createForOfIteratorHelperLoose(ops); !(_step2 = _iterator2()).done;) {\n              op = _step2.value;\n              dispatch((0, _actions.addOperation)(op));\n            }\n\n            if (firstRecoveryTime && Date.now() - firstRecoveryTime > _constants.RECOVERY_COOLDOWN_EXEMPTION) {\n              navigation.navigate('RecoveryCooldownInfo', {\n                successCallback: function successCallback() {\n                  navigation.navigate('Home');\n                }\n              });\n            } else {\n              _reactNative.Alert.alert(t('common.alert.success'), t('recoveryConnections.text.completed', 'Recovery connections have been successfully added'));\n\n              navigation.navigate('Home');\n            }\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](2);\n            console.warn(_context.t0.message);\n\n          case 24:\n            _context.prev = 24;\n            setUpdateInProgress(false);\n            return _context.finish(24);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 21, 24, 27]], Promise);\n  };\n\n  var ConnectionsList = (0, _react.useMemo)(function () {\n    return _react.default.createElement(_reactNative.FlatList, {\n      data: connections,\n      contentContainerStyle: {\n        paddingTop: '5%',\n        paddingBottom: '33%'\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _react.default.createElement(_RecoverConnectionsCard.default, (0, _extends2.default)({\n          activeBefore: 0,\n          activeAfter: 0\n        }, item, {\n          index: index,\n          isSelectionActive: true,\n          onSelect: filter,\n          isSelected: selectedAccounts.includes(item.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }\n        }));\n      },\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      ListEmptyComponent: _react.default.createElement(EmptyList, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 29\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    });\n  }, [connections, selectedAccounts, filter]);\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: _colors.ORANGE,\n    animated: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.orangeTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, recoveryConnections.length === 0 ? _react.default.createElement(_reactNative.Text, {\n    style: styles.recoveryMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, t('recoveryConnections.text.chooseThreeConnections')) : _react.default.createElement(_reactNative.Text, {\n    style: styles.recoveryMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, t('recoveryConnections.text.connectionsAlreadyKnown')), _react.default.createElement(_TopSearchBar.default, {\n    sortable: false,\n    setSearchValue: _actions.setConnectionsSearch,\n    setSearchOpen: _actions.setConnectionsSearchOpen,\n    searchOpenSelector: function searchOpenSelector(state) {\n      return state.connections.searchOpen;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }), ConnectionsList, _react.default.createElement(_reactNative.View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.TouchableOpacity, {\n    disabled: updateInProgress || selectedAccounts.length === 0,\n    style: [styles.button, {\n      backgroundColor: updateInProgress || selectedAccounts.length === 0 ? _colors.GREY : _colors.ORANGE\n    }],\n    onPress: confirm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, updateInProgress ? _react.default.createElement(_reactNative.ActivityIndicator, {\n    size: \"small\",\n    color: _colors.WHITE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }) : _react.default.createElement(_reactNative.Text, {\n    style: styles.buttonLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 15\n    }\n  }, t('recoveryConnections.text.add'))))));\n};\n\nexports.NewRecoveryConnectionList = NewRecoveryConnectionList;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: _colors.WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  orangeTop: {\n    backgroundColor: _colors.ORANGE,\n    height: _deviceConstants.DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: '3%',\n    paddingBottom: _deviceConstants.DEVICE_ANDROID ? '5%' : '10%',\n    backgroundColor: 'white'\n  },\n  button: {\n    backgroundColor: _colors.ORANGE,\n    height: 50,\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50\n  },\n  buttonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: _fonts.fontSize[15],\n    color: _colors.WHITE\n  },\n  recoveryMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[15],\n    marginTop: '5%',\n    textAlign: 'center'\n  },\n  emptyMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: _fonts.fontSize[16],\n    textAlign: 'center'\n  }\n});\n\nvar _default = NewRecoveryConnectionList;\nexports.default = _default;","map":{"version":3,"names":["searchParamSelector","state","connections","searchParam","newRecoveryConnectionSelector","createSelector","selectAllConnections","search","searchString","toSearchString","includeRecovery","Array","connection_levels","ALREADY_KNOWN","RECOVERY","filter","conn","includes","incomingLevel","level","REPORTED","name","EmptyList","useTranslation","t","flex","width","height","justifyContent","alignItems","paddingTop","styles","emptyMessage","NewRecoveryConnectionList","props","navigation","api","useContext","NodeApiContext","dispatch","useDispatch","useSelector","user","myId","id","firstRecoveryTime","firstRecoveryTimeSelector","recoveryConnections","recoveryConnectionsSelector","useState","selectedAccounts","setSelectedAccounts","updateInProgress","setUpdateInProgress","useCallback","value","confirm","console","log","length","totalRecoveryAccount","Alert","alert","amount","promises","push","addConnection","Date","now","setConnectionLevel","setFirstRecoveryTime","Promise","all","ops","op","addOperation","RECOVERY_COOLDOWN_EXEMPTION","navigate","successCallback","warn","message","ConnectionsList","useMemo","paddingBottom","item","index","ORANGE","orangeTop","container","recoveryMessage","setConnectionsSearch","setConnectionsSearchOpen","searchOpen","buttonContainer","button","backgroundColor","GREY","WHITE","buttonLabel","StyleSheet","create","borderTopLeftRadius","marginTop","overflow","zIndex","mainContainer","flexDirection","DEVICE_LARGE","position","bottom","left","right","DEVICE_ANDROID","borderRadius","fontFamily","fontSize","color","paddingHorizontal","textAlign"],"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/components/RecoveryConnections/NewRecoveryConnectionScreen.tsx"],"sourcesContent":["import React, { useMemo, useCallback, useState, useContext } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  StatusBar,\n  TouchableOpacity,\n  FlatList,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\n\n// Redux\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from '@/store';\nimport {\n  selectAllConnections,\n  recoveryConnectionsSelector,\n  firstRecoveryTimeSelector,\n} from '@/reducer/connectionsSlice';\nimport {\n  addOperation,\n  setConnectionLevel,\n  setConnectionsSearch,\n  setConnectionsSearchOpen,\n  setFirstRecoveryTime,\n} from '@/actions';\n\nimport { toSearchString } from '@/utils/strings';\nimport { ORANGE, WHITE, GREY } from '@/theme/colors';\nimport { fontSize } from '@/theme/fonts';\nimport {\n  connection_levels,\n  RECOVERY_COOLDOWN_EXEMPTION,\n} from '@/utils/constants';\nimport { DEVICE_LARGE, DEVICE_ANDROID } from '@/utils/deviceConstants';\nimport { NodeApiContext } from '../NodeApiGate';\n// Import Components Local\nimport RecoveryConnectionCard from './RecoverConnectionsCard';\nimport AnimatedTopSearchBar from './TopSearchBar';\n\nconst searchParamSelector = (state: State) => state.connections.searchParam;\n\nconst newRecoveryConnectionSelector = createSelector(\n  [selectAllConnections, searchParamSelector],\n  (connections, search) => {\n    const searchString = toSearchString(search);\n    const includeRecovery = Array<ConnectionLevel>(\n      connection_levels.ALREADY_KNOWN,\n      connection_levels.RECOVERY,\n    );\n    return connections.filter(\n      (conn) =>\n        includeRecovery.includes(conn.incomingLevel) &&\n        conn.level !== connection_levels.RECOVERY &&\n        conn.level !== connection_levels.REPORTED &&\n        toSearchString(`${conn?.name}`).includes(searchString),\n    );\n  },\n);\n\n// Create Custom Local Components\nconst EmptyList = () => {\n  const { t } = useTranslation();\n  return (\n    <View\n      style={{\n        flex: 1,\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '50%',\n      }}\n    >\n      <Text style={styles.emptyMessage}>\n        {t('recoveryConnections.text.pleaseMakeSomeConnections')}\n      </Text>\n    </View>\n  );\n};\n\nexport const NewRecoveryConnectionList = (props) => {\n  const { navigation } = props;\n\n  const { t } = useTranslation();\n  const api = useContext(NodeApiContext);\n  const dispatch = useDispatch();\n  const { id: myId } = useSelector((state) => state.user);\n  const firstRecoveryTime = useSelector(firstRecoveryTimeSelector);\n  const connections = useSelector(newRecoveryConnectionSelector);\n  const recoveryConnections = useSelector(recoveryConnectionsSelector);\n\n  const [selectedAccounts, setSelectedAccounts] = useState<string[]>([]);\n  const [updateInProgress, setUpdateInProgress] = useState<boolean>(false);\n\n  // toggle for select and deselect recovery account\n  const filter = useCallback(\n    (id: string) => {\n      if (selectedAccounts.includes(id)) {\n        setSelectedAccounts(selectedAccounts.filter((value) => value !== id));\n      } else {\n        setSelectedAccounts([...selectedAccounts, id]);\n      }\n    },\n    [selectedAccounts],\n  );\n\n  // submit new recovery account\n  const confirm = async () => {\n    if (updateInProgress) return;\n\n    try {\n      setUpdateInProgress(true);\n      console.log(recoveryConnections.length);\n      console.log(selectedAccounts.length);\n\n      const totalRecoveryAccount =\n        recoveryConnections.length + selectedAccounts.length;\n\n      if (totalRecoveryAccount < 3) {\n        Alert.alert(\n          t('common.alert.error'),\n          t('recoveryConnections.text.threeMore', {\n            amount: 3 - totalRecoveryAccount,\n          }),\n        );\n      } else {\n        // apply\n        const promises = [];\n        for (const id of selectedAccounts) {\n          promises.push(\n            api.addConnection(myId, id, connection_levels.RECOVERY, Date.now()),\n          );\n          dispatch(\n            setConnectionLevel({ id, level: connection_levels.RECOVERY }),\n          );\n        }\n        if (selectedAccounts.length > 0 && !firstRecoveryTime) {\n          dispatch(setFirstRecoveryTime(Date.now()));\n        }\n\n        const ops = await Promise.all(promises);\n        for (const op of ops) {\n          dispatch(addOperation(op));\n        }\n\n        // show info about cooldown period\n        if (\n          firstRecoveryTime &&\n          Date.now() - firstRecoveryTime > RECOVERY_COOLDOWN_EXEMPTION\n        ) {\n          navigation.navigate('RecoveryCooldownInfo', {\n            successCallback: () => {\n              navigation.navigate('Home');\n            },\n          });\n        } else {\n          Alert.alert(\n            t('common.alert.success'),\n            t(\n              'recoveryConnections.text.completed',\n              'Recovery connections have been successfully added',\n            ),\n          );\n          navigation.navigate('Home');\n        }\n      }\n    } catch (error) {\n      console.warn(error.message);\n    } finally {\n      setUpdateInProgress(false);\n    }\n  };\n\n  const ConnectionsList = useMemo(() => {\n    return (\n      <FlatList\n        data={connections}\n        contentContainerStyle={{\n          paddingTop: '5%',\n          paddingBottom: '33%',\n        }}\n        renderItem={({ item, index }) => (\n          <RecoveryConnectionCard\n            activeBefore={0}\n            activeAfter={0}\n            {...item}\n            index={index}\n            isSelectionActive={true}\n            onSelect={filter}\n            isSelected={selectedAccounts.includes(item.id)}\n          />\n        )}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={<EmptyList />}\n      />\n    );\n  }, [connections, selectedAccounts, filter]);\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"light-content\"\n        backgroundColor={ORANGE}\n        animated={true}\n      />\n      <View style={styles.orangeTop} />\n\n      <View style={styles.container}>\n        {recoveryConnections.length === 0 ? (\n          <Text style={styles.recoveryMessage}>\n            {t('recoveryConnections.text.chooseThreeConnections')}\n          </Text>\n        ) : (\n          <Text style={styles.recoveryMessage}>\n            {t('recoveryConnections.text.connectionsAlreadyKnown')}\n          </Text>\n        )}\n        <AnimatedTopSearchBar\n          sortable={false}\n          setSearchValue={setConnectionsSearch}\n          setSearchOpen={setConnectionsSearchOpen}\n          searchOpenSelector={(state: State) => state.connections.searchOpen}\n        />\n        {ConnectionsList}\n        <View\n          style={styles.buttonContainer}\n          // blurType=\"light\"\n          // blurAmount={5}\n          // reducedTransparencyFallbackColor={WHITE}\n        >\n          <TouchableOpacity\n            disabled={updateInProgress || selectedAccounts.length === 0}\n            style={[\n              styles.button,\n              {\n                backgroundColor:\n                  updateInProgress || selectedAccounts.length === 0\n                    ? GREY\n                    : ORANGE,\n              },\n            ]}\n            onPress={confirm}\n          >\n            {updateInProgress ? (\n              <ActivityIndicator size=\"small\" color={WHITE} />\n            ) : (\n              <Text style={styles.buttonLabel}>\n                {t('recoveryConnections.text.add')}\n              </Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: WHITE,\n    borderTopLeftRadius: 58,\n    marginTop: -58,\n    overflow: 'hidden',\n    zIndex: 10,\n  },\n  mainContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    alignItems: 'center',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  orangeTop: {\n    backgroundColor: ORANGE,\n    height: DEVICE_LARGE ? 70 : 65,\n    width: '100%',\n    zIndex: 1,\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 10,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: '3%',\n    paddingBottom: DEVICE_ANDROID ? '5%' : '10%',\n    backgroundColor: 'white',\n  },\n  button: {\n    backgroundColor: ORANGE,\n    height: 50,\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 50,\n  },\n  buttonLabel: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: fontSize[15],\n    color: WHITE,\n  },\n  recoveryMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[15],\n    marginTop: '5%',\n    textAlign: 'center',\n  },\n  emptyMessage: {\n    paddingHorizontal: '10%',\n    fontFamily: 'Poppins-Medium',\n    fontSize: fontSize[16],\n    textAlign: 'center',\n  },\n});\n\nexport default NewRecoveryConnectionList;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}