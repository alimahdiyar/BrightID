{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerView;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _GestureHandler = require(\"./GestureHandler\");\n\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"./SafeAreaProviderCompat\"));\n\nvar _ResourceSavingScene = _interopRequireDefault(require(\"./ResourceSavingScene\"));\n\nvar _Header = _interopRequireDefault(require(\"./Header\"));\n\nvar _DrawerContent = _interopRequireDefault(require(\"./DrawerContent\"));\n\nvar _Drawer = _interopRequireDefault(require(\"./Drawer\"));\n\nvar _DrawerOpenContext = _interopRequireDefault(require(\"../utils/DrawerOpenContext\"));\n\nvar _DrawerPositionContext = _interopRequireDefault(require(\"../utils/DrawerPositionContext\"));\n\nvar _useWindowDimensions = _interopRequireDefault(require(\"../utils/useWindowDimensions\"));\n\nvar _getIsDrawerOpenFromState = _interopRequireDefault(require(\"../utils/getIsDrawerOpenFromState\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\nfunction DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(_DrawerContent.default, props);\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? _reactNative.I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n\n  var _React$useState = React.useState([state.routes[state.index].key]),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var dimensions = (0, _useWindowDimensions.default)();\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = (0, _getIsDrawerOpenFromState.default)(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch((0, _extends2.default)({}, _native.DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch((0, _extends2.default)({}, _native.DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n\n    if (isDrawerOpen) {\n      subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return function () {\n      var _subscription;\n\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  var focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(_DrawerPositionContext.default.Provider, {\n      value: drawerPosition\n    }, drawerContent((0, _extends2.default)({}, drawerContentOptions, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(_reactNativeScreens.ScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$h = _descriptor$options.header,\n          header = _descriptor$options$h === void 0 ? function (props) {\n        return React.createElement(_Header.default, props);\n      } : _descriptor$options$h,\n          _descriptor$options$h2 = _descriptor$options.headerShown,\n          headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(_ResourceSavingScene.default, {\n        key: route.key,\n        style: [_reactNative.StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: detachInactiveScreens\n      }, headerShown ? React.createElement(_native.NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(_native.NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n      gestureEnabled = _descriptors$activeKe.gestureEnabled,\n      swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(_native.NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_DrawerOpenContext.default.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(_Drawer.default, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","lazy","drawerContent","props","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","detachInactiveScreens","React","state","dimensions","colors","isDrawerOpen","getIsDrawerOpenFromState","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","type","subscription","focusedRouteKey","loaded","setLoaded","renderNavigationView","progress","descriptors","renderContent","styles","content","descriptor","route","unmountOnBlur","isFocused","header","headerShown","StyleSheet","opacity","layout","scene","activeKey","swipeEnabled","backgroundColor","background","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}