{"ast":null,"code":"import modPow from 'react-native-modpow';\nimport CryptoJS from 'crypto-js';\nimport { BigInteger } from 'jsbn';\n\nif (!__DEV__) {\n  console.log(\"Monkey-patching BigNumber.modPow to use react-native-modpow\");\n\n  BigInteger.prototype.modPow = function nativeModPow(e, m) {\n    var result = modPow({\n      target: this.toString(16),\n      value: e.toString(16),\n      modifier: m.toString(16)\n    });\n    return new BigInteger(result, 16);\n  };\n} else {\n  console.log(\"Using js implementation of BigNumber.modPow\");\n}\n\nfunction sha256(s) {\n  return new BigInteger(CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex), 16);\n}\n\nfunction WISchnorrClient(publicKey) {\n  this.p = new BigInteger(publicKey.p);\n  this.q = new BigInteger(publicKey.q);\n  this.g = new BigInteger(publicKey.g);\n  this.y = new BigInteger(publicKey.y);\n}\n\nWISchnorrClient.prototype.GenerateRandomNumber = function () {\n  var bytes = Math.floor(Math.random() * (this.q.bitLength() / 8 - 1 + 1)) + 1;\n  var r = CryptoJS.lib.WordArray.random(bytes);\n  var rhex = CryptoJS.enc.Hex.stringify(r);\n  return new BigInteger(rhex, 16).mod(this.q);\n};\n\nWISchnorrClient.prototype.GenerateWISchnorrClientChallenge = function (params, info, msg) {\n  var t1 = this.GenerateRandomNumber();\n  var t2 = this.GenerateRandomNumber();\n  var t3 = this.GenerateRandomNumber();\n  var t4 = this.GenerateRandomNumber();\n  var F = sha256(info);\n  var z = F.modPow(this.p.subtract(new BigInteger('1')).divide(this.q), this.p);\n  var a = new BigInteger(params.a);\n  var alpha = a.multiply(this.g.modPow(t1, this.p)).multiply(this.y.modPow(t2, this.p)).mod(this.p);\n  var b = new BigInteger(params.b);\n  var beta = b.multiply(this.g.modPow(t3, this.p)).multiply(z.modPow(t4, this.p)).mod(this.p);\n  var H = sha256(alpha.toString() + beta.toString() + z.toString() + msg);\n  var epsilon = H.mod(this.q);\n  var e = epsilon.subtract(t2).subtract(t4).mod(this.q);\n  return {\n    e: e.toString(),\n    t: {\n      t1: t1,\n      t2: t2,\n      t3: t3,\n      t4: t4\n    }\n  };\n};\n\nWISchnorrClient.prototype.GenerateWISchnorrBlindSignature = function (challenge, response) {\n  var r = new BigInteger(response.r);\n  var rho = r.add(challenge.t1).mod(this.q);\n  var c = new BigInteger(response.c);\n  var omega = c.add(challenge.t2).mod(this.q);\n  var s = new BigInteger(response.s);\n  var sigma = s.add(challenge.t3).mod(this.q);\n  var d = new BigInteger(response.d);\n  var delta = d.add(challenge.t4).mod(this.q);\n  return {\n    rho: rho.toString(),\n    omega: omega.toString(),\n    sigma: sigma.toString(),\n    delta: delta.toString()\n  };\n};\n\nWISchnorrClient.prototype.VerifyWISchnorrBlindSignature = function (signature, info, msg) {\n  var F = sha256(info);\n  var z = F.modPow(this.p.subtract(new BigInteger('1')).divide(this.q), this.p);\n  var gp = this.g.modPow(new BigInteger(signature.rho), this.p);\n  var yw = this.y.modPow(new BigInteger(signature.omega), this.p);\n  var gpyw = gp.multiply(yw).mod(this.p);\n  var gs = this.g.modPow(new BigInteger(signature.sigma), this.p);\n  var zd = z.modPow(new BigInteger(signature.delta), this.p);\n  var gszd = gs.multiply(zd).mod(this.p);\n  var H = sha256(gpyw.toString() + gszd.toString() + z.toString() + msg);\n  var hsig = H.mod(this.q);\n  var vsig = new BigInteger(signature.omega).add(new BigInteger(signature.delta)).mod(this.q);\n  return vsig.compareTo(hsig) === 0;\n};\n\nmodule.exports = WISchnorrClient;","map":{"version":3,"sources":["/home/ali/Desktop/brightid/BrightID/BrightID/src/utils/WISchnorrClient.ts"],"names":["console","BigInteger","result","modPow","target","value","e","modifier","m","CryptoJS","publicKey","WISchnorrClient","bytes","Math","r","rhex","t1","t2","t3","t4","F","sha256","z","a","params","alpha","b","beta","H","epsilon","t","response","rho","challenge","c","omega","s","sigma","d","delta","gp","signature","yw","gpyw","gs","zd","gszd","hsig","vsig","module"],"mappings":"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","sourcesContent":["/**\n\t-- WISchnorrClient.js --\n\tAuthor : Christof Torres <christof.ferreira.001@student.uni.lu>\n\tDate   : September 2016\n* */\nimport modPow from 'react-native-modpow';\nimport CryptoJS from 'crypto-js';\nimport { BigInteger } from 'jsbn';\n\nif (!__DEV__) {\n  console.log(`Monkey-patching BigNumber.modPow to use react-native-modpow`);\n  BigInteger.prototype.modPow = function nativeModPow(e, m) {\n    const result = modPow({\n      target: this.toString(16),\n      value: e.toString(16),\n      modifier: m.toString(16),\n    });\n    return new BigInteger(result, 16);\n  };\n} else {\n  console.log(`Using js implementation of BigNumber.modPow`);\n}\n\nfunction sha256(s) {\n  return new BigInteger(CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex), 16);\n}\n\n/* Initializes the WISchnorClient based on a given public key */\nfunction WISchnorrClient(\n  this: { p: BigInteger; q: BigInteger; g: BigInteger; y: BigInteger },\n  publicKey,\n) {\n  // Discrete logarithm parameters\n  this.p = new BigInteger(publicKey.p);\n  this.q = new BigInteger(publicKey.q);\n  this.g = new BigInteger(publicKey.g);\n  // Public key\n  this.y = new BigInteger(publicKey.y);\n}\n\n/* Generates a cryptographically secure random number modulo q */\nWISchnorrClient.prototype.GenerateRandomNumber = function () {\n  const bytes =\n    Math.floor(Math.random() * (this.q.bitLength() / 8 - 1 + 1)) + 1;\n  const r = CryptoJS.lib.WordArray.random(bytes);\n  const rhex = CryptoJS.enc.Hex.stringify(r);\n  return new BigInteger(rhex, 16).mod(this.q);\n};\n\n/* Generates a challenge 'e' for the server */\nWISchnorrClient.prototype.GenerateWISchnorrClientChallenge = function (\n  params,\n  info,\n  msg,\n): WISchnorrChallenge {\n  const t1: BigInteger = this.GenerateRandomNumber();\n  const t2: BigInteger = this.GenerateRandomNumber();\n  const t3: BigInteger = this.GenerateRandomNumber();\n  const t4: BigInteger = this.GenerateRandomNumber();\n\n  const F = sha256(info);\n  // z = F^((p-1)/q) mod p\n  const z = F.modPow(\n    this.p.subtract(new BigInteger('1')).divide(this.q),\n    this.p,\n  );\n  // alpha = a * g^t1 * y^t2\n  const a = new BigInteger(params.a);\n  const alpha = a\n    .multiply(this.g.modPow(t1, this.p))\n    .multiply(this.y.modPow(t2, this.p))\n    .mod(this.p);\n\n  // beta = b * g^t3 * z^t4\n  const b = new BigInteger(params.b);\n  const beta = b\n    .multiply(this.g.modPow(t3, this.p))\n    .multiply(z.modPow(t4, this.p))\n    .mod(this.p);\n\n  const H = sha256(alpha.toString() + beta.toString() + z.toString() + msg);\n  // epsilon = H mod q\n  const epsilon = H.mod(this.q);\n\n  // e = eplison - t2 - t4 mod q\n  const e = epsilon.subtract(t2).subtract(t4).mod(this.q);\n\n  return { e: e.toString(), t: { t1, t2, t3, t4 } };\n};\n\n/* Generates a WISchnorr partially blind signature based on the response from the server */\nWISchnorrClient.prototype.GenerateWISchnorrBlindSignature = function (\n  challenge,\n  response,\n): WISchnorrBlindSignature {\n  // rho = r + t1 mod q\n  const r = new BigInteger(response.r);\n  const rho = r.add(challenge.t1).mod(this.q);\n\n  // omega = c + t2 mod q\n  const c = new BigInteger(response.c);\n  const omega = c.add(challenge.t2).mod(this.q);\n\n  // sigma = s + t3 mod q\n  const s = new BigInteger(response.s);\n  const sigma = s.add(challenge.t3).mod(this.q);\n\n  // delta = d + t4 mod q\n  const d = new BigInteger(response.d);\n  const delta = d.add(challenge.t4).mod(this.q);\n\n  return {\n    rho: rho.toString(),\n    omega: omega.toString(),\n    sigma: sigma.toString(),\n    delta: delta.toString(),\n  };\n};\n\n/* Verifies a WISchnorr partially blind signature */\nWISchnorrClient.prototype.VerifyWISchnorrBlindSignature = function (\n  signature,\n  info,\n  msg,\n) {\n  const F = sha256(info);\n  // z = F^((p-1)/q) mod p\n  const z = F.modPow(\n    this.p.subtract(new BigInteger('1')).divide(this.q),\n    this.p,\n  );\n\n  // g^rho mod p\n  const gp = this.g.modPow(new BigInteger(signature.rho), this.p);\n  // y^omega mod p\n  const yw = this.y.modPow(new BigInteger(signature.omega), this.p);\n  // g^rho * y^omega mod p\n  const gpyw = gp.multiply(yw).mod(this.p);\n\n  // g^sigma mod p\n  const gs = this.g.modPow(new BigInteger(signature.sigma), this.p);\n  // z^delta mod p\n  const zd = z.modPow(new BigInteger(signature.delta), this.p);\n  // g^sigma * z^delta mod p\n  const gszd = gs.multiply(zd).mod(this.p);\n\n  const H = sha256(gpyw.toString() + gszd.toString() + z.toString() + msg);\n  // hsig = H mod q\n  const hsig = H.mod(this.q);\n\n  // vsig = omega + delta mod q\n  const vsig = new BigInteger(signature.omega)\n    .add(new BigInteger(signature.delta))\n    .mod(this.q);\n\n  return vsig.compareTo(hsig) === 0;\n};\n\nmodule.exports = WISchnorrClient;\n"]},"metadata":{},"sourceType":"module"}