{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"emit\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n      getState = _ref.getState,\n      navigation = _ref.navigation,\n      _setOptions = _ref.setOptions,\n      router = _ref.router,\n      emitter = _ref.emitter;\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n          rest = _objectWithoutProperties(navigation, _excluded);\n\n      var dispatch = function dispatch(action) {\n        var payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? _objectSpread({\n          source: route.key\n        }, payload) : payload);\n      };\n\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          return dispatch(actions[name].apply(actions, arguments));\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: dispatch,\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["state","getState","navigation","setOptions","router","emitter","cache","React","current","actions","previous","route","acc","emit","rest","dispatch","payload","action","source","helpers","Object","options","o","isFocused"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}